
Keypad_with_7Segment_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000746c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080075f4  080075f4  000175f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800761c  0800761c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800761c  0800761c  0001761c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007624  08007624  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007624  08007624  00017624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007628  08007628  00017628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800762c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000007c0  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000850  20000850  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001498f  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003681  00000000  00000000  00034a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe0  00000000  00000000  000380d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e70  00000000  00000000  000390b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002344f  00000000  00000000  00039f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000160c9  00000000  00000000  0005d36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9fd4  00000000  00000000  00073438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013d40c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000432c  00000000  00000000  0013d45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080075dc 	.word	0x080075dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080075dc 	.word	0x080075dc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <check_keys>:

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char check_keys (void) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
	char keypad[4][3] = {
 80004d2:	4a40      	ldr	r2, [pc, #256]	; (80005d4 <check_keys+0x108>)
 80004d4:	463b      	mov	r3, r7
 80004d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80004d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			{'4','5','6'},
			{'7','8','9'},
			{'*','0','#'}
	};

	for(int i = 0; i < 3; i++) {
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	e070      	b.n	80005c4 <check_keys+0xf8>
		switch(i) {
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	2b02      	cmp	r3, #2
 80004e6:	d029      	beq.n	800053c <check_keys+0x70>
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	2b02      	cmp	r3, #2
 80004ec:	dc36      	bgt.n	800055c <check_keys+0x90>
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d003      	beq.n	80004fc <check_keys+0x30>
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d010      	beq.n	800051c <check_keys+0x50>
 80004fa:	e02f      	b.n	800055c <check_keys+0x90>
		case 0:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2110      	movs	r1, #16
 8000500:	4835      	ldr	r0, [pc, #212]	; (80005d8 <check_keys+0x10c>)
 8000502:	f001 fbf9 	bl	8001cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2120      	movs	r1, #32
 800050a:	4833      	ldr	r0, [pc, #204]	; (80005d8 <check_keys+0x10c>)
 800050c:	f001 fbf4 	bl	8001cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	2140      	movs	r1, #64	; 0x40
 8000514:	4830      	ldr	r0, [pc, #192]	; (80005d8 <check_keys+0x10c>)
 8000516:	f001 fbef 	bl	8001cf8 <HAL_GPIO_WritePin>
			break;
 800051a:	e01f      	b.n	800055c <check_keys+0x90>

		case 1:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2110      	movs	r1, #16
 8000520:	482d      	ldr	r0, [pc, #180]	; (80005d8 <check_keys+0x10c>)
 8000522:	f001 fbe9 	bl	8001cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2120      	movs	r1, #32
 800052a:	482b      	ldr	r0, [pc, #172]	; (80005d8 <check_keys+0x10c>)
 800052c:	f001 fbe4 	bl	8001cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2140      	movs	r1, #64	; 0x40
 8000534:	4828      	ldr	r0, [pc, #160]	; (80005d8 <check_keys+0x10c>)
 8000536:	f001 fbdf 	bl	8001cf8 <HAL_GPIO_WritePin>
			break;
 800053a:	e00f      	b.n	800055c <check_keys+0x90>

		case 2:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2110      	movs	r1, #16
 8000540:	4825      	ldr	r0, [pc, #148]	; (80005d8 <check_keys+0x10c>)
 8000542:	f001 fbd9 	bl	8001cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	2120      	movs	r1, #32
 800054a:	4823      	ldr	r0, [pc, #140]	; (80005d8 <check_keys+0x10c>)
 800054c:	f001 fbd4 	bl	8001cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2140      	movs	r1, #64	; 0x40
 8000554:	4820      	ldr	r0, [pc, #128]	; (80005d8 <check_keys+0x10c>)
 8000556:	f001 fbcf 	bl	8001cf8 <HAL_GPIO_WritePin>
			break;
 800055a:	bf00      	nop
		}

		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0) == GPIO_PIN_RESET)
 800055c:	2101      	movs	r1, #1
 800055e:	481f      	ldr	r0, [pc, #124]	; (80005dc <check_keys+0x110>)
 8000560:	f001 fbb2 	bl	8001cc8 <HAL_GPIO_ReadPin>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d104      	bne.n	8000574 <check_keys+0xa8>
			return keypad[0][i];
 800056a:	463a      	mov	r2, r7
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4413      	add	r3, r2
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	e02b      	b.n	80005cc <check_keys+0x100>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1) == GPIO_PIN_RESET)
 8000574:	2102      	movs	r1, #2
 8000576:	4819      	ldr	r0, [pc, #100]	; (80005dc <check_keys+0x110>)
 8000578:	f001 fba6 	bl	8001cc8 <HAL_GPIO_ReadPin>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d104      	bne.n	800058c <check_keys+0xc0>
			return keypad[1][i];
 8000582:	1cfa      	adds	r2, r7, #3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4413      	add	r3, r2
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	e01f      	b.n	80005cc <check_keys+0x100>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == GPIO_PIN_RESET)
 800058c:	2104      	movs	r1, #4
 800058e:	4813      	ldr	r0, [pc, #76]	; (80005dc <check_keys+0x110>)
 8000590:	f001 fb9a 	bl	8001cc8 <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d104      	bne.n	80005a4 <check_keys+0xd8>
			return keypad[2][i];
 800059a:	1dba      	adds	r2, r7, #6
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4413      	add	r3, r2
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	e013      	b.n	80005cc <check_keys+0x100>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_RESET)
 80005a4:	2108      	movs	r1, #8
 80005a6:	480d      	ldr	r0, [pc, #52]	; (80005dc <check_keys+0x110>)
 80005a8:	f001 fb8e 	bl	8001cc8 <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d105      	bne.n	80005be <check_keys+0xf2>
			return keypad[3][i];
 80005b2:	f107 0209 	add.w	r2, r7, #9
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	4413      	add	r3, r2
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	e006      	b.n	80005cc <check_keys+0x100>
	for(int i = 0; i < 3; i++) {
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	dd8b      	ble.n	80004e2 <check_keys+0x16>
	}

	return 0;
 80005ca:	2300      	movs	r3, #0


	}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	080075f4 	.word	0x080075f4
 80005d8:	40021000 	.word	0x40021000
 80005dc:	40020c00 	.word	0x40020c00

080005e0 <main>:

	  int main(void)
	  {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
		  HAL_Init();
 80005e6:	f001 f82b 	bl	8001640 <HAL_Init>
		  /* USER CODE BEGIN Init */

		  /* USER CODE END Init */

		  /* Configure the system clock */
		  SystemClock_Config();
 80005ea:	f000 fbf5 	bl	8000dd8 <SystemClock_Config>
		  /* USER CODE BEGIN SysInit */

		  /* USER CODE END SysInit */

		  /* Initialize all configured peripherals */
		  MX_GPIO_Init();
 80005ee:	f000 fccf 	bl	8000f90 <MX_GPIO_Init>
		  MX_I2C1_Init();
 80005f2:	f000 fc5b 	bl	8000eac <MX_I2C1_Init>
		  MX_I2S3_Init();
 80005f6:	f000 fc87 	bl	8000f08 <MX_I2S3_Init>
		  MX_USB_HOST_Init();
 80005fa:	f006 fbff 	bl	8006dfc <MX_USB_HOST_Init>
		  MX_RNG_Init();
 80005fe:	f000 fcb3 	bl	8000f68 <MX_RNG_Init>
	    /* USER CODE BEGIN 2 */

	    /* USER CODE END 2 */

		  char pad_active = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	71fb      	strb	r3, [r7, #7]




	  	  // START OF TASK 1 AND 2 -----------------------------------------------------------------------------
	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	48b2      	ldr	r0, [pc, #712]	; (80008d4 <main+0x2f4>)
 800060c:	f001 fb74 	bl	8001cf8 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000616:	48af      	ldr	r0, [pc, #700]	; (80008d4 <main+0x2f4>)
 8000618:	f001 fb6e 	bl	8001cf8 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000622:	48ac      	ldr	r0, [pc, #688]	; (80008d4 <main+0x2f4>)
 8000624:	f001 fb68 	bl	8001cf8 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800062e:	48a9      	ldr	r0, [pc, #676]	; (80008d4 <main+0x2f4>)
 8000630:	f001 fb62 	bl	8001cf8 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800063a:	48a6      	ldr	r0, [pc, #664]	; (80008d4 <main+0x2f4>)
 800063c:	f001 fb5c 	bl	8001cf8 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000646:	48a3      	ldr	r0, [pc, #652]	; (80008d4 <main+0x2f4>)
 8000648:	f001 fb56 	bl	8001cf8 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000652:	48a0      	ldr	r0, [pc, #640]	; (80008d4 <main+0x2f4>)
 8000654:	f001 fb50 	bl	8001cf8 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065e:	489d      	ldr	r0, [pc, #628]	; (80008d4 <main+0x2f4>)
 8000660:	f001 fb4a 	bl	8001cf8 <HAL_GPIO_WritePin>


	  	  pad_active = check_keys();
 8000664:	f7ff ff32 	bl	80004cc <check_keys>
 8000668:	4603      	mov	r3, r0
 800066a:	71fb      	strb	r3, [r7, #7]

	  	  if(pad_active != 0) {
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0c9      	beq.n	8000606 <main+0x26>

	  		  if(pad_active == '1') {
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b31      	cmp	r3, #49	; 0x31
 8000676:	d143      	bne.n	8000700 <main+0x120>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2180      	movs	r1, #128	; 0x80
 800067c:	4895      	ldr	r0, [pc, #596]	; (80008d4 <main+0x2f4>)
 800067e:	f001 fb3b 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000688:	4892      	ldr	r0, [pc, #584]	; (80008d4 <main+0x2f4>)
 800068a:	f001 fb35 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000694:	488f      	ldr	r0, [pc, #572]	; (80008d4 <main+0x2f4>)
 8000696:	f001 fb2f 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a0:	488c      	ldr	r0, [pc, #560]	; (80008d4 <main+0x2f4>)
 80006a2:	f001 fb29 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ac:	4889      	ldr	r0, [pc, #548]	; (80008d4 <main+0x2f4>)
 80006ae:	f001 fb23 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b8:	4886      	ldr	r0, [pc, #536]	; (80008d4 <main+0x2f4>)
 80006ba:	f001 fb1d 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c4:	4883      	ldr	r0, [pc, #524]	; (80008d4 <main+0x2f4>)
 80006c6:	f001 fb17 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d0:	4880      	ldr	r0, [pc, #512]	; (80008d4 <main+0x2f4>)
 80006d2:	f001 fb11 	bl	8001cf8 <HAL_GPIO_WritePin>

	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006dc:	487e      	ldr	r0, [pc, #504]	; (80008d8 <main+0x2f8>)
 80006de:	f001 fb0b 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 80006e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e6:	f001 f81d 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f0:	4879      	ldr	r0, [pc, #484]	; (80008d8 <main+0x2f8>)
 80006f2:	f001 fb01 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 80006f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006fa:	f001 f813 	bl	8001724 <HAL_Delay>
 80006fe:	e782      	b.n	8000606 <main+0x26>
	  		  }
	  		  else if(pad_active == '2') {
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	2b32      	cmp	r3, #50	; 0x32
 8000704:	d143      	bne.n	800078e <main+0x1ae>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2180      	movs	r1, #128	; 0x80
 800070a:	4872      	ldr	r0, [pc, #456]	; (80008d4 <main+0x2f4>)
 800070c:	f001 faf4 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000716:	486f      	ldr	r0, [pc, #444]	; (80008d4 <main+0x2f4>)
 8000718:	f001 faee 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000722:	486c      	ldr	r0, [pc, #432]	; (80008d4 <main+0x2f4>)
 8000724:	f001 fae8 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800072e:	4869      	ldr	r0, [pc, #420]	; (80008d4 <main+0x2f4>)
 8000730:	f001 fae2 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800073a:	4866      	ldr	r0, [pc, #408]	; (80008d4 <main+0x2f4>)
 800073c:	f001 fadc 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000746:	4863      	ldr	r0, [pc, #396]	; (80008d4 <main+0x2f4>)
 8000748:	f001 fad6 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000752:	4860      	ldr	r0, [pc, #384]	; (80008d4 <main+0x2f4>)
 8000754:	f001 fad0 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800075e:	485d      	ldr	r0, [pc, #372]	; (80008d4 <main+0x2f4>)
 8000760:	f001 faca 	bl	8001cf8 <HAL_GPIO_WritePin>

	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076a:	485b      	ldr	r0, [pc, #364]	; (80008d8 <main+0x2f8>)
 800076c:	f001 fac4 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000770:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000774:	f000 ffd6 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800077e:	4856      	ldr	r0, [pc, #344]	; (80008d8 <main+0x2f8>)
 8000780:	f001 faba 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000784:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000788:	f000 ffcc 	bl	8001724 <HAL_Delay>
 800078c:	e73b      	b.n	8000606 <main+0x26>
	  		  }
	  		  else if(pad_active == '3'){
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b33      	cmp	r3, #51	; 0x33
 8000792:	d143      	bne.n	800081c <main+0x23c>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2180      	movs	r1, #128	; 0x80
 8000798:	484e      	ldr	r0, [pc, #312]	; (80008d4 <main+0x2f4>)
 800079a:	f001 faad 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a4:	484b      	ldr	r0, [pc, #300]	; (80008d4 <main+0x2f4>)
 80007a6:	f001 faa7 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b0:	4848      	ldr	r0, [pc, #288]	; (80008d4 <main+0x2f4>)
 80007b2:	f001 faa1 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007bc:	4845      	ldr	r0, [pc, #276]	; (80008d4 <main+0x2f4>)
 80007be:	f001 fa9b 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007c8:	4842      	ldr	r0, [pc, #264]	; (80008d4 <main+0x2f4>)
 80007ca:	f001 fa95 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d4:	483f      	ldr	r0, [pc, #252]	; (80008d4 <main+0x2f4>)
 80007d6:	f001 fa8f 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e0:	483c      	ldr	r0, [pc, #240]	; (80008d4 <main+0x2f4>)
 80007e2:	f001 fa89 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ec:	4839      	ldr	r0, [pc, #228]	; (80008d4 <main+0x2f4>)
 80007ee:	f001 fa83 	bl	8001cf8 <HAL_GPIO_WritePin>

	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f8:	4837      	ldr	r0, [pc, #220]	; (80008d8 <main+0x2f8>)
 80007fa:	f001 fa7d 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 80007fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000802:	f000 ff8f 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800080c:	4832      	ldr	r0, [pc, #200]	; (80008d8 <main+0x2f8>)
 800080e:	f001 fa73 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000812:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000816:	f000 ff85 	bl	8001724 <HAL_Delay>
 800081a:	e6f4      	b.n	8000606 <main+0x26>
	  		  }
	  		  else if(pad_active == '4'){
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2b34      	cmp	r3, #52	; 0x34
 8000820:	d15c      	bne.n	80008dc <main+0x2fc>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8000822:	2201      	movs	r2, #1
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	482b      	ldr	r0, [pc, #172]	; (80008d4 <main+0x2f4>)
 8000828:	f001 fa66 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000832:	4828      	ldr	r0, [pc, #160]	; (80008d4 <main+0x2f4>)
 8000834:	f001 fa60 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083e:	4825      	ldr	r0, [pc, #148]	; (80008d4 <main+0x2f4>)
 8000840:	f001 fa5a 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800084a:	4822      	ldr	r0, [pc, #136]	; (80008d4 <main+0x2f4>)
 800084c:	f001 fa54 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000856:	481f      	ldr	r0, [pc, #124]	; (80008d4 <main+0x2f4>)
 8000858:	f001 fa4e 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000862:	481c      	ldr	r0, [pc, #112]	; (80008d4 <main+0x2f4>)
 8000864:	f001 fa48 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800086e:	4819      	ldr	r0, [pc, #100]	; (80008d4 <main+0x2f4>)
 8000870:	f001 fa42 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800087a:	4816      	ldr	r0, [pc, #88]	; (80008d4 <main+0x2f4>)
 800087c:	f001 fa3c 	bl	8001cf8 <HAL_GPIO_WritePin>

	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000886:	4814      	ldr	r0, [pc, #80]	; (80008d8 <main+0x2f8>)
 8000888:	f001 fa36 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 800088c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000890:	f000 ff48 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089a:	480f      	ldr	r0, [pc, #60]	; (80008d8 <main+0x2f8>)
 800089c:	f001 fa2c 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 80008a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008a4:	f000 ff3e 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ae:	480a      	ldr	r0, [pc, #40]	; (80008d8 <main+0x2f8>)
 80008b0:	f001 fa22 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 80008b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008b8:	f000 ff34 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <main+0x2f8>)
 80008c4:	f001 fa18 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 80008c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008cc:	f000 ff2a 	bl	8001724 <HAL_Delay>
 80008d0:	e699      	b.n	8000606 <main+0x26>
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40020c00 	.word	0x40020c00
	  		  }
	  		  else if(pad_active == '5'){
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	2b35      	cmp	r3, #53	; 0x35
 80008e0:	d157      	bne.n	8000992 <main+0x3b2>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	48dc      	ldr	r0, [pc, #880]	; (8000c58 <main+0x678>)
 80008e8:	f001 fa06 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f2:	48d9      	ldr	r0, [pc, #868]	; (8000c58 <main+0x678>)
 80008f4:	f001 fa00 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008fe:	48d6      	ldr	r0, [pc, #856]	; (8000c58 <main+0x678>)
 8000900:	f001 f9fa 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800090a:	48d3      	ldr	r0, [pc, #844]	; (8000c58 <main+0x678>)
 800090c:	f001 f9f4 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000910:	2201      	movs	r2, #1
 8000912:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000916:	48d0      	ldr	r0, [pc, #832]	; (8000c58 <main+0x678>)
 8000918:	f001 f9ee 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000922:	48cd      	ldr	r0, [pc, #820]	; (8000c58 <main+0x678>)
 8000924:	f001 f9e8 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800092e:	48ca      	ldr	r0, [pc, #808]	; (8000c58 <main+0x678>)
 8000930:	f001 f9e2 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800093a:	48c7      	ldr	r0, [pc, #796]	; (8000c58 <main+0x678>)
 800093c:	f001 f9dc 	bl	8001cf8 <HAL_GPIO_WritePin>

	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000946:	48c5      	ldr	r0, [pc, #788]	; (8000c5c <main+0x67c>)
 8000948:	f001 f9d6 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 800094c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000950:	f000 fee8 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095a:	48c0      	ldr	r0, [pc, #768]	; (8000c5c <main+0x67c>)
 800095c:	f001 f9cc 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000960:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000964:	f000 fede 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096e:	48bb      	ldr	r0, [pc, #748]	; (8000c5c <main+0x67c>)
 8000970:	f001 f9c2 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000974:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000978:	f000 fed4 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000982:	48b6      	ldr	r0, [pc, #728]	; (8000c5c <main+0x67c>)
 8000984:	f001 f9b8 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000988:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800098c:	f000 feca 	bl	8001724 <HAL_Delay>
 8000990:	e639      	b.n	8000606 <main+0x26>
	  		  }
	  		  else if(pad_active == '6'){
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b36      	cmp	r3, #54	; 0x36
 8000996:	d157      	bne.n	8000a48 <main+0x468>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	2180      	movs	r1, #128	; 0x80
 800099c:	48ae      	ldr	r0, [pc, #696]	; (8000c58 <main+0x678>)
 800099e:	f001 f9ab 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a8:	48ab      	ldr	r0, [pc, #684]	; (8000c58 <main+0x678>)
 80009aa:	f001 f9a5 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b4:	48a8      	ldr	r0, [pc, #672]	; (8000c58 <main+0x678>)
 80009b6:	f001 f99f 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c0:	48a5      	ldr	r0, [pc, #660]	; (8000c58 <main+0x678>)
 80009c2:	f001 f999 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009cc:	48a2      	ldr	r0, [pc, #648]	; (8000c58 <main+0x678>)
 80009ce:	f001 f993 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009d8:	489f      	ldr	r0, [pc, #636]	; (8000c58 <main+0x678>)
 80009da:	f001 f98d 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e4:	489c      	ldr	r0, [pc, #624]	; (8000c58 <main+0x678>)
 80009e6:	f001 f987 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009f0:	4899      	ldr	r0, [pc, #612]	; (8000c58 <main+0x678>)
 80009f2:	f001 f981 	bl	8001cf8 <HAL_GPIO_WritePin>

	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009fc:	4897      	ldr	r0, [pc, #604]	; (8000c5c <main+0x67c>)
 80009fe:	f001 f97b 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000a02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a06:	f000 fe8d 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a10:	4892      	ldr	r0, [pc, #584]	; (8000c5c <main+0x67c>)
 8000a12:	f001 f971 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000a16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a1a:	f000 fe83 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a24:	488d      	ldr	r0, [pc, #564]	; (8000c5c <main+0x67c>)
 8000a26:	f001 f967 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000a2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a2e:	f000 fe79 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a38:	4888      	ldr	r0, [pc, #544]	; (8000c5c <main+0x67c>)
 8000a3a:	f001 f95d 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000a3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a42:	f000 fe6f 	bl	8001724 <HAL_Delay>
 8000a46:	e5de      	b.n	8000606 <main+0x26>
	  		  }
	  		  else if(pad_active == '7'){
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2b37      	cmp	r3, #55	; 0x37
 8000a4c:	d17f      	bne.n	8000b4e <main+0x56e>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	4881      	ldr	r0, [pc, #516]	; (8000c58 <main+0x678>)
 8000a54:	f001 f950 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a5e:	487e      	ldr	r0, [pc, #504]	; (8000c58 <main+0x678>)
 8000a60:	f001 f94a 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a6a:	487b      	ldr	r0, [pc, #492]	; (8000c58 <main+0x678>)
 8000a6c:	f001 f944 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a76:	4878      	ldr	r0, [pc, #480]	; (8000c58 <main+0x678>)
 8000a78:	f001 f93e 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a82:	4875      	ldr	r0, [pc, #468]	; (8000c58 <main+0x678>)
 8000a84:	f001 f938 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a8e:	4872      	ldr	r0, [pc, #456]	; (8000c58 <main+0x678>)
 8000a90:	f001 f932 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9a:	486f      	ldr	r0, [pc, #444]	; (8000c58 <main+0x678>)
 8000a9c:	f001 f92c 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa6:	486c      	ldr	r0, [pc, #432]	; (8000c58 <main+0x678>)
 8000aa8:	f001 f926 	bl	8001cf8 <HAL_GPIO_WritePin>

	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab2:	486a      	ldr	r0, [pc, #424]	; (8000c5c <main+0x67c>)
 8000ab4:	f001 f920 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000ab8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000abc:	f000 fe32 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac6:	4865      	ldr	r0, [pc, #404]	; (8000c5c <main+0x67c>)
 8000ac8:	f001 f916 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000acc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ad0:	f000 fe28 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ada:	4860      	ldr	r0, [pc, #384]	; (8000c5c <main+0x67c>)
 8000adc:	f001 f90c 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000ae0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ae4:	f000 fe1e 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aee:	485b      	ldr	r0, [pc, #364]	; (8000c5c <main+0x67c>)
 8000af0:	f001 f902 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000af4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000af8:	f000 fe14 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000afc:	2201      	movs	r2, #1
 8000afe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b02:	4856      	ldr	r0, [pc, #344]	; (8000c5c <main+0x67c>)
 8000b04:	f001 f8f8 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000b08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b0c:	f000 fe0a 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b16:	4851      	ldr	r0, [pc, #324]	; (8000c5c <main+0x67c>)
 8000b18:	f001 f8ee 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000b1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b20:	f000 fe00 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b2a:	484c      	ldr	r0, [pc, #304]	; (8000c5c <main+0x67c>)
 8000b2c:	f001 f8e4 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000b30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b34:	f000 fdf6 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b3e:	4847      	ldr	r0, [pc, #284]	; (8000c5c <main+0x67c>)
 8000b40:	f001 f8da 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000b44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b48:	f000 fdec 	bl	8001724 <HAL_Delay>
 8000b4c:	e55b      	b.n	8000606 <main+0x26>
	  		  }
	  		  else if(pad_active == '8'){
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2b38      	cmp	r3, #56	; 0x38
 8000b52:	f040 8085 	bne.w	8000c60 <main+0x680>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	483f      	ldr	r0, [pc, #252]	; (8000c58 <main+0x678>)
 8000b5c:	f001 f8cc 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b66:	483c      	ldr	r0, [pc, #240]	; (8000c58 <main+0x678>)
 8000b68:	f001 f8c6 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b72:	4839      	ldr	r0, [pc, #228]	; (8000c58 <main+0x678>)
 8000b74:	f001 f8c0 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7e:	4836      	ldr	r0, [pc, #216]	; (8000c58 <main+0x678>)
 8000b80:	f001 f8ba 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b8a:	4833      	ldr	r0, [pc, #204]	; (8000c58 <main+0x678>)
 8000b8c:	f001 f8b4 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b96:	4830      	ldr	r0, [pc, #192]	; (8000c58 <main+0x678>)
 8000b98:	f001 f8ae 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba2:	482d      	ldr	r0, [pc, #180]	; (8000c58 <main+0x678>)
 8000ba4:	f001 f8a8 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bae:	482a      	ldr	r0, [pc, #168]	; (8000c58 <main+0x678>)
 8000bb0:	f001 f8a2 	bl	8001cf8 <HAL_GPIO_WritePin>

	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bba:	4828      	ldr	r0, [pc, #160]	; (8000c5c <main+0x67c>)
 8000bbc:	f001 f89c 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000bc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bc4:	f000 fdae 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bce:	4823      	ldr	r0, [pc, #140]	; (8000c5c <main+0x67c>)
 8000bd0:	f001 f892 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000bd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bd8:	f000 fda4 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be2:	481e      	ldr	r0, [pc, #120]	; (8000c5c <main+0x67c>)
 8000be4:	f001 f888 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000be8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bec:	f000 fd9a 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf6:	4819      	ldr	r0, [pc, #100]	; (8000c5c <main+0x67c>)
 8000bf8:	f001 f87e 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000bfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c00:	f000 fd90 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0a:	4814      	ldr	r0, [pc, #80]	; (8000c5c <main+0x67c>)
 8000c0c:	f001 f874 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000c10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c14:	f000 fd86 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1e:	480f      	ldr	r0, [pc, #60]	; (8000c5c <main+0x67c>)
 8000c20:	f001 f86a 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000c24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c28:	f000 fd7c 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c32:	480a      	ldr	r0, [pc, #40]	; (8000c5c <main+0x67c>)
 8000c34:	f001 f860 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000c38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c3c:	f000 fd72 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <main+0x67c>)
 8000c48:	f001 f856 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000c4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c50:	f000 fd68 	bl	8001724 <HAL_Delay>
 8000c54:	e4d7      	b.n	8000606 <main+0x26>
 8000c56:	bf00      	nop
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40020c00 	.word	0x40020c00
	  		  }
	  		  else if(pad_active == '9'){
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2b39      	cmp	r3, #57	; 0x39
 8000c64:	d17f      	bne.n	8000d66 <main+0x786>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2180      	movs	r1, #128	; 0x80
 8000c6a:	4859      	ldr	r0, [pc, #356]	; (8000dd0 <main+0x7f0>)
 8000c6c:	f001 f844 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c76:	4856      	ldr	r0, [pc, #344]	; (8000dd0 <main+0x7f0>)
 8000c78:	f001 f83e 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c82:	4853      	ldr	r0, [pc, #332]	; (8000dd0 <main+0x7f0>)
 8000c84:	f001 f838 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8e:	4850      	ldr	r0, [pc, #320]	; (8000dd0 <main+0x7f0>)
 8000c90:	f001 f832 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c9a:	484d      	ldr	r0, [pc, #308]	; (8000dd0 <main+0x7f0>)
 8000c9c:	f001 f82c 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ca6:	484a      	ldr	r0, [pc, #296]	; (8000dd0 <main+0x7f0>)
 8000ca8:	f001 f826 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb2:	4847      	ldr	r0, [pc, #284]	; (8000dd0 <main+0x7f0>)
 8000cb4:	f001 f820 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cbe:	4844      	ldr	r0, [pc, #272]	; (8000dd0 <main+0x7f0>)
 8000cc0:	f001 f81a 	bl	8001cf8 <HAL_GPIO_WritePin>

	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cca:	4842      	ldr	r0, [pc, #264]	; (8000dd4 <main+0x7f4>)
 8000ccc:	f001 f814 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000cd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cd4:	f000 fd26 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cde:	483d      	ldr	r0, [pc, #244]	; (8000dd4 <main+0x7f4>)
 8000ce0:	f001 f80a 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000ce4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce8:	f000 fd1c 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cf2:	4838      	ldr	r0, [pc, #224]	; (8000dd4 <main+0x7f4>)
 8000cf4:	f001 f800 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000cf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cfc:	f000 fd12 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d06:	4833      	ldr	r0, [pc, #204]	; (8000dd4 <main+0x7f4>)
 8000d08:	f000 fff6 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000d0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d10:	f000 fd08 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d1a:	482e      	ldr	r0, [pc, #184]	; (8000dd4 <main+0x7f4>)
 8000d1c:	f000 ffec 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000d20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d24:	f000 fcfe 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d2e:	4829      	ldr	r0, [pc, #164]	; (8000dd4 <main+0x7f4>)
 8000d30:	f000 ffe2 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000d34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d38:	f000 fcf4 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d42:	4824      	ldr	r0, [pc, #144]	; (8000dd4 <main+0x7f4>)
 8000d44:	f000 ffd8 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000d48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d4c:	f000 fcea 	bl	8001724 <HAL_Delay>
	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d56:	481f      	ldr	r0, [pc, #124]	; (8000dd4 <main+0x7f4>)
 8000d58:	f000 ffce 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 8000d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d60:	f000 fce0 	bl	8001724 <HAL_Delay>
 8000d64:	e44f      	b.n	8000606 <main+0x26>
	  		  }
	  		  else if(pad_active == '0') {
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	2b30      	cmp	r3, #48	; 0x30
 8000d6a:	f47f ac4c 	bne.w	8000606 <main+0x26>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	4817      	ldr	r0, [pc, #92]	; (8000dd0 <main+0x7f0>)
 8000d74:	f000 ffc0 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d7e:	4814      	ldr	r0, [pc, #80]	; (8000dd0 <main+0x7f0>)
 8000d80:	f000 ffba 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d8a:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <main+0x7f0>)
 8000d8c:	f000 ffb4 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d96:	480e      	ldr	r0, [pc, #56]	; (8000dd0 <main+0x7f0>)
 8000d98:	f000 ffae 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da2:	480b      	ldr	r0, [pc, #44]	; (8000dd0 <main+0x7f0>)
 8000da4:	f000 ffa8 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dae:	4808      	ldr	r0, [pc, #32]	; (8000dd0 <main+0x7f0>)
 8000db0:	f000 ffa2 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <main+0x7f0>)
 8000dbc:	f000 ff9c 	bl	8001cf8 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc6:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <main+0x7f0>)
 8000dc8:	f000 ff96 	bl	8001cf8 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8000dcc:	e41b      	b.n	8000606 <main+0x26>
 8000dce:	bf00      	nop
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40020c00 	.word	0x40020c00

08000dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b094      	sub	sp, #80	; 0x50
 8000ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	2230      	movs	r2, #48	; 0x30
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f006 faf2 	bl	80073d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <SystemClock_Config+0xcc>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	4a27      	ldr	r2, [pc, #156]	; (8000ea4 <SystemClock_Config+0xcc>)
 8000e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0c:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <SystemClock_Config+0xcc>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <SystemClock_Config+0xd0>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <SystemClock_Config+0xd0>)
 8000e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <SystemClock_Config+0xd0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e34:	2301      	movs	r3, #1
 8000e36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e48:	2308      	movs	r3, #8
 8000e4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e4c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e52:	2302      	movs	r3, #2
 8000e54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e56:	2307      	movs	r3, #7
 8000e58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f003 f95a 	bl	8004118 <HAL_RCC_OscConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e6a:	f000 fa13 	bl	8001294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6e:	230f      	movs	r3, #15
 8000e70:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e72:	2302      	movs	r3, #2
 8000e74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e7a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	2105      	movs	r1, #5
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 fbbb 	bl	8004608 <HAL_RCC_ClockConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e98:	f000 f9fc 	bl	8001294 <Error_Handler>
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	3750      	adds	r7, #80	; 0x50
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40007000 	.word	0x40007000

08000eac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <MX_I2C1_Init+0x50>)
 8000eb2:	4a13      	ldr	r2, [pc, #76]	; (8000f00 <MX_I2C1_Init+0x54>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	; (8000efc <MX_I2C1_Init+0x50>)
 8000eb8:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <MX_I2C1_Init+0x58>)
 8000eba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <MX_I2C1_Init+0x50>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <MX_I2C1_Init+0x50>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MX_I2C1_Init+0x50>)
 8000eca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ece:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <MX_I2C1_Init+0x50>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <MX_I2C1_Init+0x50>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <MX_I2C1_Init+0x50>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <MX_I2C1_Init+0x50>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ee8:	4804      	ldr	r0, [pc, #16]	; (8000efc <MX_I2C1_Init+0x50>)
 8000eea:	f002 fb31 	bl	8003550 <HAL_I2C_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ef4:	f000 f9ce 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000ac 	.word	0x200000ac
 8000f00:	40005400 	.word	0x40005400
 8000f04:	000186a0 	.word	0x000186a0

08000f08 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_I2S3_Init+0x54>)
 8000f0e:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <MX_I2S3_Init+0x58>)
 8000f10:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_I2S3_Init+0x54>)
 8000f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f18:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <MX_I2S3_Init+0x54>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_I2S3_Init+0x54>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <MX_I2S3_Init+0x54>)
 8000f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f2c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <MX_I2S3_Init+0x54>)
 8000f30:	4a0c      	ldr	r2, [pc, #48]	; (8000f64 <MX_I2S3_Init+0x5c>)
 8000f32:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_I2S3_Init+0x54>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <MX_I2S3_Init+0x54>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_I2S3_Init+0x54>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_I2S3_Init+0x54>)
 8000f48:	f002 fc46 	bl	80037d8 <HAL_I2S_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000f52:	f000 f99f 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000100 	.word	0x20000100
 8000f60:	40003c00 	.word	0x40003c00
 8000f64:	00017700 	.word	0x00017700

08000f68 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_RNG_Init+0x20>)
 8000f6e:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <MX_RNG_Init+0x24>)
 8000f70:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_RNG_Init+0x20>)
 8000f74:	f003 fe94 	bl	8004ca0 <HAL_RNG_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000f7e:	f000 f989 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000148 	.word	0x20000148
 8000f8c:	50060800 	.word	0x50060800

08000f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	; 0x30
 8000f94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
 8000faa:	4bb4      	ldr	r3, [pc, #720]	; (800127c <MX_GPIO_Init+0x2ec>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4ab3      	ldr	r2, [pc, #716]	; (800127c <MX_GPIO_Init+0x2ec>)
 8000fb0:	f043 0310 	orr.w	r3, r3, #16
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4bb1      	ldr	r3, [pc, #708]	; (800127c <MX_GPIO_Init+0x2ec>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0310 	and.w	r3, r3, #16
 8000fbe:	61bb      	str	r3, [r7, #24]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	4bad      	ldr	r3, [pc, #692]	; (800127c <MX_GPIO_Init+0x2ec>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4aac      	ldr	r2, [pc, #688]	; (800127c <MX_GPIO_Init+0x2ec>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4baa      	ldr	r3, [pc, #680]	; (800127c <MX_GPIO_Init+0x2ec>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	4ba6      	ldr	r3, [pc, #664]	; (800127c <MX_GPIO_Init+0x2ec>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4aa5      	ldr	r2, [pc, #660]	; (800127c <MX_GPIO_Init+0x2ec>)
 8000fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4ba3      	ldr	r3, [pc, #652]	; (800127c <MX_GPIO_Init+0x2ec>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b9f      	ldr	r3, [pc, #636]	; (800127c <MX_GPIO_Init+0x2ec>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a9e      	ldr	r2, [pc, #632]	; (800127c <MX_GPIO_Init+0x2ec>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b9c      	ldr	r3, [pc, #624]	; (800127c <MX_GPIO_Init+0x2ec>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	4b98      	ldr	r3, [pc, #608]	; (800127c <MX_GPIO_Init+0x2ec>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a97      	ldr	r2, [pc, #604]	; (800127c <MX_GPIO_Init+0x2ec>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b95      	ldr	r3, [pc, #596]	; (800127c <MX_GPIO_Init+0x2ec>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	4b91      	ldr	r3, [pc, #580]	; (800127c <MX_GPIO_Init+0x2ec>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a90      	ldr	r2, [pc, #576]	; (800127c <MX_GPIO_Init+0x2ec>)
 800103c:	f043 0308 	orr.w	r3, r3, #8
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b8e      	ldr	r3, [pc, #568]	; (800127c <MX_GPIO_Init+0x2ec>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800104e:	2200      	movs	r2, #0
 8001050:	f647 71f8 	movw	r1, #32760	; 0x7ff8
 8001054:	488a      	ldr	r0, [pc, #552]	; (8001280 <MX_GPIO_Init+0x2f0>)
 8001056:	f000 fe4f 	bl	8001cf8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	2101      	movs	r1, #1
 800105e:	4889      	ldr	r0, [pc, #548]	; (8001284 <MX_GPIO_Init+0x2f4>)
 8001060:	f000 fe4a 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	21a0      	movs	r1, #160	; 0xa0
 8001068:	4887      	ldr	r0, [pc, #540]	; (8001288 <MX_GPIO_Init+0x2f8>)
 800106a:	f000 fe45 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2120      	movs	r1, #32
 8001072:	4884      	ldr	r0, [pc, #528]	; (8001284 <MX_GPIO_Init+0x2f4>)
 8001074:	f000 fe40 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001078:	2200      	movs	r2, #0
 800107a:	f24f 0110 	movw	r1, #61456	; 0xf010
 800107e:	4883      	ldr	r0, [pc, #524]	; (800128c <MX_GPIO_Init+0x2fc>)
 8001080:	f000 fe3a 	bl	8001cf8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	2130      	movs	r1, #48	; 0x30
 8001088:	4881      	ldr	r0, [pc, #516]	; (8001290 <MX_GPIO_Init+0x300>)
 800108a:	f000 fe35 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800108e:	2378      	movs	r3, #120	; 0x78
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	4876      	ldr	r0, [pc, #472]	; (8001280 <MX_GPIO_Init+0x2f0>)
 80010a6:	f000 fc73 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC5 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_5;
 80010aa:	2321      	movs	r3, #33	; 0x21
 80010ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4619      	mov	r1, r3
 80010c0:	4870      	ldr	r0, [pc, #448]	; (8001284 <MX_GPIO_Init+0x2f4>)
 80010c2:	f000 fc65 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80010c6:	230a      	movs	r3, #10
 80010c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	486a      	ldr	r0, [pc, #424]	; (8001284 <MX_GPIO_Init+0x2f4>)
 80010da:	f000 fc59 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010de:	2301      	movs	r3, #1
 80010e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4619      	mov	r1, r3
 80010f2:	4865      	ldr	r0, [pc, #404]	; (8001288 <MX_GPIO_Init+0x2f8>)
 80010f4:	f000 fc4c 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80010f8:	230a      	movs	r3, #10
 80010fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	485f      	ldr	r0, [pc, #380]	; (8001288 <MX_GPIO_Init+0x2f8>)
 800110c:	f000 fc40 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001110:	23a0      	movs	r3, #160	; 0xa0
 8001112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	4858      	ldr	r0, [pc, #352]	; (8001288 <MX_GPIO_Init+0x2f8>)
 8001128:	f000 fc32 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 800112c:	2340      	movs	r3, #64	; 0x40
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800113c:	2305      	movs	r3, #5
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	4850      	ldr	r0, [pc, #320]	; (8001288 <MX_GPIO_Init+0x2f8>)
 8001148:	f000 fc22 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800114c:	2304      	movs	r3, #4
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	484c      	ldr	r0, [pc, #304]	; (8001290 <MX_GPIO_Init+0x300>)
 8001160:	f000 fc16 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800116c:	2301      	movs	r3, #1
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001170:	2302      	movs	r3, #2
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	4841      	ldr	r0, [pc, #260]	; (8001280 <MX_GPIO_Init+0x2f0>)
 800117c:	f000 fc08 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 PE10 PE11
                           PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001180:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8001184:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800118a:	2302      	movs	r3, #2
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	4619      	mov	r1, r3
 8001198:	4839      	ldr	r0, [pc, #228]	; (8001280 <MX_GPIO_Init+0x2f0>)
 800119a:	f000 fbf9 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800119e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ac:	2302      	movs	r3, #2
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	4832      	ldr	r0, [pc, #200]	; (8001280 <MX_GPIO_Init+0x2f0>)
 80011b8:	f000 fbea 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80011bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011ce:	2305      	movs	r3, #5
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	4619      	mov	r1, r3
 80011d8:	482d      	ldr	r0, [pc, #180]	; (8001290 <MX_GPIO_Init+0x300>)
 80011da:	f000 fbd9 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80011de:	f24f 0310 	movw	r3, #61456	; 0xf010
 80011e2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4825      	ldr	r0, [pc, #148]	; (800128c <MX_GPIO_Init+0x2fc>)
 80011f8:	f000 fbca 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80011fc:	230f      	movs	r3, #15
 80011fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001204:	2301      	movs	r3, #1
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	4619      	mov	r1, r3
 800120e:	481f      	ldr	r0, [pc, #124]	; (800128c <MX_GPIO_Init+0x2fc>)
 8001210:	f000 fbbe 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001214:	2320      	movs	r3, #32
 8001216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	4619      	mov	r1, r3
 8001226:	4819      	ldr	r0, [pc, #100]	; (800128c <MX_GPIO_Init+0x2fc>)
 8001228:	f000 fbb2 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800122c:	2330      	movs	r3, #48	; 0x30
 800122e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	4813      	ldr	r0, [pc, #76]	; (8001290 <MX_GPIO_Init+0x300>)
 8001244:	f000 fba4 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001248:	2302      	movs	r3, #2
 800124a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800124c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001250:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	4619      	mov	r1, r3
 800125c:	4808      	ldr	r0, [pc, #32]	; (8001280 <MX_GPIO_Init+0x2f0>)
 800125e:	f000 fb97 	bl	8001990 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2006      	movs	r0, #6
 8001268:	f000 fb5b 	bl	8001922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800126c:	2006      	movs	r0, #6
 800126e:	f000 fb74 	bl	800195a <HAL_NVIC_EnableIRQ>

}
 8001272:	bf00      	nop
 8001274:	3730      	adds	r7, #48	; 0x30
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40021000 	.word	0x40021000
 8001284:	40020800 	.word	0x40020800
 8001288:	40020000 	.word	0x40020000
 800128c:	40020c00 	.word	0x40020c00
 8001290:	40020400 	.word	0x40020400

08001294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800129c:	e7fe      	b.n	800129c <Error_Handler+0x8>
	...

080012a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <HAL_MspInit+0x4c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <HAL_MspInit+0x4c>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <HAL_MspInit+0x4c>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <HAL_MspInit+0x4c>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	4a08      	ldr	r2, [pc, #32]	; (80012ec <HAL_MspInit+0x4c>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d0:	6413      	str	r3, [r2, #64]	; 0x40
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_MspInit+0x4c>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012de:	2007      	movs	r0, #7
 80012e0:	f000 fb14 	bl	800190c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40023800 	.word	0x40023800

080012f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a19      	ldr	r2, [pc, #100]	; (8001374 <HAL_I2C_MspInit+0x84>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d12c      	bne.n	800136c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <HAL_I2C_MspInit+0x88>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a17      	ldr	r2, [pc, #92]	; (8001378 <HAL_I2C_MspInit+0x88>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_I2C_MspInit+0x88>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800132e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001334:	2312      	movs	r3, #18
 8001336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001338:	2301      	movs	r3, #1
 800133a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001340:	2304      	movs	r3, #4
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4619      	mov	r1, r3
 800134a:	480c      	ldr	r0, [pc, #48]	; (800137c <HAL_I2C_MspInit+0x8c>)
 800134c:	f000 fb20 	bl	8001990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_I2C_MspInit+0x88>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_I2C_MspInit+0x88>)
 800135a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800135e:	6413      	str	r3, [r2, #64]	; 0x40
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_I2C_MspInit+0x88>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40005400 	.word	0x40005400
 8001378:	40023800 	.word	0x40023800
 800137c:	40020400 	.word	0x40020400

08001380 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08e      	sub	sp, #56	; 0x38
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a31      	ldr	r2, [pc, #196]	; (8001470 <HAL_I2S_MspInit+0xf0>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d15a      	bne.n	8001466 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80013b0:	2301      	movs	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80013b4:	23c0      	movs	r3, #192	; 0xc0
 80013b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80013b8:	2302      	movs	r3, #2
 80013ba:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 fb2d 	bl	8004a20 <HAL_RCCEx_PeriphCLKConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80013cc:	f7ff ff62 	bl	8001294 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	4b27      	ldr	r3, [pc, #156]	; (8001474 <HAL_I2S_MspInit+0xf4>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	4a26      	ldr	r2, [pc, #152]	; (8001474 <HAL_I2S_MspInit+0xf4>)
 80013da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013de:	6413      	str	r3, [r2, #64]	; 0x40
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_I2S_MspInit+0xf4>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	4b20      	ldr	r3, [pc, #128]	; (8001474 <HAL_I2S_MspInit+0xf4>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f4:	4a1f      	ldr	r2, [pc, #124]	; (8001474 <HAL_I2S_MspInit+0xf4>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6313      	str	r3, [r2, #48]	; 0x30
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <HAL_I2S_MspInit+0xf4>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	4b19      	ldr	r3, [pc, #100]	; (8001474 <HAL_I2S_MspInit+0xf4>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	4a18      	ldr	r2, [pc, #96]	; (8001474 <HAL_I2S_MspInit+0xf4>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6313      	str	r3, [r2, #48]	; 0x30
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <HAL_I2S_MspInit+0xf4>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001424:	2310      	movs	r3, #16
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001434:	2306      	movs	r3, #6
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143c:	4619      	mov	r1, r3
 800143e:	480e      	ldr	r0, [pc, #56]	; (8001478 <HAL_I2S_MspInit+0xf8>)
 8001440:	f000 faa6 	bl	8001990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001444:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001456:	2306      	movs	r3, #6
 8001458:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145e:	4619      	mov	r1, r3
 8001460:	4806      	ldr	r0, [pc, #24]	; (800147c <HAL_I2S_MspInit+0xfc>)
 8001462:	f000 fa95 	bl	8001990 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001466:	bf00      	nop
 8001468:	3738      	adds	r7, #56	; 0x38
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40003c00 	.word	0x40003c00
 8001474:	40023800 	.word	0x40023800
 8001478:	40020000 	.word	0x40020000
 800147c:	40020800 	.word	0x40020800

08001480 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <HAL_RNG_MspInit+0x48>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d115      	bne.n	80014be <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <HAL_RNG_MspInit+0x4c>)
 8001498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149a:	4a0c      	ldr	r2, [pc, #48]	; (80014cc <HAL_RNG_MspInit+0x4c>)
 800149c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a0:	6353      	str	r3, [r2, #52]	; 0x34
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_RNG_MspInit+0x4c>)
 80014a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	2050      	movs	r0, #80	; 0x50
 80014b4:	f000 fa35 	bl	8001922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 80014b8:	2050      	movs	r0, #80	; 0x50
 80014ba:	f000 fa4e 	bl	800195a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	50060800 	.word	0x50060800
 80014cc:	40023800 	.word	0x40023800

080014d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <NMI_Handler+0x4>

080014d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <HardFault_Handler+0x4>

080014dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <MemManage_Handler+0x4>

080014e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <BusFault_Handler+0x4>

080014e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <UsageFault_Handler+0x4>

080014ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151c:	f000 f8e2 	bl	80016e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001528:	2001      	movs	r0, #1
 800152a:	f000 fbff 	bl	8001d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <OTG_FS_IRQHandler+0x10>)
 800153a:	f000 fe85 	bl	8002248 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	2000053c 	.word	0x2000053c

08001548 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <HASH_RNG_IRQHandler+0x10>)
 800154e:	f003 fbd1 	bl	8004cf4 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000148 	.word	0x20000148

0800155c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001564:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <_sbrk+0x5c>)
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <_sbrk+0x60>)
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <_sbrk+0x64>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <_sbrk+0x64>)
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <_sbrk+0x68>)
 800157c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <_sbrk+0x64>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	429a      	cmp	r2, r3
 800158a:	d207      	bcs.n	800159c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800158c:	f005 fee6 	bl	800735c <__errno>
 8001590:	4603      	mov	r3, r0
 8001592:	220c      	movs	r2, #12
 8001594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	e009      	b.n	80015b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <_sbrk+0x64>)
 80015ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ae:	68fb      	ldr	r3, [r7, #12]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20020000 	.word	0x20020000
 80015bc:	00000400 	.word	0x00000400
 80015c0:	20000158 	.word	0x20000158
 80015c4:	20000850 	.word	0x20000850

080015c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <SystemInit+0x20>)
 80015ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <SystemInit+0x20>)
 80015d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 80015ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001624 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f0:	480d      	ldr	r0, [pc, #52]	; (8001628 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015f2:	490e      	ldr	r1, [pc, #56]	; (800162c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015f4:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f8:	e002      	b.n	8001600 <LoopCopyDataInit>

080015fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fe:	3304      	adds	r3, #4

08001600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001604:	d3f9      	bcc.n	80015fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001606:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001608:	4c0b      	ldr	r4, [pc, #44]	; (8001638 <LoopFillZerobss+0x26>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800160c:	e001      	b.n	8001612 <LoopFillZerobss>

0800160e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001610:	3204      	adds	r2, #4

08001612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001614:	d3fb      	bcc.n	800160e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001616:	f7ff ffd7 	bl	80015c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161a:	f005 fea5 	bl	8007368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800161e:	f7fe ffdf 	bl	80005e0 <main>
  bx  lr    
 8001622:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8001624:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800162c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001630:	0800762c 	.word	0x0800762c
  ldr r2, =_sbss
 8001634:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001638:	20000850 	.word	0x20000850

0800163c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800163c:	e7fe      	b.n	800163c <ADC_IRQHandler>
	...

08001640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001644:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_Init+0x40>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <HAL_Init+0x40>)
 800164a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800164e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <HAL_Init+0x40>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_Init+0x40>)
 8001656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800165a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_Init+0x40>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a07      	ldr	r2, [pc, #28]	; (8001680 <HAL_Init+0x40>)
 8001662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001666:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001668:	2003      	movs	r0, #3
 800166a:	f000 f94f 	bl	800190c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800166e:	2000      	movs	r0, #0
 8001670:	f000 f808 	bl	8001684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001674:	f7ff fe14 	bl	80012a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023c00 	.word	0x40023c00

08001684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_InitTick+0x54>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_InitTick+0x58>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4619      	mov	r1, r3
 8001696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169a:	fbb3 f3f1 	udiv	r3, r3, r1
 800169e:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 f967 	bl	8001976 <HAL_SYSTICK_Config>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00e      	b.n	80016d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b0f      	cmp	r3, #15
 80016b6:	d80a      	bhi.n	80016ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b8:	2200      	movs	r2, #0
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	f000 f92f 	bl	8001922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c4:	4a06      	ldr	r2, [pc, #24]	; (80016e0 <HAL_InitTick+0x5c>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e000      	b.n	80016d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000000 	.word	0x20000000
 80016dc:	20000008 	.word	0x20000008
 80016e0:	20000004 	.word	0x20000004

080016e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_IncTick+0x20>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_IncTick+0x24>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4413      	add	r3, r2
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <HAL_IncTick+0x24>)
 80016f6:	6013      	str	r3, [r2, #0]
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000008 	.word	0x20000008
 8001708:	2000015c 	.word	0x2000015c

0800170c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_GetTick+0x14>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	2000015c 	.word	0x2000015c

08001724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800172c:	f7ff ffee 	bl	800170c <HAL_GetTick>
 8001730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800173c:	d005      	beq.n	800174a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_Delay+0x44>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800174a:	bf00      	nop
 800174c:	f7ff ffde 	bl	800170c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	429a      	cmp	r2, r3
 800175a:	d8f7      	bhi.n	800174c <HAL_Delay+0x28>
  {
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000008 	.word	0x20000008

0800176c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001788:	4013      	ands	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800179c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179e:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60d3      	str	r3, [r2, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <__NVIC_GetPriorityGrouping+0x18>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	f003 0307 	and.w	r3, r3, #7
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	db0b      	blt.n	80017fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	f003 021f 	and.w	r2, r3, #31
 80017e8:	4907      	ldr	r1, [pc, #28]	; (8001808 <__NVIC_EnableIRQ+0x38>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	095b      	lsrs	r3, r3, #5
 80017f0:	2001      	movs	r0, #1
 80017f2:	fa00 f202 	lsl.w	r2, r0, r2
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000e100 	.word	0xe000e100

0800180c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	db0a      	blt.n	8001836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	490c      	ldr	r1, [pc, #48]	; (8001858 <__NVIC_SetPriority+0x4c>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	0112      	lsls	r2, r2, #4
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	440b      	add	r3, r1
 8001830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001834:	e00a      	b.n	800184c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4908      	ldr	r1, [pc, #32]	; (800185c <__NVIC_SetPriority+0x50>)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	3b04      	subs	r3, #4
 8001844:	0112      	lsls	r2, r2, #4
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	440b      	add	r3, r1
 800184a:	761a      	strb	r2, [r3, #24]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000e100 	.word	0xe000e100
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f1c3 0307 	rsb	r3, r3, #7
 800187a:	2b04      	cmp	r3, #4
 800187c:	bf28      	it	cs
 800187e:	2304      	movcs	r3, #4
 8001880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3304      	adds	r3, #4
 8001886:	2b06      	cmp	r3, #6
 8001888:	d902      	bls.n	8001890 <NVIC_EncodePriority+0x30>
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3b03      	subs	r3, #3
 800188e:	e000      	b.n	8001892 <NVIC_EncodePriority+0x32>
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43da      	mvns	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	401a      	ands	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	43d9      	mvns	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	4313      	orrs	r3, r2
         );
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3724      	adds	r7, #36	; 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d8:	d301      	bcc.n	80018de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018da:	2301      	movs	r3, #1
 80018dc:	e00f      	b.n	80018fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018de:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <SysTick_Config+0x40>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e6:	210f      	movs	r1, #15
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f7ff ff8e 	bl	800180c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <SysTick_Config+0x40>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f6:	4b04      	ldr	r3, [pc, #16]	; (8001908 <SysTick_Config+0x40>)
 80018f8:	2207      	movs	r2, #7
 80018fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	e000e010 	.word	0xe000e010

0800190c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ff29 	bl	800176c <__NVIC_SetPriorityGrouping>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001934:	f7ff ff3e 	bl	80017b4 <__NVIC_GetPriorityGrouping>
 8001938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	6978      	ldr	r0, [r7, #20]
 8001940:	f7ff ff8e 	bl	8001860 <NVIC_EncodePriority>
 8001944:	4602      	mov	r2, r0
 8001946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff5d 	bl	800180c <__NVIC_SetPriority>
}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff31 	bl	80017d0 <__NVIC_EnableIRQ>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff ffa2 	bl	80018c8 <SysTick_Config>
 8001984:	4603      	mov	r3, r0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	; 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	e16b      	b.n	8001c84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019ac:	2201      	movs	r2, #1
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	f040 815a 	bne.w	8001c7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d005      	beq.n	80019e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d130      	bne.n	8001a44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a18:	2201      	movs	r2, #1
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	f003 0201 	and.w	r2, r3, #1
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d017      	beq.n	8001a80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d123      	bne.n	8001ad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	08da      	lsrs	r2, r3, #3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3208      	adds	r2, #8
 8001a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	220f      	movs	r2, #15
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	691a      	ldr	r2, [r3, #16]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	08da      	lsrs	r2, r3, #3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3208      	adds	r2, #8
 8001ace:	69b9      	ldr	r1, [r7, #24]
 8001ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	2203      	movs	r2, #3
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0203 	and.w	r2, r3, #3
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80b4 	beq.w	8001c7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b60      	ldr	r3, [pc, #384]	; (8001c9c <HAL_GPIO_Init+0x30c>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	4a5f      	ldr	r2, [pc, #380]	; (8001c9c <HAL_GPIO_Init+0x30c>)
 8001b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b24:	6453      	str	r3, [r2, #68]	; 0x44
 8001b26:	4b5d      	ldr	r3, [pc, #372]	; (8001c9c <HAL_GPIO_Init+0x30c>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b32:	4a5b      	ldr	r2, [pc, #364]	; (8001ca0 <HAL_GPIO_Init+0x310>)
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	089b      	lsrs	r3, r3, #2
 8001b38:	3302      	adds	r3, #2
 8001b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	220f      	movs	r2, #15
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a52      	ldr	r2, [pc, #328]	; (8001ca4 <HAL_GPIO_Init+0x314>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d02b      	beq.n	8001bb6 <HAL_GPIO_Init+0x226>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a51      	ldr	r2, [pc, #324]	; (8001ca8 <HAL_GPIO_Init+0x318>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d025      	beq.n	8001bb2 <HAL_GPIO_Init+0x222>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a50      	ldr	r2, [pc, #320]	; (8001cac <HAL_GPIO_Init+0x31c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d01f      	beq.n	8001bae <HAL_GPIO_Init+0x21e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4f      	ldr	r2, [pc, #316]	; (8001cb0 <HAL_GPIO_Init+0x320>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d019      	beq.n	8001baa <HAL_GPIO_Init+0x21a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4e      	ldr	r2, [pc, #312]	; (8001cb4 <HAL_GPIO_Init+0x324>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d013      	beq.n	8001ba6 <HAL_GPIO_Init+0x216>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4d      	ldr	r2, [pc, #308]	; (8001cb8 <HAL_GPIO_Init+0x328>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00d      	beq.n	8001ba2 <HAL_GPIO_Init+0x212>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4c      	ldr	r2, [pc, #304]	; (8001cbc <HAL_GPIO_Init+0x32c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d007      	beq.n	8001b9e <HAL_GPIO_Init+0x20e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4b      	ldr	r2, [pc, #300]	; (8001cc0 <HAL_GPIO_Init+0x330>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d101      	bne.n	8001b9a <HAL_GPIO_Init+0x20a>
 8001b96:	2307      	movs	r3, #7
 8001b98:	e00e      	b.n	8001bb8 <HAL_GPIO_Init+0x228>
 8001b9a:	2308      	movs	r3, #8
 8001b9c:	e00c      	b.n	8001bb8 <HAL_GPIO_Init+0x228>
 8001b9e:	2306      	movs	r3, #6
 8001ba0:	e00a      	b.n	8001bb8 <HAL_GPIO_Init+0x228>
 8001ba2:	2305      	movs	r3, #5
 8001ba4:	e008      	b.n	8001bb8 <HAL_GPIO_Init+0x228>
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x228>
 8001baa:	2303      	movs	r3, #3
 8001bac:	e004      	b.n	8001bb8 <HAL_GPIO_Init+0x228>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e002      	b.n	8001bb8 <HAL_GPIO_Init+0x228>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_GPIO_Init+0x228>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	f002 0203 	and.w	r2, r2, #3
 8001bbe:	0092      	lsls	r2, r2, #2
 8001bc0:	4093      	lsls	r3, r2
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc8:	4935      	ldr	r1, [pc, #212]	; (8001ca0 <HAL_GPIO_Init+0x310>)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	3302      	adds	r3, #2
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd6:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <HAL_GPIO_Init+0x334>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bfa:	4a32      	ldr	r2, [pc, #200]	; (8001cc4 <HAL_GPIO_Init+0x334>)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c00:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <HAL_GPIO_Init+0x334>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c24:	4a27      	ldr	r2, [pc, #156]	; (8001cc4 <HAL_GPIO_Init+0x334>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <HAL_GPIO_Init+0x334>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c4e:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <HAL_GPIO_Init+0x334>)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c54:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <HAL_GPIO_Init+0x334>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c78:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <HAL_GPIO_Init+0x334>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3301      	adds	r3, #1
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	2b0f      	cmp	r3, #15
 8001c88:	f67f ae90 	bls.w	80019ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3724      	adds	r7, #36	; 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40013800 	.word	0x40013800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40020800 	.word	0x40020800
 8001cb0:	40020c00 	.word	0x40020c00
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40021400 	.word	0x40021400
 8001cbc:	40021800 	.word	0x40021800
 8001cc0:	40021c00 	.word	0x40021c00
 8001cc4:	40013c00 	.word	0x40013c00

08001cc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
 8001ce4:	e001      	b.n	8001cea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]
 8001d04:	4613      	mov	r3, r2
 8001d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d08:	787b      	ldrb	r3, [r7, #1]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d0e:	887a      	ldrh	r2, [r7, #2]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d14:	e003      	b.n	8001d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d16:	887b      	ldrh	r3, [r7, #2]
 8001d18:	041a      	lsls	r2, r3, #16
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	619a      	str	r2, [r3, #24]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d38:	695a      	ldr	r2, [r3, #20]
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d006      	beq.n	8001d50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d42:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 f806 	bl	8001d5c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40013c00 	.word	0x40013c00

08001d5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001d72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d74:	b08f      	sub	sp, #60	; 0x3c
 8001d76:	af0a      	add	r7, sp, #40	; 0x28
 8001d78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e054      	b.n	8001e2e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d106      	bne.n	8001da4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f005 f880 	bl	8006ea4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2203      	movs	r2, #3
 8001da8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f003 f873 	bl	8004eae <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	687e      	ldr	r6, [r7, #4]
 8001dd0:	466d      	mov	r5, sp
 8001dd2:	f106 0410 	add.w	r4, r6, #16
 8001dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001de2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001de6:	1d33      	adds	r3, r6, #4
 8001de8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dea:	6838      	ldr	r0, [r7, #0]
 8001dec:	f002 ffed 	bl	8004dca <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2101      	movs	r1, #1
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 f86a 	bl	8004ed0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	687e      	ldr	r6, [r7, #4]
 8001e04:	466d      	mov	r5, sp
 8001e06:	f106 0410 	add.w	r4, r6, #16
 8001e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e16:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e1a:	1d33      	adds	r3, r6, #4
 8001e1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e1e:	6838      	ldr	r0, [r7, #0]
 8001e20:	f003 f9f2 	bl	8005208 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e36 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001e36:	b590      	push	{r4, r7, lr}
 8001e38:	b089      	sub	sp, #36	; 0x24
 8001e3a:	af04      	add	r7, sp, #16
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	4608      	mov	r0, r1
 8001e40:	4611      	mov	r1, r2
 8001e42:	461a      	mov	r2, r3
 8001e44:	4603      	mov	r3, r0
 8001e46:	70fb      	strb	r3, [r7, #3]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	70bb      	strb	r3, [r7, #2]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_HCD_HC_Init+0x28>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e076      	b.n	8001f4c <HAL_HCD_HC_Init+0x116>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	212c      	movs	r1, #44	; 0x2c
 8001e6c:	fb01 f303 	mul.w	r3, r1, r3
 8001e70:	4413      	add	r3, r2
 8001e72:	333d      	adds	r3, #61	; 0x3d
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	212c      	movs	r1, #44	; 0x2c
 8001e7e:	fb01 f303 	mul.w	r3, r1, r3
 8001e82:	4413      	add	r3, r2
 8001e84:	3338      	adds	r3, #56	; 0x38
 8001e86:	787a      	ldrb	r2, [r7, #1]
 8001e88:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	212c      	movs	r1, #44	; 0x2c
 8001e90:	fb01 f303 	mul.w	r3, r1, r3
 8001e94:	4413      	add	r3, r2
 8001e96:	3340      	adds	r3, #64	; 0x40
 8001e98:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e9a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	212c      	movs	r1, #44	; 0x2c
 8001ea2:	fb01 f303 	mul.w	r3, r1, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3339      	adds	r3, #57	; 0x39
 8001eaa:	78fa      	ldrb	r2, [r7, #3]
 8001eac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	212c      	movs	r1, #44	; 0x2c
 8001eb4:	fb01 f303 	mul.w	r3, r1, r3
 8001eb8:	4413      	add	r3, r2
 8001eba:	333f      	adds	r3, #63	; 0x3f
 8001ebc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001ec0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001ec2:	78fb      	ldrb	r3, [r7, #3]
 8001ec4:	78ba      	ldrb	r2, [r7, #2]
 8001ec6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001eca:	b2d0      	uxtb	r0, r2
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	212c      	movs	r1, #44	; 0x2c
 8001ed0:	fb01 f303 	mul.w	r3, r1, r3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	333a      	adds	r3, #58	; 0x3a
 8001ed8:	4602      	mov	r2, r0
 8001eda:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001edc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	da09      	bge.n	8001ef8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	212c      	movs	r1, #44	; 0x2c
 8001eea:	fb01 f303 	mul.w	r3, r1, r3
 8001eee:	4413      	add	r3, r2
 8001ef0:	333b      	adds	r3, #59	; 0x3b
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
 8001ef6:	e008      	b.n	8001f0a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	212c      	movs	r1, #44	; 0x2c
 8001efe:	fb01 f303 	mul.w	r3, r1, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	333b      	adds	r3, #59	; 0x3b
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	212c      	movs	r1, #44	; 0x2c
 8001f10:	fb01 f303 	mul.w	r3, r1, r3
 8001f14:	4413      	add	r3, r2
 8001f16:	333c      	adds	r3, #60	; 0x3c
 8001f18:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f1c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	787c      	ldrb	r4, [r7, #1]
 8001f24:	78ba      	ldrb	r2, [r7, #2]
 8001f26:	78f9      	ldrb	r1, [r7, #3]
 8001f28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f2a:	9302      	str	r3, [sp, #8]
 8001f2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f30:	9301      	str	r3, [sp, #4]
 8001f32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	4623      	mov	r3, r4
 8001f3a:	f003 fac1 	bl	80054c0 <USB_HC_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd90      	pop	{r4, r7, pc}

08001f54 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_HCD_HC_Halt+0x1e>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e00f      	b.n	8001f92 <HAL_HCD_HC_Halt+0x3e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	78fa      	ldrb	r2, [r7, #3]
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 fd11 	bl	80059aa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	4608      	mov	r0, r1
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4603      	mov	r3, r0
 8001fac:	70fb      	strb	r3, [r7, #3]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	70bb      	strb	r3, [r7, #2]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	212c      	movs	r1, #44	; 0x2c
 8001fbc:	fb01 f303 	mul.w	r3, r1, r3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	333b      	adds	r3, #59	; 0x3b
 8001fc4:	78ba      	ldrb	r2, [r7, #2]
 8001fc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	212c      	movs	r1, #44	; 0x2c
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	333f      	adds	r3, #63	; 0x3f
 8001fd6:	787a      	ldrb	r2, [r7, #1]
 8001fd8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001fda:	7c3b      	ldrb	r3, [r7, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d112      	bne.n	8002006 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	212c      	movs	r1, #44	; 0x2c
 8001fe6:	fb01 f303 	mul.w	r3, r1, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	3342      	adds	r3, #66	; 0x42
 8001fee:	2203      	movs	r2, #3
 8001ff0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	212c      	movs	r1, #44	; 0x2c
 8001ff8:	fb01 f303 	mul.w	r3, r1, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	333d      	adds	r3, #61	; 0x3d
 8002000:	7f3a      	ldrb	r2, [r7, #28]
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	e008      	b.n	8002018 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002006:	78fb      	ldrb	r3, [r7, #3]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	212c      	movs	r1, #44	; 0x2c
 800200c:	fb01 f303 	mul.w	r3, r1, r3
 8002010:	4413      	add	r3, r2
 8002012:	3342      	adds	r3, #66	; 0x42
 8002014:	2202      	movs	r2, #2
 8002016:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002018:	787b      	ldrb	r3, [r7, #1]
 800201a:	2b03      	cmp	r3, #3
 800201c:	f200 80c6 	bhi.w	80021ac <HAL_HCD_HC_SubmitRequest+0x210>
 8002020:	a201      	add	r2, pc, #4	; (adr r2, 8002028 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002026:	bf00      	nop
 8002028:	08002039 	.word	0x08002039
 800202c:	08002199 	.word	0x08002199
 8002030:	0800209d 	.word	0x0800209d
 8002034:	0800211b 	.word	0x0800211b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002038:	7c3b      	ldrb	r3, [r7, #16]
 800203a:	2b01      	cmp	r3, #1
 800203c:	f040 80b8 	bne.w	80021b0 <HAL_HCD_HC_SubmitRequest+0x214>
 8002040:	78bb      	ldrb	r3, [r7, #2]
 8002042:	2b00      	cmp	r3, #0
 8002044:	f040 80b4 	bne.w	80021b0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002048:	8b3b      	ldrh	r3, [r7, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d108      	bne.n	8002060 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	212c      	movs	r1, #44	; 0x2c
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	4413      	add	r3, r2
 800205a:	3355      	adds	r3, #85	; 0x55
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	212c      	movs	r1, #44	; 0x2c
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	3355      	adds	r3, #85	; 0x55
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d109      	bne.n	8002088 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	212c      	movs	r1, #44	; 0x2c
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	4413      	add	r3, r2
 8002080:	3342      	adds	r3, #66	; 0x42
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002086:	e093      	b.n	80021b0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	212c      	movs	r1, #44	; 0x2c
 800208e:	fb01 f303 	mul.w	r3, r1, r3
 8002092:	4413      	add	r3, r2
 8002094:	3342      	adds	r3, #66	; 0x42
 8002096:	2202      	movs	r2, #2
 8002098:	701a      	strb	r2, [r3, #0]
      break;
 800209a:	e089      	b.n	80021b0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800209c:	78bb      	ldrb	r3, [r7, #2]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d11d      	bne.n	80020de <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	212c      	movs	r1, #44	; 0x2c
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	3355      	adds	r3, #85	; 0x55
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d109      	bne.n	80020ca <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	3342      	adds	r3, #66	; 0x42
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80020c8:	e073      	b.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	212c      	movs	r1, #44	; 0x2c
 80020d0:	fb01 f303 	mul.w	r3, r1, r3
 80020d4:	4413      	add	r3, r2
 80020d6:	3342      	adds	r3, #66	; 0x42
 80020d8:	2202      	movs	r2, #2
 80020da:	701a      	strb	r2, [r3, #0]
      break;
 80020dc:	e069      	b.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020de:	78fb      	ldrb	r3, [r7, #3]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	212c      	movs	r1, #44	; 0x2c
 80020e4:	fb01 f303 	mul.w	r3, r1, r3
 80020e8:	4413      	add	r3, r2
 80020ea:	3354      	adds	r3, #84	; 0x54
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d109      	bne.n	8002106 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	212c      	movs	r1, #44	; 0x2c
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	3342      	adds	r3, #66	; 0x42
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
      break;
 8002104:	e055      	b.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	212c      	movs	r1, #44	; 0x2c
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	4413      	add	r3, r2
 8002112:	3342      	adds	r3, #66	; 0x42
 8002114:	2202      	movs	r2, #2
 8002116:	701a      	strb	r2, [r3, #0]
      break;
 8002118:	e04b      	b.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800211a:	78bb      	ldrb	r3, [r7, #2]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d11d      	bne.n	800215c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	212c      	movs	r1, #44	; 0x2c
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	4413      	add	r3, r2
 800212c:	3355      	adds	r3, #85	; 0x55
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d109      	bne.n	8002148 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	212c      	movs	r1, #44	; 0x2c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	3342      	adds	r3, #66	; 0x42
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002146:	e034      	b.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	212c      	movs	r1, #44	; 0x2c
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	3342      	adds	r3, #66	; 0x42
 8002156:	2202      	movs	r2, #2
 8002158:	701a      	strb	r2, [r3, #0]
      break;
 800215a:	e02a      	b.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	3354      	adds	r3, #84	; 0x54
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d109      	bne.n	8002184 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	212c      	movs	r1, #44	; 0x2c
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	4413      	add	r3, r2
 800217c:	3342      	adds	r3, #66	; 0x42
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
      break;
 8002182:	e016      	b.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	212c      	movs	r1, #44	; 0x2c
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	3342      	adds	r3, #66	; 0x42
 8002192:	2202      	movs	r2, #2
 8002194:	701a      	strb	r2, [r3, #0]
      break;
 8002196:	e00c      	b.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	212c      	movs	r1, #44	; 0x2c
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	3342      	adds	r3, #66	; 0x42
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
      break;
 80021aa:	e002      	b.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80021ac:	bf00      	nop
 80021ae:	e000      	b.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80021b0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	212c      	movs	r1, #44	; 0x2c
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	4413      	add	r3, r2
 80021be:	3344      	adds	r3, #68	; 0x44
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	8b3a      	ldrh	r2, [r7, #24]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	202c      	movs	r0, #44	; 0x2c
 80021cc:	fb00 f303 	mul.w	r3, r0, r3
 80021d0:	440b      	add	r3, r1
 80021d2:	334c      	adds	r3, #76	; 0x4c
 80021d4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	212c      	movs	r1, #44	; 0x2c
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	4413      	add	r3, r2
 80021e2:	3360      	adds	r3, #96	; 0x60
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	212c      	movs	r1, #44	; 0x2c
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	3350      	adds	r3, #80	; 0x50
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	212c      	movs	r1, #44	; 0x2c
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	4413      	add	r3, r2
 8002206:	3339      	adds	r3, #57	; 0x39
 8002208:	78fa      	ldrb	r2, [r7, #3]
 800220a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	212c      	movs	r1, #44	; 0x2c
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	4413      	add	r3, r2
 8002218:	3361      	adds	r3, #97	; 0x61
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	222c      	movs	r2, #44	; 0x2c
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	3338      	adds	r3, #56	; 0x38
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	18d1      	adds	r1, r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	f003 fa64 	bl	8005704 <USB_HC_StartXfer>
 800223c:	4603      	mov	r3, r0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop

08002248 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f002 ff8f 	bl	8005182 <USB_GetMode>
 8002264:	4603      	mov	r3, r0
 8002266:	2b01      	cmp	r3, #1
 8002268:	f040 80f6 	bne.w	8002458 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f002 ff73 	bl	800515c <USB_ReadInterrupts>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 80ec 	beq.w	8002456 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f002 ff6a 	bl	800515c <USB_ReadInterrupts>
 8002288:	4603      	mov	r3, r0
 800228a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002292:	d104      	bne.n	800229e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800229c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f002 ff5a 	bl	800515c <USB_ReadInterrupts>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022b2:	d104      	bne.n	80022be <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f002 ff4a 	bl	800515c <USB_ReadInterrupts>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022d2:	d104      	bne.n	80022de <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f002 ff3a 	bl	800515c <USB_ReadInterrupts>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d103      	bne.n	80022fa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2202      	movs	r2, #2
 80022f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f002 ff2c 	bl	800515c <USB_ReadInterrupts>
 8002304:	4603      	mov	r3, r0
 8002306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800230a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800230e:	d11c      	bne.n	800234a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002318:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10f      	bne.n	800234a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800232a:	2110      	movs	r1, #16
 800232c:	6938      	ldr	r0, [r7, #16]
 800232e:	f002 fe1b 	bl	8004f68 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002332:	6938      	ldr	r0, [r7, #16]
 8002334:	f002 fe4c 	bl	8004fd0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2101      	movs	r1, #1
 800233e:	4618      	mov	r0, r3
 8002340:	f003 f822 	bl	8005388 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f004 fe2b 	bl	8006fa0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f002 ff04 	bl	800515c <USB_ReadInterrupts>
 8002354:	4603      	mov	r3, r0
 8002356:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800235a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800235e:	d102      	bne.n	8002366 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f001 f882 	bl	800346a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f002 fef6 	bl	800515c <USB_ReadInterrupts>
 8002370:	4603      	mov	r3, r0
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b08      	cmp	r3, #8
 8002378:	d106      	bne.n	8002388 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f004 fdf4 	bl	8006f68 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2208      	movs	r2, #8
 8002386:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f002 fee5 	bl	800515c <USB_ReadInterrupts>
 8002392:	4603      	mov	r3, r0
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	2b10      	cmp	r3, #16
 800239a:	d101      	bne.n	80023a0 <HAL_HCD_IRQHandler+0x158>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_HCD_IRQHandler+0x15a>
 80023a0:	2300      	movs	r3, #0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d012      	beq.n	80023cc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699a      	ldr	r2, [r3, #24]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0210 	bic.w	r2, r2, #16
 80023b4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 ff85 	bl	80032c6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0210 	orr.w	r2, r2, #16
 80023ca:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f002 fec3 	bl	800515c <USB_ReadInterrupts>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023e0:	d13a      	bne.n	8002458 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f003 face 	bl	8005988 <USB_HC_ReadInterrupt>
 80023ec:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	e025      	b.n	8002440 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d018      	beq.n	800243a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4413      	add	r3, r2
 8002410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800241a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800241e:	d106      	bne.n	800242e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	4619      	mov	r1, r3
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f88f 	bl	800254a <HCD_HC_IN_IRQHandler>
 800242c:	e005      	b.n	800243a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	4619      	mov	r1, r3
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 fbdd 	bl	8002bf4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	3301      	adds	r3, #1
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	429a      	cmp	r2, r3
 8002448:	d3d4      	bcc.n	80023f4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002452:	615a      	str	r2, [r3, #20]
 8002454:	e000      	b.n	8002458 <HAL_HCD_IRQHandler+0x210>
      return;
 8002456:	bf00      	nop
    }
  }
}
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_HCD_Start+0x16>
 8002470:	2302      	movs	r3, #2
 8002472:	e013      	b.n	800249c <HAL_HCD_Start+0x3e>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2101      	movs	r1, #1
 8002482:	4618      	mov	r0, r3
 8002484:	f002 ffba 	bl	80053fc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f002 fcfd 	bl	8004e8c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_HCD_Stop+0x16>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e00d      	b.n	80024d6 <HAL_HCD_Stop+0x32>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f003 fba8 	bl	8005c1c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	212c      	movs	r1, #44	; 0x2c
 80024f0:	fb01 f303 	mul.w	r3, r1, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	3360      	adds	r3, #96	; 0x60
 80024f8:	781b      	ldrb	r3, [r3, #0]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	460b      	mov	r3, r1
 8002510:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002512:	78fb      	ldrb	r3, [r7, #3]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	212c      	movs	r1, #44	; 0x2c
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	4413      	add	r3, r2
 800251e:	3350      	adds	r3, #80	; 0x50
 8002520:	681b      	ldr	r3, [r3, #0]
}
 8002522:	4618      	mov	r0, r3
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f002 ffae 	bl	800549c <USB_GetCurrentFrame>
 8002540:	4603      	mov	r3, r0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b086      	sub	sp, #24
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	460b      	mov	r3, r1
 8002554:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4413      	add	r3, r2
 800256c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b04      	cmp	r3, #4
 8002578:	d11a      	bne.n	80025b0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4413      	add	r3, r2
 8002582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002586:	461a      	mov	r2, r3
 8002588:	2304      	movs	r3, #4
 800258a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	212c      	movs	r1, #44	; 0x2c
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	4413      	add	r3, r2
 8002598:	3361      	adds	r3, #97	; 0x61
 800259a:	2206      	movs	r2, #6
 800259c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f003 f9fe 	bl	80059aa <USB_HC_Halt>
 80025ae:	e0af      	b.n	8002710 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c6:	d11b      	bne.n	8002600 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d4:	461a      	mov	r2, r3
 80025d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	3361      	adds	r3, #97	; 0x61
 80025ea:	2207      	movs	r2, #7
 80025ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	4611      	mov	r1, r2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f003 f9d6 	bl	80059aa <USB_HC_Halt>
 80025fe:	e087      	b.n	8002710 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4413      	add	r3, r2
 8002608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b20      	cmp	r3, #32
 8002614:	d109      	bne.n	800262a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4413      	add	r3, r2
 800261e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002622:	461a      	mov	r2, r3
 8002624:	2320      	movs	r3, #32
 8002626:	6093      	str	r3, [r2, #8]
 8002628:	e072      	b.n	8002710 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b08      	cmp	r3, #8
 800263e:	d11a      	bne.n	8002676 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264c:	461a      	mov	r2, r3
 800264e:	2308      	movs	r3, #8
 8002650:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	212c      	movs	r1, #44	; 0x2c
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	4413      	add	r3, r2
 800265e:	3361      	adds	r3, #97	; 0x61
 8002660:	2205      	movs	r2, #5
 8002662:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	4611      	mov	r1, r2
 800266e:	4618      	mov	r0, r3
 8002670:	f003 f99b 	bl	80059aa <USB_HC_Halt>
 8002674:	e04c      	b.n	8002710 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800268c:	d11b      	bne.n	80026c6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4413      	add	r3, r2
 8002696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269a:	461a      	mov	r2, r3
 800269c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	212c      	movs	r1, #44	; 0x2c
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	4413      	add	r3, r2
 80026ae:	3361      	adds	r3, #97	; 0x61
 80026b0:	2208      	movs	r2, #8
 80026b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	4611      	mov	r1, r2
 80026be:	4618      	mov	r0, r3
 80026c0:	f003 f973 	bl	80059aa <USB_HC_Halt>
 80026c4:	e024      	b.n	8002710 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d8:	2b80      	cmp	r3, #128	; 0x80
 80026da:	d119      	bne.n	8002710 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	461a      	mov	r2, r3
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	212c      	movs	r1, #44	; 0x2c
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	3361      	adds	r3, #97	; 0x61
 80026fc:	2206      	movs	r2, #6
 80026fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f003 f94d 	bl	80059aa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4413      	add	r3, r2
 8002718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002726:	d112      	bne.n	800274e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f003 f939 	bl	80059aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002744:	461a      	mov	r2, r3
 8002746:	f44f 7300 	mov.w	r3, #512	; 0x200
 800274a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800274c:	e24e      	b.n	8002bec <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4413      	add	r3, r2
 8002756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b01      	cmp	r3, #1
 8002762:	f040 80df 	bne.w	8002924 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d019      	beq.n	80027a2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	3348      	adds	r3, #72	; 0x48
 800277c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	0159      	lsls	r1, r3, #5
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	440b      	add	r3, r1
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002790:	1ad2      	subs	r2, r2, r3
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	202c      	movs	r0, #44	; 0x2c
 8002798:	fb00 f303 	mul.w	r3, r0, r3
 800279c:	440b      	add	r3, r1
 800279e:	3350      	adds	r3, #80	; 0x50
 80027a0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	3361      	adds	r3, #97	; 0x61
 80027b0:	2201      	movs	r2, #1
 80027b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	212c      	movs	r1, #44	; 0x2c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	335c      	adds	r3, #92	; 0x5c
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	461a      	mov	r2, r3
 80027d4:	2301      	movs	r3, #1
 80027d6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	212c      	movs	r1, #44	; 0x2c
 80027de:	fb01 f303 	mul.w	r3, r1, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	333f      	adds	r3, #63	; 0x3f
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d009      	beq.n	8002800 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	212c      	movs	r1, #44	; 0x2c
 80027f2:	fb01 f303 	mul.w	r3, r1, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	333f      	adds	r3, #63	; 0x3f
 80027fa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d111      	bne.n	8002824 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f003 f8cd 	bl	80059aa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281c:	461a      	mov	r2, r3
 800281e:	2310      	movs	r3, #16
 8002820:	6093      	str	r3, [r2, #8]
 8002822:	e03a      	b.n	800289a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	212c      	movs	r1, #44	; 0x2c
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	4413      	add	r3, r2
 8002830:	333f      	adds	r3, #63	; 0x3f
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d009      	beq.n	800284c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	212c      	movs	r1, #44	; 0x2c
 800283e:	fb01 f303 	mul.w	r3, r1, r3
 8002842:	4413      	add	r3, r2
 8002844:	333f      	adds	r3, #63	; 0x3f
 8002846:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002848:	2b01      	cmp	r3, #1
 800284a:	d126      	bne.n	800289a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4413      	add	r3, r2
 8002854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	0151      	lsls	r1, r2, #5
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	440a      	add	r2, r1
 8002862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002866:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800286a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	212c      	movs	r1, #44	; 0x2c
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4413      	add	r3, r2
 8002878:	3360      	adds	r3, #96	; 0x60
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	b2d9      	uxtb	r1, r3
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	202c      	movs	r0, #44	; 0x2c
 8002888:	fb00 f303 	mul.w	r3, r0, r3
 800288c:	4413      	add	r3, r2
 800288e:	3360      	adds	r3, #96	; 0x60
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f004 fb91 	bl	8006fbc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d12b      	bne.n	80028fa <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	3348      	adds	r3, #72	; 0x48
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	202c      	movs	r0, #44	; 0x2c
 80028b8:	fb00 f202 	mul.w	r2, r0, r2
 80028bc:	440a      	add	r2, r1
 80028be:	3240      	adds	r2, #64	; 0x40
 80028c0:	8812      	ldrh	r2, [r2, #0]
 80028c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 818e 	beq.w	8002bec <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	212c      	movs	r1, #44	; 0x2c
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	3354      	adds	r3, #84	; 0x54
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	f083 0301 	eor.w	r3, r3, #1
 80028e4:	b2d8      	uxtb	r0, r3
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	212c      	movs	r1, #44	; 0x2c
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	3354      	adds	r3, #84	; 0x54
 80028f4:	4602      	mov	r2, r0
 80028f6:	701a      	strb	r2, [r3, #0]
}
 80028f8:	e178      	b.n	8002bec <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	212c      	movs	r1, #44	; 0x2c
 8002900:	fb01 f303 	mul.w	r3, r1, r3
 8002904:	4413      	add	r3, r2
 8002906:	3354      	adds	r3, #84	; 0x54
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	f083 0301 	eor.w	r3, r3, #1
 800290e:	b2d8      	uxtb	r0, r3
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	212c      	movs	r1, #44	; 0x2c
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	4413      	add	r3, r2
 800291c:	3354      	adds	r3, #84	; 0x54
 800291e:	4602      	mov	r2, r0
 8002920:	701a      	strb	r2, [r3, #0]
}
 8002922:	e163      	b.n	8002bec <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4413      	add	r3, r2
 800292c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b02      	cmp	r3, #2
 8002938:	f040 80f6 	bne.w	8002b28 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	212c      	movs	r1, #44	; 0x2c
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	3361      	adds	r3, #97	; 0x61
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d109      	bne.n	8002964 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	212c      	movs	r1, #44	; 0x2c
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	4413      	add	r3, r2
 800295c:	3360      	adds	r3, #96	; 0x60
 800295e:	2201      	movs	r2, #1
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e0c9      	b.n	8002af8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	3361      	adds	r3, #97	; 0x61
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b05      	cmp	r3, #5
 8002976:	d109      	bne.n	800298c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	212c      	movs	r1, #44	; 0x2c
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	3360      	adds	r3, #96	; 0x60
 8002986:	2205      	movs	r2, #5
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	e0b5      	b.n	8002af8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	212c      	movs	r1, #44	; 0x2c
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	4413      	add	r3, r2
 8002998:	3361      	adds	r3, #97	; 0x61
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b06      	cmp	r3, #6
 800299e:	d009      	beq.n	80029b4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	212c      	movs	r1, #44	; 0x2c
 80029a6:	fb01 f303 	mul.w	r3, r1, r3
 80029aa:	4413      	add	r3, r2
 80029ac:	3361      	adds	r3, #97	; 0x61
 80029ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d150      	bne.n	8002a56 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	212c      	movs	r1, #44	; 0x2c
 80029ba:	fb01 f303 	mul.w	r3, r1, r3
 80029be:	4413      	add	r3, r2
 80029c0:	335c      	adds	r3, #92	; 0x5c
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	202c      	movs	r0, #44	; 0x2c
 80029cc:	fb00 f303 	mul.w	r3, r0, r3
 80029d0:	440b      	add	r3, r1
 80029d2:	335c      	adds	r3, #92	; 0x5c
 80029d4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	335c      	adds	r3, #92	; 0x5c
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d912      	bls.n	8002a10 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	212c      	movs	r1, #44	; 0x2c
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	335c      	adds	r3, #92	; 0x5c
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	3360      	adds	r3, #96	; 0x60
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a0e:	e073      	b.n	8002af8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3360      	adds	r3, #96	; 0x60
 8002a1e:	2202      	movs	r2, #2
 8002a20:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a38:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a40:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a54:	e050      	b.n	8002af8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	212c      	movs	r1, #44	; 0x2c
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	4413      	add	r3, r2
 8002a62:	3361      	adds	r3, #97	; 0x61
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d122      	bne.n	8002ab0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	212c      	movs	r1, #44	; 0x2c
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	3360      	adds	r3, #96	; 0x60
 8002a78:	2202      	movs	r2, #2
 8002a7a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a92:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a9a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	e023      	b.n	8002af8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	3361      	adds	r3, #97	; 0x61
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b07      	cmp	r3, #7
 8002ac2:	d119      	bne.n	8002af8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	335c      	adds	r3, #92	; 0x5c
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	202c      	movs	r0, #44	; 0x2c
 8002adc:	fb00 f303 	mul.w	r3, r0, r3
 8002ae0:	440b      	add	r3, r1
 8002ae2:	335c      	adds	r3, #92	; 0x5c
 8002ae4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	212c      	movs	r1, #44	; 0x2c
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	3360      	adds	r3, #96	; 0x60
 8002af4:	2204      	movs	r2, #4
 8002af6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b04:	461a      	mov	r2, r3
 8002b06:	2302      	movs	r3, #2
 8002b08:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	b2d9      	uxtb	r1, r3
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	202c      	movs	r0, #44	; 0x2c
 8002b14:	fb00 f303 	mul.w	r3, r0, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	3360      	adds	r3, #96	; 0x60
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f004 fa4b 	bl	8006fbc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b26:	e061      	b.n	8002bec <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d156      	bne.n	8002bec <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	212c      	movs	r1, #44	; 0x2c
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	333f      	adds	r3, #63	; 0x3f
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d111      	bne.n	8002b76 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	212c      	movs	r1, #44	; 0x2c
 8002b58:	fb01 f303 	mul.w	r3, r1, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	335c      	adds	r3, #92	; 0x5c
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f002 ff1b 	bl	80059aa <USB_HC_Halt>
 8002b74:	e031      	b.n	8002bda <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	333f      	adds	r3, #63	; 0x3f
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d009      	beq.n	8002b9e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	212c      	movs	r1, #44	; 0x2c
 8002b90:	fb01 f303 	mul.w	r3, r1, r3
 8002b94:	4413      	add	r3, r2
 8002b96:	333f      	adds	r3, #63	; 0x3f
 8002b98:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d11d      	bne.n	8002bda <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	212c      	movs	r1, #44	; 0x2c
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	335c      	adds	r3, #92	; 0x5c
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d110      	bne.n	8002bda <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	212c      	movs	r1, #44	; 0x2c
 8002bbe:	fb01 f303 	mul.w	r3, r1, r3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3361      	adds	r3, #97	; 0x61
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f002 fee8 	bl	80059aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be6:	461a      	mov	r2, r3
 8002be8:	2310      	movs	r3, #16
 8002bea:	6093      	str	r3, [r2, #8]
}
 8002bec:	bf00      	nop
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d11a      	bne.n	8002c5a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	015a      	lsls	r2, r3, #5
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c30:	461a      	mov	r2, r3
 8002c32:	2304      	movs	r3, #4
 8002c34:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	212c      	movs	r1, #44	; 0x2c
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	3361      	adds	r3, #97	; 0x61
 8002c44:	2206      	movs	r2, #6
 8002c46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f002 fea9 	bl	80059aa <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002c58:	e331      	b.n	80032be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d12e      	bne.n	8002cce <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	2320      	movs	r3, #32
 8002c80:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	212c      	movs	r1, #44	; 0x2c
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	333d      	adds	r3, #61	; 0x3d
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	f040 8313 	bne.w	80032be <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	333d      	adds	r3, #61	; 0x3d
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	212c      	movs	r1, #44	; 0x2c
 8002cb0:	fb01 f303 	mul.w	r3, r1, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3360      	adds	r3, #96	; 0x60
 8002cb8:	2202      	movs	r2, #2
 8002cba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f002 fe6f 	bl	80059aa <USB_HC_Halt>
}
 8002ccc:	e2f7      	b.n	80032be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	015a      	lsls	r2, r3, #5
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ce4:	d112      	bne.n	8002d0c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cf8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f002 fe50 	bl	80059aa <USB_HC_Halt>
}
 8002d0a:	e2d8      	b.n	80032be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d140      	bne.n	8002da4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	212c      	movs	r1, #44	; 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	335c      	adds	r3, #92	; 0x5c
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d46:	2b40      	cmp	r3, #64	; 0x40
 8002d48:	d111      	bne.n	8002d6e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	212c      	movs	r1, #44	; 0x2c
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	333d      	adds	r3, #61	; 0x3d
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d68:	461a      	mov	r2, r3
 8002d6a:	2340      	movs	r3, #64	; 0x40
 8002d6c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	212c      	movs	r1, #44	; 0x2c
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3361      	adds	r3, #97	; 0x61
 8002d8e:	2201      	movs	r2, #1
 8002d90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f002 fe04 	bl	80059aa <USB_HC_Halt>
}
 8002da2:	e28c      	b.n	80032be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db6:	2b40      	cmp	r3, #64	; 0x40
 8002db8:	d12c      	bne.n	8002e14 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	212c      	movs	r1, #44	; 0x2c
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3361      	adds	r3, #97	; 0x61
 8002dc8:	2204      	movs	r2, #4
 8002dca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	212c      	movs	r1, #44	; 0x2c
 8002dd2:	fb01 f303 	mul.w	r3, r1, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	333d      	adds	r3, #61	; 0x3d
 8002dda:	2201      	movs	r2, #1
 8002ddc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	212c      	movs	r1, #44	; 0x2c
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	335c      	adds	r3, #92	; 0x5c
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	4611      	mov	r1, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f002 fdd5 	bl	80059aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	2340      	movs	r3, #64	; 0x40
 8002e10:	6093      	str	r3, [r2, #8]
}
 8002e12:	e254      	b.n	80032be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d11a      	bne.n	8002e60 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e36:	461a      	mov	r2, r3
 8002e38:	2308      	movs	r3, #8
 8002e3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	212c      	movs	r1, #44	; 0x2c
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	3361      	adds	r3, #97	; 0x61
 8002e4a:	2205      	movs	r2, #5
 8002e4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	4611      	mov	r1, r2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f002 fda6 	bl	80059aa <USB_HC_Halt>
}
 8002e5e:	e22e      	b.n	80032be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	2b10      	cmp	r3, #16
 8002e74:	d140      	bne.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	212c      	movs	r1, #44	; 0x2c
 8002e7c:	fb01 f303 	mul.w	r3, r1, r3
 8002e80:	4413      	add	r3, r2
 8002e82:	335c      	adds	r3, #92	; 0x5c
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	212c      	movs	r1, #44	; 0x2c
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	4413      	add	r3, r2
 8002e94:	3361      	adds	r3, #97	; 0x61
 8002e96:	2203      	movs	r2, #3
 8002e98:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	212c      	movs	r1, #44	; 0x2c
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	333d      	adds	r3, #61	; 0x3d
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d112      	bne.n	8002ed4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	212c      	movs	r1, #44	; 0x2c
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	333c      	adds	r3, #60	; 0x3c
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d108      	bne.n	8002ed4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	212c      	movs	r1, #44	; 0x2c
 8002ec8:	fb01 f303 	mul.w	r3, r1, r3
 8002ecc:	4413      	add	r3, r2
 8002ece:	333d      	adds	r3, #61	; 0x3d
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f002 fd63 	bl	80059aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	2310      	movs	r3, #16
 8002ef4:	6093      	str	r3, [r2, #8]
}
 8002ef6:	e1e2      	b.n	80032be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0a:	2b80      	cmp	r3, #128	; 0x80
 8002f0c:	d164      	bne.n	8002fd8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d111      	bne.n	8002f3a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	3361      	adds	r3, #97	; 0x61
 8002f24:	2206      	movs	r2, #6
 8002f26:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f002 fd39 	bl	80059aa <USB_HC_Halt>
 8002f38:	e044      	b.n	8002fc4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	212c      	movs	r1, #44	; 0x2c
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	335c      	adds	r3, #92	; 0x5c
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	202c      	movs	r0, #44	; 0x2c
 8002f52:	fb00 f303 	mul.w	r3, r0, r3
 8002f56:	440b      	add	r3, r1
 8002f58:	335c      	adds	r3, #92	; 0x5c
 8002f5a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	212c      	movs	r1, #44	; 0x2c
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	4413      	add	r3, r2
 8002f68:	335c      	adds	r3, #92	; 0x5c
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d920      	bls.n	8002fb2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	212c      	movs	r1, #44	; 0x2c
 8002f76:	fb01 f303 	mul.w	r3, r1, r3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	335c      	adds	r3, #92	; 0x5c
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3360      	adds	r3, #96	; 0x60
 8002f90:	2204      	movs	r2, #4
 8002f92:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	b2d9      	uxtb	r1, r3
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	202c      	movs	r0, #44	; 0x2c
 8002f9e:	fb00 f303 	mul.w	r3, r0, r3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3360      	adds	r3, #96	; 0x60
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f004 f806 	bl	8006fbc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002fb0:	e008      	b.n	8002fc4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	212c      	movs	r1, #44	; 0x2c
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3360      	adds	r3, #96	; 0x60
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	6093      	str	r3, [r2, #8]
}
 8002fd6:	e172      	b.n	80032be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	015a      	lsls	r2, r3, #5
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fee:	d11b      	bne.n	8003028 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	212c      	movs	r1, #44	; 0x2c
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3361      	adds	r3, #97	; 0x61
 8002ffe:	2208      	movs	r2, #8
 8003000:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f002 fccc 	bl	80059aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	4413      	add	r3, r2
 800301a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301e:	461a      	mov	r2, r3
 8003020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003024:	6093      	str	r3, [r2, #8]
}
 8003026:	e14a      	b.n	80032be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	4413      	add	r3, r2
 8003030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b02      	cmp	r3, #2
 800303c:	f040 813f 	bne.w	80032be <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	212c      	movs	r1, #44	; 0x2c
 8003046:	fb01 f303 	mul.w	r3, r1, r3
 800304a:	4413      	add	r3, r2
 800304c:	3361      	adds	r3, #97	; 0x61
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d17d      	bne.n	8003150 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	212c      	movs	r1, #44	; 0x2c
 800305a:	fb01 f303 	mul.w	r3, r1, r3
 800305e:	4413      	add	r3, r2
 8003060:	3360      	adds	r3, #96	; 0x60
 8003062:	2201      	movs	r2, #1
 8003064:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	212c      	movs	r1, #44	; 0x2c
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	333f      	adds	r3, #63	; 0x3f
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d00a      	beq.n	8003090 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	212c      	movs	r1, #44	; 0x2c
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	4413      	add	r3, r2
 8003086:	333f      	adds	r3, #63	; 0x3f
 8003088:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800308a:	2b03      	cmp	r3, #3
 800308c:	f040 8100 	bne.w	8003290 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d113      	bne.n	80030c0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	212c      	movs	r1, #44	; 0x2c
 800309e:	fb01 f303 	mul.w	r3, r1, r3
 80030a2:	4413      	add	r3, r2
 80030a4:	3355      	adds	r3, #85	; 0x55
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	f083 0301 	eor.w	r3, r3, #1
 80030ac:	b2d8      	uxtb	r0, r3
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	212c      	movs	r1, #44	; 0x2c
 80030b4:	fb01 f303 	mul.w	r3, r1, r3
 80030b8:	4413      	add	r3, r2
 80030ba:	3355      	adds	r3, #85	; 0x55
 80030bc:	4602      	mov	r2, r0
 80030be:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	f040 80e3 	bne.w	8003290 <HCD_HC_OUT_IRQHandler+0x69c>
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	212c      	movs	r1, #44	; 0x2c
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	4413      	add	r3, r2
 80030d6:	334c      	adds	r3, #76	; 0x4c
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 80d8 	beq.w	8003290 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	212c      	movs	r1, #44	; 0x2c
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	334c      	adds	r3, #76	; 0x4c
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	202c      	movs	r0, #44	; 0x2c
 80030f6:	fb00 f202 	mul.w	r2, r0, r2
 80030fa:	440a      	add	r2, r1
 80030fc:	3240      	adds	r2, #64	; 0x40
 80030fe:	8812      	ldrh	r2, [r2, #0]
 8003100:	4413      	add	r3, r2
 8003102:	3b01      	subs	r3, #1
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	202c      	movs	r0, #44	; 0x2c
 800310a:	fb00 f202 	mul.w	r2, r0, r2
 800310e:	440a      	add	r2, r1
 8003110:	3240      	adds	r2, #64	; 0x40
 8003112:	8812      	ldrh	r2, [r2, #0]
 8003114:	fbb3 f3f2 	udiv	r3, r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80b5 	beq.w	8003290 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	212c      	movs	r1, #44	; 0x2c
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	4413      	add	r3, r2
 8003132:	3355      	adds	r3, #85	; 0x55
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	f083 0301 	eor.w	r3, r3, #1
 800313a:	b2d8      	uxtb	r0, r3
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	212c      	movs	r1, #44	; 0x2c
 8003142:	fb01 f303 	mul.w	r3, r1, r3
 8003146:	4413      	add	r3, r2
 8003148:	3355      	adds	r3, #85	; 0x55
 800314a:	4602      	mov	r2, r0
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	e09f      	b.n	8003290 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	212c      	movs	r1, #44	; 0x2c
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	4413      	add	r3, r2
 800315c:	3361      	adds	r3, #97	; 0x61
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d109      	bne.n	8003178 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	212c      	movs	r1, #44	; 0x2c
 800316a:	fb01 f303 	mul.w	r3, r1, r3
 800316e:	4413      	add	r3, r2
 8003170:	3360      	adds	r3, #96	; 0x60
 8003172:	2202      	movs	r2, #2
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	e08b      	b.n	8003290 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	212c      	movs	r1, #44	; 0x2c
 800317e:	fb01 f303 	mul.w	r3, r1, r3
 8003182:	4413      	add	r3, r2
 8003184:	3361      	adds	r3, #97	; 0x61
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b04      	cmp	r3, #4
 800318a:	d109      	bne.n	80031a0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	212c      	movs	r1, #44	; 0x2c
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	4413      	add	r3, r2
 8003198:	3360      	adds	r3, #96	; 0x60
 800319a:	2202      	movs	r2, #2
 800319c:	701a      	strb	r2, [r3, #0]
 800319e:	e077      	b.n	8003290 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	212c      	movs	r1, #44	; 0x2c
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	3361      	adds	r3, #97	; 0x61
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b05      	cmp	r3, #5
 80031b2:	d109      	bne.n	80031c8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	3360      	adds	r3, #96	; 0x60
 80031c2:	2205      	movs	r2, #5
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	e063      	b.n	8003290 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	212c      	movs	r1, #44	; 0x2c
 80031ce:	fb01 f303 	mul.w	r3, r1, r3
 80031d2:	4413      	add	r3, r2
 80031d4:	3361      	adds	r3, #97	; 0x61
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b06      	cmp	r3, #6
 80031da:	d009      	beq.n	80031f0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	212c      	movs	r1, #44	; 0x2c
 80031e2:	fb01 f303 	mul.w	r3, r1, r3
 80031e6:	4413      	add	r3, r2
 80031e8:	3361      	adds	r3, #97	; 0x61
 80031ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d14f      	bne.n	8003290 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	212c      	movs	r1, #44	; 0x2c
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	335c      	adds	r3, #92	; 0x5c
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	202c      	movs	r0, #44	; 0x2c
 8003208:	fb00 f303 	mul.w	r3, r0, r3
 800320c:	440b      	add	r3, r1
 800320e:	335c      	adds	r3, #92	; 0x5c
 8003210:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	212c      	movs	r1, #44	; 0x2c
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	4413      	add	r3, r2
 800321e:	335c      	adds	r3, #92	; 0x5c
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d912      	bls.n	800324c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	212c      	movs	r1, #44	; 0x2c
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	335c      	adds	r3, #92	; 0x5c
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	212c      	movs	r1, #44	; 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	3360      	adds	r3, #96	; 0x60
 8003246:	2204      	movs	r2, #4
 8003248:	701a      	strb	r2, [r3, #0]
 800324a:	e021      	b.n	8003290 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	212c      	movs	r1, #44	; 0x2c
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	4413      	add	r3, r2
 8003258:	3360      	adds	r3, #96	; 0x60
 800325a:	2202      	movs	r2, #2
 800325c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	4413      	add	r3, r2
 8003266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003274:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800327c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	4413      	add	r3, r2
 8003286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328a:	461a      	mov	r2, r3
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	4413      	add	r3, r2
 8003298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329c:	461a      	mov	r2, r3
 800329e:	2302      	movs	r3, #2
 80032a0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	b2d9      	uxtb	r1, r3
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	202c      	movs	r0, #44	; 0x2c
 80032ac:	fb00 f303 	mul.w	r3, r0, r3
 80032b0:	4413      	add	r3, r2
 80032b2:	3360      	adds	r3, #96	; 0x60
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f003 fe7f 	bl	8006fbc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80032be:	bf00      	nop
 80032c0:	3720      	adds	r7, #32
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b08a      	sub	sp, #40	; 0x28
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	0c5b      	lsrs	r3, r3, #17
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032fa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d004      	beq.n	800330c <HCD_RXQLVL_IRQHandler+0x46>
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b05      	cmp	r3, #5
 8003306:	f000 80a9 	beq.w	800345c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800330a:	e0aa      	b.n	8003462 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 80a6 	beq.w	8003460 <HCD_RXQLVL_IRQHandler+0x19a>
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	212c      	movs	r1, #44	; 0x2c
 800331a:	fb01 f303 	mul.w	r3, r1, r3
 800331e:	4413      	add	r3, r2
 8003320:	3344      	adds	r3, #68	; 0x44
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 809b 	beq.w	8003460 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	212c      	movs	r1, #44	; 0x2c
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	4413      	add	r3, r2
 8003336:	3350      	adds	r3, #80	; 0x50
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	441a      	add	r2, r3
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	202c      	movs	r0, #44	; 0x2c
 8003344:	fb00 f303 	mul.w	r3, r0, r3
 8003348:	440b      	add	r3, r1
 800334a:	334c      	adds	r3, #76	; 0x4c
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d87a      	bhi.n	8003448 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	212c      	movs	r1, #44	; 0x2c
 800335c:	fb01 f303 	mul.w	r3, r1, r3
 8003360:	4413      	add	r3, r2
 8003362:	3344      	adds	r3, #68	; 0x44
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	b292      	uxth	r2, r2
 800336a:	4619      	mov	r1, r3
 800336c:	f001 fe9e 	bl	80050ac <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	212c      	movs	r1, #44	; 0x2c
 8003376:	fb01 f303 	mul.w	r3, r1, r3
 800337a:	4413      	add	r3, r2
 800337c:	3344      	adds	r3, #68	; 0x44
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	441a      	add	r2, r3
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	202c      	movs	r0, #44	; 0x2c
 800338a:	fb00 f303 	mul.w	r3, r0, r3
 800338e:	440b      	add	r3, r1
 8003390:	3344      	adds	r3, #68	; 0x44
 8003392:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	212c      	movs	r1, #44	; 0x2c
 800339a:	fb01 f303 	mul.w	r3, r1, r3
 800339e:	4413      	add	r3, r2
 80033a0:	3350      	adds	r3, #80	; 0x50
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	441a      	add	r2, r3
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	202c      	movs	r0, #44	; 0x2c
 80033ae:	fb00 f303 	mul.w	r3, r0, r3
 80033b2:	440b      	add	r3, r1
 80033b4:	3350      	adds	r3, #80	; 0x50
 80033b6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	0cdb      	lsrs	r3, r3, #19
 80033c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033cc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	212c      	movs	r1, #44	; 0x2c
 80033d4:	fb01 f303 	mul.w	r3, r1, r3
 80033d8:	4413      	add	r3, r2
 80033da:	3340      	adds	r3, #64	; 0x40
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d13c      	bne.n	8003460 <HCD_RXQLVL_IRQHandler+0x19a>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d039      	beq.n	8003460 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	015a      	lsls	r2, r3, #5
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	4413      	add	r3, r2
 80033f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003402:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800340a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	4413      	add	r3, r2
 8003414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003418:	461a      	mov	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	212c      	movs	r1, #44	; 0x2c
 8003424:	fb01 f303 	mul.w	r3, r1, r3
 8003428:	4413      	add	r3, r2
 800342a:	3354      	adds	r3, #84	; 0x54
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	f083 0301 	eor.w	r3, r3, #1
 8003432:	b2d8      	uxtb	r0, r3
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	212c      	movs	r1, #44	; 0x2c
 800343a:	fb01 f303 	mul.w	r3, r1, r3
 800343e:	4413      	add	r3, r2
 8003440:	3354      	adds	r3, #84	; 0x54
 8003442:	4602      	mov	r2, r0
 8003444:	701a      	strb	r2, [r3, #0]
      break;
 8003446:	e00b      	b.n	8003460 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	212c      	movs	r1, #44	; 0x2c
 800344e:	fb01 f303 	mul.w	r3, r1, r3
 8003452:	4413      	add	r3, r2
 8003454:	3360      	adds	r3, #96	; 0x60
 8003456:	2204      	movs	r2, #4
 8003458:	701a      	strb	r2, [r3, #0]
      break;
 800345a:	e001      	b.n	8003460 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800345c:	bf00      	nop
 800345e:	e000      	b.n	8003462 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003460:	bf00      	nop
  }
}
 8003462:	bf00      	nop
 8003464:	3728      	adds	r7, #40	; 0x28
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b086      	sub	sp, #24
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003496:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d10b      	bne.n	80034ba <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d102      	bne.n	80034b2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f003 fd69 	bl	8006f84 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f043 0302 	orr.w	r3, r3, #2
 80034b8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d132      	bne.n	800352a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f043 0308 	orr.w	r3, r3, #8
 80034ca:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d126      	bne.n	8003524 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d113      	bne.n	8003506 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80034e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034e8:	d106      	bne.n	80034f8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2102      	movs	r1, #2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f001 ff49 	bl	8005388 <USB_InitFSLSPClkSel>
 80034f6:	e011      	b.n	800351c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2101      	movs	r1, #1
 80034fe:	4618      	mov	r0, r3
 8003500:	f001 ff42 	bl	8005388 <USB_InitFSLSPClkSel>
 8003504:	e00a      	b.n	800351c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d106      	bne.n	800351c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003514:	461a      	mov	r2, r3
 8003516:	f64e 2360 	movw	r3, #60000	; 0xea60
 800351a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f003 fd5b 	bl	8006fd8 <HAL_HCD_PortEnabled_Callback>
 8003522:	e002      	b.n	800352a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f003 fd65 	bl	8006ff4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b20      	cmp	r3, #32
 8003532:	d103      	bne.n	800353c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f043 0320 	orr.w	r3, r3, #32
 800353a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003542:	461a      	mov	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	6013      	str	r3, [r2, #0]
}
 8003548:	bf00      	nop
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e12b      	b.n	80037ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d106      	bne.n	800357c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7fd feba 	bl	80012f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2224      	movs	r2, #36	; 0x24
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0201 	bic.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035b4:	f001 fa20 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 80035b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	4a81      	ldr	r2, [pc, #516]	; (80037c4 <HAL_I2C_Init+0x274>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d807      	bhi.n	80035d4 <HAL_I2C_Init+0x84>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4a80      	ldr	r2, [pc, #512]	; (80037c8 <HAL_I2C_Init+0x278>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	bf94      	ite	ls
 80035cc:	2301      	movls	r3, #1
 80035ce:	2300      	movhi	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	e006      	b.n	80035e2 <HAL_I2C_Init+0x92>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4a7d      	ldr	r2, [pc, #500]	; (80037cc <HAL_I2C_Init+0x27c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	bf94      	ite	ls
 80035dc:	2301      	movls	r3, #1
 80035de:	2300      	movhi	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e0e7      	b.n	80037ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4a78      	ldr	r2, [pc, #480]	; (80037d0 <HAL_I2C_Init+0x280>)
 80035ee:	fba2 2303 	umull	r2, r3, r2, r3
 80035f2:	0c9b      	lsrs	r3, r3, #18
 80035f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	4a6a      	ldr	r2, [pc, #424]	; (80037c4 <HAL_I2C_Init+0x274>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d802      	bhi.n	8003624 <HAL_I2C_Init+0xd4>
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	3301      	adds	r3, #1
 8003622:	e009      	b.n	8003638 <HAL_I2C_Init+0xe8>
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800362a:	fb02 f303 	mul.w	r3, r2, r3
 800362e:	4a69      	ldr	r2, [pc, #420]	; (80037d4 <HAL_I2C_Init+0x284>)
 8003630:	fba2 2303 	umull	r2, r3, r2, r3
 8003634:	099b      	lsrs	r3, r3, #6
 8003636:	3301      	adds	r3, #1
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	430b      	orrs	r3, r1
 800363e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800364a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	495c      	ldr	r1, [pc, #368]	; (80037c4 <HAL_I2C_Init+0x274>)
 8003654:	428b      	cmp	r3, r1
 8003656:	d819      	bhi.n	800368c <HAL_I2C_Init+0x13c>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	1e59      	subs	r1, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	fbb1 f3f3 	udiv	r3, r1, r3
 8003666:	1c59      	adds	r1, r3, #1
 8003668:	f640 73fc 	movw	r3, #4092	; 0xffc
 800366c:	400b      	ands	r3, r1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_I2C_Init+0x138>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1e59      	subs	r1, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003680:	3301      	adds	r3, #1
 8003682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003686:	e051      	b.n	800372c <HAL_I2C_Init+0x1dc>
 8003688:	2304      	movs	r3, #4
 800368a:	e04f      	b.n	800372c <HAL_I2C_Init+0x1dc>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d111      	bne.n	80036b8 <HAL_I2C_Init+0x168>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	1e58      	subs	r0, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6859      	ldr	r1, [r3, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	440b      	add	r3, r1
 80036a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036a6:	3301      	adds	r3, #1
 80036a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	bf0c      	ite	eq
 80036b0:	2301      	moveq	r3, #1
 80036b2:	2300      	movne	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	e012      	b.n	80036de <HAL_I2C_Init+0x18e>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	1e58      	subs	r0, r3, #1
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6859      	ldr	r1, [r3, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	0099      	lsls	r1, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ce:	3301      	adds	r3, #1
 80036d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	bf0c      	ite	eq
 80036d8:	2301      	moveq	r3, #1
 80036da:	2300      	movne	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_I2C_Init+0x196>
 80036e2:	2301      	movs	r3, #1
 80036e4:	e022      	b.n	800372c <HAL_I2C_Init+0x1dc>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10e      	bne.n	800370c <HAL_I2C_Init+0x1bc>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1e58      	subs	r0, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6859      	ldr	r1, [r3, #4]
 80036f6:	460b      	mov	r3, r1
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	440b      	add	r3, r1
 80036fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003700:	3301      	adds	r3, #1
 8003702:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800370a:	e00f      	b.n	800372c <HAL_I2C_Init+0x1dc>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	1e58      	subs	r0, r3, #1
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6859      	ldr	r1, [r3, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	0099      	lsls	r1, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003722:	3301      	adds	r3, #1
 8003724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003728:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	6809      	ldr	r1, [r1, #0]
 8003730:	4313      	orrs	r3, r2
 8003732:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69da      	ldr	r2, [r3, #28]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800375a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6911      	ldr	r1, [r2, #16]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	68d2      	ldr	r2, [r2, #12]
 8003766:	4311      	orrs	r1, r2
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	430b      	orrs	r3, r1
 800376e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	000186a0 	.word	0x000186a0
 80037c8:	001e847f 	.word	0x001e847f
 80037cc:	003d08ff 	.word	0x003d08ff
 80037d0:	431bde83 	.word	0x431bde83
 80037d4:	10624dd3 	.word	0x10624dd3

080037d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b088      	sub	sp, #32
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e128      	b.n	8003a3c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a90      	ldr	r2, [pc, #576]	; (8003a44 <HAL_I2S_Init+0x26c>)
 8003802:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7fd fdbb 	bl	8001380 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2202      	movs	r2, #2
 800380e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003820:	f023 030f 	bic.w	r3, r3, #15
 8003824:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2202      	movs	r2, #2
 800382c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	2b02      	cmp	r3, #2
 8003834:	d060      	beq.n	80038f8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d102      	bne.n	8003844 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800383e:	2310      	movs	r3, #16
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	e001      	b.n	8003848 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003844:	2320      	movs	r3, #32
 8003846:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2b20      	cmp	r3, #32
 800384e:	d802      	bhi.n	8003856 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003856:	2001      	movs	r0, #1
 8003858:	f001 f9c4 	bl	8004be4 <HAL_RCCEx_GetPeriphCLKFreq>
 800385c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003866:	d125      	bne.n	80038b4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d010      	beq.n	8003892 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	fbb2 f2f3 	udiv	r2, r2, r3
 800387a:	4613      	mov	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	461a      	mov	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	fbb2 f3f3 	udiv	r3, r2, r3
 800388c:	3305      	adds	r3, #5
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	e01f      	b.n	80038d2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	fbb2 f2f3 	udiv	r2, r2, r3
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	461a      	mov	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ae:	3305      	adds	r3, #5
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	e00e      	b.n	80038d2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	461a      	mov	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ce:	3305      	adds	r3, #5
 80038d0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4a5c      	ldr	r2, [pc, #368]	; (8003a48 <HAL_I2S_Init+0x270>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	08db      	lsrs	r3, r3, #3
 80038dc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	085b      	lsrs	r3, r3, #1
 80038ee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	61bb      	str	r3, [r7, #24]
 80038f6:	e003      	b.n	8003900 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80038f8:	2302      	movs	r3, #2
 80038fa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d902      	bls.n	800390c <HAL_I2S_Init+0x134>
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	2bff      	cmp	r3, #255	; 0xff
 800390a:	d907      	bls.n	800391c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	f043 0210 	orr.w	r2, r3, #16
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e08f      	b.n	8003a3c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	ea42 0103 	orr.w	r1, r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	430a      	orrs	r2, r1
 800392e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800393a:	f023 030f 	bic.w	r3, r3, #15
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6851      	ldr	r1, [r2, #4]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6892      	ldr	r2, [r2, #8]
 8003946:	4311      	orrs	r1, r2
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	68d2      	ldr	r2, [r2, #12]
 800394c:	4311      	orrs	r1, r2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6992      	ldr	r2, [r2, #24]
 8003952:	430a      	orrs	r2, r1
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800395e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d161      	bne.n	8003a2c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a38      	ldr	r2, [pc, #224]	; (8003a4c <HAL_I2S_Init+0x274>)
 800396c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a37      	ldr	r2, [pc, #220]	; (8003a50 <HAL_I2S_Init+0x278>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d101      	bne.n	800397c <HAL_I2S_Init+0x1a4>
 8003978:	4b36      	ldr	r3, [pc, #216]	; (8003a54 <HAL_I2S_Init+0x27c>)
 800397a:	e001      	b.n	8003980 <HAL_I2S_Init+0x1a8>
 800397c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6812      	ldr	r2, [r2, #0]
 8003986:	4932      	ldr	r1, [pc, #200]	; (8003a50 <HAL_I2S_Init+0x278>)
 8003988:	428a      	cmp	r2, r1
 800398a:	d101      	bne.n	8003990 <HAL_I2S_Init+0x1b8>
 800398c:	4a31      	ldr	r2, [pc, #196]	; (8003a54 <HAL_I2S_Init+0x27c>)
 800398e:	e001      	b.n	8003994 <HAL_I2S_Init+0x1bc>
 8003990:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003994:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003998:	f023 030f 	bic.w	r3, r3, #15
 800399c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a2b      	ldr	r2, [pc, #172]	; (8003a50 <HAL_I2S_Init+0x278>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d101      	bne.n	80039ac <HAL_I2S_Init+0x1d4>
 80039a8:	4b2a      	ldr	r3, [pc, #168]	; (8003a54 <HAL_I2S_Init+0x27c>)
 80039aa:	e001      	b.n	80039b0 <HAL_I2S_Init+0x1d8>
 80039ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039b0:	2202      	movs	r2, #2
 80039b2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a25      	ldr	r2, [pc, #148]	; (8003a50 <HAL_I2S_Init+0x278>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d101      	bne.n	80039c2 <HAL_I2S_Init+0x1ea>
 80039be:	4b25      	ldr	r3, [pc, #148]	; (8003a54 <HAL_I2S_Init+0x27c>)
 80039c0:	e001      	b.n	80039c6 <HAL_I2S_Init+0x1ee>
 80039c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d2:	d003      	beq.n	80039dc <HAL_I2S_Init+0x204>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d103      	bne.n	80039e4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80039dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	e001      	b.n	80039e8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80039e4:	2300      	movs	r3, #0
 80039e6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80039f2:	4313      	orrs	r3, r2
 80039f4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80039fc:	4313      	orrs	r3, r2
 80039fe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a06:	4313      	orrs	r3, r2
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	897b      	ldrh	r3, [r7, #10]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a14:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a0d      	ldr	r2, [pc, #52]	; (8003a50 <HAL_I2S_Init+0x278>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d101      	bne.n	8003a24 <HAL_I2S_Init+0x24c>
 8003a20:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <HAL_I2S_Init+0x27c>)
 8003a22:	e001      	b.n	8003a28 <HAL_I2S_Init+0x250>
 8003a24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a28:	897a      	ldrh	r2, [r7, #10]
 8003a2a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3720      	adds	r7, #32
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	08003b4f 	.word	0x08003b4f
 8003a48:	cccccccd 	.word	0xcccccccd
 8003a4c:	08003c65 	.word	0x08003c65
 8003a50:	40003800 	.word	0x40003800
 8003a54:	40003400 	.word	0x40003400

08003a58 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	881a      	ldrh	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	1c9a      	adds	r2, r3, #2
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10e      	bne.n	8003ae8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ad8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff ffb8 	bl	8003a58 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ae8:	bf00      	nop
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	b292      	uxth	r2, r2
 8003b04:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	1c9a      	adds	r2, r3, #2
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10e      	bne.n	8003b46 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b36:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff ff93 	bl	8003a6c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b086      	sub	sp, #24
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d13a      	bne.n	8003be0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d109      	bne.n	8003b88 <I2S_IRQHandler+0x3a>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7e:	2b40      	cmp	r3, #64	; 0x40
 8003b80:	d102      	bne.n	8003b88 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff ffb4 	bl	8003af0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d126      	bne.n	8003be0 <I2S_IRQHandler+0x92>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d11f      	bne.n	8003be0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	613b      	str	r3, [r7, #16]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	f043 0202 	orr.w	r2, r3, #2
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7ff ff50 	bl	8003a80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d136      	bne.n	8003c5a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d109      	bne.n	8003c0a <I2S_IRQHandler+0xbc>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c00:	2b80      	cmp	r3, #128	; 0x80
 8003c02:	d102      	bne.n	8003c0a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff ff45 	bl	8003a94 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d122      	bne.n	8003c5a <I2S_IRQHandler+0x10c>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	d11b      	bne.n	8003c5a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c30:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4c:	f043 0204 	orr.w	r2, r3, #4
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff ff13 	bl	8003a80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c5a:	bf00      	nop
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a92      	ldr	r2, [pc, #584]	; (8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d101      	bne.n	8003c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003c7e:	4b92      	ldr	r3, [pc, #584]	; (8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c80:	e001      	b.n	8003c86 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003c82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a8b      	ldr	r2, [pc, #556]	; (8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d101      	bne.n	8003ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003c9c:	4b8a      	ldr	r3, [pc, #552]	; (8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c9e:	e001      	b.n	8003ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ca0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb0:	d004      	beq.n	8003cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f040 8099 	bne.w	8003dee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d107      	bne.n	8003cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f925 	bl	8003f20 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d107      	bne.n	8003cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f9c8 	bl	8004080 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf6:	2b40      	cmp	r3, #64	; 0x40
 8003cf8:	d13a      	bne.n	8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d035      	beq.n	8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a6e      	ldr	r2, [pc, #440]	; (8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d101      	bne.n	8003d12 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003d0e:	4b6e      	ldr	r3, [pc, #440]	; (8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d10:	e001      	b.n	8003d16 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003d12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4969      	ldr	r1, [pc, #420]	; (8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d1e:	428b      	cmp	r3, r1
 8003d20:	d101      	bne.n	8003d26 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003d22:	4b69      	ldr	r3, [pc, #420]	; (8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d24:	e001      	b.n	8003d2a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003d26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d2e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d3e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	f043 0202 	orr.w	r2, r3, #2
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff fe88 	bl	8003a80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	f040 80c3 	bne.w	8003f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 80bd 	beq.w	8003f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d96:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a49      	ldr	r2, [pc, #292]	; (8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d101      	bne.n	8003da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003da2:	4b49      	ldr	r3, [pc, #292]	; (8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003da4:	e001      	b.n	8003daa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003da6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4944      	ldr	r1, [pc, #272]	; (8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003db2:	428b      	cmp	r3, r1
 8003db4:	d101      	bne.n	8003dba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003db6:	4b44      	ldr	r3, [pc, #272]	; (8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003db8:	e001      	b.n	8003dbe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003dba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dc2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	f043 0204 	orr.w	r2, r3, #4
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff fe4a 	bl	8003a80 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003dec:	e089      	b.n	8003f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d107      	bne.n	8003e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f8be 	bl	8003f84 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d107      	bne.n	8003e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f8fd 	bl	800401c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e28:	2b40      	cmp	r3, #64	; 0x40
 8003e2a:	d12f      	bne.n	8003e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f003 0320 	and.w	r3, r3, #32
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d02a      	beq.n	8003e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e44:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a1e      	ldr	r2, [pc, #120]	; (8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d101      	bne.n	8003e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003e50:	4b1d      	ldr	r3, [pc, #116]	; (8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e52:	e001      	b.n	8003e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003e54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4919      	ldr	r1, [pc, #100]	; (8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e60:	428b      	cmp	r3, r1
 8003e62:	d101      	bne.n	8003e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003e64:	4b18      	ldr	r3, [pc, #96]	; (8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e66:	e001      	b.n	8003e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003e68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e70:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	f043 0202 	orr.w	r2, r3, #2
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7ff fdfa 	bl	8003a80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d136      	bne.n	8003f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d031      	beq.n	8003f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a07      	ldr	r2, [pc, #28]	; (8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d101      	bne.n	8003eae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003eaa:	4b07      	ldr	r3, [pc, #28]	; (8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eac:	e001      	b.n	8003eb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003eae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4902      	ldr	r1, [pc, #8]	; (8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eba:	428b      	cmp	r3, r1
 8003ebc:	d106      	bne.n	8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003ebe:	4b02      	ldr	r3, [pc, #8]	; (8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ec0:	e006      	b.n	8003ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003ec2:	bf00      	nop
 8003ec4:	40003800 	.word	0x40003800
 8003ec8:	40003400 	.word	0x40003400
 8003ecc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ed0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ed4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ee4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef2:	f043 0204 	orr.w	r2, r3, #4
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff fdc0 	bl	8003a80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f00:	e000      	b.n	8003f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f02:	bf00      	nop
}
 8003f04:	bf00      	nop
 8003f06:	3720      	adds	r7, #32
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	1c99      	adds	r1, r3, #2
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6251      	str	r1, [r2, #36]	; 0x24
 8003f32:	881a      	ldrh	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d113      	bne.n	8003f7a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f60:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d106      	bne.n	8003f7a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff ffc9 	bl	8003f0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	1c99      	adds	r1, r3, #2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6251      	str	r1, [r2, #36]	; 0x24
 8003f96:	8819      	ldrh	r1, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a1d      	ldr	r2, [pc, #116]	; (8004014 <I2SEx_TxISR_I2SExt+0x90>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d101      	bne.n	8003fa6 <I2SEx_TxISR_I2SExt+0x22>
 8003fa2:	4b1d      	ldr	r3, [pc, #116]	; (8004018 <I2SEx_TxISR_I2SExt+0x94>)
 8003fa4:	e001      	b.n	8003faa <I2SEx_TxISR_I2SExt+0x26>
 8003fa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003faa:	460a      	mov	r2, r1
 8003fac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d121      	bne.n	800400a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a12      	ldr	r2, [pc, #72]	; (8004014 <I2SEx_TxISR_I2SExt+0x90>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d101      	bne.n	8003fd4 <I2SEx_TxISR_I2SExt+0x50>
 8003fd0:	4b11      	ldr	r3, [pc, #68]	; (8004018 <I2SEx_TxISR_I2SExt+0x94>)
 8003fd2:	e001      	b.n	8003fd8 <I2SEx_TxISR_I2SExt+0x54>
 8003fd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	490d      	ldr	r1, [pc, #52]	; (8004014 <I2SEx_TxISR_I2SExt+0x90>)
 8003fe0:	428b      	cmp	r3, r1
 8003fe2:	d101      	bne.n	8003fe8 <I2SEx_TxISR_I2SExt+0x64>
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <I2SEx_TxISR_I2SExt+0x94>)
 8003fe6:	e001      	b.n	8003fec <I2SEx_TxISR_I2SExt+0x68>
 8003fe8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ff0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d106      	bne.n	800400a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff ff81 	bl	8003f0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800400a:	bf00      	nop
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40003800 	.word	0x40003800
 8004018:	40003400 	.word	0x40003400

0800401c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68d8      	ldr	r0, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402e:	1c99      	adds	r1, r3, #2
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004034:	b282      	uxth	r2, r0
 8004036:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800403c:	b29b      	uxth	r3, r3
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d113      	bne.n	8004078 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800405e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d106      	bne.n	8004078 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff ff4a 	bl	8003f0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004078:	bf00      	nop
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a20      	ldr	r2, [pc, #128]	; (8004110 <I2SEx_RxISR_I2SExt+0x90>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d101      	bne.n	8004096 <I2SEx_RxISR_I2SExt+0x16>
 8004092:	4b20      	ldr	r3, [pc, #128]	; (8004114 <I2SEx_RxISR_I2SExt+0x94>)
 8004094:	e001      	b.n	800409a <I2SEx_RxISR_I2SExt+0x1a>
 8004096:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800409a:	68d8      	ldr	r0, [r3, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	1c99      	adds	r1, r3, #2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80040a6:	b282      	uxth	r2, r0
 80040a8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d121      	bne.n	8004106 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a12      	ldr	r2, [pc, #72]	; (8004110 <I2SEx_RxISR_I2SExt+0x90>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d101      	bne.n	80040d0 <I2SEx_RxISR_I2SExt+0x50>
 80040cc:	4b11      	ldr	r3, [pc, #68]	; (8004114 <I2SEx_RxISR_I2SExt+0x94>)
 80040ce:	e001      	b.n	80040d4 <I2SEx_RxISR_I2SExt+0x54>
 80040d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	490d      	ldr	r1, [pc, #52]	; (8004110 <I2SEx_RxISR_I2SExt+0x90>)
 80040dc:	428b      	cmp	r3, r1
 80040de:	d101      	bne.n	80040e4 <I2SEx_RxISR_I2SExt+0x64>
 80040e0:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <I2SEx_RxISR_I2SExt+0x94>)
 80040e2:	e001      	b.n	80040e8 <I2SEx_RxISR_I2SExt+0x68>
 80040e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040ec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d106      	bne.n	8004106 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff ff03 	bl	8003f0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40003800 	.word	0x40003800
 8004114:	40003400 	.word	0x40003400

08004118 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e267      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d075      	beq.n	8004222 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004136:	4b88      	ldr	r3, [pc, #544]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	2b04      	cmp	r3, #4
 8004140:	d00c      	beq.n	800415c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004142:	4b85      	ldr	r3, [pc, #532]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800414a:	2b08      	cmp	r3, #8
 800414c:	d112      	bne.n	8004174 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800414e:	4b82      	ldr	r3, [pc, #520]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800415a:	d10b      	bne.n	8004174 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800415c:	4b7e      	ldr	r3, [pc, #504]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d05b      	beq.n	8004220 <HAL_RCC_OscConfig+0x108>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d157      	bne.n	8004220 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e242      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800417c:	d106      	bne.n	800418c <HAL_RCC_OscConfig+0x74>
 800417e:	4b76      	ldr	r3, [pc, #472]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a75      	ldr	r2, [pc, #468]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	e01d      	b.n	80041c8 <HAL_RCC_OscConfig+0xb0>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004194:	d10c      	bne.n	80041b0 <HAL_RCC_OscConfig+0x98>
 8004196:	4b70      	ldr	r3, [pc, #448]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a6f      	ldr	r2, [pc, #444]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 800419c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	4b6d      	ldr	r3, [pc, #436]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a6c      	ldr	r2, [pc, #432]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80041a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	e00b      	b.n	80041c8 <HAL_RCC_OscConfig+0xb0>
 80041b0:	4b69      	ldr	r3, [pc, #420]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a68      	ldr	r2, [pc, #416]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80041b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	4b66      	ldr	r3, [pc, #408]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a65      	ldr	r2, [pc, #404]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80041c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d013      	beq.n	80041f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d0:	f7fd fa9c 	bl	800170c <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041d8:	f7fd fa98 	bl	800170c <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b64      	cmp	r3, #100	; 0x64
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e207      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ea:	4b5b      	ldr	r3, [pc, #364]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0xc0>
 80041f6:	e014      	b.n	8004222 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f8:	f7fd fa88 	bl	800170c <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004200:	f7fd fa84 	bl	800170c <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	; 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e1f3      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004212:	4b51      	ldr	r3, [pc, #324]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0xe8>
 800421e:	e000      	b.n	8004222 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d063      	beq.n	80042f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800422e:	4b4a      	ldr	r3, [pc, #296]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 030c 	and.w	r3, r3, #12
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00b      	beq.n	8004252 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800423a:	4b47      	ldr	r3, [pc, #284]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004242:	2b08      	cmp	r3, #8
 8004244:	d11c      	bne.n	8004280 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004246:	4b44      	ldr	r3, [pc, #272]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d116      	bne.n	8004280 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004252:	4b41      	ldr	r3, [pc, #260]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_RCC_OscConfig+0x152>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d001      	beq.n	800426a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e1c7      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426a:	4b3b      	ldr	r3, [pc, #236]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	4937      	ldr	r1, [pc, #220]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 800427a:	4313      	orrs	r3, r2
 800427c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800427e:	e03a      	b.n	80042f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d020      	beq.n	80042ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004288:	4b34      	ldr	r3, [pc, #208]	; (800435c <HAL_RCC_OscConfig+0x244>)
 800428a:	2201      	movs	r2, #1
 800428c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428e:	f7fd fa3d 	bl	800170c <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004296:	f7fd fa39 	bl	800170c <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e1a8      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a8:	4b2b      	ldr	r3, [pc, #172]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0f0      	beq.n	8004296 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b4:	4b28      	ldr	r3, [pc, #160]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	4925      	ldr	r1, [pc, #148]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	600b      	str	r3, [r1, #0]
 80042c8:	e015      	b.n	80042f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ca:	4b24      	ldr	r3, [pc, #144]	; (800435c <HAL_RCC_OscConfig+0x244>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d0:	f7fd fa1c 	bl	800170c <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042d8:	f7fd fa18 	bl	800170c <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e187      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ea:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d036      	beq.n	8004370 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d016      	beq.n	8004338 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800430a:	4b15      	ldr	r3, [pc, #84]	; (8004360 <HAL_RCC_OscConfig+0x248>)
 800430c:	2201      	movs	r2, #1
 800430e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004310:	f7fd f9fc 	bl	800170c <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004318:	f7fd f9f8 	bl	800170c <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e167      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432a:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 800432c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0f0      	beq.n	8004318 <HAL_RCC_OscConfig+0x200>
 8004336:	e01b      	b.n	8004370 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004338:	4b09      	ldr	r3, [pc, #36]	; (8004360 <HAL_RCC_OscConfig+0x248>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800433e:	f7fd f9e5 	bl	800170c <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004344:	e00e      	b.n	8004364 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004346:	f7fd f9e1 	bl	800170c <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d907      	bls.n	8004364 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e150      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
 8004358:	40023800 	.word	0x40023800
 800435c:	42470000 	.word	0x42470000
 8004360:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004364:	4b88      	ldr	r3, [pc, #544]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1ea      	bne.n	8004346 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 8097 	beq.w	80044ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800437e:	2300      	movs	r3, #0
 8004380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004382:	4b81      	ldr	r3, [pc, #516]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10f      	bne.n	80043ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800438e:	2300      	movs	r3, #0
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	4b7d      	ldr	r3, [pc, #500]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	4a7c      	ldr	r2, [pc, #496]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800439c:	6413      	str	r3, [r2, #64]	; 0x40
 800439e:	4b7a      	ldr	r3, [pc, #488]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a6:	60bb      	str	r3, [r7, #8]
 80043a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043aa:	2301      	movs	r3, #1
 80043ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ae:	4b77      	ldr	r3, [pc, #476]	; (800458c <HAL_RCC_OscConfig+0x474>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d118      	bne.n	80043ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ba:	4b74      	ldr	r3, [pc, #464]	; (800458c <HAL_RCC_OscConfig+0x474>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a73      	ldr	r2, [pc, #460]	; (800458c <HAL_RCC_OscConfig+0x474>)
 80043c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043c6:	f7fd f9a1 	bl	800170c <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ce:	f7fd f99d 	bl	800170c <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e10c      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e0:	4b6a      	ldr	r3, [pc, #424]	; (800458c <HAL_RCC_OscConfig+0x474>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d106      	bne.n	8004402 <HAL_RCC_OscConfig+0x2ea>
 80043f4:	4b64      	ldr	r3, [pc, #400]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 80043f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f8:	4a63      	ldr	r2, [pc, #396]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004400:	e01c      	b.n	800443c <HAL_RCC_OscConfig+0x324>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b05      	cmp	r3, #5
 8004408:	d10c      	bne.n	8004424 <HAL_RCC_OscConfig+0x30c>
 800440a:	4b5f      	ldr	r3, [pc, #380]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	4a5e      	ldr	r2, [pc, #376]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004410:	f043 0304 	orr.w	r3, r3, #4
 8004414:	6713      	str	r3, [r2, #112]	; 0x70
 8004416:	4b5c      	ldr	r3, [pc, #368]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	4a5b      	ldr	r2, [pc, #364]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	6713      	str	r3, [r2, #112]	; 0x70
 8004422:	e00b      	b.n	800443c <HAL_RCC_OscConfig+0x324>
 8004424:	4b58      	ldr	r3, [pc, #352]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004428:	4a57      	ldr	r2, [pc, #348]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 800442a:	f023 0301 	bic.w	r3, r3, #1
 800442e:	6713      	str	r3, [r2, #112]	; 0x70
 8004430:	4b55      	ldr	r3, [pc, #340]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004434:	4a54      	ldr	r2, [pc, #336]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004436:	f023 0304 	bic.w	r3, r3, #4
 800443a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d015      	beq.n	8004470 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004444:	f7fd f962 	bl	800170c <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444a:	e00a      	b.n	8004462 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800444c:	f7fd f95e 	bl	800170c <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f241 3288 	movw	r2, #5000	; 0x1388
 800445a:	4293      	cmp	r3, r2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e0cb      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004462:	4b49      	ldr	r3, [pc, #292]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0ee      	beq.n	800444c <HAL_RCC_OscConfig+0x334>
 800446e:	e014      	b.n	800449a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004470:	f7fd f94c 	bl	800170c <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004476:	e00a      	b.n	800448e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004478:	f7fd f948 	bl	800170c <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	f241 3288 	movw	r2, #5000	; 0x1388
 8004486:	4293      	cmp	r3, r2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e0b5      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800448e:	4b3e      	ldr	r3, [pc, #248]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1ee      	bne.n	8004478 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800449a:	7dfb      	ldrb	r3, [r7, #23]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d105      	bne.n	80044ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a0:	4b39      	ldr	r3, [pc, #228]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	4a38      	ldr	r2, [pc, #224]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 80044a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80a1 	beq.w	80045f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044b6:	4b34      	ldr	r3, [pc, #208]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d05c      	beq.n	800457c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d141      	bne.n	800454e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ca:	4b31      	ldr	r3, [pc, #196]	; (8004590 <HAL_RCC_OscConfig+0x478>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d0:	f7fd f91c 	bl	800170c <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d8:	f7fd f918 	bl	800170c <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e087      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ea:	4b27      	ldr	r3, [pc, #156]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69da      	ldr	r2, [r3, #28]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	019b      	lsls	r3, r3, #6
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	085b      	lsrs	r3, r3, #1
 800450e:	3b01      	subs	r3, #1
 8004510:	041b      	lsls	r3, r3, #16
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	061b      	lsls	r3, r3, #24
 800451a:	491b      	ldr	r1, [pc, #108]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 800451c:	4313      	orrs	r3, r2
 800451e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004520:	4b1b      	ldr	r3, [pc, #108]	; (8004590 <HAL_RCC_OscConfig+0x478>)
 8004522:	2201      	movs	r2, #1
 8004524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004526:	f7fd f8f1 	bl	800170c <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800452e:	f7fd f8ed 	bl	800170c <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e05c      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004540:	4b11      	ldr	r3, [pc, #68]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0f0      	beq.n	800452e <HAL_RCC_OscConfig+0x416>
 800454c:	e054      	b.n	80045f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800454e:	4b10      	ldr	r3, [pc, #64]	; (8004590 <HAL_RCC_OscConfig+0x478>)
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004554:	f7fd f8da 	bl	800170c <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800455c:	f7fd f8d6 	bl	800170c <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e045      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800456e:	4b06      	ldr	r3, [pc, #24]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0x444>
 800457a:	e03d      	b.n	80045f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d107      	bne.n	8004594 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e038      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
 8004588:	40023800 	.word	0x40023800
 800458c:	40007000 	.word	0x40007000
 8004590:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004594:	4b1b      	ldr	r3, [pc, #108]	; (8004604 <HAL_RCC_OscConfig+0x4ec>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d028      	beq.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d121      	bne.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d11a      	bne.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045c4:	4013      	ands	r3, r2
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d111      	bne.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	085b      	lsrs	r3, r3, #1
 80045dc:	3b01      	subs	r3, #1
 80045de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d107      	bne.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e000      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40023800 	.word	0x40023800

08004608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0cc      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800461c:	4b68      	ldr	r3, [pc, #416]	; (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d90c      	bls.n	8004644 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462a:	4b65      	ldr	r3, [pc, #404]	; (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004632:	4b63      	ldr	r3, [pc, #396]	; (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d001      	beq.n	8004644 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0b8      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d020      	beq.n	8004692 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800465c:	4b59      	ldr	r3, [pc, #356]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	4a58      	ldr	r2, [pc, #352]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004666:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004674:	4b53      	ldr	r3, [pc, #332]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	4a52      	ldr	r2, [pc, #328]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800467e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004680:	4b50      	ldr	r3, [pc, #320]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	494d      	ldr	r1, [pc, #308]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	4313      	orrs	r3, r2
 8004690:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d044      	beq.n	8004728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d107      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a6:	4b47      	ldr	r3, [pc, #284]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d119      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e07f      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d003      	beq.n	80046c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d107      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c6:	4b3f      	ldr	r3, [pc, #252]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e06f      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d6:	4b3b      	ldr	r3, [pc, #236]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e067      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046e6:	4b37      	ldr	r3, [pc, #220]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f023 0203 	bic.w	r2, r3, #3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4934      	ldr	r1, [pc, #208]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046f8:	f7fd f808 	bl	800170c <HAL_GetTick>
 80046fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fe:	e00a      	b.n	8004716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004700:	f7fd f804 	bl	800170c <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	f241 3288 	movw	r2, #5000	; 0x1388
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e04f      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004716:	4b2b      	ldr	r3, [pc, #172]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 020c 	and.w	r2, r3, #12
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	429a      	cmp	r2, r3
 8004726:	d1eb      	bne.n	8004700 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004728:	4b25      	ldr	r3, [pc, #148]	; (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d20c      	bcs.n	8004750 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004736:	4b22      	ldr	r3, [pc, #136]	; (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800473e:	4b20      	ldr	r3, [pc, #128]	; (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d001      	beq.n	8004750 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e032      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800475c:	4b19      	ldr	r3, [pc, #100]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	4916      	ldr	r1, [pc, #88]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	4313      	orrs	r3, r2
 800476c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800477a:	4b12      	ldr	r3, [pc, #72]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	490e      	ldr	r1, [pc, #56]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	4313      	orrs	r3, r2
 800478c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800478e:	f000 f821 	bl	80047d4 <HAL_RCC_GetSysClockFreq>
 8004792:	4602      	mov	r2, r0
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	490a      	ldr	r1, [pc, #40]	; (80047c8 <HAL_RCC_ClockConfig+0x1c0>)
 80047a0:	5ccb      	ldrb	r3, [r1, r3]
 80047a2:	fa22 f303 	lsr.w	r3, r2, r3
 80047a6:	4a09      	ldr	r2, [pc, #36]	; (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 80047a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047aa:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fc ff68 	bl	8001684 <HAL_InitTick>

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40023c00 	.word	0x40023c00
 80047c4:	40023800 	.word	0x40023800
 80047c8:	08007604 	.word	0x08007604
 80047cc:	20000000 	.word	0x20000000
 80047d0:	20000004 	.word	0x20000004

080047d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d8:	b094      	sub	sp, #80	; 0x50
 80047da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	647b      	str	r3, [r7, #68]	; 0x44
 80047e0:	2300      	movs	r3, #0
 80047e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e4:	2300      	movs	r3, #0
 80047e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047ec:	4b79      	ldr	r3, [pc, #484]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 030c 	and.w	r3, r3, #12
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d00d      	beq.n	8004814 <HAL_RCC_GetSysClockFreq+0x40>
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	f200 80e1 	bhi.w	80049c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <HAL_RCC_GetSysClockFreq+0x34>
 8004802:	2b04      	cmp	r3, #4
 8004804:	d003      	beq.n	800480e <HAL_RCC_GetSysClockFreq+0x3a>
 8004806:	e0db      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004808:	4b73      	ldr	r3, [pc, #460]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800480a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800480c:	e0db      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800480e:	4b73      	ldr	r3, [pc, #460]	; (80049dc <HAL_RCC_GetSysClockFreq+0x208>)
 8004810:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004812:	e0d8      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004814:	4b6f      	ldr	r3, [pc, #444]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800481c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800481e:	4b6d      	ldr	r3, [pc, #436]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d063      	beq.n	80048f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800482a:	4b6a      	ldr	r3, [pc, #424]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	099b      	lsrs	r3, r3, #6
 8004830:	2200      	movs	r2, #0
 8004832:	63bb      	str	r3, [r7, #56]	; 0x38
 8004834:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800483c:	633b      	str	r3, [r7, #48]	; 0x30
 800483e:	2300      	movs	r3, #0
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
 8004842:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004846:	4622      	mov	r2, r4
 8004848:	462b      	mov	r3, r5
 800484a:	f04f 0000 	mov.w	r0, #0
 800484e:	f04f 0100 	mov.w	r1, #0
 8004852:	0159      	lsls	r1, r3, #5
 8004854:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004858:	0150      	lsls	r0, r2, #5
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4621      	mov	r1, r4
 8004860:	1a51      	subs	r1, r2, r1
 8004862:	6139      	str	r1, [r7, #16]
 8004864:	4629      	mov	r1, r5
 8004866:	eb63 0301 	sbc.w	r3, r3, r1
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004878:	4659      	mov	r1, fp
 800487a:	018b      	lsls	r3, r1, #6
 800487c:	4651      	mov	r1, sl
 800487e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004882:	4651      	mov	r1, sl
 8004884:	018a      	lsls	r2, r1, #6
 8004886:	4651      	mov	r1, sl
 8004888:	ebb2 0801 	subs.w	r8, r2, r1
 800488c:	4659      	mov	r1, fp
 800488e:	eb63 0901 	sbc.w	r9, r3, r1
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800489e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048a6:	4690      	mov	r8, r2
 80048a8:	4699      	mov	r9, r3
 80048aa:	4623      	mov	r3, r4
 80048ac:	eb18 0303 	adds.w	r3, r8, r3
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	462b      	mov	r3, r5
 80048b4:	eb49 0303 	adc.w	r3, r9, r3
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048c6:	4629      	mov	r1, r5
 80048c8:	024b      	lsls	r3, r1, #9
 80048ca:	4621      	mov	r1, r4
 80048cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048d0:	4621      	mov	r1, r4
 80048d2:	024a      	lsls	r2, r1, #9
 80048d4:	4610      	mov	r0, r2
 80048d6:	4619      	mov	r1, r3
 80048d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048da:	2200      	movs	r2, #0
 80048dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80048de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048e4:	f7fb fc70 	bl	80001c8 <__aeabi_uldivmod>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4613      	mov	r3, r2
 80048ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048f0:	e058      	b.n	80049a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048f2:	4b38      	ldr	r3, [pc, #224]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	099b      	lsrs	r3, r3, #6
 80048f8:	2200      	movs	r2, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	4611      	mov	r1, r2
 80048fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004902:	623b      	str	r3, [r7, #32]
 8004904:	2300      	movs	r3, #0
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
 8004908:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800490c:	4642      	mov	r2, r8
 800490e:	464b      	mov	r3, r9
 8004910:	f04f 0000 	mov.w	r0, #0
 8004914:	f04f 0100 	mov.w	r1, #0
 8004918:	0159      	lsls	r1, r3, #5
 800491a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800491e:	0150      	lsls	r0, r2, #5
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4641      	mov	r1, r8
 8004926:	ebb2 0a01 	subs.w	sl, r2, r1
 800492a:	4649      	mov	r1, r9
 800492c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800493c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004940:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004944:	ebb2 040a 	subs.w	r4, r2, sl
 8004948:	eb63 050b 	sbc.w	r5, r3, fp
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	00eb      	lsls	r3, r5, #3
 8004956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800495a:	00e2      	lsls	r2, r4, #3
 800495c:	4614      	mov	r4, r2
 800495e:	461d      	mov	r5, r3
 8004960:	4643      	mov	r3, r8
 8004962:	18e3      	adds	r3, r4, r3
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	464b      	mov	r3, r9
 8004968:	eb45 0303 	adc.w	r3, r5, r3
 800496c:	607b      	str	r3, [r7, #4]
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	e9d7 4500 	ldrd	r4, r5, [r7]
 800497a:	4629      	mov	r1, r5
 800497c:	028b      	lsls	r3, r1, #10
 800497e:	4621      	mov	r1, r4
 8004980:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004984:	4621      	mov	r1, r4
 8004986:	028a      	lsls	r2, r1, #10
 8004988:	4610      	mov	r0, r2
 800498a:	4619      	mov	r1, r3
 800498c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800498e:	2200      	movs	r2, #0
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	61fa      	str	r2, [r7, #28]
 8004994:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004998:	f7fb fc16 	bl	80001c8 <__aeabi_uldivmod>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4613      	mov	r3, r2
 80049a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	0c1b      	lsrs	r3, r3, #16
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	3301      	adds	r3, #1
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80049b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049be:	e002      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80049c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3750      	adds	r7, #80	; 0x50
 80049cc:	46bd      	mov	sp, r7
 80049ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049d2:	bf00      	nop
 80049d4:	40023800 	.word	0x40023800
 80049d8:	00f42400 	.word	0x00f42400
 80049dc:	007a1200 	.word	0x007a1200

080049e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049e4:	4b03      	ldr	r3, [pc, #12]	; (80049f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049e6:	681b      	ldr	r3, [r3, #0]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	20000000 	.word	0x20000000

080049f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049fc:	f7ff fff0 	bl	80049e0 <HAL_RCC_GetHCLKFreq>
 8004a00:	4602      	mov	r2, r0
 8004a02:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	0a9b      	lsrs	r3, r3, #10
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	4903      	ldr	r1, [pc, #12]	; (8004a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a0e:	5ccb      	ldrb	r3, [r1, r3]
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	08007614 	.word	0x08007614

08004a20 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d105      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d035      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a48:	4b62      	ldr	r3, [pc, #392]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a4e:	f7fc fe5d 	bl	800170c <HAL_GetTick>
 8004a52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a54:	e008      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a56:	f7fc fe59 	bl	800170c <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e0b0      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a68:	4b5b      	ldr	r3, [pc, #364]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1f0      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	019a      	lsls	r2, r3, #6
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	071b      	lsls	r3, r3, #28
 8004a80:	4955      	ldr	r1, [pc, #340]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a88:	4b52      	ldr	r3, [pc, #328]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a8e:	f7fc fe3d 	bl	800170c <HAL_GetTick>
 8004a92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a96:	f7fc fe39 	bl	800170c <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e090      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aa8:	4b4b      	ldr	r3, [pc, #300]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0f0      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8083 	beq.w	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	4b44      	ldr	r3, [pc, #272]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	4a43      	ldr	r2, [pc, #268]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ad2:	4b41      	ldr	r3, [pc, #260]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ade:	4b3f      	ldr	r3, [pc, #252]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a3e      	ldr	r2, [pc, #248]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004aea:	f7fc fe0f 	bl	800170c <HAL_GetTick>
 8004aee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004af0:	e008      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004af2:	f7fc fe0b 	bl	800170c <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e062      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b04:	4b35      	ldr	r3, [pc, #212]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b10:	4b31      	ldr	r3, [pc, #196]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b18:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d02f      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d028      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b2e:	4b2a      	ldr	r3, [pc, #168]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b36:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b38:	4b29      	ldr	r3, [pc, #164]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b3e:	4b28      	ldr	r3, [pc, #160]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b44:	4a24      	ldr	r2, [pc, #144]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b4a:	4b23      	ldr	r3, [pc, #140]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d114      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b56:	f7fc fdd9 	bl	800170c <HAL_GetTick>
 8004b5a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b5c:	e00a      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b5e:	f7fc fdd5 	bl	800170c <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e02a      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b74:	4b18      	ldr	r3, [pc, #96]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0ee      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b8c:	d10d      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b8e:	4b12      	ldr	r3, [pc, #72]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba2:	490d      	ldr	r1, [pc, #52]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	608b      	str	r3, [r1, #8]
 8004ba8:	e005      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004baa:	4b0b      	ldr	r3, [pc, #44]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	4a0a      	ldr	r2, [pc, #40]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bb4:	6093      	str	r3, [r2, #8]
 8004bb6:	4b08      	ldr	r3, [pc, #32]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc2:	4905      	ldr	r1, [pc, #20]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	42470068 	.word	0x42470068
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	40007000 	.word	0x40007000
 8004be0:	42470e40 	.word	0x42470e40

08004be4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d13e      	bne.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c02:	4b23      	ldr	r3, [pc, #140]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d12f      	bne.n	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c18:	4b1e      	ldr	r3, [pc, #120]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c1a:	617b      	str	r3, [r7, #20]
          break;
 8004c1c:	e02f      	b.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c1e:	4b1c      	ldr	r3, [pc, #112]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c2a:	d108      	bne.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c2c:	4b18      	ldr	r3, [pc, #96]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c34:	4a18      	ldr	r2, [pc, #96]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	e007      	b.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c3e:	4b14      	ldr	r3, [pc, #80]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c46:	4a15      	ldr	r2, [pc, #84]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c4e:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c54:	099b      	lsrs	r3, r3, #6
 8004c56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	fb02 f303 	mul.w	r3, r2, r3
 8004c60:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c62:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c68:	0f1b      	lsrs	r3, r3, #28
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c74:	617b      	str	r3, [r7, #20]
          break;
 8004c76:	e002      	b.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	617b      	str	r3, [r7, #20]
          break;
 8004c7c:	bf00      	nop
        }
      }
      break;
 8004c7e:	bf00      	nop
    }
  }
  return frequency;
 8004c80:	697b      	ldr	r3, [r7, #20]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	371c      	adds	r7, #28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40023800 	.word	0x40023800
 8004c94:	00bb8000 	.word	0x00bb8000
 8004c98:	007a1200 	.word	0x007a1200
 8004c9c:	00f42400 	.word	0x00f42400

08004ca0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e01c      	b.n	8004cec <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	795b      	ldrb	r3, [r3, #5]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d105      	bne.n	8004cc8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fc fbdc 	bl	8001480 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f042 0204 	orr.w	r2, r2, #4
 8004cdc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d105      	bne.n	8004d1a <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2210      	movs	r2, #16
 8004d12:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8004d14:	2301      	movs	r3, #1
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	e00b      	b.n	8004d32 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	2b40      	cmp	r3, #64	; 0x40
 8004d26:	d104      	bne.n	8004d32 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2208      	movs	r2, #8
 8004d2c:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d10b      	bne.n	8004d50 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2204      	movs	r2, #4
 8004d3c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f839 	bl	8004db6 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8004d4c:	605a      	str	r2, [r3, #4]

    return;
 8004d4e:	e024      	b.n	8004d9a <HAL_RNG_IRQHandler+0xa6>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d11d      	bne.n	8004d9a <HAL_RNG_IRQHandler+0xa6>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0208 	bic.w	r2, r2, #8
 8004d6c:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	795b      	ldrb	r3, [r3, #5]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d00b      	beq.n	8004d9a <HAL_RNG_IRQHandler+0xa6>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	4619      	mov	r1, r3
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f803 	bl	8004da0 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dca:	b084      	sub	sp, #16
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	f107 001c 	add.w	r0, r7, #28
 8004dd8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d122      	bne.n	8004e28 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004df6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d105      	bne.n	8004e1c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f9bf 	bl	80051a0 <USB_CoreReset>
 8004e22:	4603      	mov	r3, r0
 8004e24:	73fb      	strb	r3, [r7, #15]
 8004e26:	e01a      	b.n	8004e5e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f9b3 	bl	80051a0 <USB_CoreReset>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d106      	bne.n	8004e52 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	639a      	str	r2, [r3, #56]	; 0x38
 8004e50:	e005      	b.n	8004e5e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d10b      	bne.n	8004e7c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f043 0206 	orr.w	r2, r3, #6
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f043 0220 	orr.w	r2, r3, #32
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e88:	b004      	add	sp, #16
 8004e8a:	4770      	bx	lr

08004e8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f043 0201 	orr.w	r2, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f023 0201 	bic.w	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004eec:	78fb      	ldrb	r3, [r7, #3]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d115      	bne.n	8004f1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004efe:	2001      	movs	r0, #1
 8004f00:	f7fc fc10 	bl	8001724 <HAL_Delay>
      ms++;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3301      	adds	r3, #1
 8004f08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f939 	bl	8005182 <USB_GetMode>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d01e      	beq.n	8004f54 <USB_SetCurrentMode+0x84>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b31      	cmp	r3, #49	; 0x31
 8004f1a:	d9f0      	bls.n	8004efe <USB_SetCurrentMode+0x2e>
 8004f1c:	e01a      	b.n	8004f54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d115      	bne.n	8004f50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f30:	2001      	movs	r0, #1
 8004f32:	f7fc fbf7 	bl	8001724 <HAL_Delay>
      ms++;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f920 	bl	8005182 <USB_GetMode>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <USB_SetCurrentMode+0x84>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b31      	cmp	r3, #49	; 0x31
 8004f4c:	d9f0      	bls.n	8004f30 <USB_SetCurrentMode+0x60>
 8004f4e:	e001      	b.n	8004f54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e005      	b.n	8004f60 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b32      	cmp	r3, #50	; 0x32
 8004f58:	d101      	bne.n	8004f5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4a13      	ldr	r2, [pc, #76]	; (8004fcc <USB_FlushTxFifo+0x64>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d901      	bls.n	8004f88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e01b      	b.n	8004fc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	daf2      	bge.n	8004f76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	019b      	lsls	r3, r3, #6
 8004f98:	f043 0220 	orr.w	r2, r3, #32
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4a08      	ldr	r2, [pc, #32]	; (8004fcc <USB_FlushTxFifo+0x64>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e006      	b.n	8004fc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d0f0      	beq.n	8004fa0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	00030d40 	.word	0x00030d40

08004fd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4a11      	ldr	r2, [pc, #68]	; (800502c <USB_FlushRxFifo+0x5c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d901      	bls.n	8004fee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e018      	b.n	8005020 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	daf2      	bge.n	8004fdc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2210      	movs	r2, #16
 8004ffe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3301      	adds	r3, #1
 8005004:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4a08      	ldr	r2, [pc, #32]	; (800502c <USB_FlushRxFifo+0x5c>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d901      	bls.n	8005012 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e006      	b.n	8005020 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 0310 	and.w	r3, r3, #16
 800501a:	2b10      	cmp	r3, #16
 800501c:	d0f0      	beq.n	8005000 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	00030d40 	.word	0x00030d40

08005030 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005030:	b480      	push	{r7}
 8005032:	b089      	sub	sp, #36	; 0x24
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	4611      	mov	r1, r2
 800503c:	461a      	mov	r2, r3
 800503e:	460b      	mov	r3, r1
 8005040:	71fb      	strb	r3, [r7, #7]
 8005042:	4613      	mov	r3, r2
 8005044:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800504e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005052:	2b00      	cmp	r3, #0
 8005054:	d123      	bne.n	800509e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005056:	88bb      	ldrh	r3, [r7, #4]
 8005058:	3303      	adds	r3, #3
 800505a:	089b      	lsrs	r3, r3, #2
 800505c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800505e:	2300      	movs	r3, #0
 8005060:	61bb      	str	r3, [r7, #24]
 8005062:	e018      	b.n	8005096 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	031a      	lsls	r2, r3, #12
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	4413      	add	r3, r2
 800506c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005070:	461a      	mov	r2, r3
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	3301      	adds	r3, #1
 800507c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	3301      	adds	r3, #1
 8005082:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	3301      	adds	r3, #1
 8005088:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	3301      	adds	r3, #1
 800508e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	3301      	adds	r3, #1
 8005094:	61bb      	str	r3, [r7, #24]
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	429a      	cmp	r2, r3
 800509c:	d3e2      	bcc.n	8005064 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3724      	adds	r7, #36	; 0x24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b08b      	sub	sp, #44	; 0x2c
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	4613      	mov	r3, r2
 80050b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80050c2:	88fb      	ldrh	r3, [r7, #6]
 80050c4:	089b      	lsrs	r3, r3, #2
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80050ca:	88fb      	ldrh	r3, [r7, #6]
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80050d2:	2300      	movs	r3, #0
 80050d4:	623b      	str	r3, [r7, #32]
 80050d6:	e014      	b.n	8005102 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	3301      	adds	r3, #1
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	3301      	adds	r3, #1
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	3301      	adds	r3, #1
 80050f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	3301      	adds	r3, #1
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	3301      	adds	r3, #1
 8005100:	623b      	str	r3, [r7, #32]
 8005102:	6a3a      	ldr	r2, [r7, #32]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	429a      	cmp	r2, r3
 8005108:	d3e6      	bcc.n	80050d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800510a:	8bfb      	ldrh	r3, [r7, #30]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d01e      	beq.n	800514e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800511a:	461a      	mov	r2, r3
 800511c:	f107 0310 	add.w	r3, r7, #16
 8005120:	6812      	ldr	r2, [r2, #0]
 8005122:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	b2db      	uxtb	r3, r3
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	fa22 f303 	lsr.w	r3, r2, r3
 8005130:	b2da      	uxtb	r2, r3
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	701a      	strb	r2, [r3, #0]
      i++;
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	3301      	adds	r3, #1
 800513a:	623b      	str	r3, [r7, #32]
      pDest++;
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	3301      	adds	r3, #1
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005142:	8bfb      	ldrh	r3, [r7, #30]
 8005144:	3b01      	subs	r3, #1
 8005146:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005148:	8bfb      	ldrh	r3, [r7, #30]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1ea      	bne.n	8005124 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005150:	4618      	mov	r0, r3
 8005152:	372c      	adds	r7, #44	; 0x2c
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4013      	ands	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005174:	68fb      	ldr	r3, [r7, #12]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	f003 0301 	and.w	r3, r3, #1
}
 8005192:	4618      	mov	r0, r3
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
	...

080051a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	3301      	adds	r3, #1
 80051b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4a13      	ldr	r2, [pc, #76]	; (8005204 <USB_CoreReset+0x64>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d901      	bls.n	80051be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e01b      	b.n	80051f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	daf2      	bge.n	80051ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f043 0201 	orr.w	r2, r3, #1
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3301      	adds	r3, #1
 80051da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4a09      	ldr	r2, [pc, #36]	; (8005204 <USB_CoreReset+0x64>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d901      	bls.n	80051e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e006      	b.n	80051f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d0f0      	beq.n	80051d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	00030d40 	.word	0x00030d40

08005208 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005208:	b084      	sub	sp, #16
 800520a:	b580      	push	{r7, lr}
 800520c:	b086      	sub	sp, #24
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
 8005212:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005228:	461a      	mov	r2, r3
 800522a:	2300      	movs	r3, #0
 800522c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d018      	beq.n	8005290 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005260:	2b01      	cmp	r3, #1
 8005262:	d10a      	bne.n	800527a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005272:	f043 0304 	orr.w	r3, r3, #4
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	e014      	b.n	80052a4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005288:	f023 0304 	bic.w	r3, r3, #4
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	e009      	b.n	80052a4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800529e:	f023 0304 	bic.w	r3, r3, #4
 80052a2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052a4:	2110      	movs	r1, #16
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7ff fe5e 	bl	8004f68 <USB_FlushTxFifo>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7ff fe8a 	bl	8004fd0 <USB_FlushRxFifo>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80052c6:	2300      	movs	r3, #0
 80052c8:	613b      	str	r3, [r7, #16]
 80052ca:	e015      	b.n	80052f8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d8:	461a      	mov	r2, r3
 80052da:	f04f 33ff 	mov.w	r3, #4294967295
 80052de:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ec:	461a      	mov	r2, r3
 80052ee:	2300      	movs	r3, #0
 80052f0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	3301      	adds	r3, #1
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d3e5      	bcc.n	80052cc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f04f 32ff 	mov.w	r2, #4294967295
 800530c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00b      	beq.n	8005332 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005320:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a13      	ldr	r2, [pc, #76]	; (8005374 <USB_HostInit+0x16c>)
 8005326:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a13      	ldr	r2, [pc, #76]	; (8005378 <USB_HostInit+0x170>)
 800532c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005330:	e009      	b.n	8005346 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2280      	movs	r2, #128	; 0x80
 8005336:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a10      	ldr	r2, [pc, #64]	; (800537c <USB_HostInit+0x174>)
 800533c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a0f      	ldr	r2, [pc, #60]	; (8005380 <USB_HostInit+0x178>)
 8005342:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	2b00      	cmp	r3, #0
 800534a:	d105      	bne.n	8005358 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	f043 0210 	orr.w	r2, r3, #16
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699a      	ldr	r2, [r3, #24]
 800535c:	4b09      	ldr	r3, [pc, #36]	; (8005384 <USB_HostInit+0x17c>)
 800535e:	4313      	orrs	r3, r2
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005364:	7dfb      	ldrb	r3, [r7, #23]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005370:	b004      	add	sp, #16
 8005372:	4770      	bx	lr
 8005374:	01000200 	.word	0x01000200
 8005378:	00e00300 	.word	0x00e00300
 800537c:	00600080 	.word	0x00600080
 8005380:	004000e0 	.word	0x004000e0
 8005384:	a3200008 	.word	0xa3200008

08005388 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	460b      	mov	r3, r1
 8005392:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053a6:	f023 0303 	bic.w	r3, r3, #3
 80053aa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	78fb      	ldrb	r3, [r7, #3]
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	68f9      	ldr	r1, [r7, #12]
 80053bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80053c0:	4313      	orrs	r3, r2
 80053c2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d107      	bne.n	80053da <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053d0:	461a      	mov	r2, r3
 80053d2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80053d6:	6053      	str	r3, [r2, #4]
 80053d8:	e009      	b.n	80053ee <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80053da:	78fb      	ldrb	r3, [r7, #3]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d106      	bne.n	80053ee <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053e6:	461a      	mov	r2, r3
 80053e8:	f241 7370 	movw	r3, #6000	; 0x1770
 80053ec:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	460b      	mov	r3, r1
 8005406:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005420:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d109      	bne.n	8005440 <USB_DriveVbus+0x44>
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d106      	bne.n	8005440 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800543a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800543e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544a:	d109      	bne.n	8005460 <USB_DriveVbus+0x64>
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d106      	bne.n	8005460 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800545a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800545e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800546e:	b480      	push	{r7}
 8005470:	b085      	sub	sp, #20
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	0c5b      	lsrs	r3, r3, #17
 800548c:	f003 0303 	and.w	r3, r3, #3
}
 8005490:	4618      	mov	r0, r3
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	b29b      	uxth	r3, r3
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
	...

080054c0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b088      	sub	sp, #32
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	4608      	mov	r0, r1
 80054ca:	4611      	mov	r1, r2
 80054cc:	461a      	mov	r2, r3
 80054ce:	4603      	mov	r3, r0
 80054d0:	70fb      	strb	r3, [r7, #3]
 80054d2:	460b      	mov	r3, r1
 80054d4:	70bb      	strb	r3, [r7, #2]
 80054d6:	4613      	mov	r3, r2
 80054d8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80054e2:	78fb      	ldrb	r3, [r7, #3]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ee:	461a      	mov	r2, r3
 80054f0:	f04f 33ff 	mov.w	r3, #4294967295
 80054f4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80054f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80054fa:	2b03      	cmp	r3, #3
 80054fc:	d87e      	bhi.n	80055fc <USB_HC_Init+0x13c>
 80054fe:	a201      	add	r2, pc, #4	; (adr r2, 8005504 <USB_HC_Init+0x44>)
 8005500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005504:	08005515 	.word	0x08005515
 8005508:	080055bf 	.word	0x080055bf
 800550c:	08005515 	.word	0x08005515
 8005510:	08005581 	.word	0x08005581
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	4413      	add	r3, r2
 800551c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005520:	461a      	mov	r2, r3
 8005522:	f240 439d 	movw	r3, #1181	; 0x49d
 8005526:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005528:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800552c:	2b00      	cmp	r3, #0
 800552e:	da10      	bge.n	8005552 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	4413      	add	r3, r2
 8005538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	78fa      	ldrb	r2, [r7, #3]
 8005540:	0151      	lsls	r1, r2, #5
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	440a      	add	r2, r1
 8005546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800554a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800554e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005550:	e057      	b.n	8005602 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555a:	2b00      	cmp	r3, #0
 800555c:	d051      	beq.n	8005602 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	4413      	add	r3, r2
 8005566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	78fa      	ldrb	r2, [r7, #3]
 800556e:	0151      	lsls	r1, r2, #5
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	440a      	add	r2, r1
 8005574:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005578:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800557c:	60d3      	str	r3, [r2, #12]
      break;
 800557e:	e040      	b.n	8005602 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005580:	78fb      	ldrb	r3, [r7, #3]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	4413      	add	r3, r2
 8005588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800558c:	461a      	mov	r2, r3
 800558e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005592:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005594:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005598:	2b00      	cmp	r3, #0
 800559a:	da34      	bge.n	8005606 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800559c:	78fb      	ldrb	r3, [r7, #3]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	78fa      	ldrb	r2, [r7, #3]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ba:	60d3      	str	r3, [r2, #12]
      }

      break;
 80055bc:	e023      	b.n	8005606 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80055be:	78fb      	ldrb	r3, [r7, #3]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ca:	461a      	mov	r2, r3
 80055cc:	f240 2325 	movw	r3, #549	; 0x225
 80055d0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80055d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	da17      	bge.n	800560a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80055da:	78fb      	ldrb	r3, [r7, #3]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	78fa      	ldrb	r2, [r7, #3]
 80055ea:	0151      	lsls	r1, r2, #5
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	440a      	add	r2, r1
 80055f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055f4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80055f8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80055fa:	e006      	b.n	800560a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	77fb      	strb	r3, [r7, #31]
      break;
 8005600:	e004      	b.n	800560c <USB_HC_Init+0x14c>
      break;
 8005602:	bf00      	nop
 8005604:	e002      	b.n	800560c <USB_HC_Init+0x14c>
      break;
 8005606:	bf00      	nop
 8005608:	e000      	b.n	800560c <USB_HC_Init+0x14c>
      break;
 800560a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	4413      	add	r3, r2
 8005614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	78fa      	ldrb	r2, [r7, #3]
 800561c:	0151      	lsls	r1, r2, #5
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	440a      	add	r2, r1
 8005622:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005626:	f043 0302 	orr.w	r3, r3, #2
 800562a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005632:	699a      	ldr	r2, [r3, #24]
 8005634:	78fb      	ldrb	r3, [r7, #3]
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	2101      	movs	r1, #1
 800563c:	fa01 f303 	lsl.w	r3, r1, r3
 8005640:	6939      	ldr	r1, [r7, #16]
 8005642:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005646:	4313      	orrs	r3, r2
 8005648:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005656:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800565a:	2b00      	cmp	r3, #0
 800565c:	da03      	bge.n	8005666 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800565e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005662:	61bb      	str	r3, [r7, #24]
 8005664:	e001      	b.n	800566a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7ff feff 	bl	800546e <USB_GetHostSpeed>
 8005670:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005672:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005676:	2b02      	cmp	r3, #2
 8005678:	d106      	bne.n	8005688 <USB_HC_Init+0x1c8>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b02      	cmp	r3, #2
 800567e:	d003      	beq.n	8005688 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005680:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005684:	617b      	str	r3, [r7, #20]
 8005686:	e001      	b.n	800568c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800568c:	787b      	ldrb	r3, [r7, #1]
 800568e:	059b      	lsls	r3, r3, #22
 8005690:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005694:	78bb      	ldrb	r3, [r7, #2]
 8005696:	02db      	lsls	r3, r3, #11
 8005698:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800569c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800569e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056a2:	049b      	lsls	r3, r3, #18
 80056a4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80056a8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80056aa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80056ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80056b0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	0159      	lsls	r1, r3, #5
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	440b      	add	r3, r1
 80056be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056c8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80056ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d003      	beq.n	80056da <USB_HC_Init+0x21a>
 80056d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d10f      	bne.n	80056fa <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80056da:	78fb      	ldrb	r3, [r7, #3]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	78fa      	ldrb	r2, [r7, #3]
 80056ea:	0151      	lsls	r1, r2, #5
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	440a      	add	r2, r1
 80056f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056f8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80056fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3720      	adds	r7, #32
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b08c      	sub	sp, #48	; 0x30
 8005708:	af02      	add	r7, sp, #8
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	4613      	mov	r3, r2
 8005710:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	785b      	ldrb	r3, [r3, #1]
 800571a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800571c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005720:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572a:	2b00      	cmp	r3, #0
 800572c:	d02d      	beq.n	800578a <USB_HC_StartXfer+0x86>
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	791b      	ldrb	r3, [r3, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d129      	bne.n	800578a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005736:	79fb      	ldrb	r3, [r7, #7]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d117      	bne.n	800576c <USB_HC_StartXfer+0x68>
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	79db      	ldrb	r3, [r3, #7]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <USB_HC_StartXfer+0x48>
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	79db      	ldrb	r3, [r3, #7]
 8005748:	2b02      	cmp	r3, #2
 800574a:	d10f      	bne.n	800576c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	4413      	add	r3, r2
 8005754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	69fa      	ldr	r2, [r7, #28]
 800575c:	0151      	lsls	r1, r2, #5
 800575e:	6a3a      	ldr	r2, [r7, #32]
 8005760:	440a      	add	r2, r1
 8005762:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800576c:	79fb      	ldrb	r3, [r7, #7]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10b      	bne.n	800578a <USB_HC_StartXfer+0x86>
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	795b      	ldrb	r3, [r3, #5]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d107      	bne.n	800578a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	785b      	ldrb	r3, [r3, #1]
 800577e:	4619      	mov	r1, r3
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 fa0f 	bl	8005ba4 <USB_DoPing>
      return HAL_OK;
 8005786:	2300      	movs	r3, #0
 8005788:	e0f8      	b.n	800597c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d018      	beq.n	80057c4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	8912      	ldrh	r2, [r2, #8]
 800579a:	4413      	add	r3, r2
 800579c:	3b01      	subs	r3, #1
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	8912      	ldrh	r2, [r2, #8]
 80057a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80057a6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80057a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80057aa:	8b7b      	ldrh	r3, [r7, #26]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d90b      	bls.n	80057c8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80057b0:	8b7b      	ldrh	r3, [r7, #26]
 80057b2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80057b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	8912      	ldrh	r2, [r2, #8]
 80057ba:	fb03 f202 	mul.w	r2, r3, r2
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	611a      	str	r2, [r3, #16]
 80057c2:	e001      	b.n	80057c8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80057c4:	2301      	movs	r3, #1
 80057c6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	78db      	ldrb	r3, [r3, #3]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d007      	beq.n	80057e0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80057d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	8912      	ldrh	r2, [r2, #8]
 80057d6:	fb03 f202 	mul.w	r2, r3, r2
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	611a      	str	r2, [r3, #16]
 80057de:	e003      	b.n	80057e8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	695a      	ldr	r2, [r3, #20]
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80057f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057f2:	04d9      	lsls	r1, r3, #19
 80057f4:	4b63      	ldr	r3, [pc, #396]	; (8005984 <USB_HC_StartXfer+0x280>)
 80057f6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80057f8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	7a9b      	ldrb	r3, [r3, #10]
 80057fe:	075b      	lsls	r3, r3, #29
 8005800:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005804:	69f9      	ldr	r1, [r7, #28]
 8005806:	0148      	lsls	r0, r1, #5
 8005808:	6a39      	ldr	r1, [r7, #32]
 800580a:	4401      	add	r1, r0
 800580c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005810:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005812:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d009      	beq.n	800582e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	68d9      	ldr	r1, [r3, #12]
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	4413      	add	r3, r2
 8005826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800582a:	460a      	mov	r2, r1
 800582c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	bf0c      	ite	eq
 800583e:	2301      	moveq	r3, #1
 8005840:	2300      	movne	r3, #0
 8005842:	b2db      	uxtb	r3, r3
 8005844:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	4413      	add	r3, r2
 800584e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	69fa      	ldr	r2, [r7, #28]
 8005856:	0151      	lsls	r1, r2, #5
 8005858:	6a3a      	ldr	r2, [r7, #32]
 800585a:	440a      	add	r2, r1
 800585c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005860:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005864:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	4413      	add	r3, r2
 800586e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	7e7b      	ldrb	r3, [r7, #25]
 8005876:	075b      	lsls	r3, r3, #29
 8005878:	69f9      	ldr	r1, [r7, #28]
 800587a:	0148      	lsls	r0, r1, #5
 800587c:	6a39      	ldr	r1, [r7, #32]
 800587e:	4401      	add	r1, r0
 8005880:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005884:	4313      	orrs	r3, r2
 8005886:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	4413      	add	r3, r2
 8005890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800589e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	78db      	ldrb	r3, [r3, #3]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d004      	beq.n	80058b2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ae:	613b      	str	r3, [r7, #16]
 80058b0:	e003      	b.n	80058ba <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058b8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058c0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ce:	461a      	mov	r2, r3
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80058d4:	79fb      	ldrb	r3, [r7, #7]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	e04e      	b.n	800597c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	78db      	ldrb	r3, [r3, #3]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d149      	bne.n	800597a <USB_HC_StartXfer+0x276>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d045      	beq.n	800597a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	79db      	ldrb	r3, [r3, #7]
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d830      	bhi.n	8005958 <USB_HC_StartXfer+0x254>
 80058f6:	a201      	add	r2, pc, #4	; (adr r2, 80058fc <USB_HC_StartXfer+0x1f8>)
 80058f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fc:	0800590d 	.word	0x0800590d
 8005900:	08005931 	.word	0x08005931
 8005904:	0800590d 	.word	0x0800590d
 8005908:	08005931 	.word	0x08005931
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	3303      	adds	r3, #3
 8005912:	089b      	lsrs	r3, r3, #2
 8005914:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005916:	8afa      	ldrh	r2, [r7, #22]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	b29b      	uxth	r3, r3
 800591e:	429a      	cmp	r2, r3
 8005920:	d91c      	bls.n	800595c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	f043 0220 	orr.w	r2, r3, #32
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	619a      	str	r2, [r3, #24]
        }
        break;
 800592e:	e015      	b.n	800595c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	3303      	adds	r3, #3
 8005936:	089b      	lsrs	r3, r3, #2
 8005938:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800593a:	8afa      	ldrh	r2, [r7, #22]
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	b29b      	uxth	r3, r3
 8005946:	429a      	cmp	r2, r3
 8005948:	d90a      	bls.n	8005960 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	619a      	str	r2, [r3, #24]
        }
        break;
 8005956:	e003      	b.n	8005960 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005958:	bf00      	nop
 800595a:	e002      	b.n	8005962 <USB_HC_StartXfer+0x25e>
        break;
 800595c:	bf00      	nop
 800595e:	e000      	b.n	8005962 <USB_HC_StartXfer+0x25e>
        break;
 8005960:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	68d9      	ldr	r1, [r3, #12]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	785a      	ldrb	r2, [r3, #1]
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	b29b      	uxth	r3, r3
 8005970:	2000      	movs	r0, #0
 8005972:	9000      	str	r0, [sp, #0]
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f7ff fb5b 	bl	8005030 <USB_WritePacket>
  }

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3728      	adds	r7, #40	; 0x28
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	1ff80000 	.word	0x1ff80000

08005988 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	b29b      	uxth	r3, r3
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b089      	sub	sp, #36	; 0x24
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
 80059b2:	460b      	mov	r3, r1
 80059b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80059ba:	78fb      	ldrb	r3, [r7, #3]
 80059bc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	0c9b      	lsrs	r3, r3, #18
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	0fdb      	lsrs	r3, r3, #31
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 0320 	and.w	r3, r3, #32
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d104      	bne.n	8005a04 <USB_HC_Halt+0x5a>
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005a00:	2300      	movs	r3, #0
 8005a02:	e0c8      	b.n	8005b96 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <USB_HC_Halt+0x66>
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d163      	bne.n	8005ad8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	0151      	lsls	r1, r2, #5
 8005a22:	69fa      	ldr	r2, [r7, #28]
 8005a24:	440a      	add	r2, r1
 8005a26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a2e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f003 0320 	and.w	r3, r3, #32
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f040 80ab 	bne.w	8005b94 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d133      	bne.n	8005ab2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	0151      	lsls	r1, r2, #5
 8005a5c:	69fa      	ldr	r2, [r7, #28]
 8005a5e:	440a      	add	r2, r1
 8005a60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a68:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	0151      	lsls	r1, r2, #5
 8005a7c:	69fa      	ldr	r2, [r7, #28]
 8005a7e:	440a      	add	r2, r1
 8005a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a88:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a96:	d81d      	bhi.n	8005ad4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aae:	d0ec      	beq.n	8005a8a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ab0:	e070      	b.n	8005b94 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	0151      	lsls	r1, r2, #5
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	440a      	add	r2, r1
 8005ac8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005acc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ad0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ad2:	e05f      	b.n	8005b94 <USB_HC_Halt+0x1ea>
            break;
 8005ad4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ad6:	e05d      	b.n	8005b94 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	0151      	lsls	r1, r2, #5
 8005aea:	69fa      	ldr	r2, [r7, #28]
 8005aec:	440a      	add	r2, r1
 8005aee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005af2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005af6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d133      	bne.n	8005b70 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	0151      	lsls	r1, r2, #5
 8005b1a:	69fa      	ldr	r2, [r7, #28]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b26:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	69fa      	ldr	r2, [r7, #28]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b46:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b54:	d81d      	bhi.n	8005b92 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b6c:	d0ec      	beq.n	8005b48 <USB_HC_Halt+0x19e>
 8005b6e:	e011      	b.n	8005b94 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	0151      	lsls	r1, r2, #5
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	440a      	add	r2, r1
 8005b86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b8e:	6013      	str	r3, [r2, #0]
 8005b90:	e000      	b.n	8005b94 <USB_HC_Halt+0x1ea>
          break;
 8005b92:	bf00      	nop
    }
  }

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3724      	adds	r7, #36	; 0x24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
	...

08005ba4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	04da      	lsls	r2, r3, #19
 8005bc0:	4b15      	ldr	r3, [pc, #84]	; (8005c18 <USB_DoPing+0x74>)
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	0151      	lsls	r1, r2, #5
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	440a      	add	r2, r1
 8005bcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bd4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bec:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bf4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c02:	461a      	mov	r2, r3
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	1ff80000 	.word	0x1ff80000

08005c1c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b088      	sub	sp, #32
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7ff f93c 	bl	8004eae <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c36:	2110      	movs	r1, #16
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff f995 	bl	8004f68 <USB_FlushTxFifo>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7ff f9c1 	bl	8004fd0 <USB_FlushRxFifo>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005c58:	2300      	movs	r3, #0
 8005c5a:	61bb      	str	r3, [r7, #24]
 8005c5c:	e01f      	b.n	8005c9e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c74:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c7c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c84:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c92:	461a      	mov	r2, r3
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	2b0f      	cmp	r3, #15
 8005ca2:	d9dc      	bls.n	8005c5e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	61bb      	str	r3, [r7, #24]
 8005ca8:	e034      	b.n	8005d14 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cc0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cc8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cd0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cde:	461a      	mov	r2, r3
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cf0:	d80c      	bhi.n	8005d0c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d08:	d0ec      	beq.n	8005ce4 <USB_StopHost+0xc8>
 8005d0a:	e000      	b.n	8005d0e <USB_StopHost+0xf2>
        break;
 8005d0c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	3301      	adds	r3, #1
 8005d12:	61bb      	str	r3, [r7, #24]
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	2b0f      	cmp	r3, #15
 8005d18:	d9c7      	bls.n	8005caa <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d20:	461a      	mov	r2, r3
 8005d22:	f04f 33ff 	mov.w	r3, #4294967295
 8005d26:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d2e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7ff f8ab 	bl	8004e8c <USB_EnableGlobalInt>

  return ret;
 8005d36:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3720      	adds	r7, #32
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005d40:	b590      	push	{r4, r7, lr}
 8005d42:	b089      	sub	sp, #36	; 0x24
 8005d44:	af04      	add	r7, sp, #16
 8005d46:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005d48:	2301      	movs	r3, #1
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	2102      	movs	r1, #2
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fc66 	bl	8006620 <USBH_FindInterface>
 8005d54:	4603      	mov	r3, r0
 8005d56:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
 8005d5a:	2bff      	cmp	r3, #255	; 0xff
 8005d5c:	d002      	beq.n	8005d64 <USBH_CDC_InterfaceInit+0x24>
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d901      	bls.n	8005d68 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005d64:	2302      	movs	r3, #2
 8005d66:	e13d      	b.n	8005fe4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fc3b 	bl	80065e8 <USBH_SelectInterface>
 8005d72:	4603      	mov	r3, r0
 8005d74:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005d76:	7bbb      	ldrb	r3, [r7, #14]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e131      	b.n	8005fe4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005d86:	2050      	movs	r0, #80	; 0x50
 8005d88:	f001 fb12 	bl	80073b0 <malloc>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005da0:	2302      	movs	r3, #2
 8005da2:	e11f      	b.n	8005fe4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005da4:	2250      	movs	r2, #80	; 0x50
 8005da6:	2100      	movs	r1, #0
 8005da8:	68b8      	ldr	r0, [r7, #8]
 8005daa:	f001 fb11 	bl	80073d0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	211a      	movs	r1, #26
 8005db4:	fb01 f303 	mul.w	r3, r1, r3
 8005db8:	4413      	add	r3, r2
 8005dba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	b25b      	sxtb	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	da15      	bge.n	8005df2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	211a      	movs	r1, #26
 8005dcc:	fb01 f303 	mul.w	r3, r1, r3
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005dd6:	781a      	ldrb	r2, [r3, #0]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	211a      	movs	r1, #26
 8005de2:	fb01 f303 	mul.w	r3, r1, r3
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005dec:	881a      	ldrh	r2, [r3, #0]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	785b      	ldrb	r3, [r3, #1]
 8005df6:	4619      	mov	r1, r3
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 ff9c 	bl	8006d36 <USBH_AllocPipe>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	461a      	mov	r2, r3
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	7819      	ldrb	r1, [r3, #0]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	7858      	ldrb	r0, [r3, #1]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	8952      	ldrh	r2, [r2, #10]
 8005e1e:	9202      	str	r2, [sp, #8]
 8005e20:	2203      	movs	r2, #3
 8005e22:	9201      	str	r2, [sp, #4]
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	4623      	mov	r3, r4
 8005e28:	4602      	mov	r2, r0
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 ff54 	bl	8006cd8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2200      	movs	r2, #0
 8005e36:	4619      	mov	r1, r3
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f001 fa17 	bl	800726c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005e3e:	2300      	movs	r3, #0
 8005e40:	2200      	movs	r2, #0
 8005e42:	210a      	movs	r1, #10
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fbeb 	bl	8006620 <USBH_FindInterface>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
 8005e50:	2bff      	cmp	r3, #255	; 0xff
 8005e52:	d002      	beq.n	8005e5a <USBH_CDC_InterfaceInit+0x11a>
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d901      	bls.n	8005e5e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	e0c2      	b.n	8005fe4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	211a      	movs	r1, #26
 8005e64:	fb01 f303 	mul.w	r3, r1, r3
 8005e68:	4413      	add	r3, r2
 8005e6a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	b25b      	sxtb	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	da16      	bge.n	8005ea4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	211a      	movs	r1, #26
 8005e7c:	fb01 f303 	mul.w	r3, r1, r3
 8005e80:	4413      	add	r3, r2
 8005e82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e86:	781a      	ldrb	r2, [r3, #0]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	211a      	movs	r1, #26
 8005e92:	fb01 f303 	mul.w	r3, r1, r3
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e9c:	881a      	ldrh	r2, [r3, #0]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	835a      	strh	r2, [r3, #26]
 8005ea2:	e015      	b.n	8005ed0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	211a      	movs	r1, #26
 8005eaa:	fb01 f303 	mul.w	r3, r1, r3
 8005eae:	4413      	add	r3, r2
 8005eb0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005eb4:	781a      	ldrb	r2, [r3, #0]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	211a      	movs	r1, #26
 8005ec0:	fb01 f303 	mul.w	r3, r1, r3
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005eca:	881a      	ldrh	r2, [r3, #0]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	211a      	movs	r1, #26
 8005ed6:	fb01 f303 	mul.w	r3, r1, r3
 8005eda:	4413      	add	r3, r2
 8005edc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	b25b      	sxtb	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	da16      	bge.n	8005f16 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005ee8:	7bfb      	ldrb	r3, [r7, #15]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	211a      	movs	r1, #26
 8005eee:	fb01 f303 	mul.w	r3, r1, r3
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ef8:	781a      	ldrb	r2, [r3, #0]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	211a      	movs	r1, #26
 8005f04:	fb01 f303 	mul.w	r3, r1, r3
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005f0e:	881a      	ldrh	r2, [r3, #0]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	835a      	strh	r2, [r3, #26]
 8005f14:	e015      	b.n	8005f42 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	211a      	movs	r1, #26
 8005f1c:	fb01 f303 	mul.w	r3, r1, r3
 8005f20:	4413      	add	r3, r2
 8005f22:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f26:	781a      	ldrb	r2, [r3, #0]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	211a      	movs	r1, #26
 8005f32:	fb01 f303 	mul.w	r3, r1, r3
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005f3c:	881a      	ldrh	r2, [r3, #0]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	7b9b      	ldrb	r3, [r3, #14]
 8005f46:	4619      	mov	r1, r3
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fef4 	bl	8006d36 <USBH_AllocPipe>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	461a      	mov	r2, r3
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	7bdb      	ldrb	r3, [r3, #15]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 feea 	bl	8006d36 <USBH_AllocPipe>
 8005f62:	4603      	mov	r3, r0
 8005f64:	461a      	mov	r2, r3
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	7b59      	ldrb	r1, [r3, #13]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	7b98      	ldrb	r0, [r3, #14]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	8b12      	ldrh	r2, [r2, #24]
 8005f82:	9202      	str	r2, [sp, #8]
 8005f84:	2202      	movs	r2, #2
 8005f86:	9201      	str	r2, [sp, #4]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	4623      	mov	r3, r4
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fea2 	bl	8006cd8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	7b19      	ldrb	r1, [r3, #12]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	7bd8      	ldrb	r0, [r3, #15]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	8b52      	ldrh	r2, [r2, #26]
 8005fac:	9202      	str	r2, [sp, #8]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	9201      	str	r2, [sp, #4]
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	4623      	mov	r3, r4
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fe8d 	bl	8006cd8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	7b5b      	ldrb	r3, [r3, #13]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	4619      	mov	r1, r3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f001 f94c 	bl	800726c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	7b1b      	ldrb	r3, [r3, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	4619      	mov	r1, r3
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f001 f945 	bl	800726c <USBH_LL_SetToggle>

  return USBH_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd90      	pop	{r4, r7, pc}

08005fec <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00e      	beq.n	8006024 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	4619      	mov	r1, r3
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fe82 	bl	8006d16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	4619      	mov	r1, r3
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 fead 	bl	8006d78 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	7b1b      	ldrb	r3, [r3, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00e      	beq.n	800604a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	7b1b      	ldrb	r3, [r3, #12]
 8006030:	4619      	mov	r1, r3
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fe6f 	bl	8006d16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	7b1b      	ldrb	r3, [r3, #12]
 800603c:	4619      	mov	r1, r3
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fe9a 	bl	8006d78 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	7b5b      	ldrb	r3, [r3, #13]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00e      	beq.n	8006070 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	7b5b      	ldrb	r3, [r3, #13]
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fe5c 	bl	8006d16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	7b5b      	ldrb	r3, [r3, #13]
 8006062:	4619      	mov	r1, r3
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fe87 	bl	8006d78 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006076:	69db      	ldr	r3, [r3, #28]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00b      	beq.n	8006094 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006082:	69db      	ldr	r3, [r3, #28]
 8006084:	4618      	mov	r0, r3
 8006086:	f001 f99b 	bl	80073c0 <free>
    phost->pActiveClass->pData = 0U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006090:	2200      	movs	r2, #0
 8006092:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b084      	sub	sp, #16
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3340      	adds	r3, #64	; 0x40
 80060b4:	4619      	mov	r1, r3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f8b1 	bl	800621e <GetLineCoding>
 80060bc:	4603      	mov	r3, r0
 80060be:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80060c0:	7afb      	ldrb	r3, [r7, #11]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d105      	bne.n	80060d2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060cc:	2102      	movs	r1, #2
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80060d2:	7afb      	ldrb	r3, [r7, #11]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80060e4:	2301      	movs	r3, #1
 80060e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	d877      	bhi.n	80061f0 <USBH_CDC_Process+0x114>
 8006100:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <USBH_CDC_Process+0x2c>)
 8006102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006106:	bf00      	nop
 8006108:	0800611d 	.word	0x0800611d
 800610c:	08006123 	.word	0x08006123
 8006110:	08006153 	.word	0x08006153
 8006114:	080061c7 	.word	0x080061c7
 8006118:	080061d5 	.word	0x080061d5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	73fb      	strb	r3, [r7, #15]
      break;
 8006120:	e06d      	b.n	80061fe <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006126:	4619      	mov	r1, r3
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f897 	bl	800625c <SetLineCoding>
 800612e:	4603      	mov	r3, r0
 8006130:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006132:	7bbb      	ldrb	r3, [r7, #14]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d104      	bne.n	8006142 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006140:	e058      	b.n	80061f4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006142:	7bbb      	ldrb	r3, [r7, #14]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d055      	beq.n	80061f4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	2204      	movs	r2, #4
 800614c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006150:	e050      	b.n	80061f4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	3340      	adds	r3, #64	; 0x40
 8006156:	4619      	mov	r1, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f860 	bl	800621e <GetLineCoding>
 800615e:	4603      	mov	r3, r0
 8006160:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006162:	7bbb      	ldrb	r3, [r7, #14]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d126      	bne.n	80061b6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800617a:	791b      	ldrb	r3, [r3, #4]
 800617c:	429a      	cmp	r2, r3
 800617e:	d13b      	bne.n	80061f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800618a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800618c:	429a      	cmp	r2, r3
 800618e:	d133      	bne.n	80061f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800619a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800619c:	429a      	cmp	r2, r3
 800619e:	d12b      	bne.n	80061f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061a8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d124      	bne.n	80061f8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f958 	bl	8006464 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80061b4:	e020      	b.n	80061f8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80061b6:	7bbb      	ldrb	r3, [r7, #14]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d01d      	beq.n	80061f8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2204      	movs	r2, #4
 80061c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80061c4:	e018      	b.n	80061f8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f867 	bl	800629a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f8da 	bl	8006386 <CDC_ProcessReception>
      break;
 80061d2:	e014      	b.n	80061fe <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80061d4:	2100      	movs	r1, #0
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fb08 	bl	80067ec <USBH_ClrFeature>
 80061dc:	4603      	mov	r3, r0
 80061de:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80061e0:	7bbb      	ldrb	r3, [r7, #14]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10a      	bne.n	80061fc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80061ee:	e005      	b.n	80061fc <USBH_CDC_Process+0x120>

    default:
      break;
 80061f0:	bf00      	nop
 80061f2:	e004      	b.n	80061fe <USBH_CDC_Process+0x122>
      break;
 80061f4:	bf00      	nop
 80061f6:	e002      	b.n	80061fe <USBH_CDC_Process+0x122>
      break;
 80061f8:	bf00      	nop
 80061fa:	e000      	b.n	80061fe <USBH_CDC_Process+0x122>
      break;
 80061fc:	bf00      	nop

  }

  return status;
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b082      	sub	sp, #8
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	22a1      	movs	r2, #161	; 0xa1
 800622c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2221      	movs	r2, #33	; 0x21
 8006232:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2207      	movs	r2, #7
 8006244:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2207      	movs	r2, #7
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 faf1 	bl	8006834 <USBH_CtlReq>
 8006252:	4603      	mov	r3, r0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2221      	movs	r2, #33	; 0x21
 800626a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2220      	movs	r2, #32
 8006270:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2207      	movs	r2, #7
 8006282:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2207      	movs	r2, #7
 8006288:	4619      	mov	r1, r3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fad2 	bl	8006834 <USBH_CtlReq>
 8006290:	4603      	mov	r3, r0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b086      	sub	sp, #24
 800629e:	af02      	add	r7, sp, #8
 80062a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80062ac:	2300      	movs	r3, #0
 80062ae:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d002      	beq.n	80062c0 <CDC_ProcessTransmission+0x26>
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d023      	beq.n	8006306 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80062be:	e05e      	b.n	800637e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	8b12      	ldrh	r2, [r2, #24]
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d90b      	bls.n	80062e4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	69d9      	ldr	r1, [r3, #28]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	8b1a      	ldrh	r2, [r3, #24]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	7b5b      	ldrb	r3, [r3, #13]
 80062d8:	2001      	movs	r0, #1
 80062da:	9000      	str	r0, [sp, #0]
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fcb8 	bl	8006c52 <USBH_BulkSendData>
 80062e2:	e00b      	b.n	80062fc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	7b5b      	ldrb	r3, [r3, #13]
 80062f2:	2001      	movs	r0, #1
 80062f4:	9000      	str	r0, [sp, #0]
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fcab 	bl	8006c52 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006304:	e03b      	b.n	800637e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	7b5b      	ldrb	r3, [r3, #13]
 800630a:	4619      	mov	r1, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 ff83 	bl	8007218 <USBH_LL_GetURBState>
 8006312:	4603      	mov	r3, r0
 8006314:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006316:	7afb      	ldrb	r3, [r7, #11]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d128      	bne.n	800636e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	8b12      	ldrh	r2, [r2, #24]
 8006324:	4293      	cmp	r3, r2
 8006326:	d90e      	bls.n	8006346 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	8b12      	ldrh	r2, [r2, #24]
 8006330:	1a9a      	subs	r2, r3, r2
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	8b12      	ldrh	r2, [r2, #24]
 800633e:	441a      	add	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	61da      	str	r2, [r3, #28]
 8006344:	e002      	b.n	800634c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	2b00      	cmp	r3, #0
 8006352:	d004      	beq.n	800635e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800635c:	e00e      	b.n	800637c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f868 	bl	800643c <USBH_CDC_TransmitCallback>
      break;
 800636c:	e006      	b.n	800637c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800636e:	7afb      	ldrb	r3, [r7, #11]
 8006370:	2b02      	cmp	r3, #2
 8006372:	d103      	bne.n	800637c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800637c:	bf00      	nop
  }
}
 800637e:	bf00      	nop
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b086      	sub	sp, #24
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006398:	2300      	movs	r3, #0
 800639a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d002      	beq.n	80063ac <CDC_ProcessReception+0x26>
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d00e      	beq.n	80063c8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80063aa:	e043      	b.n	8006434 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	6a19      	ldr	r1, [r3, #32]
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	8b5a      	ldrh	r2, [r3, #26]
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	7b1b      	ldrb	r3, [r3, #12]
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fc6f 	bl	8006c9c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2204      	movs	r2, #4
 80063c2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80063c6:	e035      	b.n	8006434 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	7b1b      	ldrb	r3, [r3, #12]
 80063cc:	4619      	mov	r1, r3
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 ff22 	bl	8007218 <USBH_LL_GetURBState>
 80063d4:	4603      	mov	r3, r0
 80063d6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80063d8:	7cfb      	ldrb	r3, [r7, #19]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d129      	bne.n	8006432 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	7b1b      	ldrb	r3, [r3, #12]
 80063e2:	4619      	mov	r1, r3
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fe85 	bl	80070f4 <USBH_LL_GetLastXferSize>
 80063ea:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d016      	beq.n	8006424 <CDC_ProcessReception+0x9e>
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	8b5b      	ldrh	r3, [r3, #26]
 80063fa:	461a      	mov	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4293      	cmp	r3, r2
 8006400:	d910      	bls.n	8006424 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	1ad2      	subs	r2, r2, r3
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	6a1a      	ldr	r2, [r3, #32]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	441a      	add	r2, r3
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2203      	movs	r2, #3
 800641e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006422:	e006      	b.n	8006432 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f80f 	bl	8006450 <USBH_CDC_ReceiveCallback>
      break;
 8006432:	bf00      	nop
  }
}
 8006434:	bf00      	nop
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	4613      	mov	r3, r2
 8006484:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800648c:	2302      	movs	r3, #2
 800648e:	e029      	b.n	80064e4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	79fa      	ldrb	r2, [r7, #7]
 8006494:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 f81f 	bl	80064ec <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 fd97 	bl	8007010 <USBH_LL_Init>

  return USBH_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80064f8:	2300      	movs	r3, #0
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	e009      	b.n	8006512 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	33e0      	adds	r3, #224	; 0xe0
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	2200      	movs	r2, #0
 800650a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3301      	adds	r3, #1
 8006510:	60fb      	str	r3, [r7, #12]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b0f      	cmp	r3, #15
 8006516:	d9f2      	bls.n	80064fe <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006518:	2300      	movs	r3, #0
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	e009      	b.n	8006532 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4413      	add	r3, r2
 8006524:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006528:	2200      	movs	r2, #0
 800652a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3301      	adds	r3, #1
 8006530:	60fb      	str	r3, [r7, #12]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006538:	d3f1      	bcc.n	800651e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2240      	movs	r2, #64	; 0x40
 800655e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d016      	beq.n	80065d6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10e      	bne.n	80065d0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80065b8:	1c59      	adds	r1, r3, #1
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	33de      	adds	r3, #222	; 0xde
 80065c4:	6839      	ldr	r1, [r7, #0]
 80065c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	73fb      	strb	r3, [r7, #15]
 80065ce:	e004      	b.n	80065da <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80065d0:	2302      	movs	r3, #2
 80065d2:	73fb      	strb	r3, [r7, #15]
 80065d4:	e001      	b.n	80065da <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80065d6:	2302      	movs	r3, #2
 80065d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80065da:	7bfb      	ldrb	r3, [r7, #15]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	460b      	mov	r3, r1
 80065f2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80065fe:	78fa      	ldrb	r2, [r7, #3]
 8006600:	429a      	cmp	r2, r3
 8006602:	d204      	bcs.n	800660e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	78fa      	ldrb	r2, [r7, #3]
 8006608:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800660c:	e001      	b.n	8006612 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800660e:	2302      	movs	r3, #2
 8006610:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006612:	7bfb      	ldrb	r3, [r7, #15]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	4608      	mov	r0, r1
 800662a:	4611      	mov	r1, r2
 800662c:	461a      	mov	r2, r3
 800662e:	4603      	mov	r3, r0
 8006630:	70fb      	strb	r3, [r7, #3]
 8006632:	460b      	mov	r3, r1
 8006634:	70bb      	strb	r3, [r7, #2]
 8006636:	4613      	mov	r3, r2
 8006638:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800663e:	2300      	movs	r3, #0
 8006640:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006648:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800664a:	e025      	b.n	8006698 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800664c:	7dfb      	ldrb	r3, [r7, #23]
 800664e:	221a      	movs	r2, #26
 8006650:	fb02 f303 	mul.w	r3, r2, r3
 8006654:	3308      	adds	r3, #8
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	4413      	add	r3, r2
 800665a:	3302      	adds	r3, #2
 800665c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	795b      	ldrb	r3, [r3, #5]
 8006662:	78fa      	ldrb	r2, [r7, #3]
 8006664:	429a      	cmp	r2, r3
 8006666:	d002      	beq.n	800666e <USBH_FindInterface+0x4e>
 8006668:	78fb      	ldrb	r3, [r7, #3]
 800666a:	2bff      	cmp	r3, #255	; 0xff
 800666c:	d111      	bne.n	8006692 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006672:	78ba      	ldrb	r2, [r7, #2]
 8006674:	429a      	cmp	r2, r3
 8006676:	d002      	beq.n	800667e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006678:	78bb      	ldrb	r3, [r7, #2]
 800667a:	2bff      	cmp	r3, #255	; 0xff
 800667c:	d109      	bne.n	8006692 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006682:	787a      	ldrb	r2, [r7, #1]
 8006684:	429a      	cmp	r2, r3
 8006686:	d002      	beq.n	800668e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006688:	787b      	ldrb	r3, [r7, #1]
 800668a:	2bff      	cmp	r3, #255	; 0xff
 800668c:	d101      	bne.n	8006692 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800668e:	7dfb      	ldrb	r3, [r7, #23]
 8006690:	e006      	b.n	80066a0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006692:	7dfb      	ldrb	r3, [r7, #23]
 8006694:	3301      	adds	r3, #1
 8006696:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006698:	7dfb      	ldrb	r3, [r7, #23]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d9d6      	bls.n	800664c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800669e:	23ff      	movs	r3, #255	; 0xff
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	371c      	adds	r7, #28
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fce7 	bl	8007088 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80066ba:	2101      	movs	r1, #1
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fdbe 	bl	800723e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b082      	sub	sp, #8
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f804 	bl	800670e <USBH_HandleSof>
}
 8006706:	bf00      	nop
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b082      	sub	sp, #8
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b0b      	cmp	r3, #11
 800671e:	d10a      	bne.n	8006736 <USBH_HandleSof+0x28>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	4798      	blx	r3
  }
}
 8006736:	bf00      	nop
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800674e:	bf00      	nop
}
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800676a:	bf00      	nop
}
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fc7a 	bl	80070be <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	791b      	ldrb	r3, [r3, #4]
 80067ce:	4619      	mov	r1, r3
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fad1 	bl	8006d78 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	795b      	ldrb	r3, [r3, #5]
 80067da:	4619      	mov	r1, r3
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 facb 	bl	8006d78 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	789b      	ldrb	r3, [r3, #2]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d10f      	bne.n	8006820 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2202      	movs	r2, #2
 8006804:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006812:	78fb      	ldrb	r3, [r7, #3]
 8006814:	b29a      	uxth	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006820:	2200      	movs	r2, #0
 8006822:	2100      	movs	r1, #0
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f805 	bl	8006834 <USBH_CtlReq>
 800682a:	4603      	mov	r3, r0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	4613      	mov	r3, r2
 8006840:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006842:	2301      	movs	r3, #1
 8006844:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	789b      	ldrb	r3, [r3, #2]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d002      	beq.n	8006854 <USBH_CtlReq+0x20>
 800684e:	2b02      	cmp	r3, #2
 8006850:	d00f      	beq.n	8006872 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006852:	e027      	b.n	80068a4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	88fa      	ldrh	r2, [r7, #6]
 800685e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2201      	movs	r2, #1
 8006864:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2202      	movs	r2, #2
 800686a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800686c:	2301      	movs	r3, #1
 800686e:	75fb      	strb	r3, [r7, #23]
      break;
 8006870:	e018      	b.n	80068a4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 f81c 	bl	80068b0 <USBH_HandleControl>
 8006878:	4603      	mov	r3, r0
 800687a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800687c:	7dfb      	ldrb	r3, [r7, #23]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <USBH_CtlReq+0x54>
 8006882:	7dfb      	ldrb	r3, [r7, #23]
 8006884:	2b03      	cmp	r3, #3
 8006886:	d106      	bne.n	8006896 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2201      	movs	r2, #1
 800688c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	761a      	strb	r2, [r3, #24]
      break;
 8006894:	e005      	b.n	80068a2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006896:	7dfb      	ldrb	r3, [r7, #23]
 8006898:	2b02      	cmp	r3, #2
 800689a:	d102      	bne.n	80068a2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2201      	movs	r2, #1
 80068a0:	709a      	strb	r2, [r3, #2]
      break;
 80068a2:	bf00      	nop
  }
  return status;
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
	...

080068b0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af02      	add	r7, sp, #8
 80068b6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80068b8:	2301      	movs	r3, #1
 80068ba:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80068bc:	2300      	movs	r3, #0
 80068be:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	7e1b      	ldrb	r3, [r3, #24]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	2b0a      	cmp	r3, #10
 80068c8:	f200 8156 	bhi.w	8006b78 <USBH_HandleControl+0x2c8>
 80068cc:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <USBH_HandleControl+0x24>)
 80068ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d2:	bf00      	nop
 80068d4:	08006901 	.word	0x08006901
 80068d8:	0800691b 	.word	0x0800691b
 80068dc:	08006985 	.word	0x08006985
 80068e0:	080069ab 	.word	0x080069ab
 80068e4:	080069e3 	.word	0x080069e3
 80068e8:	08006a0d 	.word	0x08006a0d
 80068ec:	08006a5f 	.word	0x08006a5f
 80068f0:	08006a81 	.word	0x08006a81
 80068f4:	08006abd 	.word	0x08006abd
 80068f8:	08006ae3 	.word	0x08006ae3
 80068fc:	08006b21 	.word	0x08006b21
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f103 0110 	add.w	r1, r3, #16
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	795b      	ldrb	r3, [r3, #5]
 800690a:	461a      	mov	r2, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f943 	bl	8006b98 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2202      	movs	r2, #2
 8006916:	761a      	strb	r2, [r3, #24]
      break;
 8006918:	e139      	b.n	8006b8e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	795b      	ldrb	r3, [r3, #5]
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fc79 	bl	8007218 <USBH_LL_GetURBState>
 8006926:	4603      	mov	r3, r0
 8006928:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800692a:	7bbb      	ldrb	r3, [r7, #14]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d11e      	bne.n	800696e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	7c1b      	ldrb	r3, [r3, #16]
 8006934:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006938:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	8adb      	ldrh	r3, [r3, #22]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006942:	7b7b      	ldrb	r3, [r7, #13]
 8006944:	2b80      	cmp	r3, #128	; 0x80
 8006946:	d103      	bne.n	8006950 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2203      	movs	r2, #3
 800694c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800694e:	e115      	b.n	8006b7c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2205      	movs	r2, #5
 8006954:	761a      	strb	r2, [r3, #24]
      break;
 8006956:	e111      	b.n	8006b7c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006958:	7b7b      	ldrb	r3, [r7, #13]
 800695a:	2b80      	cmp	r3, #128	; 0x80
 800695c:	d103      	bne.n	8006966 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2209      	movs	r2, #9
 8006962:	761a      	strb	r2, [r3, #24]
      break;
 8006964:	e10a      	b.n	8006b7c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2207      	movs	r2, #7
 800696a:	761a      	strb	r2, [r3, #24]
      break;
 800696c:	e106      	b.n	8006b7c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800696e:	7bbb      	ldrb	r3, [r7, #14]
 8006970:	2b04      	cmp	r3, #4
 8006972:	d003      	beq.n	800697c <USBH_HandleControl+0xcc>
 8006974:	7bbb      	ldrb	r3, [r7, #14]
 8006976:	2b02      	cmp	r3, #2
 8006978:	f040 8100 	bne.w	8006b7c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	220b      	movs	r2, #11
 8006980:	761a      	strb	r2, [r3, #24]
      break;
 8006982:	e0fb      	b.n	8006b7c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800698a:	b29a      	uxth	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6899      	ldr	r1, [r3, #8]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	899a      	ldrh	r2, [r3, #12]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	791b      	ldrb	r3, [r3, #4]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f93a 	bl	8006c16 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2204      	movs	r2, #4
 80069a6:	761a      	strb	r2, [r3, #24]
      break;
 80069a8:	e0f1      	b.n	8006b8e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	791b      	ldrb	r3, [r3, #4]
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fc31 	bl	8007218 <USBH_LL_GetURBState>
 80069b6:	4603      	mov	r3, r0
 80069b8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80069ba:	7bbb      	ldrb	r3, [r7, #14]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d102      	bne.n	80069c6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2209      	movs	r2, #9
 80069c4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80069c6:	7bbb      	ldrb	r3, [r7, #14]
 80069c8:	2b05      	cmp	r3, #5
 80069ca:	d102      	bne.n	80069d2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80069cc:	2303      	movs	r3, #3
 80069ce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80069d0:	e0d6      	b.n	8006b80 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80069d2:	7bbb      	ldrb	r3, [r7, #14]
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	f040 80d3 	bne.w	8006b80 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	220b      	movs	r2, #11
 80069de:	761a      	strb	r2, [r3, #24]
      break;
 80069e0:	e0ce      	b.n	8006b80 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6899      	ldr	r1, [r3, #8]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	899a      	ldrh	r2, [r3, #12]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	795b      	ldrb	r3, [r3, #5]
 80069ee:	2001      	movs	r0, #1
 80069f0:	9000      	str	r0, [sp, #0]
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f8ea 	bl	8006bcc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2206      	movs	r2, #6
 8006a08:	761a      	strb	r2, [r3, #24]
      break;
 8006a0a:	e0c0      	b.n	8006b8e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	795b      	ldrb	r3, [r3, #5]
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fc00 	bl	8007218 <USBH_LL_GetURBState>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006a1c:	7bbb      	ldrb	r3, [r7, #14]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d103      	bne.n	8006a2a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2207      	movs	r2, #7
 8006a26:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006a28:	e0ac      	b.n	8006b84 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006a2a:	7bbb      	ldrb	r3, [r7, #14]
 8006a2c:	2b05      	cmp	r3, #5
 8006a2e:	d105      	bne.n	8006a3c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	220c      	movs	r2, #12
 8006a34:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006a36:	2303      	movs	r3, #3
 8006a38:	73fb      	strb	r3, [r7, #15]
      break;
 8006a3a:	e0a3      	b.n	8006b84 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006a3c:	7bbb      	ldrb	r3, [r7, #14]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d103      	bne.n	8006a4a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2205      	movs	r2, #5
 8006a46:	761a      	strb	r2, [r3, #24]
      break;
 8006a48:	e09c      	b.n	8006b84 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006a4a:	7bbb      	ldrb	r3, [r7, #14]
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	f040 8099 	bne.w	8006b84 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	220b      	movs	r2, #11
 8006a56:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006a58:	2302      	movs	r3, #2
 8006a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a5c:	e092      	b.n	8006b84 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	791b      	ldrb	r3, [r3, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	2100      	movs	r1, #0
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f8d5 	bl	8006c16 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2208      	movs	r2, #8
 8006a7c:	761a      	strb	r2, [r3, #24]

      break;
 8006a7e:	e086      	b.n	8006b8e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	791b      	ldrb	r3, [r3, #4]
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fbc6 	bl	8007218 <USBH_LL_GetURBState>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006a90:	7bbb      	ldrb	r3, [r7, #14]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d105      	bne.n	8006aa2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	220d      	movs	r2, #13
 8006a9a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006aa0:	e072      	b.n	8006b88 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006aa2:	7bbb      	ldrb	r3, [r7, #14]
 8006aa4:	2b04      	cmp	r3, #4
 8006aa6:	d103      	bne.n	8006ab0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	220b      	movs	r2, #11
 8006aac:	761a      	strb	r2, [r3, #24]
      break;
 8006aae:	e06b      	b.n	8006b88 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006ab0:	7bbb      	ldrb	r3, [r7, #14]
 8006ab2:	2b05      	cmp	r3, #5
 8006ab4:	d168      	bne.n	8006b88 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8006aba:	e065      	b.n	8006b88 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	795b      	ldrb	r3, [r3, #5]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	9200      	str	r2, [sp, #0]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f87f 	bl	8006bcc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	220a      	movs	r2, #10
 8006ade:	761a      	strb	r2, [r3, #24]
      break;
 8006ae0:	e055      	b.n	8006b8e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	795b      	ldrb	r3, [r3, #5]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fb95 	bl	8007218 <USBH_LL_GetURBState>
 8006aee:	4603      	mov	r3, r0
 8006af0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006af2:	7bbb      	ldrb	r3, [r7, #14]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d105      	bne.n	8006b04 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	220d      	movs	r2, #13
 8006b00:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006b02:	e043      	b.n	8006b8c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d103      	bne.n	8006b12 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2209      	movs	r2, #9
 8006b0e:	761a      	strb	r2, [r3, #24]
      break;
 8006b10:	e03c      	b.n	8006b8c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006b12:	7bbb      	ldrb	r3, [r7, #14]
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	d139      	bne.n	8006b8c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	220b      	movs	r2, #11
 8006b1c:	761a      	strb	r2, [r3, #24]
      break;
 8006b1e:	e035      	b.n	8006b8c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	7e5b      	ldrb	r3, [r3, #25]
 8006b24:	3301      	adds	r3, #1
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	765a      	strb	r2, [r3, #25]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	7e5b      	ldrb	r3, [r3, #25]
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d806      	bhi.n	8006b42 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006b40:	e025      	b.n	8006b8e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b48:	2106      	movs	r1, #6
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	795b      	ldrb	r3, [r3, #5]
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f90c 	bl	8006d78 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	791b      	ldrb	r3, [r3, #4]
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f906 	bl	8006d78 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006b72:	2302      	movs	r3, #2
 8006b74:	73fb      	strb	r3, [r7, #15]
      break;
 8006b76:	e00a      	b.n	8006b8e <USBH_HandleControl+0x2de>

    default:
      break;
 8006b78:	bf00      	nop
 8006b7a:	e008      	b.n	8006b8e <USBH_HandleControl+0x2de>
      break;
 8006b7c:	bf00      	nop
 8006b7e:	e006      	b.n	8006b8e <USBH_HandleControl+0x2de>
      break;
 8006b80:	bf00      	nop
 8006b82:	e004      	b.n	8006b8e <USBH_HandleControl+0x2de>
      break;
 8006b84:	bf00      	nop
 8006b86:	e002      	b.n	8006b8e <USBH_HandleControl+0x2de>
      break;
 8006b88:	bf00      	nop
 8006b8a:	e000      	b.n	8006b8e <USBH_HandleControl+0x2de>
      break;
 8006b8c:	bf00      	nop
  }

  return status;
 8006b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b088      	sub	sp, #32
 8006b9c:	af04      	add	r7, sp, #16
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006ba6:	79f9      	ldrb	r1, [r7, #7]
 8006ba8:	2300      	movs	r3, #0
 8006baa:	9303      	str	r3, [sp, #12]
 8006bac:	2308      	movs	r3, #8
 8006bae:	9302      	str	r3, [sp, #8]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	9301      	str	r3, [sp, #4]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	2300      	movs	r3, #0
 8006bba:	2200      	movs	r2, #0
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 fafa 	bl	80071b6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af04      	add	r7, sp, #16
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	461a      	mov	r2, r3
 8006bda:	460b      	mov	r3, r1
 8006bdc:	80fb      	strh	r3, [r7, #6]
 8006bde:	4613      	mov	r3, r2
 8006be0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006bf0:	7979      	ldrb	r1, [r7, #5]
 8006bf2:	7e3b      	ldrb	r3, [r7, #24]
 8006bf4:	9303      	str	r3, [sp, #12]
 8006bf6:	88fb      	ldrh	r3, [r7, #6]
 8006bf8:	9302      	str	r3, [sp, #8]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	9301      	str	r3, [sp, #4]
 8006bfe:	2301      	movs	r3, #1
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	2300      	movs	r3, #0
 8006c04:	2200      	movs	r2, #0
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f000 fad5 	bl	80071b6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b088      	sub	sp, #32
 8006c1a:	af04      	add	r7, sp, #16
 8006c1c:	60f8      	str	r0, [r7, #12]
 8006c1e:	60b9      	str	r1, [r7, #8]
 8006c20:	4611      	mov	r1, r2
 8006c22:	461a      	mov	r2, r3
 8006c24:	460b      	mov	r3, r1
 8006c26:	80fb      	strh	r3, [r7, #6]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006c2c:	7979      	ldrb	r1, [r7, #5]
 8006c2e:	2300      	movs	r3, #0
 8006c30:	9303      	str	r3, [sp, #12]
 8006c32:	88fb      	ldrh	r3, [r7, #6]
 8006c34:	9302      	str	r3, [sp, #8]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	9301      	str	r3, [sp, #4]
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	2300      	movs	r3, #0
 8006c40:	2201      	movs	r2, #1
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 fab7 	bl	80071b6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006c48:	2300      	movs	r3, #0

}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b088      	sub	sp, #32
 8006c56:	af04      	add	r7, sp, #16
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	60b9      	str	r1, [r7, #8]
 8006c5c:	4611      	mov	r1, r2
 8006c5e:	461a      	mov	r2, r3
 8006c60:	460b      	mov	r3, r1
 8006c62:	80fb      	strh	r3, [r7, #6]
 8006c64:	4613      	mov	r3, r2
 8006c66:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006c76:	7979      	ldrb	r1, [r7, #5]
 8006c78:	7e3b      	ldrb	r3, [r7, #24]
 8006c7a:	9303      	str	r3, [sp, #12]
 8006c7c:	88fb      	ldrh	r3, [r7, #6]
 8006c7e:	9302      	str	r3, [sp, #8]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	9301      	str	r3, [sp, #4]
 8006c84:	2301      	movs	r3, #1
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	2302      	movs	r3, #2
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 fa92 	bl	80071b6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b088      	sub	sp, #32
 8006ca0:	af04      	add	r7, sp, #16
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	4611      	mov	r1, r2
 8006ca8:	461a      	mov	r2, r3
 8006caa:	460b      	mov	r3, r1
 8006cac:	80fb      	strh	r3, [r7, #6]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006cb2:	7979      	ldrb	r1, [r7, #5]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	9303      	str	r3, [sp, #12]
 8006cb8:	88fb      	ldrh	r3, [r7, #6]
 8006cba:	9302      	str	r3, [sp, #8]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	9301      	str	r3, [sp, #4]
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 fa74 	bl	80071b6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af04      	add	r7, sp, #16
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	70fb      	strb	r3, [r7, #3]
 8006cea:	460b      	mov	r3, r1
 8006cec:	70bb      	strb	r3, [r7, #2]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006cf2:	7878      	ldrb	r0, [r7, #1]
 8006cf4:	78ba      	ldrb	r2, [r7, #2]
 8006cf6:	78f9      	ldrb	r1, [r7, #3]
 8006cf8:	8b3b      	ldrh	r3, [r7, #24]
 8006cfa:	9302      	str	r3, [sp, #8]
 8006cfc:	7d3b      	ldrb	r3, [r7, #20]
 8006cfe:	9301      	str	r3, [sp, #4]
 8006d00:	7c3b      	ldrb	r3, [r7, #16]
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	4603      	mov	r3, r0
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fa07 	bl	800711a <USBH_LL_OpenPipe>

  return USBH_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3708      	adds	r7, #8
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b082      	sub	sp, #8
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8006d22:	78fb      	ldrb	r3, [r7, #3]
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fa26 	bl	8007178 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b084      	sub	sp, #16
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f836 	bl	8006db4 <USBH_GetFreePipe>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006d4c:	89fb      	ldrh	r3, [r7, #14]
 8006d4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00a      	beq.n	8006d6c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8006d56:	78fa      	ldrb	r2, [r7, #3]
 8006d58:	89fb      	ldrh	r3, [r7, #14]
 8006d5a:	f003 030f 	and.w	r3, r3, #15
 8006d5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d62:	6879      	ldr	r1, [r7, #4]
 8006d64:	33e0      	adds	r3, #224	; 0xe0
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	440b      	add	r3, r1
 8006d6a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006d6c:	89fb      	ldrh	r3, [r7, #14]
 8006d6e:	b2db      	uxtb	r3, r3
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006d84:	78fb      	ldrb	r3, [r7, #3]
 8006d86:	2b0f      	cmp	r3, #15
 8006d88:	d80d      	bhi.n	8006da6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006d8a:	78fb      	ldrb	r3, [r7, #3]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	33e0      	adds	r3, #224	; 0xe0
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	78fb      	ldrb	r3, [r7, #3]
 8006d98:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006d9c:	6879      	ldr	r1, [r7, #4]
 8006d9e:	33e0      	adds	r3, #224	; 0xe0
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	440b      	add	r3, r1
 8006da4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	73fb      	strb	r3, [r7, #15]
 8006dc4:	e00f      	b.n	8006de6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	33e0      	adds	r3, #224	; 0xe0
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d102      	bne.n	8006de0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006dda:	7bfb      	ldrb	r3, [r7, #15]
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	e007      	b.n	8006df0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	3301      	adds	r3, #1
 8006de4:	73fb      	strb	r3, [r7, #15]
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	2b0f      	cmp	r3, #15
 8006dea:	d9ec      	bls.n	8006dc6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006dec:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006e00:	2201      	movs	r2, #1
 8006e02:	490e      	ldr	r1, [pc, #56]	; (8006e3c <MX_USB_HOST_Init+0x40>)
 8006e04:	480e      	ldr	r0, [pc, #56]	; (8006e40 <MX_USB_HOST_Init+0x44>)
 8006e06:	f7ff fb37 	bl	8006478 <USBH_Init>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d001      	beq.n	8006e14 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006e10:	f7fa fa40 	bl	8001294 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006e14:	490b      	ldr	r1, [pc, #44]	; (8006e44 <MX_USB_HOST_Init+0x48>)
 8006e16:	480a      	ldr	r0, [pc, #40]	; (8006e40 <MX_USB_HOST_Init+0x44>)
 8006e18:	f7ff fbbc 	bl	8006594 <USBH_RegisterClass>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006e22:	f7fa fa37 	bl	8001294 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006e26:	4806      	ldr	r0, [pc, #24]	; (8006e40 <MX_USB_HOST_Init+0x44>)
 8006e28:	f7ff fc40 	bl	80066ac <USBH_Start>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006e32:	f7fa fa2f 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006e36:	bf00      	nop
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	08006e49 	.word	0x08006e49
 8006e40:	20000160 	.word	0x20000160
 8006e44:	2000000c 	.word	0x2000000c

08006e48 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	460b      	mov	r3, r1
 8006e52:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006e54:	78fb      	ldrb	r3, [r7, #3]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	2b04      	cmp	r3, #4
 8006e5a:	d819      	bhi.n	8006e90 <USBH_UserProcess+0x48>
 8006e5c:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <USBH_UserProcess+0x1c>)
 8006e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e62:	bf00      	nop
 8006e64:	08006e91 	.word	0x08006e91
 8006e68:	08006e81 	.word	0x08006e81
 8006e6c:	08006e91 	.word	0x08006e91
 8006e70:	08006e89 	.word	0x08006e89
 8006e74:	08006e79 	.word	0x08006e79
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006e78:	4b09      	ldr	r3, [pc, #36]	; (8006ea0 <USBH_UserProcess+0x58>)
 8006e7a:	2203      	movs	r2, #3
 8006e7c:	701a      	strb	r2, [r3, #0]
  break;
 8006e7e:	e008      	b.n	8006e92 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006e80:	4b07      	ldr	r3, [pc, #28]	; (8006ea0 <USBH_UserProcess+0x58>)
 8006e82:	2202      	movs	r2, #2
 8006e84:	701a      	strb	r2, [r3, #0]
  break;
 8006e86:	e004      	b.n	8006e92 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006e88:	4b05      	ldr	r3, [pc, #20]	; (8006ea0 <USBH_UserProcess+0x58>)
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	701a      	strb	r2, [r3, #0]
  break;
 8006e8e:	e000      	b.n	8006e92 <USBH_UserProcess+0x4a>

  default:
  break;
 8006e90:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	20000538 	.word	0x20000538

08006ea4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08a      	sub	sp, #40	; 0x28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006eac:	f107 0314 	add.w	r3, r7, #20
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	605a      	str	r2, [r3, #4]
 8006eb6:	609a      	str	r2, [r3, #8]
 8006eb8:	60da      	str	r2, [r3, #12]
 8006eba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ec4:	d147      	bne.n	8006f56 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	613b      	str	r3, [r7, #16]
 8006eca:	4b25      	ldr	r3, [pc, #148]	; (8006f60 <HAL_HCD_MspInit+0xbc>)
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ece:	4a24      	ldr	r2, [pc, #144]	; (8006f60 <HAL_HCD_MspInit+0xbc>)
 8006ed0:	f043 0301 	orr.w	r3, r3, #1
 8006ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ed6:	4b22      	ldr	r3, [pc, #136]	; (8006f60 <HAL_HCD_MspInit+0xbc>)
 8006ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	613b      	str	r3, [r7, #16]
 8006ee0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eec:	2300      	movs	r3, #0
 8006eee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006ef0:	f107 0314 	add.w	r3, r7, #20
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	481b      	ldr	r0, [pc, #108]	; (8006f64 <HAL_HCD_MspInit+0xc0>)
 8006ef8:	f7fa fd4a 	bl	8001990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006efc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f02:	2302      	movs	r3, #2
 8006f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f0e:	230a      	movs	r3, #10
 8006f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f12:	f107 0314 	add.w	r3, r7, #20
 8006f16:	4619      	mov	r1, r3
 8006f18:	4812      	ldr	r0, [pc, #72]	; (8006f64 <HAL_HCD_MspInit+0xc0>)
 8006f1a:	f7fa fd39 	bl	8001990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f1e:	4b10      	ldr	r3, [pc, #64]	; (8006f60 <HAL_HCD_MspInit+0xbc>)
 8006f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f22:	4a0f      	ldr	r2, [pc, #60]	; (8006f60 <HAL_HCD_MspInit+0xbc>)
 8006f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f28:	6353      	str	r3, [r2, #52]	; 0x34
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	4b0c      	ldr	r3, [pc, #48]	; (8006f60 <HAL_HCD_MspInit+0xbc>)
 8006f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f32:	4a0b      	ldr	r2, [pc, #44]	; (8006f60 <HAL_HCD_MspInit+0xbc>)
 8006f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f38:	6453      	str	r3, [r2, #68]	; 0x44
 8006f3a:	4b09      	ldr	r3, [pc, #36]	; (8006f60 <HAL_HCD_MspInit+0xbc>)
 8006f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006f46:	2200      	movs	r2, #0
 8006f48:	2100      	movs	r1, #0
 8006f4a:	2043      	movs	r0, #67	; 0x43
 8006f4c:	f7fa fce9 	bl	8001922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006f50:	2043      	movs	r0, #67	; 0x43
 8006f52:	f7fa fd02 	bl	800195a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006f56:	bf00      	nop
 8006f58:	3728      	adds	r7, #40	; 0x28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	40023800 	.word	0x40023800
 8006f64:	40020000 	.word	0x40020000

08006f68 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7ff fbb7 	bl	80066ea <USBH_LL_IncTimer>
}
 8006f7c:	bf00      	nop
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7ff fbef 	bl	8006776 <USBH_LL_Connect>
}
 8006f98:	bf00      	nop
 8006f9a:	3708      	adds	r7, #8
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7ff fbf8 	bl	80067a4 <USBH_LL_Disconnect>
}
 8006fb4:	bf00      	nop
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	70fb      	strb	r3, [r7, #3]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7ff fba9 	bl	800673e <USBH_LL_PortEnabled>
}
 8006fec:	bf00      	nop
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007002:	4618      	mov	r0, r3
 8007004:	f7ff fba9 	bl	800675a <USBH_LL_PortDisabled>
}
 8007008:	bf00      	nop
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800701e:	2b01      	cmp	r3, #1
 8007020:	d12a      	bne.n	8007078 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007022:	4a18      	ldr	r2, [pc, #96]	; (8007084 <USBH_LL_Init+0x74>)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a15      	ldr	r2, [pc, #84]	; (8007084 <USBH_LL_Init+0x74>)
 800702e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007032:	4b14      	ldr	r3, [pc, #80]	; (8007084 <USBH_LL_Init+0x74>)
 8007034:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007038:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800703a:	4b12      	ldr	r3, [pc, #72]	; (8007084 <USBH_LL_Init+0x74>)
 800703c:	2208      	movs	r2, #8
 800703e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007040:	4b10      	ldr	r3, [pc, #64]	; (8007084 <USBH_LL_Init+0x74>)
 8007042:	2201      	movs	r2, #1
 8007044:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007046:	4b0f      	ldr	r3, [pc, #60]	; (8007084 <USBH_LL_Init+0x74>)
 8007048:	2200      	movs	r2, #0
 800704a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800704c:	4b0d      	ldr	r3, [pc, #52]	; (8007084 <USBH_LL_Init+0x74>)
 800704e:	2202      	movs	r2, #2
 8007050:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007052:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <USBH_LL_Init+0x74>)
 8007054:	2200      	movs	r2, #0
 8007056:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007058:	480a      	ldr	r0, [pc, #40]	; (8007084 <USBH_LL_Init+0x74>)
 800705a:	f7fa fe8a 	bl	8001d72 <HAL_HCD_Init>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d001      	beq.n	8007068 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007064:	f7fa f916 	bl	8001294 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007068:	4806      	ldr	r0, [pc, #24]	; (8007084 <USBH_LL_Init+0x74>)
 800706a:	f7fb fa60 	bl	800252e <HAL_HCD_GetCurrentFrame>
 800706e:	4603      	mov	r3, r0
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff fb2a 	bl	80066cc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	2000053c 	.word	0x2000053c

08007088 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007090:	2300      	movs	r3, #0
 8007092:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fb f9dd 	bl	800245e <HAL_HCD_Start>
 80070a4:	4603      	mov	r3, r0
 80070a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 f90e 	bl	80072cc <USBH_Get_USB_Status>
 80070b0:	4603      	mov	r3, r0
 80070b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b084      	sub	sp, #16
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7fb f9e5 	bl	80024a4 <HAL_HCD_Stop>
 80070da:	4603      	mov	r3, r0
 80070dc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80070de:	7bfb      	ldrb	r3, [r7, #15]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 f8f3 	bl	80072cc <USBH_Get_USB_Status>
 80070e6:	4603      	mov	r3, r0
 80070e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007106:	78fa      	ldrb	r2, [r7, #3]
 8007108:	4611      	mov	r1, r2
 800710a:	4618      	mov	r0, r3
 800710c:	f7fb f9fb 	bl	8002506 <HAL_HCD_HC_GetXferCount>
 8007110:	4603      	mov	r3, r0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800711a:	b590      	push	{r4, r7, lr}
 800711c:	b089      	sub	sp, #36	; 0x24
 800711e:	af04      	add	r7, sp, #16
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	4608      	mov	r0, r1
 8007124:	4611      	mov	r1, r2
 8007126:	461a      	mov	r2, r3
 8007128:	4603      	mov	r3, r0
 800712a:	70fb      	strb	r3, [r7, #3]
 800712c:	460b      	mov	r3, r1
 800712e:	70bb      	strb	r3, [r7, #2]
 8007130:	4613      	mov	r3, r2
 8007132:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007142:	787c      	ldrb	r4, [r7, #1]
 8007144:	78ba      	ldrb	r2, [r7, #2]
 8007146:	78f9      	ldrb	r1, [r7, #3]
 8007148:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800714a:	9302      	str	r3, [sp, #8]
 800714c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007150:	9301      	str	r3, [sp, #4]
 8007152:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	4623      	mov	r3, r4
 800715a:	f7fa fe6c 	bl	8001e36 <HAL_HCD_HC_Init>
 800715e:	4603      	mov	r3, r0
 8007160:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007162:	7bfb      	ldrb	r3, [r7, #15]
 8007164:	4618      	mov	r0, r3
 8007166:	f000 f8b1 	bl	80072cc <USBH_Get_USB_Status>
 800716a:	4603      	mov	r3, r0
 800716c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800716e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3714      	adds	r7, #20
 8007174:	46bd      	mov	sp, r7
 8007176:	bd90      	pop	{r4, r7, pc}

08007178 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007192:	78fa      	ldrb	r2, [r7, #3]
 8007194:	4611      	mov	r1, r2
 8007196:	4618      	mov	r0, r3
 8007198:	f7fa fedc 	bl	8001f54 <HAL_HCD_HC_Halt>
 800719c:	4603      	mov	r3, r0
 800719e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80071a0:	7bfb      	ldrb	r3, [r7, #15]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 f892 	bl	80072cc <USBH_Get_USB_Status>
 80071a8:	4603      	mov	r3, r0
 80071aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80071b6:	b590      	push	{r4, r7, lr}
 80071b8:	b089      	sub	sp, #36	; 0x24
 80071ba:	af04      	add	r7, sp, #16
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	4608      	mov	r0, r1
 80071c0:	4611      	mov	r1, r2
 80071c2:	461a      	mov	r2, r3
 80071c4:	4603      	mov	r3, r0
 80071c6:	70fb      	strb	r3, [r7, #3]
 80071c8:	460b      	mov	r3, r1
 80071ca:	70bb      	strb	r3, [r7, #2]
 80071cc:	4613      	mov	r3, r2
 80071ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071d0:	2300      	movs	r3, #0
 80071d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80071d4:	2300      	movs	r3, #0
 80071d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80071de:	787c      	ldrb	r4, [r7, #1]
 80071e0:	78ba      	ldrb	r2, [r7, #2]
 80071e2:	78f9      	ldrb	r1, [r7, #3]
 80071e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80071e8:	9303      	str	r3, [sp, #12]
 80071ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80071ec:	9302      	str	r3, [sp, #8]
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	9301      	str	r3, [sp, #4]
 80071f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	4623      	mov	r3, r4
 80071fa:	f7fa fecf 	bl	8001f9c <HAL_HCD_HC_SubmitRequest>
 80071fe:	4603      	mov	r3, r0
 8007200:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007202:	7bfb      	ldrb	r3, [r7, #15]
 8007204:	4618      	mov	r0, r3
 8007206:	f000 f861 	bl	80072cc <USBH_Get_USB_Status>
 800720a:	4603      	mov	r3, r0
 800720c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800720e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	bd90      	pop	{r4, r7, pc}

08007218 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800722a:	78fa      	ldrb	r2, [r7, #3]
 800722c:	4611      	mov	r1, r2
 800722e:	4618      	mov	r0, r3
 8007230:	f7fb f955 	bl	80024de <HAL_HCD_HC_GetURBState>
 8007234:	4603      	mov	r3, r0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b082      	sub	sp, #8
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	460b      	mov	r3, r1
 8007248:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007250:	2b01      	cmp	r3, #1
 8007252:	d103      	bne.n	800725c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007254:	78fb      	ldrb	r3, [r7, #3]
 8007256:	4618      	mov	r0, r3
 8007258:	f000 f864 	bl	8007324 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800725c:	20c8      	movs	r0, #200	; 0xc8
 800725e:	f7fa fa61 	bl	8001724 <HAL_Delay>
  return USBH_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	460b      	mov	r3, r1
 8007276:	70fb      	strb	r3, [r7, #3]
 8007278:	4613      	mov	r3, r2
 800727a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007282:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007284:	78fb      	ldrb	r3, [r7, #3]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	212c      	movs	r1, #44	; 0x2c
 800728a:	fb01 f303 	mul.w	r3, r1, r3
 800728e:	4413      	add	r3, r2
 8007290:	333b      	adds	r3, #59	; 0x3b
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d009      	beq.n	80072ac <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007298:	78fb      	ldrb	r3, [r7, #3]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	212c      	movs	r1, #44	; 0x2c
 800729e:	fb01 f303 	mul.w	r3, r1, r3
 80072a2:	4413      	add	r3, r2
 80072a4:	3354      	adds	r3, #84	; 0x54
 80072a6:	78ba      	ldrb	r2, [r7, #2]
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	e008      	b.n	80072be <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80072ac:	78fb      	ldrb	r3, [r7, #3]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	212c      	movs	r1, #44	; 0x2c
 80072b2:	fb01 f303 	mul.w	r3, r1, r3
 80072b6:	4413      	add	r3, r2
 80072b8:	3355      	adds	r3, #85	; 0x55
 80072ba:	78ba      	ldrb	r2, [r7, #2]
 80072bc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	4603      	mov	r3, r0
 80072d4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80072da:	79fb      	ldrb	r3, [r7, #7]
 80072dc:	2b03      	cmp	r3, #3
 80072de:	d817      	bhi.n	8007310 <USBH_Get_USB_Status+0x44>
 80072e0:	a201      	add	r2, pc, #4	; (adr r2, 80072e8 <USBH_Get_USB_Status+0x1c>)
 80072e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e6:	bf00      	nop
 80072e8:	080072f9 	.word	0x080072f9
 80072ec:	080072ff 	.word	0x080072ff
 80072f0:	08007305 	.word	0x08007305
 80072f4:	0800730b 	.word	0x0800730b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	73fb      	strb	r3, [r7, #15]
    break;
 80072fc:	e00b      	b.n	8007316 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80072fe:	2302      	movs	r3, #2
 8007300:	73fb      	strb	r3, [r7, #15]
    break;
 8007302:	e008      	b.n	8007316 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007304:	2301      	movs	r3, #1
 8007306:	73fb      	strb	r3, [r7, #15]
    break;
 8007308:	e005      	b.n	8007316 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800730a:	2302      	movs	r3, #2
 800730c:	73fb      	strb	r3, [r7, #15]
    break;
 800730e:	e002      	b.n	8007316 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007310:	2302      	movs	r3, #2
 8007312:	73fb      	strb	r3, [r7, #15]
    break;
 8007314:	bf00      	nop
  }
  return usb_status;
 8007316:	7bfb      	ldrb	r3, [r7, #15]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	4603      	mov	r3, r0
 800732c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800732e:	79fb      	ldrb	r3, [r7, #7]
 8007330:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007332:	79fb      	ldrb	r3, [r7, #7]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d102      	bne.n	800733e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007338:	2300      	movs	r3, #0
 800733a:	73fb      	strb	r3, [r7, #15]
 800733c:	e001      	b.n	8007342 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800733e:	2301      	movs	r3, #1
 8007340:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007342:	7bfb      	ldrb	r3, [r7, #15]
 8007344:	461a      	mov	r2, r3
 8007346:	2101      	movs	r1, #1
 8007348:	4803      	ldr	r0, [pc, #12]	; (8007358 <MX_DriverVbusFS+0x34>)
 800734a:	f7fa fcd5 	bl	8001cf8 <HAL_GPIO_WritePin>
}
 800734e:	bf00      	nop
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	40020800 	.word	0x40020800

0800735c <__errno>:
 800735c:	4b01      	ldr	r3, [pc, #4]	; (8007364 <__errno+0x8>)
 800735e:	6818      	ldr	r0, [r3, #0]
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	2000002c 	.word	0x2000002c

08007368 <__libc_init_array>:
 8007368:	b570      	push	{r4, r5, r6, lr}
 800736a:	4d0d      	ldr	r5, [pc, #52]	; (80073a0 <__libc_init_array+0x38>)
 800736c:	4c0d      	ldr	r4, [pc, #52]	; (80073a4 <__libc_init_array+0x3c>)
 800736e:	1b64      	subs	r4, r4, r5
 8007370:	10a4      	asrs	r4, r4, #2
 8007372:	2600      	movs	r6, #0
 8007374:	42a6      	cmp	r6, r4
 8007376:	d109      	bne.n	800738c <__libc_init_array+0x24>
 8007378:	4d0b      	ldr	r5, [pc, #44]	; (80073a8 <__libc_init_array+0x40>)
 800737a:	4c0c      	ldr	r4, [pc, #48]	; (80073ac <__libc_init_array+0x44>)
 800737c:	f000 f92e 	bl	80075dc <_init>
 8007380:	1b64      	subs	r4, r4, r5
 8007382:	10a4      	asrs	r4, r4, #2
 8007384:	2600      	movs	r6, #0
 8007386:	42a6      	cmp	r6, r4
 8007388:	d105      	bne.n	8007396 <__libc_init_array+0x2e>
 800738a:	bd70      	pop	{r4, r5, r6, pc}
 800738c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007390:	4798      	blx	r3
 8007392:	3601      	adds	r6, #1
 8007394:	e7ee      	b.n	8007374 <__libc_init_array+0xc>
 8007396:	f855 3b04 	ldr.w	r3, [r5], #4
 800739a:	4798      	blx	r3
 800739c:	3601      	adds	r6, #1
 800739e:	e7f2      	b.n	8007386 <__libc_init_array+0x1e>
 80073a0:	08007624 	.word	0x08007624
 80073a4:	08007624 	.word	0x08007624
 80073a8:	08007624 	.word	0x08007624
 80073ac:	08007628 	.word	0x08007628

080073b0 <malloc>:
 80073b0:	4b02      	ldr	r3, [pc, #8]	; (80073bc <malloc+0xc>)
 80073b2:	4601      	mov	r1, r0
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	f000 b87f 	b.w	80074b8 <_malloc_r>
 80073ba:	bf00      	nop
 80073bc:	2000002c 	.word	0x2000002c

080073c0 <free>:
 80073c0:	4b02      	ldr	r3, [pc, #8]	; (80073cc <free+0xc>)
 80073c2:	4601      	mov	r1, r0
 80073c4:	6818      	ldr	r0, [r3, #0]
 80073c6:	f000 b80b 	b.w	80073e0 <_free_r>
 80073ca:	bf00      	nop
 80073cc:	2000002c 	.word	0x2000002c

080073d0 <memset>:
 80073d0:	4402      	add	r2, r0
 80073d2:	4603      	mov	r3, r0
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d100      	bne.n	80073da <memset+0xa>
 80073d8:	4770      	bx	lr
 80073da:	f803 1b01 	strb.w	r1, [r3], #1
 80073de:	e7f9      	b.n	80073d4 <memset+0x4>

080073e0 <_free_r>:
 80073e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073e2:	2900      	cmp	r1, #0
 80073e4:	d044      	beq.n	8007470 <_free_r+0x90>
 80073e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073ea:	9001      	str	r0, [sp, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f1a1 0404 	sub.w	r4, r1, #4
 80073f2:	bfb8      	it	lt
 80073f4:	18e4      	addlt	r4, r4, r3
 80073f6:	f000 f8e3 	bl	80075c0 <__malloc_lock>
 80073fa:	4a1e      	ldr	r2, [pc, #120]	; (8007474 <_free_r+0x94>)
 80073fc:	9801      	ldr	r0, [sp, #4]
 80073fe:	6813      	ldr	r3, [r2, #0]
 8007400:	b933      	cbnz	r3, 8007410 <_free_r+0x30>
 8007402:	6063      	str	r3, [r4, #4]
 8007404:	6014      	str	r4, [r2, #0]
 8007406:	b003      	add	sp, #12
 8007408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800740c:	f000 b8de 	b.w	80075cc <__malloc_unlock>
 8007410:	42a3      	cmp	r3, r4
 8007412:	d908      	bls.n	8007426 <_free_r+0x46>
 8007414:	6825      	ldr	r5, [r4, #0]
 8007416:	1961      	adds	r1, r4, r5
 8007418:	428b      	cmp	r3, r1
 800741a:	bf01      	itttt	eq
 800741c:	6819      	ldreq	r1, [r3, #0]
 800741e:	685b      	ldreq	r3, [r3, #4]
 8007420:	1949      	addeq	r1, r1, r5
 8007422:	6021      	streq	r1, [r4, #0]
 8007424:	e7ed      	b.n	8007402 <_free_r+0x22>
 8007426:	461a      	mov	r2, r3
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	b10b      	cbz	r3, 8007430 <_free_r+0x50>
 800742c:	42a3      	cmp	r3, r4
 800742e:	d9fa      	bls.n	8007426 <_free_r+0x46>
 8007430:	6811      	ldr	r1, [r2, #0]
 8007432:	1855      	adds	r5, r2, r1
 8007434:	42a5      	cmp	r5, r4
 8007436:	d10b      	bne.n	8007450 <_free_r+0x70>
 8007438:	6824      	ldr	r4, [r4, #0]
 800743a:	4421      	add	r1, r4
 800743c:	1854      	adds	r4, r2, r1
 800743e:	42a3      	cmp	r3, r4
 8007440:	6011      	str	r1, [r2, #0]
 8007442:	d1e0      	bne.n	8007406 <_free_r+0x26>
 8007444:	681c      	ldr	r4, [r3, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	6053      	str	r3, [r2, #4]
 800744a:	4421      	add	r1, r4
 800744c:	6011      	str	r1, [r2, #0]
 800744e:	e7da      	b.n	8007406 <_free_r+0x26>
 8007450:	d902      	bls.n	8007458 <_free_r+0x78>
 8007452:	230c      	movs	r3, #12
 8007454:	6003      	str	r3, [r0, #0]
 8007456:	e7d6      	b.n	8007406 <_free_r+0x26>
 8007458:	6825      	ldr	r5, [r4, #0]
 800745a:	1961      	adds	r1, r4, r5
 800745c:	428b      	cmp	r3, r1
 800745e:	bf04      	itt	eq
 8007460:	6819      	ldreq	r1, [r3, #0]
 8007462:	685b      	ldreq	r3, [r3, #4]
 8007464:	6063      	str	r3, [r4, #4]
 8007466:	bf04      	itt	eq
 8007468:	1949      	addeq	r1, r1, r5
 800746a:	6021      	streq	r1, [r4, #0]
 800746c:	6054      	str	r4, [r2, #4]
 800746e:	e7ca      	b.n	8007406 <_free_r+0x26>
 8007470:	b003      	add	sp, #12
 8007472:	bd30      	pop	{r4, r5, pc}
 8007474:	20000840 	.word	0x20000840

08007478 <sbrk_aligned>:
 8007478:	b570      	push	{r4, r5, r6, lr}
 800747a:	4e0e      	ldr	r6, [pc, #56]	; (80074b4 <sbrk_aligned+0x3c>)
 800747c:	460c      	mov	r4, r1
 800747e:	6831      	ldr	r1, [r6, #0]
 8007480:	4605      	mov	r5, r0
 8007482:	b911      	cbnz	r1, 800748a <sbrk_aligned+0x12>
 8007484:	f000 f88c 	bl	80075a0 <_sbrk_r>
 8007488:	6030      	str	r0, [r6, #0]
 800748a:	4621      	mov	r1, r4
 800748c:	4628      	mov	r0, r5
 800748e:	f000 f887 	bl	80075a0 <_sbrk_r>
 8007492:	1c43      	adds	r3, r0, #1
 8007494:	d00a      	beq.n	80074ac <sbrk_aligned+0x34>
 8007496:	1cc4      	adds	r4, r0, #3
 8007498:	f024 0403 	bic.w	r4, r4, #3
 800749c:	42a0      	cmp	r0, r4
 800749e:	d007      	beq.n	80074b0 <sbrk_aligned+0x38>
 80074a0:	1a21      	subs	r1, r4, r0
 80074a2:	4628      	mov	r0, r5
 80074a4:	f000 f87c 	bl	80075a0 <_sbrk_r>
 80074a8:	3001      	adds	r0, #1
 80074aa:	d101      	bne.n	80074b0 <sbrk_aligned+0x38>
 80074ac:	f04f 34ff 	mov.w	r4, #4294967295
 80074b0:	4620      	mov	r0, r4
 80074b2:	bd70      	pop	{r4, r5, r6, pc}
 80074b4:	20000844 	.word	0x20000844

080074b8 <_malloc_r>:
 80074b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074bc:	1ccd      	adds	r5, r1, #3
 80074be:	f025 0503 	bic.w	r5, r5, #3
 80074c2:	3508      	adds	r5, #8
 80074c4:	2d0c      	cmp	r5, #12
 80074c6:	bf38      	it	cc
 80074c8:	250c      	movcc	r5, #12
 80074ca:	2d00      	cmp	r5, #0
 80074cc:	4607      	mov	r7, r0
 80074ce:	db01      	blt.n	80074d4 <_malloc_r+0x1c>
 80074d0:	42a9      	cmp	r1, r5
 80074d2:	d905      	bls.n	80074e0 <_malloc_r+0x28>
 80074d4:	230c      	movs	r3, #12
 80074d6:	603b      	str	r3, [r7, #0]
 80074d8:	2600      	movs	r6, #0
 80074da:	4630      	mov	r0, r6
 80074dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074e0:	4e2e      	ldr	r6, [pc, #184]	; (800759c <_malloc_r+0xe4>)
 80074e2:	f000 f86d 	bl	80075c0 <__malloc_lock>
 80074e6:	6833      	ldr	r3, [r6, #0]
 80074e8:	461c      	mov	r4, r3
 80074ea:	bb34      	cbnz	r4, 800753a <_malloc_r+0x82>
 80074ec:	4629      	mov	r1, r5
 80074ee:	4638      	mov	r0, r7
 80074f0:	f7ff ffc2 	bl	8007478 <sbrk_aligned>
 80074f4:	1c43      	adds	r3, r0, #1
 80074f6:	4604      	mov	r4, r0
 80074f8:	d14d      	bne.n	8007596 <_malloc_r+0xde>
 80074fa:	6834      	ldr	r4, [r6, #0]
 80074fc:	4626      	mov	r6, r4
 80074fe:	2e00      	cmp	r6, #0
 8007500:	d140      	bne.n	8007584 <_malloc_r+0xcc>
 8007502:	6823      	ldr	r3, [r4, #0]
 8007504:	4631      	mov	r1, r6
 8007506:	4638      	mov	r0, r7
 8007508:	eb04 0803 	add.w	r8, r4, r3
 800750c:	f000 f848 	bl	80075a0 <_sbrk_r>
 8007510:	4580      	cmp	r8, r0
 8007512:	d13a      	bne.n	800758a <_malloc_r+0xd2>
 8007514:	6821      	ldr	r1, [r4, #0]
 8007516:	3503      	adds	r5, #3
 8007518:	1a6d      	subs	r5, r5, r1
 800751a:	f025 0503 	bic.w	r5, r5, #3
 800751e:	3508      	adds	r5, #8
 8007520:	2d0c      	cmp	r5, #12
 8007522:	bf38      	it	cc
 8007524:	250c      	movcc	r5, #12
 8007526:	4629      	mov	r1, r5
 8007528:	4638      	mov	r0, r7
 800752a:	f7ff ffa5 	bl	8007478 <sbrk_aligned>
 800752e:	3001      	adds	r0, #1
 8007530:	d02b      	beq.n	800758a <_malloc_r+0xd2>
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	442b      	add	r3, r5
 8007536:	6023      	str	r3, [r4, #0]
 8007538:	e00e      	b.n	8007558 <_malloc_r+0xa0>
 800753a:	6822      	ldr	r2, [r4, #0]
 800753c:	1b52      	subs	r2, r2, r5
 800753e:	d41e      	bmi.n	800757e <_malloc_r+0xc6>
 8007540:	2a0b      	cmp	r2, #11
 8007542:	d916      	bls.n	8007572 <_malloc_r+0xba>
 8007544:	1961      	adds	r1, r4, r5
 8007546:	42a3      	cmp	r3, r4
 8007548:	6025      	str	r5, [r4, #0]
 800754a:	bf18      	it	ne
 800754c:	6059      	strne	r1, [r3, #4]
 800754e:	6863      	ldr	r3, [r4, #4]
 8007550:	bf08      	it	eq
 8007552:	6031      	streq	r1, [r6, #0]
 8007554:	5162      	str	r2, [r4, r5]
 8007556:	604b      	str	r3, [r1, #4]
 8007558:	4638      	mov	r0, r7
 800755a:	f104 060b 	add.w	r6, r4, #11
 800755e:	f000 f835 	bl	80075cc <__malloc_unlock>
 8007562:	f026 0607 	bic.w	r6, r6, #7
 8007566:	1d23      	adds	r3, r4, #4
 8007568:	1af2      	subs	r2, r6, r3
 800756a:	d0b6      	beq.n	80074da <_malloc_r+0x22>
 800756c:	1b9b      	subs	r3, r3, r6
 800756e:	50a3      	str	r3, [r4, r2]
 8007570:	e7b3      	b.n	80074da <_malloc_r+0x22>
 8007572:	6862      	ldr	r2, [r4, #4]
 8007574:	42a3      	cmp	r3, r4
 8007576:	bf0c      	ite	eq
 8007578:	6032      	streq	r2, [r6, #0]
 800757a:	605a      	strne	r2, [r3, #4]
 800757c:	e7ec      	b.n	8007558 <_malloc_r+0xa0>
 800757e:	4623      	mov	r3, r4
 8007580:	6864      	ldr	r4, [r4, #4]
 8007582:	e7b2      	b.n	80074ea <_malloc_r+0x32>
 8007584:	4634      	mov	r4, r6
 8007586:	6876      	ldr	r6, [r6, #4]
 8007588:	e7b9      	b.n	80074fe <_malloc_r+0x46>
 800758a:	230c      	movs	r3, #12
 800758c:	603b      	str	r3, [r7, #0]
 800758e:	4638      	mov	r0, r7
 8007590:	f000 f81c 	bl	80075cc <__malloc_unlock>
 8007594:	e7a1      	b.n	80074da <_malloc_r+0x22>
 8007596:	6025      	str	r5, [r4, #0]
 8007598:	e7de      	b.n	8007558 <_malloc_r+0xa0>
 800759a:	bf00      	nop
 800759c:	20000840 	.word	0x20000840

080075a0 <_sbrk_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	4d06      	ldr	r5, [pc, #24]	; (80075bc <_sbrk_r+0x1c>)
 80075a4:	2300      	movs	r3, #0
 80075a6:	4604      	mov	r4, r0
 80075a8:	4608      	mov	r0, r1
 80075aa:	602b      	str	r3, [r5, #0]
 80075ac:	f7f9 ffd6 	bl	800155c <_sbrk>
 80075b0:	1c43      	adds	r3, r0, #1
 80075b2:	d102      	bne.n	80075ba <_sbrk_r+0x1a>
 80075b4:	682b      	ldr	r3, [r5, #0]
 80075b6:	b103      	cbz	r3, 80075ba <_sbrk_r+0x1a>
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	bd38      	pop	{r3, r4, r5, pc}
 80075bc:	20000848 	.word	0x20000848

080075c0 <__malloc_lock>:
 80075c0:	4801      	ldr	r0, [pc, #4]	; (80075c8 <__malloc_lock+0x8>)
 80075c2:	f000 b809 	b.w	80075d8 <__retarget_lock_acquire_recursive>
 80075c6:	bf00      	nop
 80075c8:	2000084c 	.word	0x2000084c

080075cc <__malloc_unlock>:
 80075cc:	4801      	ldr	r0, [pc, #4]	; (80075d4 <__malloc_unlock+0x8>)
 80075ce:	f000 b804 	b.w	80075da <__retarget_lock_release_recursive>
 80075d2:	bf00      	nop
 80075d4:	2000084c 	.word	0x2000084c

080075d8 <__retarget_lock_acquire_recursive>:
 80075d8:	4770      	bx	lr

080075da <__retarget_lock_release_recursive>:
 80075da:	4770      	bx	lr

080075dc <_init>:
 80075dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075de:	bf00      	nop
 80075e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075e2:	bc08      	pop	{r3}
 80075e4:	469e      	mov	lr, r3
 80075e6:	4770      	bx	lr

080075e8 <_fini>:
 80075e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ea:	bf00      	nop
 80075ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ee:	bc08      	pop	{r3}
 80075f0:	469e      	mov	lr, r3
 80075f2:	4770      	bx	lr
