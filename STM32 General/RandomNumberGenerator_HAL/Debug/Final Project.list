
Final Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  0800a484  0800a484  0001a484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5f4  0800a5f4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5f4  0800a5f4  0001a5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5fc  0800a5fc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5fc  0800a5fc  0001a5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a600  0800a600  0001a600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000007c0  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000850  20000850  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015776  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003872  00000000  00000000  00035836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  000390a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f10  00000000  00000000  0003a138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024aa8  00000000  00000000  0003b048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017524  00000000  00000000  0005faf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb1cf  00000000  00000000  00077014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001421e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d70  00000000  00000000  00142234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a46c 	.word	0x0800a46c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800a46c 	.word	0x0800a46c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <check_keys>:

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char check_keys (void) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
	char keypad[4][3] = {
 800057a:	4a40      	ldr	r2, [pc, #256]	; (800067c <check_keys+0x108>)
 800057c:	463b      	mov	r3, r7
 800057e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000580:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			{'4','5','6'},
			{'7','8','9'},
			{'*','0','#'}
	};

	for(int i = 0; i < 3; i++) {
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	e070      	b.n	800066c <check_keys+0xf8>
		switch(i) {
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2b02      	cmp	r3, #2
 800058e:	d029      	beq.n	80005e4 <check_keys+0x70>
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	2b02      	cmp	r3, #2
 8000594:	dc36      	bgt.n	8000604 <check_keys+0x90>
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d003      	beq.n	80005a4 <check_keys+0x30>
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d010      	beq.n	80005c4 <check_keys+0x50>
 80005a2:	e02f      	b.n	8000604 <check_keys+0x90>
		case 0:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2110      	movs	r1, #16
 80005a8:	4835      	ldr	r0, [pc, #212]	; (8000680 <check_keys+0x10c>)
 80005aa:	f003 fb43 	bl	8003c34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	2120      	movs	r1, #32
 80005b2:	4833      	ldr	r0, [pc, #204]	; (8000680 <check_keys+0x10c>)
 80005b4:	f003 fb3e 	bl	8003c34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2140      	movs	r1, #64	; 0x40
 80005bc:	4830      	ldr	r0, [pc, #192]	; (8000680 <check_keys+0x10c>)
 80005be:	f003 fb39 	bl	8003c34 <HAL_GPIO_WritePin>
			break;
 80005c2:	e01f      	b.n	8000604 <check_keys+0x90>

		case 1:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2110      	movs	r1, #16
 80005c8:	482d      	ldr	r0, [pc, #180]	; (8000680 <check_keys+0x10c>)
 80005ca:	f003 fb33 	bl	8003c34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2120      	movs	r1, #32
 80005d2:	482b      	ldr	r0, [pc, #172]	; (8000680 <check_keys+0x10c>)
 80005d4:	f003 fb2e 	bl	8003c34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2140      	movs	r1, #64	; 0x40
 80005dc:	4828      	ldr	r0, [pc, #160]	; (8000680 <check_keys+0x10c>)
 80005de:	f003 fb29 	bl	8003c34 <HAL_GPIO_WritePin>
			break;
 80005e2:	e00f      	b.n	8000604 <check_keys+0x90>

		case 2:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2110      	movs	r1, #16
 80005e8:	4825      	ldr	r0, [pc, #148]	; (8000680 <check_keys+0x10c>)
 80005ea:	f003 fb23 	bl	8003c34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2120      	movs	r1, #32
 80005f2:	4823      	ldr	r0, [pc, #140]	; (8000680 <check_keys+0x10c>)
 80005f4:	f003 fb1e 	bl	8003c34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2140      	movs	r1, #64	; 0x40
 80005fc:	4820      	ldr	r0, [pc, #128]	; (8000680 <check_keys+0x10c>)
 80005fe:	f003 fb19 	bl	8003c34 <HAL_GPIO_WritePin>
			break;
 8000602:	bf00      	nop
		}

		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0) == GPIO_PIN_RESET)
 8000604:	2101      	movs	r1, #1
 8000606:	481f      	ldr	r0, [pc, #124]	; (8000684 <check_keys+0x110>)
 8000608:	f003 fafc 	bl	8003c04 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d104      	bne.n	800061c <check_keys+0xa8>
			return keypad[0][i];
 8000612:	463a      	mov	r2, r7
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	e02b      	b.n	8000674 <check_keys+0x100>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1) == GPIO_PIN_RESET)
 800061c:	2102      	movs	r1, #2
 800061e:	4819      	ldr	r0, [pc, #100]	; (8000684 <check_keys+0x110>)
 8000620:	f003 faf0 	bl	8003c04 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d104      	bne.n	8000634 <check_keys+0xc0>
			return keypad[1][i];
 800062a:	1cfa      	adds	r2, r7, #3
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4413      	add	r3, r2
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	e01f      	b.n	8000674 <check_keys+0x100>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == GPIO_PIN_RESET)
 8000634:	2104      	movs	r1, #4
 8000636:	4813      	ldr	r0, [pc, #76]	; (8000684 <check_keys+0x110>)
 8000638:	f003 fae4 	bl	8003c04 <HAL_GPIO_ReadPin>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d104      	bne.n	800064c <check_keys+0xd8>
			return keypad[2][i];
 8000642:	1dba      	adds	r2, r7, #6
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4413      	add	r3, r2
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	e013      	b.n	8000674 <check_keys+0x100>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_RESET)
 800064c:	2108      	movs	r1, #8
 800064e:	480d      	ldr	r0, [pc, #52]	; (8000684 <check_keys+0x110>)
 8000650:	f003 fad8 	bl	8003c04 <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d105      	bne.n	8000666 <check_keys+0xf2>
			return keypad[3][i];
 800065a:	f107 0209 	add.w	r2, r7, #9
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	4413      	add	r3, r2
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	e006      	b.n	8000674 <check_keys+0x100>
	for(int i = 0; i < 3; i++) {
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	3301      	adds	r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	2b02      	cmp	r3, #2
 8000670:	dd8b      	ble.n	800058a <check_keys+0x16>
	}

	return 0;
 8000672:	2300      	movs	r3, #0


	}
 8000674:	4618      	mov	r0, r3
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	0800a484 	.word	0x0800a484
 8000680:	40021000 	.word	0x40021000
 8000684:	40020c00 	.word	0x40020c00

08000688 <main>:

	  int main(void)
	  {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
		  HAL_Init();
 800068c:	f002 ff76 	bl	800357c <HAL_Init>
		  /* USER CODE BEGIN Init */

		  /* USER CODE END Init */

		  /* Configure the system clock */
		  SystemClock_Config();
 8000690:	f002 fab0 	bl	8002bf4 <SystemClock_Config>
		  /* USER CODE BEGIN SysInit */

		  /* USER CODE END SysInit */

		  /* Initialize all configured peripherals */
		  MX_GPIO_Init();
 8000694:	f002 fb8a 	bl	8002dac <MX_GPIO_Init>
		  MX_I2C1_Init();
 8000698:	f002 fb16 	bl	8002cc8 <MX_I2C1_Init>
		  MX_I2S3_Init();
 800069c:	f002 fb42 	bl	8002d24 <MX_I2S3_Init>
		  MX_USB_HOST_Init();
 80006a0:	f008 fb94 	bl	8008dcc <MX_USB_HOST_Init>
		  MX_RNG_Init();
 80006a4:	f002 fb6e 	bl	8002d84 <MX_RNG_Init>
	    /* USER CODE BEGIN 2 */

	    /* USER CODE END 2 */
		 while (1) {

	  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ae:	4883      	ldr	r0, [pc, #524]	; (80008bc <main+0x234>)
 80006b0:	f003 fac0 	bl	8003c34 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ba:	4880      	ldr	r0, [pc, #512]	; (80008bc <main+0x234>)
 80006bc:	f003 faba 	bl	8003c34 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c6:	487d      	ldr	r0, [pc, #500]	; (80008bc <main+0x234>)
 80006c8:	f003 fab4 	bl	8003c34 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006d2:	487a      	ldr	r0, [pc, #488]	; (80008bc <main+0x234>)
 80006d4:	f003 faae 	bl	8003c34 <HAL_GPIO_WritePin>

	  	HAL_Delay(500);
 80006d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006dc:	f002 ffc0 	bl	8003660 <HAL_Delay>

	  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e6:	4875      	ldr	r0, [pc, #468]	; (80008bc <main+0x234>)
 80006e8:	f003 faa4 	bl	8003c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f2:	4872      	ldr	r0, [pc, #456]	; (80008bc <main+0x234>)
 80006f4:	f003 fa9e 	bl	8003c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006fe:	486f      	ldr	r0, [pc, #444]	; (80008bc <main+0x234>)
 8000700:	f003 fa98 	bl	8003c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800070a:	486c      	ldr	r0, [pc, #432]	; (80008bc <main+0x234>)
 800070c:	f003 fa92 	bl	8003c34 <HAL_GPIO_WritePin>

		HAL_Delay(500);
 8000710:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000714:	f002 ffa4 	bl	8003660 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800071e:	4867      	ldr	r0, [pc, #412]	; (80008bc <main+0x234>)
 8000720:	f003 fa88 	bl	8003c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072a:	4864      	ldr	r0, [pc, #400]	; (80008bc <main+0x234>)
 800072c:	f003 fa82 	bl	8003c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000730:	2201      	movs	r2, #1
 8000732:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000736:	4861      	ldr	r0, [pc, #388]	; (80008bc <main+0x234>)
 8000738:	f003 fa7c 	bl	8003c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000742:	485e      	ldr	r0, [pc, #376]	; (80008bc <main+0x234>)
 8000744:	f003 fa76 	bl	8003c34 <HAL_GPIO_WritePin>

		HAL_Delay(500);
 8000748:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800074c:	f002 ff88 	bl	8003660 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000756:	4859      	ldr	r0, [pc, #356]	; (80008bc <main+0x234>)
 8000758:	f003 fa6c 	bl	8003c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000762:	4856      	ldr	r0, [pc, #344]	; (80008bc <main+0x234>)
 8000764:	f003 fa66 	bl	8003c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800076e:	4853      	ldr	r0, [pc, #332]	; (80008bc <main+0x234>)
 8000770:	f003 fa60 	bl	8003c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800077a:	4850      	ldr	r0, [pc, #320]	; (80008bc <main+0x234>)
 800077c:	f003 fa5a 	bl	8003c34 <HAL_GPIO_WritePin>

		HAL_Delay(500);
 8000780:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000784:	f002 ff6c 	bl	8003660 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078e:	484b      	ldr	r0, [pc, #300]	; (80008bc <main+0x234>)
 8000790:	f003 fa50 	bl	8003c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079a:	4848      	ldr	r0, [pc, #288]	; (80008bc <main+0x234>)
 800079c:	f003 fa4a 	bl	8003c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a6:	4845      	ldr	r0, [pc, #276]	; (80008bc <main+0x234>)
 80007a8:	f003 fa44 	bl	8003c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007b2:	4842      	ldr	r0, [pc, #264]	; (80008bc <main+0x234>)
 80007b4:	f003 fa3e 	bl	8003c34 <HAL_GPIO_WritePin>

		HAL_Delay(500);
 80007b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007bc:	f002 ff50 	bl	8003660 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c6:	483d      	ldr	r0, [pc, #244]	; (80008bc <main+0x234>)
 80007c8:	f003 fa34 	bl	8003c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d2:	483a      	ldr	r0, [pc, #232]	; (80008bc <main+0x234>)
 80007d4:	f003 fa2e 	bl	8003c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007de:	4837      	ldr	r0, [pc, #220]	; (80008bc <main+0x234>)
 80007e0:	f003 fa28 	bl	8003c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ea:	4834      	ldr	r0, [pc, #208]	; (80008bc <main+0x234>)
 80007ec:	f003 fa22 	bl	8003c34 <HAL_GPIO_WritePin>

		HAL_Delay(500);
 80007f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f4:	f002 ff34 	bl	8003660 <HAL_Delay>


		while (1) {

	  	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 80007f8:	e03f      	b.n	800087a <main+0x1f2>

	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000800:	482e      	ldr	r0, [pc, #184]	; (80008bc <main+0x234>)
 8000802:	f003 fa17 	bl	8003c34 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800080c:	482b      	ldr	r0, [pc, #172]	; (80008bc <main+0x234>)
 800080e:	f003 fa11 	bl	8003c34 <HAL_GPIO_WritePin>

	  		HAL_Delay(1000);
 8000812:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000816:	f002 ff23 	bl	8003660 <HAL_Delay>

	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800081a:	2201      	movs	r2, #1
 800081c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000820:	4826      	ldr	r0, [pc, #152]	; (80008bc <main+0x234>)
 8000822:	f003 fa07 	bl	8003c34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800082c:	4823      	ldr	r0, [pc, #140]	; (80008bc <main+0x234>)
 800082e:	f003 fa01 	bl	8003c34 <HAL_GPIO_WritePin>

			HAL_Delay(1000);
 8000832:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000836:	f002 ff13 	bl	8003660 <HAL_Delay>

			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800083a:	2201      	movs	r2, #1
 800083c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000840:	481e      	ldr	r0, [pc, #120]	; (80008bc <main+0x234>)
 8000842:	f003 f9f7 	bl	8003c34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084c:	481b      	ldr	r0, [pc, #108]	; (80008bc <main+0x234>)
 800084e:	f003 f9f1 	bl	8003c34 <HAL_GPIO_WritePin>

			HAL_Delay(1000);
 8000852:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000856:	f002 ff03 	bl	8003660 <HAL_Delay>

			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800085a:	2201      	movs	r2, #1
 800085c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000860:	4816      	ldr	r0, [pc, #88]	; (80008bc <main+0x234>)
 8000862:	f003 f9e7 	bl	8003c34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800086c:	4813      	ldr	r0, [pc, #76]	; (80008bc <main+0x234>)
 800086e:	f003 f9e1 	bl	8003c34 <HAL_GPIO_WritePin>

			HAL_Delay(1000);
 8000872:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000876:	f002 fef3 	bl	8003660 <HAL_Delay>
	  	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 800087a:	2101      	movs	r1, #1
 800087c:	4810      	ldr	r0, [pc, #64]	; (80008c0 <main+0x238>)
 800087e:	f003 f9c1 	bl	8003c04 <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	2b01      	cmp	r3, #1
 8000886:	d0b8      	beq.n	80007fa <main+0x172>
	  	}
	  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088e:	480b      	ldr	r0, [pc, #44]	; (80008bc <main+0x234>)
 8000890:	f003 f9d0 	bl	8003c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800089a:	4808      	ldr	r0, [pc, #32]	; (80008bc <main+0x234>)
 800089c:	f003 f9ca 	bl	8003c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <main+0x234>)
 80008a8:	f003 f9c4 	bl	8003c34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b2:	4802      	ldr	r0, [pc, #8]	; (80008bc <main+0x234>)
 80008b4:	f003 f9be 	bl	8003c34 <HAL_GPIO_WritePin>
	  	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 80008b8:	e7df      	b.n	800087a <main+0x1f2>
 80008ba:	bf00      	nop
 80008bc:	40020c00 	.word	0x40020c00
 80008c0:	40020000 	.word	0x40020000

080008c4 <HAL_GPIO_EXTI_Callback>:
	  	  }*/

	    }
	    /* USER CODE END 3 */

	  void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b0c0      	sub	sp, #256	; 0x100
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	80fb      	strh	r3, [r7, #6]

		  for(uint32_t i = 0; i < 50000; i++);
 80008ce:	2300      	movs	r3, #0
 80008d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80008d4:	e004      	b.n	80008e0 <HAL_GPIO_EXTI_Callback+0x1c>
 80008d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80008da:	3301      	adds	r3, #1
 80008dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80008e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80008e4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d9f4      	bls.n	80008d6 <HAL_GPIO_EXTI_Callback+0x12>

		  char pad_active = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		  	uint32_t num_rand;
			HAL_RNG_GenerateRandomNumber(&hrng, &num_rand);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	48c5      	ldr	r0, [pc, #788]	; (8000c10 <HAL_GPIO_EXTI_Callback+0x34c>)
 80008fa:	f006 f98d 	bl	8006c18 <HAL_RNG_GenerateRandomNumber>

			srand(num_rand);
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	4618      	mov	r0, r3
 8000902:	f008 fe35 	bl	8009570 <srand>
			int random_num[4];
			for (uint32_t i = 0; i < 4; i++) {
 8000906:	2300      	movs	r3, #0
 8000908:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800090c:	e01a      	b.n	8000944 <HAL_GPIO_EXTI_Callback+0x80>
				random_num[i] = (rand() % 10);
 800090e:	f008 fe5d 	bl	80095cc <rand>
 8000912:	4601      	mov	r1, r0
 8000914:	4bbf      	ldr	r3, [pc, #764]	; (8000c14 <HAL_GPIO_EXTI_Callback+0x350>)
 8000916:	fb83 2301 	smull	r2, r3, r3, r1
 800091a:	109a      	asrs	r2, r3, #2
 800091c:	17cb      	asrs	r3, r1, #31
 800091e:	1ad2      	subs	r2, r2, r3
 8000920:	4613      	mov	r3, r2
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	4413      	add	r3, r2
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	1aca      	subs	r2, r1, r3
 800092a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000934:	443b      	add	r3, r7
 8000936:	f843 2cf4 	str.w	r2, [r3, #-244]
			for (uint32_t i = 0; i < 4; i++) {
 800093a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800093e:	3301      	adds	r3, #1
 8000940:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000944:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000948:	2b03      	cmp	r3, #3
 800094a:	d9e0      	bls.n	800090e <HAL_GPIO_EXTI_Callback+0x4a>
			}

		   char guess_g = 10;
 800094c:	230a      	movs	r3, #10
 800094e:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		   char guess_o = 10;
 8000952:	230a      	movs	r3, #10
 8000954:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
		   char guess_r = 10;
 8000958:	230a      	movs	r3, #10
 800095a:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
		   char guess_b = 10;
 800095e:	230a      	movs	r3, #10
 8000960:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4


		  char guessf_g = 10;
 8000964:	230a      	movs	r3, #10
 8000966:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
		  char guessf_o = 10;
 800096a:	230a      	movs	r3, #10
 800096c:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
		  char guessf_r = 10;
 8000970:	230a      	movs	r3, #10
 8000972:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
		  char guessf_b = 10;
 8000976:	230a      	movs	r3, #10
 8000978:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
		  if ((guess_g == random_num[0]) && (guess_o == random_num[1]) && (guess_r == random_num[2]) && (guess_b == random_num[3])) {
 800097c:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	429a      	cmp	r2, r3
 8000984:	f040 82e0 	bne.w	8000f48 <HAL_GPIO_EXTI_Callback+0x684>
 8000988:	f897 20f6 	ldrb.w	r2, [r7, #246]	; 0xf6
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	429a      	cmp	r2, r3
 8000990:	f040 82da 	bne.w	8000f48 <HAL_GPIO_EXTI_Callback+0x684>
 8000994:	f897 20f5 	ldrb.w	r2, [r7, #245]	; 0xf5
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	429a      	cmp	r2, r3
 800099c:	f040 82d4 	bne.w	8000f48 <HAL_GPIO_EXTI_Callback+0x684>
 80009a0:	f897 20f4 	ldrb.w	r2, [r7, #244]	; 0xf4
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	f040 82ce 	bne.w	8000f48 <HAL_GPIO_EXTI_Callback+0x684>
			  while ((guessf_g != random_num[0]) || (guessf_o != random_num[1]) || (guessf_r != random_num[2]) || (guessf_b != random_num[3])) {
 80009ac:	e2b4      	b.n	8000f18 <HAL_GPIO_EXTI_Callback+0x654>
				  if (guessf_g != random_num[0]) {
 80009ae:	f897 20f3 	ldrb.w	r2, [r7, #243]	; 0xf3
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d07f      	beq.n	8000ab8 <HAL_GPIO_EXTI_Callback+0x1f4>

					 pad_active = check_keys();
 80009b8:	f7ff fddc 	bl	8000574 <check_keys>
 80009bc:	4603      	mov	r3, r0
 80009be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

					 if(pad_active != 0) {
 80009c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d04e      	beq.n	8000a68 <HAL_GPIO_EXTI_Callback+0x1a4>

							if(pad_active == '1') {
 80009ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009ce:	2b31      	cmp	r3, #49	; 0x31
 80009d0:	d103      	bne.n	80009da <HAL_GPIO_EXTI_Callback+0x116>
								guessf_g = 1;
 80009d2:	2301      	movs	r3, #1
 80009d4:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 80009d8:	e046      	b.n	8000a68 <HAL_GPIO_EXTI_Callback+0x1a4>
							}
							else if(pad_active == '2') {
 80009da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009de:	2b32      	cmp	r3, #50	; 0x32
 80009e0:	d103      	bne.n	80009ea <HAL_GPIO_EXTI_Callback+0x126>
								guessf_g = 2;
 80009e2:	2302      	movs	r3, #2
 80009e4:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 80009e8:	e03e      	b.n	8000a68 <HAL_GPIO_EXTI_Callback+0x1a4>
							}
							else if(pad_active == '3') {
 80009ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009ee:	2b33      	cmp	r3, #51	; 0x33
 80009f0:	d103      	bne.n	80009fa <HAL_GPIO_EXTI_Callback+0x136>
								guessf_g = 3;
 80009f2:	2303      	movs	r3, #3
 80009f4:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 80009f8:	e036      	b.n	8000a68 <HAL_GPIO_EXTI_Callback+0x1a4>
							}
							else if(pad_active == '4') {
 80009fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009fe:	2b34      	cmp	r3, #52	; 0x34
 8000a00:	d103      	bne.n	8000a0a <HAL_GPIO_EXTI_Callback+0x146>
								guessf_g = 4;
 8000a02:	2304      	movs	r3, #4
 8000a04:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 8000a08:	e02e      	b.n	8000a68 <HAL_GPIO_EXTI_Callback+0x1a4>
							}
							else if(pad_active == '5') {
 8000a0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a0e:	2b35      	cmp	r3, #53	; 0x35
 8000a10:	d103      	bne.n	8000a1a <HAL_GPIO_EXTI_Callback+0x156>
								guessf_g = 5;
 8000a12:	2305      	movs	r3, #5
 8000a14:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 8000a18:	e026      	b.n	8000a68 <HAL_GPIO_EXTI_Callback+0x1a4>
							}
							else if(pad_active == '6') {
 8000a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a1e:	2b36      	cmp	r3, #54	; 0x36
 8000a20:	d103      	bne.n	8000a2a <HAL_GPIO_EXTI_Callback+0x166>
								guessf_g = 6;
 8000a22:	2306      	movs	r3, #6
 8000a24:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 8000a28:	e01e      	b.n	8000a68 <HAL_GPIO_EXTI_Callback+0x1a4>
							}
							else if(pad_active == '7') {
 8000a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a2e:	2b37      	cmp	r3, #55	; 0x37
 8000a30:	d103      	bne.n	8000a3a <HAL_GPIO_EXTI_Callback+0x176>
								guessf_g = 7;
 8000a32:	2307      	movs	r3, #7
 8000a34:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 8000a38:	e016      	b.n	8000a68 <HAL_GPIO_EXTI_Callback+0x1a4>
							}
							else if(pad_active == '8') {
 8000a3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a3e:	2b38      	cmp	r3, #56	; 0x38
 8000a40:	d103      	bne.n	8000a4a <HAL_GPIO_EXTI_Callback+0x186>
								guessf_g = 8;
 8000a42:	2308      	movs	r3, #8
 8000a44:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 8000a48:	e00e      	b.n	8000a68 <HAL_GPIO_EXTI_Callback+0x1a4>
							}
							else if(pad_active == '9') {
 8000a4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a4e:	2b39      	cmp	r3, #57	; 0x39
 8000a50:	d103      	bne.n	8000a5a <HAL_GPIO_EXTI_Callback+0x196>
								guessf_g = 9;
 8000a52:	2309      	movs	r3, #9
 8000a54:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 8000a58:	e006      	b.n	8000a68 <HAL_GPIO_EXTI_Callback+0x1a4>
							}
							else if(pad_active == '0') {
 8000a5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a5e:	2b30      	cmp	r3, #48	; 0x30
 8000a60:	d102      	bne.n	8000a68 <HAL_GPIO_EXTI_Callback+0x1a4>
								guessf_g = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
							}
						}
					 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6e:	486a      	ldr	r0, [pc, #424]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x354>)
 8000a70:	f003 f8e0 	bl	8003c34 <HAL_GPIO_WritePin>
					 for (int i = 0; i < 3000000; i++);
 8000a74:	2300      	movs	r3, #0
 8000a76:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000a7a:	e004      	b.n	8000a86 <HAL_GPIO_EXTI_Callback+0x1c2>
 8000a7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000a80:	3301      	adds	r3, #1
 8000a82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000a86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000a8a:	4a64      	ldr	r2, [pc, #400]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x358>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	ddf5      	ble.n	8000a7c <HAL_GPIO_EXTI_Callback+0x1b8>
					 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a96:	4860      	ldr	r0, [pc, #384]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x354>)
 8000a98:	f003 f8cc 	bl	8003c34 <HAL_GPIO_WritePin>
					 for (int i = 0; i < 3000000; i++);
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000aa2:	e004      	b.n	8000aae <HAL_GPIO_EXTI_Callback+0x1ea>
 8000aa4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000aae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000ab2:	4a5a      	ldr	r2, [pc, #360]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x358>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	ddf5      	ble.n	8000aa4 <HAL_GPIO_EXTI_Callback+0x1e0>
				  }
				  if (guessf_o != random_num[1]) {
 8000ab8:	f897 20f2 	ldrb.w	r2, [r7, #242]	; 0xf2
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	f000 80ba 	beq.w	8000c38 <HAL_GPIO_EXTI_Callback+0x374>

					 pad_active = check_keys();
 8000ac4:	f7ff fd56 	bl	8000574 <check_keys>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

					 if(pad_active != 0) {
 8000ace:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d07d      	beq.n	8000bd2 <HAL_GPIO_EXTI_Callback+0x30e>

							if(pad_active == '1') {
 8000ad6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ada:	2b31      	cmp	r3, #49	; 0x31
 8000adc:	d132      	bne.n	8000b44 <HAL_GPIO_EXTI_Callback+0x280>
								guessf_o = 1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2180      	movs	r1, #128	; 0x80
 8000ae8:	484d      	ldr	r0, [pc, #308]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x35c>)
 8000aea:	f003 f8a3 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af4:	484a      	ldr	r0, [pc, #296]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x35c>)
 8000af6:	f003 f89d 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b00:	4847      	ldr	r0, [pc, #284]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x35c>)
 8000b02:	f003 f897 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8000b06:	2201      	movs	r2, #1
 8000b08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b0c:	4844      	ldr	r0, [pc, #272]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x35c>)
 8000b0e:	f003 f891 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b18:	4841      	ldr	r0, [pc, #260]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x35c>)
 8000b1a:	f003 f88b 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b24:	483e      	ldr	r0, [pc, #248]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x35c>)
 8000b26:	f003 f885 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b30:	483b      	ldr	r0, [pc, #236]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x35c>)
 8000b32:	f003 f87f 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b3c:	4838      	ldr	r0, [pc, #224]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x35c>)
 8000b3e:	f003 f879 	bl	8003c34 <HAL_GPIO_WritePin>
 8000b42:	e046      	b.n	8000bd2 <HAL_GPIO_EXTI_Callback+0x30e>
							}
							else if(pad_active == '2') {
 8000b44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b48:	2b32      	cmp	r3, #50	; 0x32
 8000b4a:	d103      	bne.n	8000b54 <HAL_GPIO_EXTI_Callback+0x290>
								guessf_o = 2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 8000b52:	e03e      	b.n	8000bd2 <HAL_GPIO_EXTI_Callback+0x30e>
							}
							else if(pad_active == '3') {
 8000b54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b58:	2b33      	cmp	r3, #51	; 0x33
 8000b5a:	d103      	bne.n	8000b64 <HAL_GPIO_EXTI_Callback+0x2a0>
								guessf_o = 3;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 8000b62:	e036      	b.n	8000bd2 <HAL_GPIO_EXTI_Callback+0x30e>
							}
							else if(pad_active == '4') {
 8000b64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b68:	2b34      	cmp	r3, #52	; 0x34
 8000b6a:	d103      	bne.n	8000b74 <HAL_GPIO_EXTI_Callback+0x2b0>
								guessf_o = 4;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 8000b72:	e02e      	b.n	8000bd2 <HAL_GPIO_EXTI_Callback+0x30e>
							}
							else if(pad_active == '5') {
 8000b74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b78:	2b35      	cmp	r3, #53	; 0x35
 8000b7a:	d103      	bne.n	8000b84 <HAL_GPIO_EXTI_Callback+0x2c0>
								guessf_o = 5;
 8000b7c:	2305      	movs	r3, #5
 8000b7e:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 8000b82:	e026      	b.n	8000bd2 <HAL_GPIO_EXTI_Callback+0x30e>
							}
							else if(pad_active == '6') {
 8000b84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b88:	2b36      	cmp	r3, #54	; 0x36
 8000b8a:	d103      	bne.n	8000b94 <HAL_GPIO_EXTI_Callback+0x2d0>
								guessf_o = 6;
 8000b8c:	2306      	movs	r3, #6
 8000b8e:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 8000b92:	e01e      	b.n	8000bd2 <HAL_GPIO_EXTI_Callback+0x30e>
							}
							else if(pad_active == '7') {
 8000b94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b98:	2b37      	cmp	r3, #55	; 0x37
 8000b9a:	d103      	bne.n	8000ba4 <HAL_GPIO_EXTI_Callback+0x2e0>
								guessf_o = 7;
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 8000ba2:	e016      	b.n	8000bd2 <HAL_GPIO_EXTI_Callback+0x30e>
							}
							else if(pad_active == '8') {
 8000ba4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ba8:	2b38      	cmp	r3, #56	; 0x38
 8000baa:	d103      	bne.n	8000bb4 <HAL_GPIO_EXTI_Callback+0x2f0>
								guessf_o = 8;
 8000bac:	2308      	movs	r3, #8
 8000bae:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 8000bb2:	e00e      	b.n	8000bd2 <HAL_GPIO_EXTI_Callback+0x30e>
							}
							else if(pad_active == '9') {
 8000bb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000bb8:	2b39      	cmp	r3, #57	; 0x39
 8000bba:	d103      	bne.n	8000bc4 <HAL_GPIO_EXTI_Callback+0x300>
								guessf_o = 9;
 8000bbc:	2309      	movs	r3, #9
 8000bbe:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 8000bc2:	e006      	b.n	8000bd2 <HAL_GPIO_EXTI_Callback+0x30e>
							}
							else if(pad_active == '0') {
 8000bc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000bc8:	2b30      	cmp	r3, #48	; 0x30
 8000bca:	d102      	bne.n	8000bd2 <HAL_GPIO_EXTI_Callback+0x30e>
								guessf_o = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
							}
						}
					 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd8:	480f      	ldr	r0, [pc, #60]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x354>)
 8000bda:	f003 f82b 	bl	8003c34 <HAL_GPIO_WritePin>
					 for (int i = 0; i < 3000000; i++);
 8000bde:	2300      	movs	r3, #0
 8000be0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000be4:	e004      	b.n	8000bf0 <HAL_GPIO_EXTI_Callback+0x32c>
 8000be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000bea:	3301      	adds	r3, #1
 8000bec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000bf4:	4a09      	ldr	r2, [pc, #36]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x358>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	ddf5      	ble.n	8000be6 <HAL_GPIO_EXTI_Callback+0x322>
					 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x354>)
 8000c02:	f003 f817 	bl	8003c34 <HAL_GPIO_WritePin>
					 for (int i = 0; i < 3000000; i++);
 8000c06:	2300      	movs	r3, #0
 8000c08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000c0c:	e00f      	b.n	8000c2e <HAL_GPIO_EXTI_Callback+0x36a>
 8000c0e:	bf00      	nop
 8000c10:	20000148 	.word	0x20000148
 8000c14:	66666667 	.word	0x66666667
 8000c18:	40020c00 	.word	0x40020c00
 8000c1c:	002dc6bf 	.word	0x002dc6bf
 8000c20:	40021000 	.word	0x40021000
 8000c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000c28:	3301      	adds	r3, #1
 8000c2a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000c32:	4ab1      	ldr	r2, [pc, #708]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x634>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	ddf5      	ble.n	8000c24 <HAL_GPIO_EXTI_Callback+0x360>
				  }
				  if (guessf_r != random_num[2]) {
 8000c38:	f897 20f1 	ldrb.w	r2, [r7, #241]	; 0xf1
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	f000 80af 	beq.w	8000da2 <HAL_GPIO_EXTI_Callback+0x4de>

					 pad_active = check_keys();
 8000c44:	f7ff fc96 	bl	8000574 <check_keys>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

					 if(pad_active != 0) {
 8000c4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d07d      	beq.n	8000d52 <HAL_GPIO_EXTI_Callback+0x48e>

							if(pad_active == '1') {
 8000c56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c5a:	2b31      	cmp	r3, #49	; 0x31
 8000c5c:	d132      	bne.n	8000cc4 <HAL_GPIO_EXTI_Callback+0x400>
								guessf_r = 1;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	2180      	movs	r1, #128	; 0x80
 8000c68:	48a4      	ldr	r0, [pc, #656]	; (8000efc <HAL_GPIO_EXTI_Callback+0x638>)
 8000c6a:	f002 ffe3 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c74:	48a1      	ldr	r0, [pc, #644]	; (8000efc <HAL_GPIO_EXTI_Callback+0x638>)
 8000c76:	f002 ffdd 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c80:	489e      	ldr	r0, [pc, #632]	; (8000efc <HAL_GPIO_EXTI_Callback+0x638>)
 8000c82:	f002 ffd7 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8000c86:	2201      	movs	r2, #1
 8000c88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8c:	489b      	ldr	r0, [pc, #620]	; (8000efc <HAL_GPIO_EXTI_Callback+0x638>)
 8000c8e:	f002 ffd1 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c98:	4898      	ldr	r0, [pc, #608]	; (8000efc <HAL_GPIO_EXTI_Callback+0x638>)
 8000c9a:	f002 ffcb 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ca4:	4895      	ldr	r0, [pc, #596]	; (8000efc <HAL_GPIO_EXTI_Callback+0x638>)
 8000ca6:	f002 ffc5 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb0:	4892      	ldr	r0, [pc, #584]	; (8000efc <HAL_GPIO_EXTI_Callback+0x638>)
 8000cb2:	f002 ffbf 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cbc:	488f      	ldr	r0, [pc, #572]	; (8000efc <HAL_GPIO_EXTI_Callback+0x638>)
 8000cbe:	f002 ffb9 	bl	8003c34 <HAL_GPIO_WritePin>
 8000cc2:	e046      	b.n	8000d52 <HAL_GPIO_EXTI_Callback+0x48e>
							}
							else if(pad_active == '2') {
 8000cc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cc8:	2b32      	cmp	r3, #50	; 0x32
 8000cca:	d103      	bne.n	8000cd4 <HAL_GPIO_EXTI_Callback+0x410>
								guessf_r = 2;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
 8000cd2:	e03e      	b.n	8000d52 <HAL_GPIO_EXTI_Callback+0x48e>
							}
							else if(pad_active == '3') {
 8000cd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cd8:	2b33      	cmp	r3, #51	; 0x33
 8000cda:	d103      	bne.n	8000ce4 <HAL_GPIO_EXTI_Callback+0x420>
								guessf_r = 3;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
 8000ce2:	e036      	b.n	8000d52 <HAL_GPIO_EXTI_Callback+0x48e>
							}
							else if(pad_active == '4') {
 8000ce4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ce8:	2b34      	cmp	r3, #52	; 0x34
 8000cea:	d103      	bne.n	8000cf4 <HAL_GPIO_EXTI_Callback+0x430>
								guessf_r = 4;
 8000cec:	2304      	movs	r3, #4
 8000cee:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
 8000cf2:	e02e      	b.n	8000d52 <HAL_GPIO_EXTI_Callback+0x48e>
							}
							else if(pad_active == '5') {
 8000cf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cf8:	2b35      	cmp	r3, #53	; 0x35
 8000cfa:	d103      	bne.n	8000d04 <HAL_GPIO_EXTI_Callback+0x440>
								guessf_r = 5;
 8000cfc:	2305      	movs	r3, #5
 8000cfe:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
 8000d02:	e026      	b.n	8000d52 <HAL_GPIO_EXTI_Callback+0x48e>
							}
							else if(pad_active == '6') {
 8000d04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d08:	2b36      	cmp	r3, #54	; 0x36
 8000d0a:	d103      	bne.n	8000d14 <HAL_GPIO_EXTI_Callback+0x450>
								guessf_r = 6;
 8000d0c:	2306      	movs	r3, #6
 8000d0e:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
 8000d12:	e01e      	b.n	8000d52 <HAL_GPIO_EXTI_Callback+0x48e>
							}
							else if(pad_active == '7') {
 8000d14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d18:	2b37      	cmp	r3, #55	; 0x37
 8000d1a:	d103      	bne.n	8000d24 <HAL_GPIO_EXTI_Callback+0x460>
								guessf_r = 7;
 8000d1c:	2307      	movs	r3, #7
 8000d1e:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
 8000d22:	e016      	b.n	8000d52 <HAL_GPIO_EXTI_Callback+0x48e>
							}
							else if(pad_active == '8') {
 8000d24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d28:	2b38      	cmp	r3, #56	; 0x38
 8000d2a:	d103      	bne.n	8000d34 <HAL_GPIO_EXTI_Callback+0x470>
								guessf_r = 8;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
 8000d32:	e00e      	b.n	8000d52 <HAL_GPIO_EXTI_Callback+0x48e>
							}
							else if(pad_active == '9') {
 8000d34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d38:	2b39      	cmp	r3, #57	; 0x39
 8000d3a:	d103      	bne.n	8000d44 <HAL_GPIO_EXTI_Callback+0x480>
								guessf_r = 9;
 8000d3c:	2309      	movs	r3, #9
 8000d3e:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
 8000d42:	e006      	b.n	8000d52 <HAL_GPIO_EXTI_Callback+0x48e>
							}
							else if(pad_active == '0') {
 8000d44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d48:	2b30      	cmp	r3, #48	; 0x30
 8000d4a:	d102      	bne.n	8000d52 <HAL_GPIO_EXTI_Callback+0x48e>
								guessf_r = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
							}
						}
					 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000d52:	2201      	movs	r2, #1
 8000d54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d58:	4869      	ldr	r0, [pc, #420]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x63c>)
 8000d5a:	f002 ff6b 	bl	8003c34 <HAL_GPIO_WritePin>
					 for (int i = 0; i < 3000000; i++);
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000d64:	e004      	b.n	8000d70 <HAL_GPIO_EXTI_Callback+0x4ac>
 8000d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000d74:	4a60      	ldr	r2, [pc, #384]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x634>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	ddf5      	ble.n	8000d66 <HAL_GPIO_EXTI_Callback+0x4a2>
					 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d80:	485f      	ldr	r0, [pc, #380]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x63c>)
 8000d82:	f002 ff57 	bl	8003c34 <HAL_GPIO_WritePin>
					 for (int i = 0; i < 3000000; i++);
 8000d86:	2300      	movs	r3, #0
 8000d88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000d8c:	e004      	b.n	8000d98 <HAL_GPIO_EXTI_Callback+0x4d4>
 8000d8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000d92:	3301      	adds	r3, #1
 8000d94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000d98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000d9c:	4a56      	ldr	r2, [pc, #344]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x634>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	ddf5      	ble.n	8000d8e <HAL_GPIO_EXTI_Callback+0x4ca>
				  }
				  if (guessf_b != random_num[3]) {
 8000da2:	f897 20f0 	ldrb.w	r2, [r7, #240]	; 0xf0
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	f000 80b5 	beq.w	8000f18 <HAL_GPIO_EXTI_Callback+0x654>

					 pad_active = check_keys();
 8000dae:	f7ff fbe1 	bl	8000574 <check_keys>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

					 if(pad_active != 0) {
 8000db8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d07d      	beq.n	8000ebc <HAL_GPIO_EXTI_Callback+0x5f8>

							if(pad_active == '1') {
 8000dc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dc4:	2b31      	cmp	r3, #49	; 0x31
 8000dc6:	d132      	bne.n	8000e2e <HAL_GPIO_EXTI_Callback+0x56a>
								guessf_b = 1;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	484a      	ldr	r0, [pc, #296]	; (8000efc <HAL_GPIO_EXTI_Callback+0x638>)
 8000dd4:	f002 ff2e 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dde:	4847      	ldr	r0, [pc, #284]	; (8000efc <HAL_GPIO_EXTI_Callback+0x638>)
 8000de0:	f002 ff28 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dea:	4844      	ldr	r0, [pc, #272]	; (8000efc <HAL_GPIO_EXTI_Callback+0x638>)
 8000dec:	f002 ff22 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df6:	4841      	ldr	r0, [pc, #260]	; (8000efc <HAL_GPIO_EXTI_Callback+0x638>)
 8000df8:	f002 ff1c 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e02:	483e      	ldr	r0, [pc, #248]	; (8000efc <HAL_GPIO_EXTI_Callback+0x638>)
 8000e04:	f002 ff16 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e0e:	483b      	ldr	r0, [pc, #236]	; (8000efc <HAL_GPIO_EXTI_Callback+0x638>)
 8000e10:	f002 ff10 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e1a:	4838      	ldr	r0, [pc, #224]	; (8000efc <HAL_GPIO_EXTI_Callback+0x638>)
 8000e1c:	f002 ff0a 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e26:	4835      	ldr	r0, [pc, #212]	; (8000efc <HAL_GPIO_EXTI_Callback+0x638>)
 8000e28:	f002 ff04 	bl	8003c34 <HAL_GPIO_WritePin>
 8000e2c:	e046      	b.n	8000ebc <HAL_GPIO_EXTI_Callback+0x5f8>
							}
							else if(pad_active == '2') {
 8000e2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e32:	2b32      	cmp	r3, #50	; 0x32
 8000e34:	d103      	bne.n	8000e3e <HAL_GPIO_EXTI_Callback+0x57a>
								guessf_b = 2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
 8000e3c:	e03e      	b.n	8000ebc <HAL_GPIO_EXTI_Callback+0x5f8>
							}
							else if(pad_active == '3') {
 8000e3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e42:	2b33      	cmp	r3, #51	; 0x33
 8000e44:	d103      	bne.n	8000e4e <HAL_GPIO_EXTI_Callback+0x58a>
								guessf_b = 3;
 8000e46:	2303      	movs	r3, #3
 8000e48:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
 8000e4c:	e036      	b.n	8000ebc <HAL_GPIO_EXTI_Callback+0x5f8>
							}
							else if(pad_active == '4') {
 8000e4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e52:	2b34      	cmp	r3, #52	; 0x34
 8000e54:	d103      	bne.n	8000e5e <HAL_GPIO_EXTI_Callback+0x59a>
								guessf_b = 4;
 8000e56:	2304      	movs	r3, #4
 8000e58:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
 8000e5c:	e02e      	b.n	8000ebc <HAL_GPIO_EXTI_Callback+0x5f8>
							}
							else if(pad_active == '5') {
 8000e5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e62:	2b35      	cmp	r3, #53	; 0x35
 8000e64:	d103      	bne.n	8000e6e <HAL_GPIO_EXTI_Callback+0x5aa>
								guessf_b = 5;
 8000e66:	2305      	movs	r3, #5
 8000e68:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
 8000e6c:	e026      	b.n	8000ebc <HAL_GPIO_EXTI_Callback+0x5f8>
							}
							else if(pad_active == '6') {
 8000e6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e72:	2b36      	cmp	r3, #54	; 0x36
 8000e74:	d103      	bne.n	8000e7e <HAL_GPIO_EXTI_Callback+0x5ba>
								guessf_b = 6;
 8000e76:	2306      	movs	r3, #6
 8000e78:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
 8000e7c:	e01e      	b.n	8000ebc <HAL_GPIO_EXTI_Callback+0x5f8>
							}
							else if(pad_active == '7') {
 8000e7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e82:	2b37      	cmp	r3, #55	; 0x37
 8000e84:	d103      	bne.n	8000e8e <HAL_GPIO_EXTI_Callback+0x5ca>
								guessf_b = 7;
 8000e86:	2307      	movs	r3, #7
 8000e88:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
 8000e8c:	e016      	b.n	8000ebc <HAL_GPIO_EXTI_Callback+0x5f8>
							}
							else if(pad_active == '8') {
 8000e8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e92:	2b38      	cmp	r3, #56	; 0x38
 8000e94:	d103      	bne.n	8000e9e <HAL_GPIO_EXTI_Callback+0x5da>
								guessf_b = 8;
 8000e96:	2308      	movs	r3, #8
 8000e98:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
 8000e9c:	e00e      	b.n	8000ebc <HAL_GPIO_EXTI_Callback+0x5f8>
							}
							else if(pad_active == '9') {
 8000e9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ea2:	2b39      	cmp	r3, #57	; 0x39
 8000ea4:	d103      	bne.n	8000eae <HAL_GPIO_EXTI_Callback+0x5ea>
								guessf_b = 9;
 8000ea6:	2309      	movs	r3, #9
 8000ea8:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
 8000eac:	e006      	b.n	8000ebc <HAL_GPIO_EXTI_Callback+0x5f8>
							}
							else if(pad_active == '0') {
 8000eae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000eb2:	2b30      	cmp	r3, #48	; 0x30
 8000eb4:	d102      	bne.n	8000ebc <HAL_GPIO_EXTI_Callback+0x5f8>
								guessf_b = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
							}
						}
					 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec2:	480f      	ldr	r0, [pc, #60]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x63c>)
 8000ec4:	f002 feb6 	bl	8003c34 <HAL_GPIO_WritePin>
					 for (int i = 0; i < 3000000; i++);
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000ece:	e004      	b.n	8000eda <HAL_GPIO_EXTI_Callback+0x616>
 8000ed0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000eda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000ede:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x634>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	ddf5      	ble.n	8000ed0 <HAL_GPIO_EXTI_Callback+0x60c>
					 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x63c>)
 8000eec:	f002 fea2 	bl	8003c34 <HAL_GPIO_WritePin>
					 for (int i = 0; i < 3000000; i++);
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000ef6:	e00a      	b.n	8000f0e <HAL_GPIO_EXTI_Callback+0x64a>
 8000ef8:	002dc6bf 	.word	0x002dc6bf
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40020c00 	.word	0x40020c00
 8000f04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000f08:	3301      	adds	r3, #1
 8000f0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000f0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000f12:	4ac6      	ldr	r2, [pc, #792]	; (800122c <HAL_GPIO_EXTI_Callback+0x968>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	ddf5      	ble.n	8000f04 <HAL_GPIO_EXTI_Callback+0x640>
			  while ((guessf_g != random_num[0]) || (guessf_o != random_num[1]) || (guessf_r != random_num[2]) || (guessf_b != random_num[3])) {
 8000f18:	f897 20f3 	ldrb.w	r2, [r7, #243]	; 0xf3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	f47f ad45 	bne.w	80009ae <HAL_GPIO_EXTI_Callback+0xea>
 8000f24:	f897 20f2 	ldrb.w	r2, [r7, #242]	; 0xf2
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	f47f ad3f 	bne.w	80009ae <HAL_GPIO_EXTI_Callback+0xea>
 8000f30:	f897 20f1 	ldrb.w	r2, [r7, #241]	; 0xf1
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	f47f ad39 	bne.w	80009ae <HAL_GPIO_EXTI_Callback+0xea>
 8000f3c:	f897 20f0 	ldrb.w	r2, [r7, #240]	; 0xf0
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	f47f ad33 	bne.w	80009ae <HAL_GPIO_EXTI_Callback+0xea>
				  }
			  }

		  }
		  if ((guessf_g == random_num[0]) && (guessf_o == random_num[1]) && (guessf_r == random_num[2]) && (guessf_b == random_num[3])) {
 8000f48:	f897 20f3 	ldrb.w	r2, [r7, #243]	; 0xf3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	f040 8159 	bne.w	8001206 <HAL_GPIO_EXTI_Callback+0x942>
 8000f54:	f897 20f2 	ldrb.w	r2, [r7, #242]	; 0xf2
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	f040 8153 	bne.w	8001206 <HAL_GPIO_EXTI_Callback+0x942>
 8000f60:	f897 20f1 	ldrb.w	r2, [r7, #241]	; 0xf1
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	f040 814d 	bne.w	8001206 <HAL_GPIO_EXTI_Callback+0x942>
 8000f6c:	f897 20f0 	ldrb.w	r2, [r7, #240]	; 0xf0
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	f040 8147 	bne.w	8001206 <HAL_GPIO_EXTI_Callback+0x942>
			  char blink = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  while (blink <= 5) {
 8000f7e:	e13d      	b.n	80011fc <HAL_GPIO_EXTI_Callback+0x938>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2110      	movs	r1, #16
 8000f84:	48aa      	ldr	r0, [pc, #680]	; (8001230 <HAL_GPIO_EXTI_Callback+0x96c>)
 8000f86:	f002 fe55 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2120      	movs	r1, #32
 8000f8e:	48a8      	ldr	r0, [pc, #672]	; (8001230 <HAL_GPIO_EXTI_Callback+0x96c>)
 8000f90:	f002 fe50 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f9a:	48a6      	ldr	r0, [pc, #664]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 8000f9c:	f002 fe4a 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa6:	48a3      	ldr	r0, [pc, #652]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 8000fa8:	f002 fe44 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fb2:	48a0      	ldr	r0, [pc, #640]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 8000fb4:	f002 fe3e 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fbe:	489d      	ldr	r0, [pc, #628]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 8000fc0:	f002 fe38 	bl	8003c34 <HAL_GPIO_WritePin>
				  for (int i = 0; i < 3000000; i++);
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000fca:	e004      	b.n	8000fd6 <HAL_GPIO_EXTI_Callback+0x712>
 8000fcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000fd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000fda:	4a94      	ldr	r2, [pc, #592]	; (800122c <HAL_GPIO_EXTI_Callback+0x968>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	ddf5      	ble.n	8000fcc <HAL_GPIO_EXTI_Callback+0x708>
				  blink = blink + 1;
 8000fe0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	2110      	movs	r1, #16
 8000fee:	4890      	ldr	r0, [pc, #576]	; (8001230 <HAL_GPIO_EXTI_Callback+0x96c>)
 8000ff0:	f002 fe20 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2120      	movs	r1, #32
 8000ff8:	488d      	ldr	r0, [pc, #564]	; (8001230 <HAL_GPIO_EXTI_Callback+0x96c>)
 8000ffa:	f002 fe1b 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001004:	488b      	ldr	r0, [pc, #556]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 8001006:	f002 fe15 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800100a:	2201      	movs	r2, #1
 800100c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001010:	4888      	ldr	r0, [pc, #544]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 8001012:	f002 fe0f 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001016:	2201      	movs	r2, #1
 8001018:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800101c:	4885      	ldr	r0, [pc, #532]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 800101e:	f002 fe09 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001028:	4882      	ldr	r0, [pc, #520]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 800102a:	f002 fe03 	bl	8003c34 <HAL_GPIO_WritePin>
				  for (int i = 0; i < 3000000; i++);
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001034:	e004      	b.n	8001040 <HAL_GPIO_EXTI_Callback+0x77c>
 8001036:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800103a:	3301      	adds	r3, #1
 800103c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001040:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001044:	4a79      	ldr	r2, [pc, #484]	; (800122c <HAL_GPIO_EXTI_Callback+0x968>)
 8001046:	4293      	cmp	r3, r2
 8001048:	ddf5      	ble.n	8001036 <HAL_GPIO_EXTI_Callback+0x772>
				  blink = blink + 1;
 800104a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800104e:	3301      	adds	r3, #1
 8001050:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2110      	movs	r1, #16
 8001058:	4875      	ldr	r0, [pc, #468]	; (8001230 <HAL_GPIO_EXTI_Callback+0x96c>)
 800105a:	f002 fdeb 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	2120      	movs	r1, #32
 8001062:	4873      	ldr	r0, [pc, #460]	; (8001230 <HAL_GPIO_EXTI_Callback+0x96c>)
 8001064:	f002 fde6 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800106e:	4871      	ldr	r0, [pc, #452]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 8001070:	f002 fde0 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001074:	2201      	movs	r2, #1
 8001076:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107a:	486e      	ldr	r0, [pc, #440]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 800107c:	f002 fdda 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001086:	486b      	ldr	r0, [pc, #428]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 8001088:	f002 fdd4 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800108c:	2201      	movs	r2, #1
 800108e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001092:	4868      	ldr	r0, [pc, #416]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 8001094:	f002 fdce 	bl	8003c34 <HAL_GPIO_WritePin>
				  for (int i = 0; i < 3000000; i++);
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800109e:	e004      	b.n	80010aa <HAL_GPIO_EXTI_Callback+0x7e6>
 80010a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80010a4:	3301      	adds	r3, #1
 80010a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80010aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80010ae:	4a5f      	ldr	r2, [pc, #380]	; (800122c <HAL_GPIO_EXTI_Callback+0x968>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	ddf5      	ble.n	80010a0 <HAL_GPIO_EXTI_Callback+0x7dc>
				  blink = blink + 1;
 80010b4:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80010b8:	3301      	adds	r3, #1
 80010ba:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80010be:	2201      	movs	r2, #1
 80010c0:	2110      	movs	r1, #16
 80010c2:	485b      	ldr	r0, [pc, #364]	; (8001230 <HAL_GPIO_EXTI_Callback+0x96c>)
 80010c4:	f002 fdb6 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	2120      	movs	r1, #32
 80010cc:	4858      	ldr	r0, [pc, #352]	; (8001230 <HAL_GPIO_EXTI_Callback+0x96c>)
 80010ce:	f002 fdb1 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010d8:	4856      	ldr	r0, [pc, #344]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 80010da:	f002 fdab 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e4:	4853      	ldr	r0, [pc, #332]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 80010e6:	f002 fda5 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010f0:	4850      	ldr	r0, [pc, #320]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 80010f2:	f002 fd9f 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80010f6:	2201      	movs	r2, #1
 80010f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010fc:	484d      	ldr	r0, [pc, #308]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 80010fe:	f002 fd99 	bl	8003c34 <HAL_GPIO_WritePin>
				  for (int i = 0; i < 3000000; i++);
 8001102:	2300      	movs	r3, #0
 8001104:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001108:	e004      	b.n	8001114 <HAL_GPIO_EXTI_Callback+0x850>
 800110a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800110e:	3301      	adds	r3, #1
 8001110:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001114:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001118:	4a44      	ldr	r2, [pc, #272]	; (800122c <HAL_GPIO_EXTI_Callback+0x968>)
 800111a:	4293      	cmp	r3, r2
 800111c:	ddf5      	ble.n	800110a <HAL_GPIO_EXTI_Callback+0x846>
				  blink = blink + 1;
 800111e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001122:	3301      	adds	r3, #1
 8001124:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001128:	2201      	movs	r2, #1
 800112a:	2110      	movs	r1, #16
 800112c:	4840      	ldr	r0, [pc, #256]	; (8001230 <HAL_GPIO_EXTI_Callback+0x96c>)
 800112e:	f002 fd81 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001132:	2201      	movs	r2, #1
 8001134:	2120      	movs	r1, #32
 8001136:	483e      	ldr	r0, [pc, #248]	; (8001230 <HAL_GPIO_EXTI_Callback+0x96c>)
 8001138:	f002 fd7c 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800113c:	2201      	movs	r2, #1
 800113e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001142:	483c      	ldr	r0, [pc, #240]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 8001144:	f002 fd76 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001148:	2201      	movs	r2, #1
 800114a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800114e:	4839      	ldr	r0, [pc, #228]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 8001150:	f002 fd70 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001154:	2201      	movs	r2, #1
 8001156:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800115a:	4836      	ldr	r0, [pc, #216]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 800115c:	f002 fd6a 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001166:	4833      	ldr	r0, [pc, #204]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 8001168:	f002 fd64 	bl	8003c34 <HAL_GPIO_WritePin>
				  for (int i = 0; i < 3000000; i++);
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001172:	e004      	b.n	800117e <HAL_GPIO_EXTI_Callback+0x8ba>
 8001174:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001178:	3301      	adds	r3, #1
 800117a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800117e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001182:	4a2a      	ldr	r2, [pc, #168]	; (800122c <HAL_GPIO_EXTI_Callback+0x968>)
 8001184:	4293      	cmp	r3, r2
 8001186:	ddf5      	ble.n	8001174 <HAL_GPIO_EXTI_Callback+0x8b0>
				  blink = blink + 1;
 8001188:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800118c:	3301      	adds	r3, #1
 800118e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001192:	2201      	movs	r2, #1
 8001194:	2110      	movs	r1, #16
 8001196:	4826      	ldr	r0, [pc, #152]	; (8001230 <HAL_GPIO_EXTI_Callback+0x96c>)
 8001198:	f002 fd4c 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2120      	movs	r1, #32
 80011a0:	4823      	ldr	r0, [pc, #140]	; (8001230 <HAL_GPIO_EXTI_Callback+0x96c>)
 80011a2:	f002 fd47 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ac:	4821      	ldr	r0, [pc, #132]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 80011ae:	f002 fd41 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80011b2:	2201      	movs	r2, #1
 80011b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b8:	481e      	ldr	r0, [pc, #120]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 80011ba:	f002 fd3b 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011c4:	481b      	ldr	r0, [pc, #108]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 80011c6:	f002 fd35 	bl	8003c34 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d0:	4818      	ldr	r0, [pc, #96]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 80011d2:	f002 fd2f 	bl	8003c34 <HAL_GPIO_WritePin>
				  for (int i = 0; i < 3000000; i++);
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80011dc:	e004      	b.n	80011e8 <HAL_GPIO_EXTI_Callback+0x924>
 80011de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011e2:	3301      	adds	r3, #1
 80011e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80011e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011ec:	4a0f      	ldr	r2, [pc, #60]	; (800122c <HAL_GPIO_EXTI_Callback+0x968>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	ddf5      	ble.n	80011de <HAL_GPIO_EXTI_Callback+0x91a>
				  blink = blink + 1;
 80011f2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80011f6:	3301      	adds	r3, #1
 80011f8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  while (blink <= 5) {
 80011fc:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001200:	2b05      	cmp	r3, #5
 8001202:	f67f aebd 	bls.w	8000f80 <HAL_GPIO_EXTI_Callback+0x6bc>
			  }
		  }


		  if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) && (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET)) {
 8001206:	2101      	movs	r1, #1
 8001208:	480b      	ldr	r0, [pc, #44]	; (8001238 <HAL_GPIO_EXTI_Callback+0x974>)
 800120a:	f002 fcfb 	bl	8003c04 <HAL_GPIO_ReadPin>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	f040 834a 	bne.w	80018aa <HAL_GPIO_EXTI_Callback+0xfe6>
 8001216:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800121a:	4806      	ldr	r0, [pc, #24]	; (8001234 <HAL_GPIO_EXTI_Callback+0x970>)
 800121c:	f002 fcf2 	bl	8003c04 <HAL_GPIO_ReadPin>
 8001220:	4603      	mov	r3, r0
 8001222:	2b01      	cmp	r3, #1
 8001224:	f040 8341 	bne.w	80018aa <HAL_GPIO_EXTI_Callback+0xfe6>
				 while(guess_g != random_num[0]) {
 8001228:	e2d6      	b.n	80017d8 <HAL_GPIO_EXTI_Callback+0xf14>
 800122a:	bf00      	nop
 800122c:	002dc6bf 	.word	0x002dc6bf
 8001230:	40020400 	.word	0x40020400
 8001234:	40020c00 	.word	0x40020c00
 8001238:	40020000 	.word	0x40020000

					 pad_active = check_keys();
 800123c:	f7ff f99a 	bl	8000574 <check_keys>
 8001240:	4603      	mov	r3, r0
 8001242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

					 if(pad_active != 0) {
 8001246:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 8228 	beq.w	80016a0 <HAL_GPIO_EXTI_Callback+0xddc>

							if(pad_active == '1') {
 8001250:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001254:	2b31      	cmp	r3, #49	; 0x31
 8001256:	d132      	bne.n	80012be <HAL_GPIO_EXTI_Callback+0x9fa>
								guess_g = 1;
 8001258:	2301      	movs	r3, #1
 800125a:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 800125e:	2201      	movs	r2, #1
 8001260:	2180      	movs	r1, #128	; 0x80
 8001262:	48bc      	ldr	r0, [pc, #752]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001264:	f002 fce6 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126e:	48b9      	ldr	r0, [pc, #740]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001270:	f002 fce0 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 7100 	mov.w	r1, #512	; 0x200
 800127a:	48b6      	ldr	r0, [pc, #728]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 800127c:	f002 fcda 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001286:	48b3      	ldr	r0, [pc, #716]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001288:	f002 fcd4 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 800128c:	2201      	movs	r2, #1
 800128e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001292:	48b0      	ldr	r0, [pc, #704]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001294:	f002 fcce 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800129e:	48ad      	ldr	r0, [pc, #692]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 80012a0:	f002 fcc8 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012aa:	48aa      	ldr	r0, [pc, #680]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 80012ac:	f002 fcc2 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b6:	48a7      	ldr	r0, [pc, #668]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 80012b8:	f002 fcbc 	bl	8003c34 <HAL_GPIO_WritePin>
 80012bc:	e1f0      	b.n	80016a0 <HAL_GPIO_EXTI_Callback+0xddc>
							}
							else if(pad_active == '2') {
 80012be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80012c2:	2b32      	cmp	r3, #50	; 0x32
 80012c4:	d132      	bne.n	800132c <HAL_GPIO_EXTI_Callback+0xa68>
								guess_g = 2;
 80012c6:	2302      	movs	r3, #2
 80012c8:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2180      	movs	r1, #128	; 0x80
 80012d0:	48a0      	ldr	r0, [pc, #640]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 80012d2:	f002 fcaf 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012dc:	489d      	ldr	r0, [pc, #628]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 80012de:	f002 fca9 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 80012e2:	2201      	movs	r2, #1
 80012e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e8:	489a      	ldr	r0, [pc, #616]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 80012ea:	f002 fca3 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012f4:	4897      	ldr	r0, [pc, #604]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 80012f6:	f002 fc9d 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001300:	4894      	ldr	r0, [pc, #592]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001302:	f002 fc97 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001306:	2201      	movs	r2, #1
 8001308:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130c:	4891      	ldr	r0, [pc, #580]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 800130e:	f002 fc91 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001318:	488e      	ldr	r0, [pc, #568]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 800131a:	f002 fc8b 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 800131e:	2201      	movs	r2, #1
 8001320:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001324:	488b      	ldr	r0, [pc, #556]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001326:	f002 fc85 	bl	8003c34 <HAL_GPIO_WritePin>
 800132a:	e1b9      	b.n	80016a0 <HAL_GPIO_EXTI_Callback+0xddc>

							}
							else if(pad_active == '3') {
 800132c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001330:	2b33      	cmp	r3, #51	; 0x33
 8001332:	d132      	bne.n	800139a <HAL_GPIO_EXTI_Callback+0xad6>
								guess_g = 3;
 8001334:	2303      	movs	r3, #3
 8001336:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2180      	movs	r1, #128	; 0x80
 800133e:	4885      	ldr	r0, [pc, #532]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001340:	f002 fc78 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	f44f 7180 	mov.w	r1, #256	; 0x100
 800134a:	4882      	ldr	r0, [pc, #520]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 800134c:	f002 fc72 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001356:	487f      	ldr	r0, [pc, #508]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001358:	f002 fc6c 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001362:	487c      	ldr	r0, [pc, #496]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001364:	f002 fc66 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001368:	2201      	movs	r2, #1
 800136a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800136e:	4879      	ldr	r0, [pc, #484]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001370:	f002 fc60 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001374:	2201      	movs	r2, #1
 8001376:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800137a:	4876      	ldr	r0, [pc, #472]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 800137c:	f002 fc5a 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001386:	4873      	ldr	r0, [pc, #460]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001388:	f002 fc54 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 800138c:	2201      	movs	r2, #1
 800138e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001392:	4870      	ldr	r0, [pc, #448]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001394:	f002 fc4e 	bl	8003c34 <HAL_GPIO_WritePin>
 8001398:	e182      	b.n	80016a0 <HAL_GPIO_EXTI_Callback+0xddc>
							}
							else if(pad_active == '4') {
 800139a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800139e:	2b34      	cmp	r3, #52	; 0x34
 80013a0:	d132      	bne.n	8001408 <HAL_GPIO_EXTI_Callback+0xb44>
								guess_g = 4;
 80013a2:	2304      	movs	r3, #4
 80013a4:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2180      	movs	r1, #128	; 0x80
 80013ac:	4869      	ldr	r0, [pc, #420]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 80013ae:	f002 fc41 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b8:	4866      	ldr	r0, [pc, #408]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 80013ba:	f002 fc3b 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013c4:	4863      	ldr	r0, [pc, #396]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 80013c6:	f002 fc35 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 80013ca:	2201      	movs	r2, #1
 80013cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d0:	4860      	ldr	r0, [pc, #384]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 80013d2:	f002 fc2f 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013dc:	485d      	ldr	r0, [pc, #372]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 80013de:	f002 fc29 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e8:	485a      	ldr	r0, [pc, #360]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 80013ea:	f002 fc23 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f4:	4857      	ldr	r0, [pc, #348]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 80013f6:	f002 fc1d 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001400:	4854      	ldr	r0, [pc, #336]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001402:	f002 fc17 	bl	8003c34 <HAL_GPIO_WritePin>
 8001406:	e14b      	b.n	80016a0 <HAL_GPIO_EXTI_Callback+0xddc>
							}
							else if(pad_active == '5') {
 8001408:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800140c:	2b35      	cmp	r3, #53	; 0x35
 800140e:	d132      	bne.n	8001476 <HAL_GPIO_EXTI_Callback+0xbb2>
								guess_g = 5;
 8001410:	2305      	movs	r3, #5
 8001412:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	2180      	movs	r1, #128	; 0x80
 800141a:	484e      	ldr	r0, [pc, #312]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 800141c:	f002 fc0a 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8001420:	2201      	movs	r2, #1
 8001422:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001426:	484b      	ldr	r0, [pc, #300]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001428:	f002 fc04 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001432:	4848      	ldr	r0, [pc, #288]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001434:	f002 fbfe 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800143e:	4845      	ldr	r0, [pc, #276]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001440:	f002 fbf8 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001444:	2201      	movs	r2, #1
 8001446:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800144a:	4842      	ldr	r0, [pc, #264]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 800144c:	f002 fbf2 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001456:	483f      	ldr	r0, [pc, #252]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001458:	f002 fbec 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001462:	483c      	ldr	r0, [pc, #240]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001464:	f002 fbe6 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001468:	2201      	movs	r2, #1
 800146a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800146e:	4839      	ldr	r0, [pc, #228]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001470:	f002 fbe0 	bl	8003c34 <HAL_GPIO_WritePin>
 8001474:	e114      	b.n	80016a0 <HAL_GPIO_EXTI_Callback+0xddc>
							}
							else if(pad_active == '6') {
 8001476:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800147a:	2b36      	cmp	r3, #54	; 0x36
 800147c:	d132      	bne.n	80014e4 <HAL_GPIO_EXTI_Callback+0xc20>
								guess_g = 6;
 800147e:	2306      	movs	r3, #6
 8001480:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001484:	2200      	movs	r2, #0
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	4832      	ldr	r0, [pc, #200]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 800148a:	f002 fbd3 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 800148e:	2201      	movs	r2, #1
 8001490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001494:	482f      	ldr	r0, [pc, #188]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001496:	f002 fbcd 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a0:	482c      	ldr	r0, [pc, #176]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 80014a2:	f002 fbc7 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ac:	4829      	ldr	r0, [pc, #164]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 80014ae:	f002 fbc1 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b8:	4826      	ldr	r0, [pc, #152]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 80014ba:	f002 fbbb 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c4:	4823      	ldr	r0, [pc, #140]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 80014c6:	f002 fbb5 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d0:	4820      	ldr	r0, [pc, #128]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 80014d2:	f002 fbaf 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80014d6:	2201      	movs	r2, #1
 80014d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014dc:	481d      	ldr	r0, [pc, #116]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 80014de:	f002 fba9 	bl	8003c34 <HAL_GPIO_WritePin>
 80014e2:	e0dd      	b.n	80016a0 <HAL_GPIO_EXTI_Callback+0xddc>
							}
							else if(pad_active == '7') {
 80014e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014e8:	2b37      	cmp	r3, #55	; 0x37
 80014ea:	d135      	bne.n	8001558 <HAL_GPIO_EXTI_Callback+0xc94>
								guess_g = 7;
 80014ec:	2307      	movs	r3, #7
 80014ee:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2180      	movs	r1, #128	; 0x80
 80014f6:	4817      	ldr	r0, [pc, #92]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 80014f8:	f002 fb9c 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001502:	4814      	ldr	r0, [pc, #80]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001504:	f002 fb96 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800150e:	4811      	ldr	r0, [pc, #68]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001510:	f002 fb90 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001514:	2201      	movs	r2, #1
 8001516:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800151a:	480e      	ldr	r0, [pc, #56]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 800151c:	f002 fb8a 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001520:	2201      	movs	r2, #1
 8001522:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001526:	480b      	ldr	r0, [pc, #44]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001528:	f002 fb84 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001532:	4808      	ldr	r0, [pc, #32]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001534:	f002 fb7e 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8001538:	2201      	movs	r2, #1
 800153a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 8001540:	f002 fb78 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001544:	2201      	movs	r2, #1
 8001546:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800154a:	4802      	ldr	r0, [pc, #8]	; (8001554 <HAL_GPIO_EXTI_Callback+0xc90>)
 800154c:	f002 fb72 	bl	8003c34 <HAL_GPIO_WritePin>
 8001550:	e0a6      	b.n	80016a0 <HAL_GPIO_EXTI_Callback+0xddc>
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
							}
							else if(pad_active == '8') {
 8001558:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800155c:	2b38      	cmp	r3, #56	; 0x38
 800155e:	d132      	bne.n	80015c6 <HAL_GPIO_EXTI_Callback+0xd02>
								guess_g = 8;
 8001560:	2308      	movs	r3, #8
 8001562:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	48c0      	ldr	r0, [pc, #768]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 800156c:	f002 fb62 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001576:	48bd      	ldr	r0, [pc, #756]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 8001578:	f002 fb5c 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001582:	48ba      	ldr	r0, [pc, #744]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 8001584:	f002 fb56 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800158e:	48b7      	ldr	r0, [pc, #732]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 8001590:	f002 fb50 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800159a:	48b4      	ldr	r0, [pc, #720]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 800159c:	f002 fb4a 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015a6:	48b1      	ldr	r0, [pc, #708]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 80015a8:	f002 fb44 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b2:	48ae      	ldr	r0, [pc, #696]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 80015b4:	f002 fb3e 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80015b8:	2201      	movs	r2, #1
 80015ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015be:	48ab      	ldr	r0, [pc, #684]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 80015c0:	f002 fb38 	bl	8003c34 <HAL_GPIO_WritePin>
 80015c4:	e06c      	b.n	80016a0 <HAL_GPIO_EXTI_Callback+0xddc>
							}
							else if(pad_active == '9') {
 80015c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015ca:	2b39      	cmp	r3, #57	; 0x39
 80015cc:	d132      	bne.n	8001634 <HAL_GPIO_EXTI_Callback+0xd70>
								guess_g = 9;
 80015ce:	2309      	movs	r3, #9
 80015d0:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2180      	movs	r1, #128	; 0x80
 80015d8:	48a4      	ldr	r0, [pc, #656]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 80015da:	f002 fb2b 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e4:	48a1      	ldr	r0, [pc, #644]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 80015e6:	f002 fb25 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f0:	489e      	ldr	r0, [pc, #632]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 80015f2:	f002 fb1f 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015fc:	489b      	ldr	r0, [pc, #620]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 80015fe:	f002 fb19 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001602:	2201      	movs	r2, #1
 8001604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001608:	4898      	ldr	r0, [pc, #608]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 800160a:	f002 fb13 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001614:	4895      	ldr	r0, [pc, #596]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 8001616:	f002 fb0d 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001620:	4892      	ldr	r0, [pc, #584]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 8001622:	f002 fb07 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001626:	2201      	movs	r2, #1
 8001628:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800162c:	488f      	ldr	r0, [pc, #572]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 800162e:	f002 fb01 	bl	8003c34 <HAL_GPIO_WritePin>
 8001632:	e035      	b.n	80016a0 <HAL_GPIO_EXTI_Callback+0xddc>
							}
							else if(pad_active == '0') {
 8001634:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001638:	2b30      	cmp	r3, #48	; 0x30
 800163a:	d131      	bne.n	80016a0 <HAL_GPIO_EXTI_Callback+0xddc>
								guess_g = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	4889      	ldr	r0, [pc, #548]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 8001648:	f002 faf4 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001652:	4886      	ldr	r0, [pc, #536]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 8001654:	f002 faee 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800165e:	4883      	ldr	r0, [pc, #524]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 8001660:	f002 fae8 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800166a:	4880      	ldr	r0, [pc, #512]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 800166c:	f002 fae2 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001676:	487d      	ldr	r0, [pc, #500]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 8001678:	f002 fadc 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001682:	487a      	ldr	r0, [pc, #488]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 8001684:	f002 fad6 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8001688:	2201      	movs	r2, #1
 800168a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800168e:	4877      	ldr	r0, [pc, #476]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 8001690:	f002 fad0 	bl	8003c34 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001694:	2201      	movs	r2, #1
 8001696:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800169a:	4874      	ldr	r0, [pc, #464]	; (800186c <HAL_GPIO_EXTI_Callback+0xfa8>)
 800169c:	f002 faca 	bl	8003c34 <HAL_GPIO_WritePin>
							}
						}
					 if (guess_g == 10) {
 80016a0:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 80016a4:	2b0a      	cmp	r3, #10
 80016a6:	d128      	bne.n	80016fa <HAL_GPIO_EXTI_Callback+0xe36>
						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80016a8:	2201      	movs	r2, #1
 80016aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ae:	4870      	ldr	r0, [pc, #448]	; (8001870 <HAL_GPIO_EXTI_Callback+0xfac>)
 80016b0:	f002 fac0 	bl	8003c34 <HAL_GPIO_WritePin>
						 for(uint32_t i = 0; i < 3000000; i++);
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80016ba:	e004      	b.n	80016c6 <HAL_GPIO_EXTI_Callback+0xe02>
 80016bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80016c0:	3301      	adds	r3, #1
 80016c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80016c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80016ca:	4a6a      	ldr	r2, [pc, #424]	; (8001874 <HAL_GPIO_EXTI_Callback+0xfb0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d9f5      	bls.n	80016bc <HAL_GPIO_EXTI_Callback+0xdf8>
						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d6:	4866      	ldr	r0, [pc, #408]	; (8001870 <HAL_GPIO_EXTI_Callback+0xfac>)
 80016d8:	f002 faac 	bl	8003c34 <HAL_GPIO_WritePin>
						 for(uint32_t i = 0; i < 3000000; i++);
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80016e2:	e004      	b.n	80016ee <HAL_GPIO_EXTI_Callback+0xe2a>
 80016e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016e8:	3301      	adds	r3, #1
 80016ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80016ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016f2:	4a60      	ldr	r2, [pc, #384]	; (8001874 <HAL_GPIO_EXTI_Callback+0xfb0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d9f5      	bls.n	80016e4 <HAL_GPIO_EXTI_Callback+0xe20>
 80016f8:	e06e      	b.n	80017d8 <HAL_GPIO_EXTI_Callback+0xf14>
					 }
					 else if (guess_g < random_num[0]) {
 80016fa:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	429a      	cmp	r2, r3
 8001702:	da32      	bge.n	800176a <HAL_GPIO_EXTI_Callback+0xea6>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001704:	2201      	movs	r2, #1
 8001706:	2110      	movs	r1, #16
 8001708:	485b      	ldr	r0, [pc, #364]	; (8001878 <HAL_GPIO_EXTI_Callback+0xfb4>)
 800170a:	f002 fa93 	bl	8003c34 <HAL_GPIO_WritePin>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	2120      	movs	r1, #32
 8001712:	4859      	ldr	r0, [pc, #356]	; (8001878 <HAL_GPIO_EXTI_Callback+0xfb4>)
 8001714:	f002 fa8e 	bl	8003c34 <HAL_GPIO_WritePin>
						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800171e:	4854      	ldr	r0, [pc, #336]	; (8001870 <HAL_GPIO_EXTI_Callback+0xfac>)
 8001720:	f002 fa88 	bl	8003c34 <HAL_GPIO_WritePin>
						 for(uint32_t i = 0; i < 3000000; i++);
 8001724:	2300      	movs	r3, #0
 8001726:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800172a:	e004      	b.n	8001736 <HAL_GPIO_EXTI_Callback+0xe72>
 800172c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001730:	3301      	adds	r3, #1
 8001732:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001736:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800173a:	4a4e      	ldr	r2, [pc, #312]	; (8001874 <HAL_GPIO_EXTI_Callback+0xfb0>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d9f5      	bls.n	800172c <HAL_GPIO_EXTI_Callback+0xe68>
						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001746:	484a      	ldr	r0, [pc, #296]	; (8001870 <HAL_GPIO_EXTI_Callback+0xfac>)
 8001748:	f002 fa74 	bl	8003c34 <HAL_GPIO_WritePin>
						 for(uint32_t i = 0; i < 3000000; i++);
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001752:	e004      	b.n	800175e <HAL_GPIO_EXTI_Callback+0xe9a>
 8001754:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001758:	3301      	adds	r3, #1
 800175a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800175e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001762:	4a44      	ldr	r2, [pc, #272]	; (8001874 <HAL_GPIO_EXTI_Callback+0xfb0>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d9f5      	bls.n	8001754 <HAL_GPIO_EXTI_Callback+0xe90>
 8001768:	e036      	b.n	80017d8 <HAL_GPIO_EXTI_Callback+0xf14>
					 }
					 else if (guess_g > random_num[0]) {
 800176a:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	429a      	cmp	r2, r3
 8001772:	dd31      	ble.n	80017d8 <HAL_GPIO_EXTI_Callback+0xf14>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001774:	2200      	movs	r2, #0
 8001776:	2110      	movs	r1, #16
 8001778:	483f      	ldr	r0, [pc, #252]	; (8001878 <HAL_GPIO_EXTI_Callback+0xfb4>)
 800177a:	f002 fa5b 	bl	8003c34 <HAL_GPIO_WritePin>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800177e:	2201      	movs	r2, #1
 8001780:	2120      	movs	r1, #32
 8001782:	483d      	ldr	r0, [pc, #244]	; (8001878 <HAL_GPIO_EXTI_Callback+0xfb4>)
 8001784:	f002 fa56 	bl	8003c34 <HAL_GPIO_WritePin>
						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001788:	2201      	movs	r2, #1
 800178a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800178e:	4838      	ldr	r0, [pc, #224]	; (8001870 <HAL_GPIO_EXTI_Callback+0xfac>)
 8001790:	f002 fa50 	bl	8003c34 <HAL_GPIO_WritePin>
						 for(uint32_t i = 0; i < 3000000; i++);
 8001794:	2300      	movs	r3, #0
 8001796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800179a:	e004      	b.n	80017a6 <HAL_GPIO_EXTI_Callback+0xee2>
 800179c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017a0:	3301      	adds	r3, #1
 80017a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80017a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017aa:	4a32      	ldr	r2, [pc, #200]	; (8001874 <HAL_GPIO_EXTI_Callback+0xfb0>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d9f5      	bls.n	800179c <HAL_GPIO_EXTI_Callback+0xed8>
						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017b6:	482e      	ldr	r0, [pc, #184]	; (8001870 <HAL_GPIO_EXTI_Callback+0xfac>)
 80017b8:	f002 fa3c 	bl	8003c34 <HAL_GPIO_WritePin>
						 for(uint32_t i = 0; i < 3000000; i++);
 80017bc:	2300      	movs	r3, #0
 80017be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80017c2:	e004      	b.n	80017ce <HAL_GPIO_EXTI_Callback+0xf0a>
 80017c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017c8:	3301      	adds	r3, #1
 80017ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80017ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017d2:	4a28      	ldr	r2, [pc, #160]	; (8001874 <HAL_GPIO_EXTI_Callback+0xfb0>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d9f5      	bls.n	80017c4 <HAL_GPIO_EXTI_Callback+0xf00>
				 while(guess_g != random_num[0]) {
 80017d8:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	429a      	cmp	r2, r3
 80017e0:	f47f ad2c 	bne.w	800123c <HAL_GPIO_EXTI_Callback+0x978>
					 }
			  }
				 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80017e4:	2201      	movs	r2, #1
 80017e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ea:	4821      	ldr	r0, [pc, #132]	; (8001870 <HAL_GPIO_EXTI_Callback+0xfac>)
 80017ec:	f002 fa22 	bl	8003c34 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80017f0:	2201      	movs	r2, #1
 80017f2:	2110      	movs	r1, #16
 80017f4:	4820      	ldr	r0, [pc, #128]	; (8001878 <HAL_GPIO_EXTI_Callback+0xfb4>)
 80017f6:	f002 fa1d 	bl	8003c34 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80017fa:	2201      	movs	r2, #1
 80017fc:	2120      	movs	r1, #32
 80017fe:	481e      	ldr	r0, [pc, #120]	; (8001878 <HAL_GPIO_EXTI_Callback+0xfb4>)
 8001800:	f002 fa18 	bl	8003c34 <HAL_GPIO_WritePin>
				 for(uint32_t i = 0; i < 3000000; i++);
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800180a:	e004      	b.n	8001816 <HAL_GPIO_EXTI_Callback+0xf52>
 800180c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001810:	3301      	adds	r3, #1
 8001812:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001816:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800181a:	4a16      	ldr	r2, [pc, #88]	; (8001874 <HAL_GPIO_EXTI_Callback+0xfb0>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d9f5      	bls.n	800180c <HAL_GPIO_EXTI_Callback+0xf48>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	2110      	movs	r1, #16
 8001824:	4814      	ldr	r0, [pc, #80]	; (8001878 <HAL_GPIO_EXTI_Callback+0xfb4>)
 8001826:	f002 fa05 	bl	8003c34 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	2120      	movs	r1, #32
 800182e:	4812      	ldr	r0, [pc, #72]	; (8001878 <HAL_GPIO_EXTI_Callback+0xfb4>)
 8001830:	f002 fa00 	bl	8003c34 <HAL_GPIO_WritePin>
				 for(uint32_t i = 0; i < 3000000; i++);
 8001834:	2300      	movs	r3, #0
 8001836:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800183a:	e004      	b.n	8001846 <HAL_GPIO_EXTI_Callback+0xf82>
 800183c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001840:	3301      	adds	r3, #1
 8001842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001846:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <HAL_GPIO_EXTI_Callback+0xfb0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d9f5      	bls.n	800183c <HAL_GPIO_EXTI_Callback+0xf78>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001850:	2201      	movs	r2, #1
 8001852:	2110      	movs	r1, #16
 8001854:	4808      	ldr	r0, [pc, #32]	; (8001878 <HAL_GPIO_EXTI_Callback+0xfb4>)
 8001856:	f002 f9ed 	bl	8003c34 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800185a:	2201      	movs	r2, #1
 800185c:	2120      	movs	r1, #32
 800185e:	4806      	ldr	r0, [pc, #24]	; (8001878 <HAL_GPIO_EXTI_Callback+0xfb4>)
 8001860:	f002 f9e8 	bl	8003c34 <HAL_GPIO_WritePin>
				 for(uint32_t i = 0; i < 3000000; i++);
 8001864:	2300      	movs	r3, #0
 8001866:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800186a:	e00c      	b.n	8001886 <HAL_GPIO_EXTI_Callback+0xfc2>
 800186c:	40021000 	.word	0x40021000
 8001870:	40020c00 	.word	0x40020c00
 8001874:	002dc6bf 	.word	0x002dc6bf
 8001878:	40020400 	.word	0x40020400
 800187c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001880:	3301      	adds	r3, #1
 8001882:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001886:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800188a:	4abb      	ldr	r2, [pc, #748]	; (8001b78 <HAL_GPIO_EXTI_Callback+0x12b4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d9f5      	bls.n	800187c <HAL_GPIO_EXTI_Callback+0xfb8>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	2110      	movs	r1, #16
 8001894:	48b9      	ldr	r0, [pc, #740]	; (8001b7c <HAL_GPIO_EXTI_Callback+0x12b8>)
 8001896:	f002 f9cd 	bl	8003c34 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	2120      	movs	r1, #32
 800189e:	48b7      	ldr	r0, [pc, #732]	; (8001b7c <HAL_GPIO_EXTI_Callback+0x12b8>)
 80018a0:	f002 f9c8 	bl	8003c34 <HAL_GPIO_WritePin>
				 guess_g = random_num[0];
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7

		  }
		  if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) && (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_SET)) {
 80018aa:	2101      	movs	r1, #1
 80018ac:	48b4      	ldr	r0, [pc, #720]	; (8001b80 <HAL_GPIO_EXTI_Callback+0x12bc>)
 80018ae:	f002 f9a9 	bl	8003c04 <HAL_GPIO_ReadPin>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f040 8335 	bne.w	8001f24 <HAL_GPIO_EXTI_Callback+0x1660>
 80018ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018be:	48b1      	ldr	r0, [pc, #708]	; (8001b84 <HAL_GPIO_EXTI_Callback+0x12c0>)
 80018c0:	f002 f9a0 	bl	8003c04 <HAL_GPIO_ReadPin>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	f040 832c 	bne.w	8001f24 <HAL_GPIO_EXTI_Callback+0x1660>
			  while(guess_o != random_num[1]) {
 80018cc:	e2cd      	b.n	8001e6a <HAL_GPIO_EXTI_Callback+0x15a6>

					 pad_active = check_keys();
 80018ce:	f7fe fe51 	bl	8000574 <check_keys>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

					 if(pad_active != 0) {
 80018d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 8230 	beq.w	8001d42 <HAL_GPIO_EXTI_Callback+0x147e>

						if(pad_active == '1') {
 80018e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018e6:	2b31      	cmp	r3, #49	; 0x31
 80018e8:	d132      	bne.n	8001950 <HAL_GPIO_EXTI_Callback+0x108c>
							guess_o = 1;
 80018ea:	2301      	movs	r3, #1
 80018ec:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 80018f0:	2201      	movs	r2, #1
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	48a4      	ldr	r0, [pc, #656]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 80018f6:	f002 f99d 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001900:	48a1      	ldr	r0, [pc, #644]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001902:	f002 f997 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 7100 	mov.w	r1, #512	; 0x200
 800190c:	489e      	ldr	r0, [pc, #632]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 800190e:	f002 f991 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001912:	2201      	movs	r2, #1
 8001914:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001918:	489b      	ldr	r0, [pc, #620]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 800191a:	f002 f98b 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 800191e:	2201      	movs	r2, #1
 8001920:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001924:	4898      	ldr	r0, [pc, #608]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001926:	f002 f985 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 800192a:	2201      	movs	r2, #1
 800192c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001930:	4895      	ldr	r0, [pc, #596]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001932:	f002 f97f 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8001936:	2201      	movs	r2, #1
 8001938:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800193c:	4892      	ldr	r0, [pc, #584]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 800193e:	f002 f979 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001942:	2201      	movs	r2, #1
 8001944:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001948:	488f      	ldr	r0, [pc, #572]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 800194a:	f002 f973 	bl	8003c34 <HAL_GPIO_WritePin>
 800194e:	e1f8      	b.n	8001d42 <HAL_GPIO_EXTI_Callback+0x147e>
						}
						else if(pad_active == '2') {
 8001950:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001954:	2b32      	cmp	r3, #50	; 0x32
 8001956:	d132      	bne.n	80019be <HAL_GPIO_EXTI_Callback+0x10fa>
							guess_o = 2;
 8001958:	2302      	movs	r3, #2
 800195a:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	2180      	movs	r1, #128	; 0x80
 8001962:	4889      	ldr	r0, [pc, #548]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001964:	f002 f966 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800196e:	4886      	ldr	r0, [pc, #536]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001970:	f002 f960 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8001974:	2201      	movs	r2, #1
 8001976:	f44f 7100 	mov.w	r1, #512	; 0x200
 800197a:	4883      	ldr	r0, [pc, #524]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 800197c:	f002 f95a 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001986:	4880      	ldr	r0, [pc, #512]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001988:	f002 f954 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001992:	487d      	ldr	r0, [pc, #500]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001994:	f002 f94e 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001998:	2201      	movs	r2, #1
 800199a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800199e:	487a      	ldr	r0, [pc, #488]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 80019a0:	f002 f948 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 80019a4:	2200      	movs	r2, #0
 80019a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019aa:	4877      	ldr	r0, [pc, #476]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 80019ac:	f002 f942 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80019b0:	2201      	movs	r2, #1
 80019b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019b6:	4874      	ldr	r0, [pc, #464]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 80019b8:	f002 f93c 	bl	8003c34 <HAL_GPIO_WritePin>
 80019bc:	e1c1      	b.n	8001d42 <HAL_GPIO_EXTI_Callback+0x147e>

						}
						else if(pad_active == '3') {
 80019be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019c2:	2b33      	cmp	r3, #51	; 0x33
 80019c4:	d132      	bne.n	8001a2c <HAL_GPIO_EXTI_Callback+0x1168>
							guess_o = 3;
 80019c6:	2303      	movs	r3, #3
 80019c8:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2180      	movs	r1, #128	; 0x80
 80019d0:	486d      	ldr	r0, [pc, #436]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 80019d2:	f002 f92f 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80019d6:	2200      	movs	r2, #0
 80019d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019dc:	486a      	ldr	r0, [pc, #424]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 80019de:	f002 f929 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019e8:	4867      	ldr	r0, [pc, #412]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 80019ea:	f002 f923 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019f4:	4864      	ldr	r0, [pc, #400]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 80019f6:	f002 f91d 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80019fa:	2201      	movs	r2, #1
 80019fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a00:	4861      	ldr	r0, [pc, #388]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001a02:	f002 f917 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001a06:	2201      	movs	r2, #1
 8001a08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a0c:	485e      	ldr	r0, [pc, #376]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001a0e:	f002 f911 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a18:	485b      	ldr	r0, [pc, #364]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001a1a:	f002 f90b 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a24:	4858      	ldr	r0, [pc, #352]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001a26:	f002 f905 	bl	8003c34 <HAL_GPIO_WritePin>
 8001a2a:	e18a      	b.n	8001d42 <HAL_GPIO_EXTI_Callback+0x147e>
						}
						else if(pad_active == '4') {
 8001a2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a30:	2b34      	cmp	r3, #52	; 0x34
 8001a32:	d132      	bne.n	8001a9a <HAL_GPIO_EXTI_Callback+0x11d6>
							guess_o = 4;
 8001a34:	2304      	movs	r3, #4
 8001a36:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	2180      	movs	r1, #128	; 0x80
 8001a3e:	4852      	ldr	r0, [pc, #328]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001a40:	f002 f8f8 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001a44:	2200      	movs	r2, #0
 8001a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a4a:	484f      	ldr	r0, [pc, #316]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001a4c:	f002 f8f2 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001a50:	2200      	movs	r2, #0
 8001a52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a56:	484c      	ldr	r0, [pc, #304]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001a58:	f002 f8ec 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a62:	4849      	ldr	r0, [pc, #292]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001a64:	f002 f8e6 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a6e:	4846      	ldr	r0, [pc, #280]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001a70:	f002 f8e0 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a7a:	4843      	ldr	r0, [pc, #268]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001a7c:	f002 f8da 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a80:	2200      	movs	r2, #0
 8001a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a86:	4840      	ldr	r0, [pc, #256]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001a88:	f002 f8d4 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a92:	483d      	ldr	r0, [pc, #244]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001a94:	f002 f8ce 	bl	8003c34 <HAL_GPIO_WritePin>
 8001a98:	e153      	b.n	8001d42 <HAL_GPIO_EXTI_Callback+0x147e>
						}
						else if(pad_active == '5') {
 8001a9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a9e:	2b35      	cmp	r3, #53	; 0x35
 8001aa0:	d132      	bne.n	8001b08 <HAL_GPIO_EXTI_Callback+0x1244>
							guess_o = 5;
 8001aa2:	2305      	movs	r3, #5
 8001aa4:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2180      	movs	r1, #128	; 0x80
 8001aac:	4836      	ldr	r0, [pc, #216]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001aae:	f002 f8c1 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ab8:	4833      	ldr	r0, [pc, #204]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001aba:	f002 f8bb 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ac4:	4830      	ldr	r0, [pc, #192]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001ac6:	f002 f8b5 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001aca:	2200      	movs	r2, #0
 8001acc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ad0:	482d      	ldr	r0, [pc, #180]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001ad2:	f002 f8af 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001adc:	482a      	ldr	r0, [pc, #168]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001ade:	f002 f8a9 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ae8:	4827      	ldr	r0, [pc, #156]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001aea:	f002 f8a3 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af4:	4824      	ldr	r0, [pc, #144]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001af6:	f002 f89d 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001afa:	2201      	movs	r2, #1
 8001afc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b00:	4821      	ldr	r0, [pc, #132]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001b02:	f002 f897 	bl	8003c34 <HAL_GPIO_WritePin>
 8001b06:	e11c      	b.n	8001d42 <HAL_GPIO_EXTI_Callback+0x147e>
						}
						else if(pad_active == '6') {
 8001b08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b0c:	2b36      	cmp	r3, #54	; 0x36
 8001b0e:	d13d      	bne.n	8001b8c <HAL_GPIO_EXTI_Callback+0x12c8>
							guess_o = 6;
 8001b10:	2306      	movs	r3, #6
 8001b12:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	481b      	ldr	r0, [pc, #108]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001b1c:	f002 f88a 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8001b20:	2201      	movs	r2, #1
 8001b22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b26:	4818      	ldr	r0, [pc, #96]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001b28:	f002 f884 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b32:	4815      	ldr	r0, [pc, #84]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001b34:	f002 f87e 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b3e:	4812      	ldr	r0, [pc, #72]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001b40:	f002 f878 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b4a:	480f      	ldr	r0, [pc, #60]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001b4c:	f002 f872 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b50:	2200      	movs	r2, #0
 8001b52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b56:	480c      	ldr	r0, [pc, #48]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001b58:	f002 f86c 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b62:	4809      	ldr	r0, [pc, #36]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001b64:	f002 f866 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b6e:	4806      	ldr	r0, [pc, #24]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x12c4>)
 8001b70:	f002 f860 	bl	8003c34 <HAL_GPIO_WritePin>
 8001b74:	e0e5      	b.n	8001d42 <HAL_GPIO_EXTI_Callback+0x147e>
 8001b76:	bf00      	nop
 8001b78:	002dc6bf 	.word	0x002dc6bf
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40020c00 	.word	0x40020c00
 8001b88:	40021000 	.word	0x40021000
						}
						else if(pad_active == '7') {
 8001b8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b90:	2b37      	cmp	r3, #55	; 0x37
 8001b92:	d132      	bne.n	8001bfa <HAL_GPIO_EXTI_Callback+0x1336>
							guess_o = 7;
 8001b94:	2307      	movs	r3, #7
 8001b96:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2180      	movs	r1, #128	; 0x80
 8001b9e:	48bf      	ldr	r0, [pc, #764]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001ba0:	f002 f848 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001baa:	48bc      	ldr	r0, [pc, #752]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001bac:	f002 f842 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bb6:	48b9      	ldr	r0, [pc, #740]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001bb8:	f002 f83c 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bc2:	48b6      	ldr	r0, [pc, #728]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001bc4:	f002 f836 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bce:	48b3      	ldr	r0, [pc, #716]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001bd0:	f002 f830 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bda:	48b0      	ldr	r0, [pc, #704]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001bdc:	f002 f82a 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8001be0:	2201      	movs	r2, #1
 8001be2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001be6:	48ad      	ldr	r0, [pc, #692]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001be8:	f002 f824 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001bec:	2201      	movs	r2, #1
 8001bee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bf2:	48aa      	ldr	r0, [pc, #680]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001bf4:	f002 f81e 	bl	8003c34 <HAL_GPIO_WritePin>
 8001bf8:	e0a3      	b.n	8001d42 <HAL_GPIO_EXTI_Callback+0x147e>
						}
						else if(pad_active == '8') {
 8001bfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bfe:	2b38      	cmp	r3, #56	; 0x38
 8001c00:	d132      	bne.n	8001c68 <HAL_GPIO_EXTI_Callback+0x13a4>
							guess_o = 8;
 8001c02:	2308      	movs	r3, #8
 8001c04:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2180      	movs	r1, #128	; 0x80
 8001c0c:	48a3      	ldr	r0, [pc, #652]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001c0e:	f002 f811 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001c12:	2200      	movs	r2, #0
 8001c14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c18:	48a0      	ldr	r0, [pc, #640]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001c1a:	f002 f80b 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c24:	489d      	ldr	r0, [pc, #628]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001c26:	f002 f805 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c30:	489a      	ldr	r0, [pc, #616]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001c32:	f001 ffff 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c36:	2200      	movs	r2, #0
 8001c38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c3c:	4897      	ldr	r0, [pc, #604]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001c3e:	f001 fff9 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001c42:	2200      	movs	r2, #0
 8001c44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c48:	4894      	ldr	r0, [pc, #592]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001c4a:	f001 fff3 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c54:	4891      	ldr	r0, [pc, #580]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001c56:	f001 ffed 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c60:	488e      	ldr	r0, [pc, #568]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001c62:	f001 ffe7 	bl	8003c34 <HAL_GPIO_WritePin>
 8001c66:	e06c      	b.n	8001d42 <HAL_GPIO_EXTI_Callback+0x147e>
						}
						else if(pad_active == '9') {
 8001c68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c6c:	2b39      	cmp	r3, #57	; 0x39
 8001c6e:	d132      	bne.n	8001cd6 <HAL_GPIO_EXTI_Callback+0x1412>
							guess_o = 9;
 8001c70:	2309      	movs	r3, #9
 8001c72:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2180      	movs	r1, #128	; 0x80
 8001c7a:	4888      	ldr	r0, [pc, #544]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001c7c:	f001 ffda 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c86:	4885      	ldr	r0, [pc, #532]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001c88:	f001 ffd4 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c92:	4882      	ldr	r0, [pc, #520]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001c94:	f001 ffce 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c9e:	487f      	ldr	r0, [pc, #508]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001ca0:	f001 ffc8 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001caa:	487c      	ldr	r0, [pc, #496]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001cac:	f001 ffc2 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cb6:	4879      	ldr	r0, [pc, #484]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001cb8:	f001 ffbc 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cc2:	4876      	ldr	r0, [pc, #472]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001cc4:	f001 ffb6 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cce:	4873      	ldr	r0, [pc, #460]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001cd0:	f001 ffb0 	bl	8003c34 <HAL_GPIO_WritePin>
 8001cd4:	e035      	b.n	8001d42 <HAL_GPIO_EXTI_Callback+0x147e>
						}
						else if(pad_active == '0') {
 8001cd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cda:	2b30      	cmp	r3, #48	; 0x30
 8001cdc:	d131      	bne.n	8001d42 <HAL_GPIO_EXTI_Callback+0x147e>
							guess_o = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2180      	movs	r1, #128	; 0x80
 8001ce8:	486c      	ldr	r0, [pc, #432]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001cea:	f001 ffa3 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cf4:	4869      	ldr	r0, [pc, #420]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001cf6:	f001 ff9d 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d00:	4866      	ldr	r0, [pc, #408]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001d02:	f001 ff97 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d06:	2200      	movs	r2, #0
 8001d08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d0c:	4863      	ldr	r0, [pc, #396]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001d0e:	f001 ff91 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d12:	2200      	movs	r2, #0
 8001d14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d18:	4860      	ldr	r0, [pc, #384]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001d1a:	f001 ff8b 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d24:	485d      	ldr	r0, [pc, #372]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001d26:	f001 ff85 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d30:	485a      	ldr	r0, [pc, #360]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001d32:	f001 ff7f 	bl	8003c34 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001d36:	2201      	movs	r2, #1
 8001d38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d3c:	4857      	ldr	r0, [pc, #348]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x15d8>)
 8001d3e:	f001 ff79 	bl	8003c34 <HAL_GPIO_WritePin>
						}
					}
					 if (guess_o == 10) {
 8001d42:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 8001d46:	2b0a      	cmp	r3, #10
 8001d48:	d128      	bne.n	8001d9c <HAL_GPIO_EXTI_Callback+0x14d8>
						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d50:	4853      	ldr	r0, [pc, #332]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x15dc>)
 8001d52:	f001 ff6f 	bl	8003c34 <HAL_GPIO_WritePin>
						 for(uint32_t i = 0; i < 3000000; i++);
 8001d56:	2300      	movs	r3, #0
 8001d58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001d5c:	e004      	b.n	8001d68 <HAL_GPIO_EXTI_Callback+0x14a4>
 8001d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d62:	3301      	adds	r3, #1
 8001d64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d6c:	4a4d      	ldr	r2, [pc, #308]	; (8001ea4 <HAL_GPIO_EXTI_Callback+0x15e0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d9f5      	bls.n	8001d5e <HAL_GPIO_EXTI_Callback+0x149a>
						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d78:	4849      	ldr	r0, [pc, #292]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x15dc>)
 8001d7a:	f001 ff5b 	bl	8003c34 <HAL_GPIO_WritePin>
						 for(uint32_t i = 0; i < 3000000; i++);
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001d84:	e004      	b.n	8001d90 <HAL_GPIO_EXTI_Callback+0x14cc>
 8001d86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d94:	4a43      	ldr	r2, [pc, #268]	; (8001ea4 <HAL_GPIO_EXTI_Callback+0x15e0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d9f5      	bls.n	8001d86 <HAL_GPIO_EXTI_Callback+0x14c2>
 8001d9a:	e066      	b.n	8001e6a <HAL_GPIO_EXTI_Callback+0x15a6>
					 }
					 else if (guess_o < random_num[1]) {
 8001d9c:	f897 20f6 	ldrb.w	r2, [r7, #246]	; 0xf6
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	da32      	bge.n	8001e0c <HAL_GPIO_EXTI_Callback+0x1548>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001da6:	2201      	movs	r2, #1
 8001da8:	2110      	movs	r1, #16
 8001daa:	483f      	ldr	r0, [pc, #252]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0x15e4>)
 8001dac:	f001 ff42 	bl	8003c34 <HAL_GPIO_WritePin>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001db0:	2200      	movs	r2, #0
 8001db2:	2120      	movs	r1, #32
 8001db4:	483c      	ldr	r0, [pc, #240]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0x15e4>)
 8001db6:	f001 ff3d 	bl	8003c34 <HAL_GPIO_WritePin>
						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dc0:	4837      	ldr	r0, [pc, #220]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x15dc>)
 8001dc2:	f001 ff37 	bl	8003c34 <HAL_GPIO_WritePin>
						 for(uint32_t i = 0; i < 3000000; i++);
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001dcc:	e004      	b.n	8001dd8 <HAL_GPIO_EXTI_Callback+0x1514>
 8001dce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ddc:	4a31      	ldr	r2, [pc, #196]	; (8001ea4 <HAL_GPIO_EXTI_Callback+0x15e0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d9f5      	bls.n	8001dce <HAL_GPIO_EXTI_Callback+0x150a>
						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001de2:	2200      	movs	r2, #0
 8001de4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001de8:	482d      	ldr	r0, [pc, #180]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x15dc>)
 8001dea:	f001 ff23 	bl	8003c34 <HAL_GPIO_WritePin>
						 for(uint32_t i = 0; i < 3000000; i++);
 8001dee:	2300      	movs	r3, #0
 8001df0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001df4:	e004      	b.n	8001e00 <HAL_GPIO_EXTI_Callback+0x153c>
 8001df6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e04:	4a27      	ldr	r2, [pc, #156]	; (8001ea4 <HAL_GPIO_EXTI_Callback+0x15e0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d9f5      	bls.n	8001df6 <HAL_GPIO_EXTI_Callback+0x1532>
 8001e0a:	e02e      	b.n	8001e6a <HAL_GPIO_EXTI_Callback+0x15a6>
					 }
					 else if (guess_o > random_num[1]) {
 8001e0c:	f897 20f6 	ldrb.w	r2, [r7, #246]	; 0xf6
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	dd29      	ble.n	8001e6a <HAL_GPIO_EXTI_Callback+0x15a6>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2110      	movs	r1, #16
 8001e1a:	4823      	ldr	r0, [pc, #140]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0x15e4>)
 8001e1c:	f001 ff0a 	bl	8003c34 <HAL_GPIO_WritePin>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001e20:	2201      	movs	r2, #1
 8001e22:	2120      	movs	r1, #32
 8001e24:	4820      	ldr	r0, [pc, #128]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0x15e4>)
 8001e26:	f001 ff05 	bl	8003c34 <HAL_GPIO_WritePin>
						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e30:	481b      	ldr	r0, [pc, #108]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x15dc>)
 8001e32:	f001 feff 	bl	8003c34 <HAL_GPIO_WritePin>
						 for(uint32_t i = 0; i < 3000000; i++);
 8001e36:	2300      	movs	r3, #0
 8001e38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e3a:	e002      	b.n	8001e42 <HAL_GPIO_EXTI_Callback+0x157e>
 8001e3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e3e:	3301      	adds	r3, #1
 8001e40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e44:	4a17      	ldr	r2, [pc, #92]	; (8001ea4 <HAL_GPIO_EXTI_Callback+0x15e0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d9f8      	bls.n	8001e3c <HAL_GPIO_EXTI_Callback+0x1578>
						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e50:	4813      	ldr	r0, [pc, #76]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x15dc>)
 8001e52:	f001 feef 	bl	8003c34 <HAL_GPIO_WritePin>
						 for(uint32_t i = 0; i < 3000000; i++);
 8001e56:	2300      	movs	r3, #0
 8001e58:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e5a:	e002      	b.n	8001e62 <HAL_GPIO_EXTI_Callback+0x159e>
 8001e5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e5e:	3301      	adds	r3, #1
 8001e60:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e64:	4a0f      	ldr	r2, [pc, #60]	; (8001ea4 <HAL_GPIO_EXTI_Callback+0x15e0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d9f8      	bls.n	8001e5c <HAL_GPIO_EXTI_Callback+0x1598>
			  while(guess_o != random_num[1]) {
 8001e6a:	f897 20f6 	ldrb.w	r2, [r7, #246]	; 0xf6
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	f47f ad2c 	bne.w	80018ce <HAL_GPIO_EXTI_Callback+0x100a>
					 }
			  }
				 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001e76:	2201      	movs	r2, #1
 8001e78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e7c:	4808      	ldr	r0, [pc, #32]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x15dc>)
 8001e7e:	f001 fed9 	bl	8003c34 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001e82:	2201      	movs	r2, #1
 8001e84:	2110      	movs	r1, #16
 8001e86:	4808      	ldr	r0, [pc, #32]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0x15e4>)
 8001e88:	f001 fed4 	bl	8003c34 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	2120      	movs	r1, #32
 8001e90:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0x15e4>)
 8001e92:	f001 fecf 	bl	8003c34 <HAL_GPIO_WritePin>
				 for(uint32_t i = 0; i < 3000000; i++);
 8001e96:	2300      	movs	r3, #0
 8001e98:	677b      	str	r3, [r7, #116]	; 0x74
 8001e9a:	e00a      	b.n	8001eb2 <HAL_GPIO_EXTI_Callback+0x15ee>
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40020c00 	.word	0x40020c00
 8001ea4:	002dc6bf 	.word	0x002dc6bf
 8001ea8:	40020400 	.word	0x40020400
 8001eac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eae:	3301      	adds	r3, #1
 8001eb0:	677b      	str	r3, [r7, #116]	; 0x74
 8001eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eb4:	4ab3      	ldr	r2, [pc, #716]	; (8002184 <HAL_GPIO_EXTI_Callback+0x18c0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d9f8      	bls.n	8001eac <HAL_GPIO_EXTI_Callback+0x15e8>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2110      	movs	r1, #16
 8001ebe:	48b2      	ldr	r0, [pc, #712]	; (8002188 <HAL_GPIO_EXTI_Callback+0x18c4>)
 8001ec0:	f001 feb8 	bl	8003c34 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2120      	movs	r1, #32
 8001ec8:	48af      	ldr	r0, [pc, #700]	; (8002188 <HAL_GPIO_EXTI_Callback+0x18c4>)
 8001eca:	f001 feb3 	bl	8003c34 <HAL_GPIO_WritePin>
				 for(uint32_t i = 0; i < 3000000; i++);
 8001ece:	2300      	movs	r3, #0
 8001ed0:	673b      	str	r3, [r7, #112]	; 0x70
 8001ed2:	e002      	b.n	8001eda <HAL_GPIO_EXTI_Callback+0x1616>
 8001ed4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	673b      	str	r3, [r7, #112]	; 0x70
 8001eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001edc:	4aa9      	ldr	r2, [pc, #676]	; (8002184 <HAL_GPIO_EXTI_Callback+0x18c0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d9f8      	bls.n	8001ed4 <HAL_GPIO_EXTI_Callback+0x1610>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	2110      	movs	r1, #16
 8001ee6:	48a8      	ldr	r0, [pc, #672]	; (8002188 <HAL_GPIO_EXTI_Callback+0x18c4>)
 8001ee8:	f001 fea4 	bl	8003c34 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001eec:	2201      	movs	r2, #1
 8001eee:	2120      	movs	r1, #32
 8001ef0:	48a5      	ldr	r0, [pc, #660]	; (8002188 <HAL_GPIO_EXTI_Callback+0x18c4>)
 8001ef2:	f001 fe9f 	bl	8003c34 <HAL_GPIO_WritePin>
				 for(uint32_t i = 0; i < 3000000; i++);
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001efa:	e002      	b.n	8001f02 <HAL_GPIO_EXTI_Callback+0x163e>
 8001efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001efe:	3301      	adds	r3, #1
 8001f00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f04:	4a9f      	ldr	r2, [pc, #636]	; (8002184 <HAL_GPIO_EXTI_Callback+0x18c0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d9f8      	bls.n	8001efc <HAL_GPIO_EXTI_Callback+0x1638>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2110      	movs	r1, #16
 8001f0e:	489e      	ldr	r0, [pc, #632]	; (8002188 <HAL_GPIO_EXTI_Callback+0x18c4>)
 8001f10:	f001 fe90 	bl	8003c34 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2120      	movs	r1, #32
 8001f18:	489b      	ldr	r0, [pc, #620]	; (8002188 <HAL_GPIO_EXTI_Callback+0x18c4>)
 8001f1a:	f001 fe8b 	bl	8003c34 <HAL_GPIO_WritePin>
				 guess_o = random_num[1];
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
		  }
		  if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) && (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET)) {
 8001f24:	2101      	movs	r1, #1
 8001f26:	4899      	ldr	r0, [pc, #612]	; (800218c <HAL_GPIO_EXTI_Callback+0x18c8>)
 8001f28:	f001 fe6c 	bl	8003c04 <HAL_GPIO_ReadPin>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f040 8326 	bne.w	8002580 <HAL_GPIO_EXTI_Callback+0x1cbc>
 8001f34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f38:	4895      	ldr	r0, [pc, #596]	; (8002190 <HAL_GPIO_EXTI_Callback+0x18cc>)
 8001f3a:	f001 fe63 	bl	8003c04 <HAL_GPIO_ReadPin>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	f040 831d 	bne.w	8002580 <HAL_GPIO_EXTI_Callback+0x1cbc>
		 				 while(guess_r != random_num[2]) {
 8001f46:	e2c6      	b.n	80024d6 <HAL_GPIO_EXTI_Callback+0x1c12>

		 					 pad_active = check_keys();
 8001f48:	f7fe fb14 	bl	8000574 <check_keys>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		 					if(pad_active != 0) {
 8001f52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8230 	beq.w	80023bc <HAL_GPIO_EXTI_Callback+0x1af8>

								if(pad_active == '1') {
 8001f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f60:	2b31      	cmp	r3, #49	; 0x31
 8001f62:	d132      	bne.n	8001fca <HAL_GPIO_EXTI_Callback+0x1706>
									guess_r = 1;
 8001f64:	2301      	movs	r3, #1
 8001f66:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	2180      	movs	r1, #128	; 0x80
 8001f6e:	4889      	ldr	r0, [pc, #548]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8001f70:	f001 fe60 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001f74:	2200      	movs	r2, #0
 8001f76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f7a:	4886      	ldr	r0, [pc, #536]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8001f7c:	f001 fe5a 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001f80:	2200      	movs	r2, #0
 8001f82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f86:	4883      	ldr	r0, [pc, #524]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8001f88:	f001 fe54 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f92:	4880      	ldr	r0, [pc, #512]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8001f94:	f001 fe4e 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f9e:	487d      	ldr	r0, [pc, #500]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8001fa0:	f001 fe48 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001faa:	487a      	ldr	r0, [pc, #488]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8001fac:	f001 fe42 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fb6:	4877      	ldr	r0, [pc, #476]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8001fb8:	f001 fe3c 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fc2:	4874      	ldr	r0, [pc, #464]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8001fc4:	f001 fe36 	bl	8003c34 <HAL_GPIO_WritePin>
 8001fc8:	e1f8      	b.n	80023bc <HAL_GPIO_EXTI_Callback+0x1af8>
								}
								else if(pad_active == '2') {
 8001fca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fce:	2b32      	cmp	r3, #50	; 0x32
 8001fd0:	d132      	bne.n	8002038 <HAL_GPIO_EXTI_Callback+0x1774>
									guess_r = 2;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2180      	movs	r1, #128	; 0x80
 8001fdc:	486d      	ldr	r0, [pc, #436]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8001fde:	f001 fe29 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe8:	486a      	ldr	r0, [pc, #424]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8001fea:	f001 fe23 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ff4:	4867      	ldr	r0, [pc, #412]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8001ff6:	f001 fe1d 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002000:	4864      	ldr	r0, [pc, #400]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8002002:	f001 fe17 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8002006:	2200      	movs	r2, #0
 8002008:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800200c:	4861      	ldr	r0, [pc, #388]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 800200e:	f001 fe11 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8002012:	2201      	movs	r2, #1
 8002014:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002018:	485e      	ldr	r0, [pc, #376]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 800201a:	f001 fe0b 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 800201e:	2200      	movs	r2, #0
 8002020:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002024:	485b      	ldr	r0, [pc, #364]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8002026:	f001 fe05 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 800202a:	2201      	movs	r2, #1
 800202c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002030:	4858      	ldr	r0, [pc, #352]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8002032:	f001 fdff 	bl	8003c34 <HAL_GPIO_WritePin>
 8002036:	e1c1      	b.n	80023bc <HAL_GPIO_EXTI_Callback+0x1af8>

								}
								else if(pad_active == '3') {
 8002038:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800203c:	2b33      	cmp	r3, #51	; 0x33
 800203e:	d132      	bne.n	80020a6 <HAL_GPIO_EXTI_Callback+0x17e2>
									guess_r = 3;
 8002040:	2303      	movs	r3, #3
 8002042:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8002046:	2200      	movs	r2, #0
 8002048:	2180      	movs	r1, #128	; 0x80
 800204a:	4852      	ldr	r0, [pc, #328]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 800204c:	f001 fdf2 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8002050:	2200      	movs	r2, #0
 8002052:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002056:	484f      	ldr	r0, [pc, #316]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8002058:	f001 fdec 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800205c:	2200      	movs	r2, #0
 800205e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002062:	484c      	ldr	r0, [pc, #304]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8002064:	f001 fde6 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8002068:	2200      	movs	r2, #0
 800206a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800206e:	4849      	ldr	r0, [pc, #292]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8002070:	f001 fde0 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8002074:	2201      	movs	r2, #1
 8002076:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800207a:	4846      	ldr	r0, [pc, #280]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 800207c:	f001 fdda 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8002080:	2201      	movs	r2, #1
 8002082:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002086:	4843      	ldr	r0, [pc, #268]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8002088:	f001 fdd4 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 800208c:	2200      	movs	r2, #0
 800208e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002092:	4840      	ldr	r0, [pc, #256]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8002094:	f001 fdce 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8002098:	2201      	movs	r2, #1
 800209a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800209e:	483d      	ldr	r0, [pc, #244]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 80020a0:	f001 fdc8 	bl	8003c34 <HAL_GPIO_WritePin>
 80020a4:	e18a      	b.n	80023bc <HAL_GPIO_EXTI_Callback+0x1af8>
								}
								else if(pad_active == '4') {
 80020a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020aa:	2b34      	cmp	r3, #52	; 0x34
 80020ac:	d132      	bne.n	8002114 <HAL_GPIO_EXTI_Callback+0x1850>
									guess_r = 4;
 80020ae:	2304      	movs	r3, #4
 80020b0:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 80020b4:	2201      	movs	r2, #1
 80020b6:	2180      	movs	r1, #128	; 0x80
 80020b8:	4836      	ldr	r0, [pc, #216]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 80020ba:	f001 fdbb 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80020be:	2200      	movs	r2, #0
 80020c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020c4:	4833      	ldr	r0, [pc, #204]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 80020c6:	f001 fdb5 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80020ca:	2200      	movs	r2, #0
 80020cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d0:	4830      	ldr	r0, [pc, #192]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 80020d2:	f001 fdaf 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 80020d6:	2201      	movs	r2, #1
 80020d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020dc:	482d      	ldr	r0, [pc, #180]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 80020de:	f001 fda9 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80020e2:	2201      	movs	r2, #1
 80020e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020e8:	482a      	ldr	r0, [pc, #168]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 80020ea:	f001 fda3 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80020ee:	2200      	movs	r2, #0
 80020f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020f4:	4827      	ldr	r0, [pc, #156]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 80020f6:	f001 fd9d 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 80020fa:	2200      	movs	r2, #0
 80020fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002100:	4824      	ldr	r0, [pc, #144]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8002102:	f001 fd97 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8002106:	2201      	movs	r2, #1
 8002108:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800210c:	4821      	ldr	r0, [pc, #132]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 800210e:	f001 fd91 	bl	8003c34 <HAL_GPIO_WritePin>
 8002112:	e153      	b.n	80023bc <HAL_GPIO_EXTI_Callback+0x1af8>
								}
								else if(pad_active == '5') {
 8002114:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002118:	2b35      	cmp	r3, #53	; 0x35
 800211a:	d13d      	bne.n	8002198 <HAL_GPIO_EXTI_Callback+0x18d4>
									guess_r = 5;
 800211c:	2305      	movs	r3, #5
 800211e:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8002122:	2200      	movs	r2, #0
 8002124:	2180      	movs	r1, #128	; 0x80
 8002126:	481b      	ldr	r0, [pc, #108]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8002128:	f001 fd84 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 800212c:	2201      	movs	r2, #1
 800212e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002132:	4818      	ldr	r0, [pc, #96]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8002134:	f001 fd7e 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8002138:	2200      	movs	r2, #0
 800213a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800213e:	4815      	ldr	r0, [pc, #84]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8002140:	f001 fd78 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8002144:	2200      	movs	r2, #0
 8002146:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800214a:	4812      	ldr	r0, [pc, #72]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 800214c:	f001 fd72 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8002150:	2201      	movs	r2, #1
 8002152:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002156:	480f      	ldr	r0, [pc, #60]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8002158:	f001 fd6c 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800215c:	2200      	movs	r2, #0
 800215e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002162:	480c      	ldr	r0, [pc, #48]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8002164:	f001 fd66 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8002168:	2200      	movs	r2, #0
 800216a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800216e:	4809      	ldr	r0, [pc, #36]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 8002170:	f001 fd60 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8002174:	2201      	movs	r2, #1
 8002176:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800217a:	4806      	ldr	r0, [pc, #24]	; (8002194 <HAL_GPIO_EXTI_Callback+0x18d0>)
 800217c:	f001 fd5a 	bl	8003c34 <HAL_GPIO_WritePin>
 8002180:	e11c      	b.n	80023bc <HAL_GPIO_EXTI_Callback+0x1af8>
 8002182:	bf00      	nop
 8002184:	002dc6bf 	.word	0x002dc6bf
 8002188:	40020400 	.word	0x40020400
 800218c:	40020000 	.word	0x40020000
 8002190:	40020c00 	.word	0x40020c00
 8002194:	40021000 	.word	0x40021000
								}
								else if(pad_active == '6') {
 8002198:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800219c:	2b36      	cmp	r3, #54	; 0x36
 800219e:	d132      	bne.n	8002206 <HAL_GPIO_EXTI_Callback+0x1942>
									guess_r = 6;
 80021a0:	2306      	movs	r3, #6
 80021a2:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2180      	movs	r1, #128	; 0x80
 80021aa:	48c3      	ldr	r0, [pc, #780]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 80021ac:	f001 fd42 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 80021b0:	2201      	movs	r2, #1
 80021b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021b6:	48c0      	ldr	r0, [pc, #768]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 80021b8:	f001 fd3c 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80021bc:	2200      	movs	r2, #0
 80021be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021c2:	48bd      	ldr	r0, [pc, #756]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 80021c4:	f001 fd36 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80021c8:	2200      	movs	r2, #0
 80021ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021ce:	48ba      	ldr	r0, [pc, #744]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 80021d0:	f001 fd30 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80021d4:	2200      	movs	r2, #0
 80021d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021da:	48b7      	ldr	r0, [pc, #732]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 80021dc:	f001 fd2a 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80021e0:	2200      	movs	r2, #0
 80021e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021e6:	48b4      	ldr	r0, [pc, #720]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 80021e8:	f001 fd24 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 80021ec:	2200      	movs	r2, #0
 80021ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021f2:	48b1      	ldr	r0, [pc, #708]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 80021f4:	f001 fd1e 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80021f8:	2201      	movs	r2, #1
 80021fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021fe:	48ae      	ldr	r0, [pc, #696]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 8002200:	f001 fd18 	bl	8003c34 <HAL_GPIO_WritePin>
 8002204:	e0da      	b.n	80023bc <HAL_GPIO_EXTI_Callback+0x1af8>
								}
								else if(pad_active == '7') {
 8002206:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800220a:	2b37      	cmp	r3, #55	; 0x37
 800220c:	d132      	bne.n	8002274 <HAL_GPIO_EXTI_Callback+0x19b0>
									guess_r = 7;
 800220e:	2307      	movs	r3, #7
 8002210:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8002214:	2200      	movs	r2, #0
 8002216:	2180      	movs	r1, #128	; 0x80
 8002218:	48a7      	ldr	r0, [pc, #668]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 800221a:	f001 fd0b 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 800221e:	2200      	movs	r2, #0
 8002220:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002224:	48a4      	ldr	r0, [pc, #656]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 8002226:	f001 fd05 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800222a:	2200      	movs	r2, #0
 800222c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002230:	48a1      	ldr	r0, [pc, #644]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 8002232:	f001 fcff 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8002236:	2201      	movs	r2, #1
 8002238:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800223c:	489e      	ldr	r0, [pc, #632]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 800223e:	f001 fcf9 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8002242:	2201      	movs	r2, #1
 8002244:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002248:	489b      	ldr	r0, [pc, #620]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 800224a:	f001 fcf3 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 800224e:	2201      	movs	r2, #1
 8002250:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002254:	4898      	ldr	r0, [pc, #608]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 8002256:	f001 fced 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 800225a:	2201      	movs	r2, #1
 800225c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002260:	4895      	ldr	r0, [pc, #596]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 8002262:	f001 fce7 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8002266:	2201      	movs	r2, #1
 8002268:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800226c:	4892      	ldr	r0, [pc, #584]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 800226e:	f001 fce1 	bl	8003c34 <HAL_GPIO_WritePin>
 8002272:	e0a3      	b.n	80023bc <HAL_GPIO_EXTI_Callback+0x1af8>
								}
								else if(pad_active == '8') {
 8002274:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002278:	2b38      	cmp	r3, #56	; 0x38
 800227a:	d132      	bne.n	80022e2 <HAL_GPIO_EXTI_Callback+0x1a1e>
									guess_r = 8;
 800227c:	2308      	movs	r3, #8
 800227e:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8002282:	2200      	movs	r2, #0
 8002284:	2180      	movs	r1, #128	; 0x80
 8002286:	488c      	ldr	r0, [pc, #560]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 8002288:	f001 fcd4 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 800228c:	2200      	movs	r2, #0
 800228e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002292:	4889      	ldr	r0, [pc, #548]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 8002294:	f001 fcce 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8002298:	2200      	movs	r2, #0
 800229a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800229e:	4886      	ldr	r0, [pc, #536]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 80022a0:	f001 fcc8 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80022a4:	2200      	movs	r2, #0
 80022a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022aa:	4883      	ldr	r0, [pc, #524]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 80022ac:	f001 fcc2 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80022b0:	2200      	movs	r2, #0
 80022b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022b6:	4880      	ldr	r0, [pc, #512]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 80022b8:	f001 fcbc 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80022bc:	2200      	movs	r2, #0
 80022be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022c2:	487d      	ldr	r0, [pc, #500]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 80022c4:	f001 fcb6 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 80022c8:	2200      	movs	r2, #0
 80022ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022ce:	487a      	ldr	r0, [pc, #488]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 80022d0:	f001 fcb0 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80022d4:	2201      	movs	r2, #1
 80022d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022da:	4877      	ldr	r0, [pc, #476]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 80022dc:	f001 fcaa 	bl	8003c34 <HAL_GPIO_WritePin>
 80022e0:	e06c      	b.n	80023bc <HAL_GPIO_EXTI_Callback+0x1af8>
								}
								else if(pad_active == '9') {
 80022e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022e6:	2b39      	cmp	r3, #57	; 0x39
 80022e8:	d132      	bne.n	8002350 <HAL_GPIO_EXTI_Callback+0x1a8c>
									guess_r = 9;
 80022ea:	2309      	movs	r3, #9
 80022ec:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80022f0:	2200      	movs	r2, #0
 80022f2:	2180      	movs	r1, #128	; 0x80
 80022f4:	4870      	ldr	r0, [pc, #448]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 80022f6:	f001 fc9d 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80022fa:	2200      	movs	r2, #0
 80022fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002300:	486d      	ldr	r0, [pc, #436]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 8002302:	f001 fc97 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8002306:	2200      	movs	r2, #0
 8002308:	f44f 7100 	mov.w	r1, #512	; 0x200
 800230c:	486a      	ldr	r0, [pc, #424]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 800230e:	f001 fc91 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8002312:	2200      	movs	r2, #0
 8002314:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002318:	4867      	ldr	r0, [pc, #412]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 800231a:	f001 fc8b 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 800231e:	2201      	movs	r2, #1
 8002320:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002324:	4864      	ldr	r0, [pc, #400]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 8002326:	f001 fc85 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800232a:	2200      	movs	r2, #0
 800232c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002330:	4861      	ldr	r0, [pc, #388]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 8002332:	f001 fc7f 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8002336:	2200      	movs	r2, #0
 8002338:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800233c:	485e      	ldr	r0, [pc, #376]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 800233e:	f001 fc79 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8002342:	2201      	movs	r2, #1
 8002344:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002348:	485b      	ldr	r0, [pc, #364]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 800234a:	f001 fc73 	bl	8003c34 <HAL_GPIO_WritePin>
 800234e:	e035      	b.n	80023bc <HAL_GPIO_EXTI_Callback+0x1af8>
								}
								else if(pad_active == '0') {
 8002350:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002354:	2b30      	cmp	r3, #48	; 0x30
 8002356:	d131      	bne.n	80023bc <HAL_GPIO_EXTI_Callback+0x1af8>
									guess_r = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 800235e:	2200      	movs	r2, #0
 8002360:	2180      	movs	r1, #128	; 0x80
 8002362:	4855      	ldr	r0, [pc, #340]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 8002364:	f001 fc66 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8002368:	2200      	movs	r2, #0
 800236a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800236e:	4852      	ldr	r0, [pc, #328]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 8002370:	f001 fc60 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8002374:	2200      	movs	r2, #0
 8002376:	f44f 7100 	mov.w	r1, #512	; 0x200
 800237a:	484f      	ldr	r0, [pc, #316]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 800237c:	f001 fc5a 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8002380:	2200      	movs	r2, #0
 8002382:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002386:	484c      	ldr	r0, [pc, #304]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 8002388:	f001 fc54 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 800238c:	2200      	movs	r2, #0
 800238e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002392:	4849      	ldr	r0, [pc, #292]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 8002394:	f001 fc4e 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8002398:	2200      	movs	r2, #0
 800239a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800239e:	4846      	ldr	r0, [pc, #280]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 80023a0:	f001 fc48 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 80023a4:	2201      	movs	r2, #1
 80023a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023aa:	4843      	ldr	r0, [pc, #268]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 80023ac:	f001 fc42 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80023b0:	2201      	movs	r2, #1
 80023b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023b6:	4840      	ldr	r0, [pc, #256]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x1bf4>)
 80023b8:	f001 fc3c 	bl	8003c34 <HAL_GPIO_WritePin>
								}
		 						}
		 					 if (guess_r == 10) {
 80023bc:	f897 30f5 	ldrb.w	r3, [r7, #245]	; 0xf5
 80023c0:	2b0a      	cmp	r3, #10
 80023c2:	d120      	bne.n	8002406 <HAL_GPIO_EXTI_Callback+0x1b42>
		 						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80023c4:	2201      	movs	r2, #1
 80023c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023ca:	483c      	ldr	r0, [pc, #240]	; (80024bc <HAL_GPIO_EXTI_Callback+0x1bf8>)
 80023cc:	f001 fc32 	bl	8003c34 <HAL_GPIO_WritePin>
		 						 for(uint32_t i = 0; i < 3000000; i++);
 80023d0:	2300      	movs	r3, #0
 80023d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80023d4:	e002      	b.n	80023dc <HAL_GPIO_EXTI_Callback+0x1b18>
 80023d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023d8:	3301      	adds	r3, #1
 80023da:	66bb      	str	r3, [r7, #104]	; 0x68
 80023dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023de:	4a38      	ldr	r2, [pc, #224]	; (80024c0 <HAL_GPIO_EXTI_Callback+0x1bfc>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d9f8      	bls.n	80023d6 <HAL_GPIO_EXTI_Callback+0x1b12>
		 						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80023e4:	2200      	movs	r2, #0
 80023e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023ea:	4834      	ldr	r0, [pc, #208]	; (80024bc <HAL_GPIO_EXTI_Callback+0x1bf8>)
 80023ec:	f001 fc22 	bl	8003c34 <HAL_GPIO_WritePin>
		 						 for(uint32_t i = 0; i < 3000000; i++);
 80023f0:	2300      	movs	r3, #0
 80023f2:	667b      	str	r3, [r7, #100]	; 0x64
 80023f4:	e002      	b.n	80023fc <HAL_GPIO_EXTI_Callback+0x1b38>
 80023f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023f8:	3301      	adds	r3, #1
 80023fa:	667b      	str	r3, [r7, #100]	; 0x64
 80023fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023fe:	4a30      	ldr	r2, [pc, #192]	; (80024c0 <HAL_GPIO_EXTI_Callback+0x1bfc>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d9f8      	bls.n	80023f6 <HAL_GPIO_EXTI_Callback+0x1b32>
 8002404:	e067      	b.n	80024d6 <HAL_GPIO_EXTI_Callback+0x1c12>
		 					 }
		 					 else if (guess_r < random_num[2]) {
 8002406:	f897 20f5 	ldrb.w	r2, [r7, #245]	; 0xf5
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	429a      	cmp	r2, r3
 800240e:	da2a      	bge.n	8002466 <HAL_GPIO_EXTI_Callback+0x1ba2>
		 						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002410:	2201      	movs	r2, #1
 8002412:	2110      	movs	r1, #16
 8002414:	482b      	ldr	r0, [pc, #172]	; (80024c4 <HAL_GPIO_EXTI_Callback+0x1c00>)
 8002416:	f001 fc0d 	bl	8003c34 <HAL_GPIO_WritePin>
		 						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800241a:	2200      	movs	r2, #0
 800241c:	2120      	movs	r1, #32
 800241e:	4829      	ldr	r0, [pc, #164]	; (80024c4 <HAL_GPIO_EXTI_Callback+0x1c00>)
 8002420:	f001 fc08 	bl	8003c34 <HAL_GPIO_WritePin>
		 						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002424:	2201      	movs	r2, #1
 8002426:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800242a:	4824      	ldr	r0, [pc, #144]	; (80024bc <HAL_GPIO_EXTI_Callback+0x1bf8>)
 800242c:	f001 fc02 	bl	8003c34 <HAL_GPIO_WritePin>
		 						 for(uint32_t i = 0; i < 3000000; i++);
 8002430:	2300      	movs	r3, #0
 8002432:	663b      	str	r3, [r7, #96]	; 0x60
 8002434:	e002      	b.n	800243c <HAL_GPIO_EXTI_Callback+0x1b78>
 8002436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002438:	3301      	adds	r3, #1
 800243a:	663b      	str	r3, [r7, #96]	; 0x60
 800243c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800243e:	4a20      	ldr	r2, [pc, #128]	; (80024c0 <HAL_GPIO_EXTI_Callback+0x1bfc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d9f8      	bls.n	8002436 <HAL_GPIO_EXTI_Callback+0x1b72>
		 						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8002444:	2200      	movs	r2, #0
 8002446:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800244a:	481c      	ldr	r0, [pc, #112]	; (80024bc <HAL_GPIO_EXTI_Callback+0x1bf8>)
 800244c:	f001 fbf2 	bl	8003c34 <HAL_GPIO_WritePin>
		 						 for(uint32_t i = 0; i < 3000000; i++);
 8002450:	2300      	movs	r3, #0
 8002452:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002454:	e002      	b.n	800245c <HAL_GPIO_EXTI_Callback+0x1b98>
 8002456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002458:	3301      	adds	r3, #1
 800245a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800245c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800245e:	4a18      	ldr	r2, [pc, #96]	; (80024c0 <HAL_GPIO_EXTI_Callback+0x1bfc>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d9f8      	bls.n	8002456 <HAL_GPIO_EXTI_Callback+0x1b92>
 8002464:	e037      	b.n	80024d6 <HAL_GPIO_EXTI_Callback+0x1c12>
		 					 }
		 					 else if (guess_r > random_num[2]) {
 8002466:	f897 20f5 	ldrb.w	r2, [r7, #245]	; 0xf5
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	429a      	cmp	r2, r3
 800246e:	dd32      	ble.n	80024d6 <HAL_GPIO_EXTI_Callback+0x1c12>
		 						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002470:	2200      	movs	r2, #0
 8002472:	2110      	movs	r1, #16
 8002474:	4813      	ldr	r0, [pc, #76]	; (80024c4 <HAL_GPIO_EXTI_Callback+0x1c00>)
 8002476:	f001 fbdd 	bl	8003c34 <HAL_GPIO_WritePin>
		 						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800247a:	2201      	movs	r2, #1
 800247c:	2120      	movs	r1, #32
 800247e:	4811      	ldr	r0, [pc, #68]	; (80024c4 <HAL_GPIO_EXTI_Callback+0x1c00>)
 8002480:	f001 fbd8 	bl	8003c34 <HAL_GPIO_WritePin>
		 						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002484:	2201      	movs	r2, #1
 8002486:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800248a:	480c      	ldr	r0, [pc, #48]	; (80024bc <HAL_GPIO_EXTI_Callback+0x1bf8>)
 800248c:	f001 fbd2 	bl	8003c34 <HAL_GPIO_WritePin>
		 						 for(uint32_t i = 0; i < 3000000; i++);
 8002490:	2300      	movs	r3, #0
 8002492:	65bb      	str	r3, [r7, #88]	; 0x58
 8002494:	e002      	b.n	800249c <HAL_GPIO_EXTI_Callback+0x1bd8>
 8002496:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002498:	3301      	adds	r3, #1
 800249a:	65bb      	str	r3, [r7, #88]	; 0x58
 800249c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800249e:	4a08      	ldr	r2, [pc, #32]	; (80024c0 <HAL_GPIO_EXTI_Callback+0x1bfc>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d9f8      	bls.n	8002496 <HAL_GPIO_EXTI_Callback+0x1bd2>
		 						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80024a4:	2200      	movs	r2, #0
 80024a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024aa:	4804      	ldr	r0, [pc, #16]	; (80024bc <HAL_GPIO_EXTI_Callback+0x1bf8>)
 80024ac:	f001 fbc2 	bl	8003c34 <HAL_GPIO_WritePin>
		 						 for(uint32_t i = 0; i < 3000000; i++);
 80024b0:	2300      	movs	r3, #0
 80024b2:	657b      	str	r3, [r7, #84]	; 0x54
 80024b4:	e00b      	b.n	80024ce <HAL_GPIO_EXTI_Callback+0x1c0a>
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40020c00 	.word	0x40020c00
 80024c0:	002dc6bf 	.word	0x002dc6bf
 80024c4:	40020400 	.word	0x40020400
 80024c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ca:	3301      	adds	r3, #1
 80024cc:	657b      	str	r3, [r7, #84]	; 0x54
 80024ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d0:	4ac3      	ldr	r2, [pc, #780]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x1f1c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d9f8      	bls.n	80024c8 <HAL_GPIO_EXTI_Callback+0x1c04>
		 				 while(guess_r != random_num[2]) {
 80024d6:	f897 20f5 	ldrb.w	r2, [r7, #245]	; 0xf5
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	429a      	cmp	r2, r3
 80024de:	f47f ad33 	bne.w	8001f48 <HAL_GPIO_EXTI_Callback+0x1684>
		 					 }
		 			  }
		 				 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80024e2:	2201      	movs	r2, #1
 80024e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024e8:	48be      	ldr	r0, [pc, #760]	; (80027e4 <HAL_GPIO_EXTI_Callback+0x1f20>)
 80024ea:	f001 fba3 	bl	8003c34 <HAL_GPIO_WritePin>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80024ee:	2201      	movs	r2, #1
 80024f0:	2110      	movs	r1, #16
 80024f2:	48bd      	ldr	r0, [pc, #756]	; (80027e8 <HAL_GPIO_EXTI_Callback+0x1f24>)
 80024f4:	f001 fb9e 	bl	8003c34 <HAL_GPIO_WritePin>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80024f8:	2201      	movs	r2, #1
 80024fa:	2120      	movs	r1, #32
 80024fc:	48ba      	ldr	r0, [pc, #744]	; (80027e8 <HAL_GPIO_EXTI_Callback+0x1f24>)
 80024fe:	f001 fb99 	bl	8003c34 <HAL_GPIO_WritePin>
						 for(uint32_t i = 0; i < 3000000; i++);
 8002502:	2300      	movs	r3, #0
 8002504:	653b      	str	r3, [r7, #80]	; 0x50
 8002506:	e002      	b.n	800250e <HAL_GPIO_EXTI_Callback+0x1c4a>
 8002508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800250a:	3301      	adds	r3, #1
 800250c:	653b      	str	r3, [r7, #80]	; 0x50
 800250e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002510:	4ab3      	ldr	r2, [pc, #716]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x1f1c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d9f8      	bls.n	8002508 <HAL_GPIO_EXTI_Callback+0x1c44>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002516:	2200      	movs	r2, #0
 8002518:	2110      	movs	r1, #16
 800251a:	48b3      	ldr	r0, [pc, #716]	; (80027e8 <HAL_GPIO_EXTI_Callback+0x1f24>)
 800251c:	f001 fb8a 	bl	8003c34 <HAL_GPIO_WritePin>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002520:	2200      	movs	r2, #0
 8002522:	2120      	movs	r1, #32
 8002524:	48b0      	ldr	r0, [pc, #704]	; (80027e8 <HAL_GPIO_EXTI_Callback+0x1f24>)
 8002526:	f001 fb85 	bl	8003c34 <HAL_GPIO_WritePin>
						 for(uint32_t i = 0; i < 3000000; i++);
 800252a:	2300      	movs	r3, #0
 800252c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800252e:	e002      	b.n	8002536 <HAL_GPIO_EXTI_Callback+0x1c72>
 8002530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002532:	3301      	adds	r3, #1
 8002534:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002538:	4aa9      	ldr	r2, [pc, #676]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x1f1c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d9f8      	bls.n	8002530 <HAL_GPIO_EXTI_Callback+0x1c6c>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800253e:	2201      	movs	r2, #1
 8002540:	2110      	movs	r1, #16
 8002542:	48a9      	ldr	r0, [pc, #676]	; (80027e8 <HAL_GPIO_EXTI_Callback+0x1f24>)
 8002544:	f001 fb76 	bl	8003c34 <HAL_GPIO_WritePin>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002548:	2201      	movs	r2, #1
 800254a:	2120      	movs	r1, #32
 800254c:	48a6      	ldr	r0, [pc, #664]	; (80027e8 <HAL_GPIO_EXTI_Callback+0x1f24>)
 800254e:	f001 fb71 	bl	8003c34 <HAL_GPIO_WritePin>
						 for(uint32_t i = 0; i < 3000000; i++);
 8002552:	2300      	movs	r3, #0
 8002554:	64bb      	str	r3, [r7, #72]	; 0x48
 8002556:	e002      	b.n	800255e <HAL_GPIO_EXTI_Callback+0x1c9a>
 8002558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800255a:	3301      	adds	r3, #1
 800255c:	64bb      	str	r3, [r7, #72]	; 0x48
 800255e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002560:	4a9f      	ldr	r2, [pc, #636]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x1f1c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d9f8      	bls.n	8002558 <HAL_GPIO_EXTI_Callback+0x1c94>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002566:	2200      	movs	r2, #0
 8002568:	2110      	movs	r1, #16
 800256a:	489f      	ldr	r0, [pc, #636]	; (80027e8 <HAL_GPIO_EXTI_Callback+0x1f24>)
 800256c:	f001 fb62 	bl	8003c34 <HAL_GPIO_WritePin>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002570:	2200      	movs	r2, #0
 8002572:	2120      	movs	r1, #32
 8002574:	489c      	ldr	r0, [pc, #624]	; (80027e8 <HAL_GPIO_EXTI_Callback+0x1f24>)
 8002576:	f001 fb5d 	bl	8003c34 <HAL_GPIO_WritePin>
		 				guess_r = random_num[2];
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
		 		  }
		  if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) && (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_SET)) {
 8002580:	2101      	movs	r1, #1
 8002582:	489a      	ldr	r0, [pc, #616]	; (80027ec <HAL_GPIO_EXTI_Callback+0x1f28>)
 8002584:	f001 fb3e 	bl	8003c04 <HAL_GPIO_ReadPin>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	f040 8326 	bne.w	8002bdc <HAL_GPIO_EXTI_Callback+0x2318>
 8002590:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002594:	4893      	ldr	r0, [pc, #588]	; (80027e4 <HAL_GPIO_EXTI_Callback+0x1f20>)
 8002596:	f001 fb35 	bl	8003c04 <HAL_GPIO_ReadPin>
 800259a:	4603      	mov	r3, r0
 800259c:	2b01      	cmp	r3, #1
 800259e:	f040 831d 	bne.w	8002bdc <HAL_GPIO_EXTI_Callback+0x2318>
		 				 while(guess_b != random_num[3]) {
 80025a2:	e2c6      	b.n	8002b32 <HAL_GPIO_EXTI_Callback+0x226e>

		 					 pad_active = check_keys();
 80025a4:	f7fd ffe6 	bl	8000574 <check_keys>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		 					if(pad_active != 0) {
 80025ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 8230 	beq.w	8002a18 <HAL_GPIO_EXTI_Callback+0x2154>

								if(pad_active == '1') {
 80025b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025bc:	2b31      	cmp	r3, #49	; 0x31
 80025be:	d132      	bne.n	8002626 <HAL_GPIO_EXTI_Callback+0x1d62>
									guess_b = 1;
 80025c0:	2301      	movs	r3, #1
 80025c2:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 80025c6:	2201      	movs	r2, #1
 80025c8:	2180      	movs	r1, #128	; 0x80
 80025ca:	4889      	ldr	r0, [pc, #548]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 80025cc:	f001 fb32 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80025d0:	2200      	movs	r2, #0
 80025d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025d6:	4886      	ldr	r0, [pc, #536]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 80025d8:	f001 fb2c 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80025dc:	2200      	movs	r2, #0
 80025de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025e2:	4883      	ldr	r0, [pc, #524]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 80025e4:	f001 fb26 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 80025e8:	2201      	movs	r2, #1
 80025ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025ee:	4880      	ldr	r0, [pc, #512]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 80025f0:	f001 fb20 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80025f4:	2201      	movs	r2, #1
 80025f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025fa:	487d      	ldr	r0, [pc, #500]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 80025fc:	f001 fb1a 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8002600:	2201      	movs	r2, #1
 8002602:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002606:	487a      	ldr	r0, [pc, #488]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 8002608:	f001 fb14 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 800260c:	2201      	movs	r2, #1
 800260e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002612:	4877      	ldr	r0, [pc, #476]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 8002614:	f001 fb0e 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8002618:	2201      	movs	r2, #1
 800261a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800261e:	4874      	ldr	r0, [pc, #464]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 8002620:	f001 fb08 	bl	8003c34 <HAL_GPIO_WritePin>
 8002624:	e1f8      	b.n	8002a18 <HAL_GPIO_EXTI_Callback+0x2154>
								}
								else if(pad_active == '2') {
 8002626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800262a:	2b32      	cmp	r3, #50	; 0x32
 800262c:	d132      	bne.n	8002694 <HAL_GPIO_EXTI_Callback+0x1dd0>
									guess_b = 2;
 800262e:	2302      	movs	r3, #2
 8002630:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8002634:	2200      	movs	r2, #0
 8002636:	2180      	movs	r1, #128	; 0x80
 8002638:	486d      	ldr	r0, [pc, #436]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 800263a:	f001 fafb 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 800263e:	2200      	movs	r2, #0
 8002640:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002644:	486a      	ldr	r0, [pc, #424]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 8002646:	f001 faf5 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 800264a:	2201      	movs	r2, #1
 800264c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002650:	4867      	ldr	r0, [pc, #412]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 8002652:	f001 faef 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8002656:	2200      	movs	r2, #0
 8002658:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800265c:	4864      	ldr	r0, [pc, #400]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 800265e:	f001 fae9 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8002662:	2200      	movs	r2, #0
 8002664:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002668:	4861      	ldr	r0, [pc, #388]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 800266a:	f001 fae3 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 800266e:	2201      	movs	r2, #1
 8002670:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002674:	485e      	ldr	r0, [pc, #376]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 8002676:	f001 fadd 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 800267a:	2200      	movs	r2, #0
 800267c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002680:	485b      	ldr	r0, [pc, #364]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 8002682:	f001 fad7 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8002686:	2201      	movs	r2, #1
 8002688:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800268c:	4858      	ldr	r0, [pc, #352]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 800268e:	f001 fad1 	bl	8003c34 <HAL_GPIO_WritePin>
 8002692:	e1c1      	b.n	8002a18 <HAL_GPIO_EXTI_Callback+0x2154>

								}
								else if(pad_active == '3') {
 8002694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002698:	2b33      	cmp	r3, #51	; 0x33
 800269a:	d132      	bne.n	8002702 <HAL_GPIO_EXTI_Callback+0x1e3e>
									guess_b = 3;
 800269c:	2303      	movs	r3, #3
 800269e:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2180      	movs	r1, #128	; 0x80
 80026a6:	4852      	ldr	r0, [pc, #328]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 80026a8:	f001 fac4 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80026ac:	2200      	movs	r2, #0
 80026ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026b2:	484f      	ldr	r0, [pc, #316]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 80026b4:	f001 fabe 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80026b8:	2200      	movs	r2, #0
 80026ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026be:	484c      	ldr	r0, [pc, #304]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 80026c0:	f001 fab8 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80026c4:	2200      	movs	r2, #0
 80026c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026ca:	4849      	ldr	r0, [pc, #292]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 80026cc:	f001 fab2 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80026d0:	2201      	movs	r2, #1
 80026d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026d6:	4846      	ldr	r0, [pc, #280]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 80026d8:	f001 faac 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80026dc:	2201      	movs	r2, #1
 80026de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026e2:	4843      	ldr	r0, [pc, #268]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 80026e4:	f001 faa6 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 80026e8:	2200      	movs	r2, #0
 80026ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026ee:	4840      	ldr	r0, [pc, #256]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 80026f0:	f001 faa0 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80026f4:	2201      	movs	r2, #1
 80026f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026fa:	483d      	ldr	r0, [pc, #244]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 80026fc:	f001 fa9a 	bl	8003c34 <HAL_GPIO_WritePin>
 8002700:	e18a      	b.n	8002a18 <HAL_GPIO_EXTI_Callback+0x2154>
								}
								else if(pad_active == '4') {
 8002702:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002706:	2b34      	cmp	r3, #52	; 0x34
 8002708:	d132      	bne.n	8002770 <HAL_GPIO_EXTI_Callback+0x1eac>
									guess_b = 4;
 800270a:	2304      	movs	r3, #4
 800270c:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8002710:	2201      	movs	r2, #1
 8002712:	2180      	movs	r1, #128	; 0x80
 8002714:	4836      	ldr	r0, [pc, #216]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 8002716:	f001 fa8d 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 800271a:	2200      	movs	r2, #0
 800271c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002720:	4833      	ldr	r0, [pc, #204]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 8002722:	f001 fa87 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8002726:	2200      	movs	r2, #0
 8002728:	f44f 7100 	mov.w	r1, #512	; 0x200
 800272c:	4830      	ldr	r0, [pc, #192]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 800272e:	f001 fa81 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8002732:	2201      	movs	r2, #1
 8002734:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002738:	482d      	ldr	r0, [pc, #180]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 800273a:	f001 fa7b 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 800273e:	2201      	movs	r2, #1
 8002740:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002744:	482a      	ldr	r0, [pc, #168]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 8002746:	f001 fa75 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800274a:	2200      	movs	r2, #0
 800274c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002750:	4827      	ldr	r0, [pc, #156]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 8002752:	f001 fa6f 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8002756:	2200      	movs	r2, #0
 8002758:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800275c:	4824      	ldr	r0, [pc, #144]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 800275e:	f001 fa69 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8002762:	2201      	movs	r2, #1
 8002764:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002768:	4821      	ldr	r0, [pc, #132]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 800276a:	f001 fa63 	bl	8003c34 <HAL_GPIO_WritePin>
 800276e:	e153      	b.n	8002a18 <HAL_GPIO_EXTI_Callback+0x2154>
								}
								else if(pad_active == '5') {
 8002770:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002774:	2b35      	cmp	r3, #53	; 0x35
 8002776:	d13d      	bne.n	80027f4 <HAL_GPIO_EXTI_Callback+0x1f30>
									guess_b = 5;
 8002778:	2305      	movs	r3, #5
 800277a:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 800277e:	2200      	movs	r2, #0
 8002780:	2180      	movs	r1, #128	; 0x80
 8002782:	481b      	ldr	r0, [pc, #108]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 8002784:	f001 fa56 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8002788:	2201      	movs	r2, #1
 800278a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800278e:	4818      	ldr	r0, [pc, #96]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 8002790:	f001 fa50 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8002794:	2200      	movs	r2, #0
 8002796:	f44f 7100 	mov.w	r1, #512	; 0x200
 800279a:	4815      	ldr	r0, [pc, #84]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 800279c:	f001 fa4a 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80027a0:	2200      	movs	r2, #0
 80027a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027a6:	4812      	ldr	r0, [pc, #72]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 80027a8:	f001 fa44 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80027ac:	2201      	movs	r2, #1
 80027ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027b2:	480f      	ldr	r0, [pc, #60]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 80027b4:	f001 fa3e 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80027b8:	2200      	movs	r2, #0
 80027ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027be:	480c      	ldr	r0, [pc, #48]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 80027c0:	f001 fa38 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 80027c4:	2200      	movs	r2, #0
 80027c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027ca:	4809      	ldr	r0, [pc, #36]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 80027cc:	f001 fa32 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80027d0:	2201      	movs	r2, #1
 80027d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027d6:	4806      	ldr	r0, [pc, #24]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x1f2c>)
 80027d8:	f001 fa2c 	bl	8003c34 <HAL_GPIO_WritePin>
 80027dc:	e11c      	b.n	8002a18 <HAL_GPIO_EXTI_Callback+0x2154>
 80027de:	bf00      	nop
 80027e0:	002dc6bf 	.word	0x002dc6bf
 80027e4:	40020c00 	.word	0x40020c00
 80027e8:	40020400 	.word	0x40020400
 80027ec:	40020000 	.word	0x40020000
 80027f0:	40021000 	.word	0x40021000
								}
								else if(pad_active == '6') {
 80027f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027f8:	2b36      	cmp	r3, #54	; 0x36
 80027fa:	d132      	bne.n	8002862 <HAL_GPIO_EXTI_Callback+0x1f9e>
									guess_b = 6;
 80027fc:	2306      	movs	r3, #6
 80027fe:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8002802:	2200      	movs	r2, #0
 8002804:	2180      	movs	r1, #128	; 0x80
 8002806:	48c3      	ldr	r0, [pc, #780]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 8002808:	f001 fa14 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 800280c:	2201      	movs	r2, #1
 800280e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002812:	48c0      	ldr	r0, [pc, #768]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 8002814:	f001 fa0e 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8002818:	2200      	movs	r2, #0
 800281a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800281e:	48bd      	ldr	r0, [pc, #756]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 8002820:	f001 fa08 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8002824:	2200      	movs	r2, #0
 8002826:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800282a:	48ba      	ldr	r0, [pc, #744]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 800282c:	f001 fa02 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8002830:	2200      	movs	r2, #0
 8002832:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002836:	48b7      	ldr	r0, [pc, #732]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 8002838:	f001 f9fc 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800283c:	2200      	movs	r2, #0
 800283e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002842:	48b4      	ldr	r0, [pc, #720]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 8002844:	f001 f9f6 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8002848:	2200      	movs	r2, #0
 800284a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800284e:	48b1      	ldr	r0, [pc, #708]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 8002850:	f001 f9f0 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8002854:	2201      	movs	r2, #1
 8002856:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800285a:	48ae      	ldr	r0, [pc, #696]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 800285c:	f001 f9ea 	bl	8003c34 <HAL_GPIO_WritePin>
 8002860:	e0da      	b.n	8002a18 <HAL_GPIO_EXTI_Callback+0x2154>
								}
								else if(pad_active == '7') {
 8002862:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002866:	2b37      	cmp	r3, #55	; 0x37
 8002868:	d132      	bne.n	80028d0 <HAL_GPIO_EXTI_Callback+0x200c>
									guess_b = 7;
 800286a:	2307      	movs	r3, #7
 800286c:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8002870:	2200      	movs	r2, #0
 8002872:	2180      	movs	r1, #128	; 0x80
 8002874:	48a7      	ldr	r0, [pc, #668]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 8002876:	f001 f9dd 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 800287a:	2200      	movs	r2, #0
 800287c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002880:	48a4      	ldr	r0, [pc, #656]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 8002882:	f001 f9d7 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8002886:	2200      	movs	r2, #0
 8002888:	f44f 7100 	mov.w	r1, #512	; 0x200
 800288c:	48a1      	ldr	r0, [pc, #644]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 800288e:	f001 f9d1 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8002892:	2201      	movs	r2, #1
 8002894:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002898:	489e      	ldr	r0, [pc, #632]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 800289a:	f001 f9cb 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 800289e:	2201      	movs	r2, #1
 80028a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028a4:	489b      	ldr	r0, [pc, #620]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 80028a6:	f001 f9c5 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80028aa:	2201      	movs	r2, #1
 80028ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028b0:	4898      	ldr	r0, [pc, #608]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 80028b2:	f001 f9bf 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 80028b6:	2201      	movs	r2, #1
 80028b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028bc:	4895      	ldr	r0, [pc, #596]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 80028be:	f001 f9b9 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80028c2:	2201      	movs	r2, #1
 80028c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028c8:	4892      	ldr	r0, [pc, #584]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 80028ca:	f001 f9b3 	bl	8003c34 <HAL_GPIO_WritePin>
 80028ce:	e0a3      	b.n	8002a18 <HAL_GPIO_EXTI_Callback+0x2154>
								}
								else if(pad_active == '8') {
 80028d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028d4:	2b38      	cmp	r3, #56	; 0x38
 80028d6:	d132      	bne.n	800293e <HAL_GPIO_EXTI_Callback+0x207a>
									guess_b = 8;
 80028d8:	2308      	movs	r3, #8
 80028da:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80028de:	2200      	movs	r2, #0
 80028e0:	2180      	movs	r1, #128	; 0x80
 80028e2:	488c      	ldr	r0, [pc, #560]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 80028e4:	f001 f9a6 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80028e8:	2200      	movs	r2, #0
 80028ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028ee:	4889      	ldr	r0, [pc, #548]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 80028f0:	f001 f9a0 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80028f4:	2200      	movs	r2, #0
 80028f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028fa:	4886      	ldr	r0, [pc, #536]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 80028fc:	f001 f99a 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8002900:	2200      	movs	r2, #0
 8002902:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002906:	4883      	ldr	r0, [pc, #524]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 8002908:	f001 f994 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 800290c:	2200      	movs	r2, #0
 800290e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002912:	4880      	ldr	r0, [pc, #512]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 8002914:	f001 f98e 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8002918:	2200      	movs	r2, #0
 800291a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800291e:	487d      	ldr	r0, [pc, #500]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 8002920:	f001 f988 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8002924:	2200      	movs	r2, #0
 8002926:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800292a:	487a      	ldr	r0, [pc, #488]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 800292c:	f001 f982 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8002930:	2201      	movs	r2, #1
 8002932:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002936:	4877      	ldr	r0, [pc, #476]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 8002938:	f001 f97c 	bl	8003c34 <HAL_GPIO_WritePin>
 800293c:	e06c      	b.n	8002a18 <HAL_GPIO_EXTI_Callback+0x2154>
								}
								else if(pad_active == '9') {
 800293e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002942:	2b39      	cmp	r3, #57	; 0x39
 8002944:	d132      	bne.n	80029ac <HAL_GPIO_EXTI_Callback+0x20e8>
									guess_b = 9;
 8002946:	2309      	movs	r3, #9
 8002948:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 800294c:	2200      	movs	r2, #0
 800294e:	2180      	movs	r1, #128	; 0x80
 8002950:	4870      	ldr	r0, [pc, #448]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 8002952:	f001 f96f 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8002956:	2200      	movs	r2, #0
 8002958:	f44f 7180 	mov.w	r1, #256	; 0x100
 800295c:	486d      	ldr	r0, [pc, #436]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 800295e:	f001 f969 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8002962:	2200      	movs	r2, #0
 8002964:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002968:	486a      	ldr	r0, [pc, #424]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 800296a:	f001 f963 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 800296e:	2200      	movs	r2, #0
 8002970:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002974:	4867      	ldr	r0, [pc, #412]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 8002976:	f001 f95d 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 800297a:	2201      	movs	r2, #1
 800297c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002980:	4864      	ldr	r0, [pc, #400]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 8002982:	f001 f957 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8002986:	2200      	movs	r2, #0
 8002988:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800298c:	4861      	ldr	r0, [pc, #388]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 800298e:	f001 f951 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8002992:	2200      	movs	r2, #0
 8002994:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002998:	485e      	ldr	r0, [pc, #376]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 800299a:	f001 f94b 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 800299e:	2201      	movs	r2, #1
 80029a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029a4:	485b      	ldr	r0, [pc, #364]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 80029a6:	f001 f945 	bl	8003c34 <HAL_GPIO_WritePin>
 80029aa:	e035      	b.n	8002a18 <HAL_GPIO_EXTI_Callback+0x2154>
								}
								else if(pad_active == '0') {
 80029ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029b0:	2b30      	cmp	r3, #48	; 0x30
 80029b2:	d131      	bne.n	8002a18 <HAL_GPIO_EXTI_Callback+0x2154>
									guess_b = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80029ba:	2200      	movs	r2, #0
 80029bc:	2180      	movs	r1, #128	; 0x80
 80029be:	4855      	ldr	r0, [pc, #340]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 80029c0:	f001 f938 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80029c4:	2200      	movs	r2, #0
 80029c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029ca:	4852      	ldr	r0, [pc, #328]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 80029cc:	f001 f932 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80029d0:	2200      	movs	r2, #0
 80029d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029d6:	484f      	ldr	r0, [pc, #316]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 80029d8:	f001 f92c 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80029dc:	2200      	movs	r2, #0
 80029de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029e2:	484c      	ldr	r0, [pc, #304]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 80029e4:	f001 f926 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80029e8:	2200      	movs	r2, #0
 80029ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029ee:	4849      	ldr	r0, [pc, #292]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 80029f0:	f001 f920 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80029f4:	2200      	movs	r2, #0
 80029f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029fa:	4846      	ldr	r0, [pc, #280]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 80029fc:	f001 f91a 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8002a00:	2201      	movs	r2, #1
 8002a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a06:	4843      	ldr	r0, [pc, #268]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 8002a08:	f001 f914 	bl	8003c34 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a12:	4840      	ldr	r0, [pc, #256]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2250>)
 8002a14:	f001 f90e 	bl	8003c34 <HAL_GPIO_WritePin>
								}
		 						}
		 					 if (guess_b == 10) {
 8002a18:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 8002a1c:	2b0a      	cmp	r3, #10
 8002a1e:	d120      	bne.n	8002a62 <HAL_GPIO_EXTI_Callback+0x219e>
		 						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8002a20:	2201      	movs	r2, #1
 8002a22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a26:	483c      	ldr	r0, [pc, #240]	; (8002b18 <HAL_GPIO_EXTI_Callback+0x2254>)
 8002a28:	f001 f904 	bl	8003c34 <HAL_GPIO_WritePin>
		 						 for(uint32_t i = 0; i < 3000000; i++);
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002a30:	e002      	b.n	8002a38 <HAL_GPIO_EXTI_Callback+0x2174>
 8002a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a34:	3301      	adds	r3, #1
 8002a36:	647b      	str	r3, [r7, #68]	; 0x44
 8002a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a3a:	4a38      	ldr	r2, [pc, #224]	; (8002b1c <HAL_GPIO_EXTI_Callback+0x2258>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d9f8      	bls.n	8002a32 <HAL_GPIO_EXTI_Callback+0x216e>
		 						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8002a40:	2200      	movs	r2, #0
 8002a42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a46:	4834      	ldr	r0, [pc, #208]	; (8002b18 <HAL_GPIO_EXTI_Callback+0x2254>)
 8002a48:	f001 f8f4 	bl	8003c34 <HAL_GPIO_WritePin>
		 						 for(uint32_t i = 0; i < 3000000; i++);
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	643b      	str	r3, [r7, #64]	; 0x40
 8002a50:	e002      	b.n	8002a58 <HAL_GPIO_EXTI_Callback+0x2194>
 8002a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a54:	3301      	adds	r3, #1
 8002a56:	643b      	str	r3, [r7, #64]	; 0x40
 8002a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a5a:	4a30      	ldr	r2, [pc, #192]	; (8002b1c <HAL_GPIO_EXTI_Callback+0x2258>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d9f8      	bls.n	8002a52 <HAL_GPIO_EXTI_Callback+0x218e>
 8002a60:	e067      	b.n	8002b32 <HAL_GPIO_EXTI_Callback+0x226e>
		 					 }
		 					 else if (guess_b < random_num[3]) {
 8002a62:	f897 20f4 	ldrb.w	r2, [r7, #244]	; 0xf4
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	da2a      	bge.n	8002ac2 <HAL_GPIO_EXTI_Callback+0x21fe>
		 						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	2110      	movs	r1, #16
 8002a70:	482b      	ldr	r0, [pc, #172]	; (8002b20 <HAL_GPIO_EXTI_Callback+0x225c>)
 8002a72:	f001 f8df 	bl	8003c34 <HAL_GPIO_WritePin>
		 						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002a76:	2200      	movs	r2, #0
 8002a78:	2120      	movs	r1, #32
 8002a7a:	4829      	ldr	r0, [pc, #164]	; (8002b20 <HAL_GPIO_EXTI_Callback+0x225c>)
 8002a7c:	f001 f8da 	bl	8003c34 <HAL_GPIO_WritePin>
		 						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8002a80:	2201      	movs	r2, #1
 8002a82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a86:	4824      	ldr	r0, [pc, #144]	; (8002b18 <HAL_GPIO_EXTI_Callback+0x2254>)
 8002a88:	f001 f8d4 	bl	8003c34 <HAL_GPIO_WritePin>
		 						 for(uint32_t i = 0; i < 3000000; i++);
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a90:	e002      	b.n	8002a98 <HAL_GPIO_EXTI_Callback+0x21d4>
 8002a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a94:	3301      	adds	r3, #1
 8002a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a9a:	4a20      	ldr	r2, [pc, #128]	; (8002b1c <HAL_GPIO_EXTI_Callback+0x2258>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d9f8      	bls.n	8002a92 <HAL_GPIO_EXTI_Callback+0x21ce>
		 						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002aa6:	481c      	ldr	r0, [pc, #112]	; (8002b18 <HAL_GPIO_EXTI_Callback+0x2254>)
 8002aa8:	f001 f8c4 	bl	8003c34 <HAL_GPIO_WritePin>
		 						 for(uint32_t i = 0; i < 3000000; i++);
 8002aac:	2300      	movs	r3, #0
 8002aae:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ab0:	e002      	b.n	8002ab8 <HAL_GPIO_EXTI_Callback+0x21f4>
 8002ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aba:	4a18      	ldr	r2, [pc, #96]	; (8002b1c <HAL_GPIO_EXTI_Callback+0x2258>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d9f8      	bls.n	8002ab2 <HAL_GPIO_EXTI_Callback+0x21ee>
 8002ac0:	e037      	b.n	8002b32 <HAL_GPIO_EXTI_Callback+0x226e>
		 					 }
		 					 else if (guess_b > random_num[3]) {
 8002ac2:	f897 20f4 	ldrb.w	r2, [r7, #244]	; 0xf4
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	dd32      	ble.n	8002b32 <HAL_GPIO_EXTI_Callback+0x226e>
		 						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002acc:	2200      	movs	r2, #0
 8002ace:	2110      	movs	r1, #16
 8002ad0:	4813      	ldr	r0, [pc, #76]	; (8002b20 <HAL_GPIO_EXTI_Callback+0x225c>)
 8002ad2:	f001 f8af 	bl	8003c34 <HAL_GPIO_WritePin>
		 						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	2120      	movs	r1, #32
 8002ada:	4811      	ldr	r0, [pc, #68]	; (8002b20 <HAL_GPIO_EXTI_Callback+0x225c>)
 8002adc:	f001 f8aa 	bl	8003c34 <HAL_GPIO_WritePin>
		 						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ae6:	480c      	ldr	r0, [pc, #48]	; (8002b18 <HAL_GPIO_EXTI_Callback+0x2254>)
 8002ae8:	f001 f8a4 	bl	8003c34 <HAL_GPIO_WritePin>
		 						 for(uint32_t i = 0; i < 3000000; i++);
 8002aec:	2300      	movs	r3, #0
 8002aee:	637b      	str	r3, [r7, #52]	; 0x34
 8002af0:	e002      	b.n	8002af8 <HAL_GPIO_EXTI_Callback+0x2234>
 8002af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af4:	3301      	adds	r3, #1
 8002af6:	637b      	str	r3, [r7, #52]	; 0x34
 8002af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002afa:	4a08      	ldr	r2, [pc, #32]	; (8002b1c <HAL_GPIO_EXTI_Callback+0x2258>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d9f8      	bls.n	8002af2 <HAL_GPIO_EXTI_Callback+0x222e>
		 						 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8002b00:	2200      	movs	r2, #0
 8002b02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b06:	4804      	ldr	r0, [pc, #16]	; (8002b18 <HAL_GPIO_EXTI_Callback+0x2254>)
 8002b08:	f001 f894 	bl	8003c34 <HAL_GPIO_WritePin>
		 						 for(uint32_t i = 0; i < 3000000; i++);
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b10:	e00b      	b.n	8002b2a <HAL_GPIO_EXTI_Callback+0x2266>
 8002b12:	bf00      	nop
 8002b14:	40021000 	.word	0x40021000
 8002b18:	40020c00 	.word	0x40020c00
 8002b1c:	002dc6bf 	.word	0x002dc6bf
 8002b20:	40020400 	.word	0x40020400
 8002b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b26:	3301      	adds	r3, #1
 8002b28:	633b      	str	r3, [r7, #48]	; 0x30
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2c:	4a2e      	ldr	r2, [pc, #184]	; (8002be8 <HAL_GPIO_EXTI_Callback+0x2324>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d9f8      	bls.n	8002b24 <HAL_GPIO_EXTI_Callback+0x2260>
		 				 while(guess_b != random_num[3]) {
 8002b32:	f897 20f4 	ldrb.w	r2, [r7, #244]	; 0xf4
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	f47f ad33 	bne.w	80025a4 <HAL_GPIO_EXTI_Callback+0x1ce0>
		 					 }
		 			  }
		 				 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b44:	4829      	ldr	r0, [pc, #164]	; (8002bec <HAL_GPIO_EXTI_Callback+0x2328>)
 8002b46:	f001 f875 	bl	8003c34 <HAL_GPIO_WritePin>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	2110      	movs	r1, #16
 8002b4e:	4828      	ldr	r0, [pc, #160]	; (8002bf0 <HAL_GPIO_EXTI_Callback+0x232c>)
 8002b50:	f001 f870 	bl	8003c34 <HAL_GPIO_WritePin>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002b54:	2201      	movs	r2, #1
 8002b56:	2120      	movs	r1, #32
 8002b58:	4825      	ldr	r0, [pc, #148]	; (8002bf0 <HAL_GPIO_EXTI_Callback+0x232c>)
 8002b5a:	f001 f86b 	bl	8003c34 <HAL_GPIO_WritePin>
						 for(uint32_t i = 0; i < 3000000; i++);
 8002b5e:	2300      	movs	r3, #0
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b62:	e002      	b.n	8002b6a <HAL_GPIO_EXTI_Callback+0x22a6>
 8002b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b66:	3301      	adds	r3, #1
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6c:	4a1e      	ldr	r2, [pc, #120]	; (8002be8 <HAL_GPIO_EXTI_Callback+0x2324>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d9f8      	bls.n	8002b64 <HAL_GPIO_EXTI_Callback+0x22a0>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002b72:	2200      	movs	r2, #0
 8002b74:	2110      	movs	r1, #16
 8002b76:	481e      	ldr	r0, [pc, #120]	; (8002bf0 <HAL_GPIO_EXTI_Callback+0x232c>)
 8002b78:	f001 f85c 	bl	8003c34 <HAL_GPIO_WritePin>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2120      	movs	r1, #32
 8002b80:	481b      	ldr	r0, [pc, #108]	; (8002bf0 <HAL_GPIO_EXTI_Callback+0x232c>)
 8002b82:	f001 f857 	bl	8003c34 <HAL_GPIO_WritePin>
						 for(uint32_t i = 0; i < 3000000; i++);
 8002b86:	2300      	movs	r3, #0
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b8a:	e002      	b.n	8002b92 <HAL_GPIO_EXTI_Callback+0x22ce>
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	3301      	adds	r3, #1
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b94:	4a14      	ldr	r2, [pc, #80]	; (8002be8 <HAL_GPIO_EXTI_Callback+0x2324>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d9f8      	bls.n	8002b8c <HAL_GPIO_EXTI_Callback+0x22c8>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	2110      	movs	r1, #16
 8002b9e:	4814      	ldr	r0, [pc, #80]	; (8002bf0 <HAL_GPIO_EXTI_Callback+0x232c>)
 8002ba0:	f001 f848 	bl	8003c34 <HAL_GPIO_WritePin>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	4811      	ldr	r0, [pc, #68]	; (8002bf0 <HAL_GPIO_EXTI_Callback+0x232c>)
 8002baa:	f001 f843 	bl	8003c34 <HAL_GPIO_WritePin>
						 for(uint32_t i = 0; i < 3000000; i++);
 8002bae:	2300      	movs	r3, #0
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb2:	e002      	b.n	8002bba <HAL_GPIO_EXTI_Callback+0x22f6>
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	4a0a      	ldr	r2, [pc, #40]	; (8002be8 <HAL_GPIO_EXTI_Callback+0x2324>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d9f8      	bls.n	8002bb4 <HAL_GPIO_EXTI_Callback+0x22f0>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2110      	movs	r1, #16
 8002bc6:	480a      	ldr	r0, [pc, #40]	; (8002bf0 <HAL_GPIO_EXTI_Callback+0x232c>)
 8002bc8:	f001 f834 	bl	8003c34 <HAL_GPIO_WritePin>
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2120      	movs	r1, #32
 8002bd0:	4807      	ldr	r0, [pc, #28]	; (8002bf0 <HAL_GPIO_EXTI_Callback+0x232c>)
 8002bd2:	f001 f82f 	bl	8003c34 <HAL_GPIO_WritePin>
		 				 guess_b = random_num[3];
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
		 		  }
		   }
 8002bdc:	bf00      	nop
 8002bde:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	002dc6bf 	.word	0x002dc6bf
 8002bec:	40020c00 	.word	0x40020c00
 8002bf0:	40020400 	.word	0x40020400

08002bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b094      	sub	sp, #80	; 0x50
 8002bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bfa:	f107 0320 	add.w	r3, r7, #32
 8002bfe:	2230      	movs	r2, #48	; 0x30
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f006 fbcc 	bl	80093a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c08:	f107 030c 	add.w	r3, r7, #12
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	4b28      	ldr	r3, [pc, #160]	; (8002cc0 <SystemClock_Config+0xcc>)
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	4a27      	ldr	r2, [pc, #156]	; (8002cc0 <SystemClock_Config+0xcc>)
 8002c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c26:	6413      	str	r3, [r2, #64]	; 0x40
 8002c28:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <SystemClock_Config+0xcc>)
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c34:	2300      	movs	r3, #0
 8002c36:	607b      	str	r3, [r7, #4]
 8002c38:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <SystemClock_Config+0xd0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a21      	ldr	r2, [pc, #132]	; (8002cc4 <SystemClock_Config+0xd0>)
 8002c3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	4b1f      	ldr	r3, [pc, #124]	; (8002cc4 <SystemClock_Config+0xd0>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c50:	2301      	movs	r3, #1
 8002c52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002c64:	2308      	movs	r3, #8
 8002c66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002c68:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002c6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c72:	2307      	movs	r3, #7
 8002c74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c76:	f107 0320 	add.w	r3, r7, #32
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f003 f9de 	bl	800603c <HAL_RCC_OscConfig>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002c86:	f000 fa13 	bl	80030b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c8a:	230f      	movs	r3, #15
 8002c8c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ca0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ca2:	f107 030c 	add.w	r3, r7, #12
 8002ca6:	2105      	movs	r1, #5
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f003 fc3f 	bl	800652c <HAL_RCC_ClockConfig>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002cb4:	f000 f9fc 	bl	80030b0 <Error_Handler>
  }
}
 8002cb8:	bf00      	nop
 8002cba:	3750      	adds	r7, #80	; 0x50
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40007000 	.word	0x40007000

08002cc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ccc:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <MX_I2C1_Init+0x50>)
 8002cce:	4a13      	ldr	r2, [pc, #76]	; (8002d1c <MX_I2C1_Init+0x54>)
 8002cd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002cd2:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <MX_I2C1_Init+0x50>)
 8002cd4:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <MX_I2C1_Init+0x58>)
 8002cd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <MX_I2C1_Init+0x50>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002cde:	4b0e      	ldr	r3, [pc, #56]	; (8002d18 <MX_I2C1_Init+0x50>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <MX_I2C1_Init+0x50>)
 8002ce6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cec:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <MX_I2C1_Init+0x50>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002cf2:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <MX_I2C1_Init+0x50>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cf8:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <MX_I2C1_Init+0x50>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <MX_I2C1_Init+0x50>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d04:	4804      	ldr	r0, [pc, #16]	; (8002d18 <MX_I2C1_Init+0x50>)
 8002d06:	f002 fbb5 	bl	8005474 <HAL_I2C_Init>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d10:	f000 f9ce 	bl	80030b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	200000ac 	.word	0x200000ac
 8002d1c:	40005400 	.word	0x40005400
 8002d20:	000186a0 	.word	0x000186a0

08002d24 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002d28:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <MX_I2S3_Init+0x54>)
 8002d2a:	4a14      	ldr	r2, [pc, #80]	; (8002d7c <MX_I2S3_Init+0x58>)
 8002d2c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002d2e:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <MX_I2S3_Init+0x54>)
 8002d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d34:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <MX_I2S3_Init+0x54>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <MX_I2S3_Init+0x54>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002d42:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <MX_I2S3_Init+0x54>)
 8002d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d48:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <MX_I2S3_Init+0x54>)
 8002d4c:	4a0c      	ldr	r2, [pc, #48]	; (8002d80 <MX_I2S3_Init+0x5c>)
 8002d4e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <MX_I2S3_Init+0x54>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <MX_I2S3_Init+0x54>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <MX_I2S3_Init+0x54>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002d62:	4805      	ldr	r0, [pc, #20]	; (8002d78 <MX_I2S3_Init+0x54>)
 8002d64:	f002 fcca 	bl	80056fc <HAL_I2S_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8002d6e:	f000 f99f 	bl	80030b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000100 	.word	0x20000100
 8002d7c:	40003c00 	.word	0x40003c00
 8002d80:	00017700 	.word	0x00017700

08002d84 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <MX_RNG_Init+0x20>)
 8002d8a:	4a07      	ldr	r2, [pc, #28]	; (8002da8 <MX_RNG_Init+0x24>)
 8002d8c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002d8e:	4805      	ldr	r0, [pc, #20]	; (8002da4 <MX_RNG_Init+0x20>)
 8002d90:	f003 ff18 	bl	8006bc4 <HAL_RNG_Init>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002d9a:	f000 f989 	bl	80030b0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000148 	.word	0x20000148
 8002da8:	50060800 	.word	0x50060800

08002dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08c      	sub	sp, #48	; 0x30
 8002db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db2:	f107 031c 	add.w	r3, r7, #28
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	605a      	str	r2, [r3, #4]
 8002dbc:	609a      	str	r2, [r3, #8]
 8002dbe:	60da      	str	r2, [r3, #12]
 8002dc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	4bb4      	ldr	r3, [pc, #720]	; (8003098 <MX_GPIO_Init+0x2ec>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	4ab3      	ldr	r2, [pc, #716]	; (8003098 <MX_GPIO_Init+0x2ec>)
 8002dcc:	f043 0310 	orr.w	r3, r3, #16
 8002dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd2:	4bb1      	ldr	r3, [pc, #708]	; (8003098 <MX_GPIO_Init+0x2ec>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	61bb      	str	r3, [r7, #24]
 8002ddc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	4bad      	ldr	r3, [pc, #692]	; (8003098 <MX_GPIO_Init+0x2ec>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	4aac      	ldr	r2, [pc, #688]	; (8003098 <MX_GPIO_Init+0x2ec>)
 8002de8:	f043 0304 	orr.w	r3, r3, #4
 8002dec:	6313      	str	r3, [r2, #48]	; 0x30
 8002dee:	4baa      	ldr	r3, [pc, #680]	; (8003098 <MX_GPIO_Init+0x2ec>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	4ba6      	ldr	r3, [pc, #664]	; (8003098 <MX_GPIO_Init+0x2ec>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	4aa5      	ldr	r2, [pc, #660]	; (8003098 <MX_GPIO_Init+0x2ec>)
 8002e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e08:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0a:	4ba3      	ldr	r3, [pc, #652]	; (8003098 <MX_GPIO_Init+0x2ec>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	4b9f      	ldr	r3, [pc, #636]	; (8003098 <MX_GPIO_Init+0x2ec>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	4a9e      	ldr	r2, [pc, #632]	; (8003098 <MX_GPIO_Init+0x2ec>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	6313      	str	r3, [r2, #48]	; 0x30
 8002e26:	4b9c      	ldr	r3, [pc, #624]	; (8003098 <MX_GPIO_Init+0x2ec>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	4b98      	ldr	r3, [pc, #608]	; (8003098 <MX_GPIO_Init+0x2ec>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	4a97      	ldr	r2, [pc, #604]	; (8003098 <MX_GPIO_Init+0x2ec>)
 8002e3c:	f043 0302 	orr.w	r3, r3, #2
 8002e40:	6313      	str	r3, [r2, #48]	; 0x30
 8002e42:	4b95      	ldr	r3, [pc, #596]	; (8003098 <MX_GPIO_Init+0x2ec>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	607b      	str	r3, [r7, #4]
 8002e52:	4b91      	ldr	r3, [pc, #580]	; (8003098 <MX_GPIO_Init+0x2ec>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	4a90      	ldr	r2, [pc, #576]	; (8003098 <MX_GPIO_Init+0x2ec>)
 8002e58:	f043 0308 	orr.w	r3, r3, #8
 8002e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5e:	4b8e      	ldr	r3, [pc, #568]	; (8003098 <MX_GPIO_Init+0x2ec>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	607b      	str	r3, [r7, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f647 71f8 	movw	r1, #32760	; 0x7ff8
 8002e70:	488a      	ldr	r0, [pc, #552]	; (800309c <MX_GPIO_Init+0x2f0>)
 8002e72:	f000 fedf 	bl	8003c34 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002e76:	2201      	movs	r2, #1
 8002e78:	2101      	movs	r1, #1
 8002e7a:	4889      	ldr	r0, [pc, #548]	; (80030a0 <MX_GPIO_Init+0x2f4>)
 8002e7c:	f000 feda 	bl	8003c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8002e80:	2200      	movs	r2, #0
 8002e82:	21a0      	movs	r1, #160	; 0xa0
 8002e84:	4887      	ldr	r0, [pc, #540]	; (80030a4 <MX_GPIO_Init+0x2f8>)
 8002e86:	f000 fed5 	bl	8003c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2120      	movs	r1, #32
 8002e8e:	4884      	ldr	r0, [pc, #528]	; (80030a0 <MX_GPIO_Init+0x2f4>)
 8002e90:	f000 fed0 	bl	8003c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002e94:	2200      	movs	r2, #0
 8002e96:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002e9a:	4883      	ldr	r0, [pc, #524]	; (80030a8 <MX_GPIO_Init+0x2fc>)
 8002e9c:	f000 feca 	bl	8003c34 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2130      	movs	r1, #48	; 0x30
 8002ea4:	4881      	ldr	r0, [pc, #516]	; (80030ac <MX_GPIO_Init+0x300>)
 8002ea6:	f000 fec5 	bl	8003c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002eaa:	2378      	movs	r3, #120	; 0x78
 8002eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002eba:	f107 031c 	add.w	r3, r7, #28
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4876      	ldr	r0, [pc, #472]	; (800309c <MX_GPIO_Init+0x2f0>)
 8002ec2:	f000 fd03 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC5 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_5;
 8002ec6:	2321      	movs	r3, #33	; 0x21
 8002ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed6:	f107 031c 	add.w	r3, r7, #28
 8002eda:	4619      	mov	r1, r3
 8002edc:	4870      	ldr	r0, [pc, #448]	; (80030a0 <MX_GPIO_Init+0x2f4>)
 8002ede:	f000 fcf5 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002ee2:	230a      	movs	r3, #10
 8002ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eee:	f107 031c 	add.w	r3, r7, #28
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	486a      	ldr	r0, [pc, #424]	; (80030a0 <MX_GPIO_Init+0x2f4>)
 8002ef6:	f000 fce9 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002efa:	2301      	movs	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002efe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f08:	f107 031c 	add.w	r3, r7, #28
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4865      	ldr	r0, [pc, #404]	; (80030a4 <MX_GPIO_Init+0x2f8>)
 8002f10:	f000 fcdc 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002f14:	230a      	movs	r3, #10
 8002f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f20:	f107 031c 	add.w	r3, r7, #28
 8002f24:	4619      	mov	r1, r3
 8002f26:	485f      	ldr	r0, [pc, #380]	; (80030a4 <MX_GPIO_Init+0x2f8>)
 8002f28:	f000 fcd0 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002f2c:	23a0      	movs	r3, #160	; 0xa0
 8002f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f30:	2301      	movs	r3, #1
 8002f32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3c:	f107 031c 	add.w	r3, r7, #28
 8002f40:	4619      	mov	r1, r3
 8002f42:	4858      	ldr	r0, [pc, #352]	; (80030a4 <MX_GPIO_Init+0x2f8>)
 8002f44:	f000 fcc2 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8002f48:	2340      	movs	r3, #64	; 0x40
 8002f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f54:	2300      	movs	r3, #0
 8002f56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f58:	2305      	movs	r3, #5
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8002f5c:	f107 031c 	add.w	r3, r7, #28
 8002f60:	4619      	mov	r1, r3
 8002f62:	4850      	ldr	r0, [pc, #320]	; (80030a4 <MX_GPIO_Init+0x2f8>)
 8002f64:	f000 fcb2 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002f68:	2304      	movs	r3, #4
 8002f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002f74:	f107 031c 	add.w	r3, r7, #28
 8002f78:	4619      	mov	r1, r3
 8002f7a:	484c      	ldr	r0, [pc, #304]	; (80030ac <MX_GPIO_Init+0x300>)
 8002f7c:	f000 fca6 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f84:	2301      	movs	r3, #1
 8002f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f90:	f107 031c 	add.w	r3, r7, #28
 8002f94:	4619      	mov	r1, r3
 8002f96:	4841      	ldr	r0, [pc, #260]	; (800309c <MX_GPIO_Init+0x2f0>)
 8002f98:	f000 fc98 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 PE10 PE11
                           PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002f9c:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8002fa0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002faa:	2300      	movs	r3, #0
 8002fac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fae:	f107 031c 	add.w	r3, r7, #28
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4839      	ldr	r0, [pc, #228]	; (800309c <MX_GPIO_Init+0x2f0>)
 8002fb6:	f000 fc89 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002fba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fcc:	f107 031c 	add.w	r3, r7, #28
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4832      	ldr	r0, [pc, #200]	; (800309c <MX_GPIO_Init+0x2f0>)
 8002fd4:	f000 fc7a 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fea:	2305      	movs	r3, #5
 8002fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002fee:	f107 031c 	add.w	r3, r7, #28
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	482d      	ldr	r0, [pc, #180]	; (80030ac <MX_GPIO_Init+0x300>)
 8002ff6:	f000 fc69 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002ffa:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002ffe:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003000:	2301      	movs	r3, #1
 8003002:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003008:	2300      	movs	r3, #0
 800300a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800300c:	f107 031c 	add.w	r3, r7, #28
 8003010:	4619      	mov	r1, r3
 8003012:	4825      	ldr	r0, [pc, #148]	; (80030a8 <MX_GPIO_Init+0x2fc>)
 8003014:	f000 fc5a 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003018:	230f      	movs	r3, #15
 800301a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800301c:	2300      	movs	r3, #0
 800301e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003020:	2301      	movs	r3, #1
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003024:	f107 031c 	add.w	r3, r7, #28
 8003028:	4619      	mov	r1, r3
 800302a:	481f      	ldr	r0, [pc, #124]	; (80030a8 <MX_GPIO_Init+0x2fc>)
 800302c:	f000 fc4e 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003030:	2320      	movs	r3, #32
 8003032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003034:	2300      	movs	r3, #0
 8003036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	2300      	movs	r3, #0
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800303c:	f107 031c 	add.w	r3, r7, #28
 8003040:	4619      	mov	r1, r3
 8003042:	4819      	ldr	r0, [pc, #100]	; (80030a8 <MX_GPIO_Init+0x2fc>)
 8003044:	f000 fc42 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003048:	2330      	movs	r3, #48	; 0x30
 800304a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800304c:	2301      	movs	r3, #1
 800304e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003054:	2300      	movs	r3, #0
 8003056:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003058:	f107 031c 	add.w	r3, r7, #28
 800305c:	4619      	mov	r1, r3
 800305e:	4813      	ldr	r0, [pc, #76]	; (80030ac <MX_GPIO_Init+0x300>)
 8003060:	f000 fc34 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003064:	2302      	movs	r3, #2
 8003066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003068:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800306c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306e:	2300      	movs	r3, #0
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003072:	f107 031c 	add.w	r3, r7, #28
 8003076:	4619      	mov	r1, r3
 8003078:	4808      	ldr	r0, [pc, #32]	; (800309c <MX_GPIO_Init+0x2f0>)
 800307a:	f000 fc27 	bl	80038cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	2100      	movs	r1, #0
 8003082:	2006      	movs	r0, #6
 8003084:	f000 fbeb 	bl	800385e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003088:	2006      	movs	r0, #6
 800308a:	f000 fc04 	bl	8003896 <HAL_NVIC_EnableIRQ>

}
 800308e:	bf00      	nop
 8003090:	3730      	adds	r7, #48	; 0x30
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800
 800309c:	40021000 	.word	0x40021000
 80030a0:	40020800 	.word	0x40020800
 80030a4:	40020000 	.word	0x40020000
 80030a8:	40020c00 	.word	0x40020c00
 80030ac:	40020400 	.word	0x40020400

080030b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030b4:	b672      	cpsid	i
}
 80030b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030b8:	e7fe      	b.n	80030b8 <Error_Handler+0x8>
	...

080030bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	607b      	str	r3, [r7, #4]
 80030c6:	4b10      	ldr	r3, [pc, #64]	; (8003108 <HAL_MspInit+0x4c>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	4a0f      	ldr	r2, [pc, #60]	; (8003108 <HAL_MspInit+0x4c>)
 80030cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030d0:	6453      	str	r3, [r2, #68]	; 0x44
 80030d2:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <HAL_MspInit+0x4c>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030da:	607b      	str	r3, [r7, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	603b      	str	r3, [r7, #0]
 80030e2:	4b09      	ldr	r3, [pc, #36]	; (8003108 <HAL_MspInit+0x4c>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	4a08      	ldr	r2, [pc, #32]	; (8003108 <HAL_MspInit+0x4c>)
 80030e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ec:	6413      	str	r3, [r2, #64]	; 0x40
 80030ee:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_MspInit+0x4c>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f6:	603b      	str	r3, [r7, #0]
 80030f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80030fa:	2007      	movs	r0, #7
 80030fc:	f000 fba4 	bl	8003848 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003100:	bf00      	nop
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40023800 	.word	0x40023800

0800310c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	; 0x28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003114:	f107 0314 	add.w	r3, r7, #20
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a19      	ldr	r2, [pc, #100]	; (8003190 <HAL_I2C_MspInit+0x84>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d12c      	bne.n	8003188 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	4b18      	ldr	r3, [pc, #96]	; (8003194 <HAL_I2C_MspInit+0x88>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	4a17      	ldr	r2, [pc, #92]	; (8003194 <HAL_I2C_MspInit+0x88>)
 8003138:	f043 0302 	orr.w	r3, r3, #2
 800313c:	6313      	str	r3, [r2, #48]	; 0x30
 800313e:	4b15      	ldr	r3, [pc, #84]	; (8003194 <HAL_I2C_MspInit+0x88>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800314a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800314e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003150:	2312      	movs	r3, #18
 8003152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003154:	2301      	movs	r3, #1
 8003156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003158:	2300      	movs	r3, #0
 800315a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800315c:	2304      	movs	r3, #4
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003160:	f107 0314 	add.w	r3, r7, #20
 8003164:	4619      	mov	r1, r3
 8003166:	480c      	ldr	r0, [pc, #48]	; (8003198 <HAL_I2C_MspInit+0x8c>)
 8003168:	f000 fbb0 	bl	80038cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	4b08      	ldr	r3, [pc, #32]	; (8003194 <HAL_I2C_MspInit+0x88>)
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	4a07      	ldr	r2, [pc, #28]	; (8003194 <HAL_I2C_MspInit+0x88>)
 8003176:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800317a:	6413      	str	r3, [r2, #64]	; 0x40
 800317c:	4b05      	ldr	r3, [pc, #20]	; (8003194 <HAL_I2C_MspInit+0x88>)
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003188:	bf00      	nop
 800318a:	3728      	adds	r7, #40	; 0x28
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40005400 	.word	0x40005400
 8003194:	40023800 	.word	0x40023800
 8003198:	40020400 	.word	0x40020400

0800319c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08e      	sub	sp, #56	; 0x38
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031b4:	f107 0314 	add.w	r3, r7, #20
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a31      	ldr	r2, [pc, #196]	; (800328c <HAL_I2S_MspInit+0xf0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d15a      	bne.n	8003282 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80031cc:	2301      	movs	r3, #1
 80031ce:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80031d0:	23c0      	movs	r3, #192	; 0xc0
 80031d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80031d4:	2302      	movs	r3, #2
 80031d6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031d8:	f107 0314 	add.w	r3, r7, #20
 80031dc:	4618      	mov	r0, r3
 80031de:	f003 fbb1 	bl	8006944 <HAL_RCCEx_PeriphCLKConfig>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80031e8:	f7ff ff62 	bl	80030b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80031ec:	2300      	movs	r3, #0
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	4b27      	ldr	r3, [pc, #156]	; (8003290 <HAL_I2S_MspInit+0xf4>)
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	4a26      	ldr	r2, [pc, #152]	; (8003290 <HAL_I2S_MspInit+0xf4>)
 80031f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031fa:	6413      	str	r3, [r2, #64]	; 0x40
 80031fc:	4b24      	ldr	r3, [pc, #144]	; (8003290 <HAL_I2S_MspInit+0xf4>)
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	4b20      	ldr	r3, [pc, #128]	; (8003290 <HAL_I2S_MspInit+0xf4>)
 800320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003210:	4a1f      	ldr	r2, [pc, #124]	; (8003290 <HAL_I2S_MspInit+0xf4>)
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	6313      	str	r3, [r2, #48]	; 0x30
 8003218:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <HAL_I2S_MspInit+0xf4>)
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003224:	2300      	movs	r3, #0
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	4b19      	ldr	r3, [pc, #100]	; (8003290 <HAL_I2S_MspInit+0xf4>)
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322c:	4a18      	ldr	r2, [pc, #96]	; (8003290 <HAL_I2S_MspInit+0xf4>)
 800322e:	f043 0304 	orr.w	r3, r3, #4
 8003232:	6313      	str	r3, [r2, #48]	; 0x30
 8003234:	4b16      	ldr	r3, [pc, #88]	; (8003290 <HAL_I2S_MspInit+0xf4>)
 8003236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003240:	2310      	movs	r3, #16
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003244:	2302      	movs	r3, #2
 8003246:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003248:	2300      	movs	r3, #0
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324c:	2300      	movs	r3, #0
 800324e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003250:	2306      	movs	r3, #6
 8003252:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003258:	4619      	mov	r1, r3
 800325a:	480e      	ldr	r0, [pc, #56]	; (8003294 <HAL_I2S_MspInit+0xf8>)
 800325c:	f000 fb36 	bl	80038cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003260:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003266:	2302      	movs	r3, #2
 8003268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326a:	2300      	movs	r3, #0
 800326c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326e:	2300      	movs	r3, #0
 8003270:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003272:	2306      	movs	r3, #6
 8003274:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800327a:	4619      	mov	r1, r3
 800327c:	4806      	ldr	r0, [pc, #24]	; (8003298 <HAL_I2S_MspInit+0xfc>)
 800327e:	f000 fb25 	bl	80038cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003282:	bf00      	nop
 8003284:	3738      	adds	r7, #56	; 0x38
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40003c00 	.word	0x40003c00
 8003290:	40023800 	.word	0x40023800
 8003294:	40020000 	.word	0x40020000
 8003298:	40020800 	.word	0x40020800

0800329c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a0e      	ldr	r2, [pc, #56]	; (80032e4 <HAL_RNG_MspInit+0x48>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d115      	bne.n	80032da <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <HAL_RNG_MspInit+0x4c>)
 80032b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b6:	4a0c      	ldr	r2, [pc, #48]	; (80032e8 <HAL_RNG_MspInit+0x4c>)
 80032b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032bc:	6353      	str	r3, [r2, #52]	; 0x34
 80032be:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <HAL_RNG_MspInit+0x4c>)
 80032c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 80032ca:	2200      	movs	r2, #0
 80032cc:	2100      	movs	r1, #0
 80032ce:	2050      	movs	r0, #80	; 0x50
 80032d0:	f000 fac5 	bl	800385e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 80032d4:	2050      	movs	r0, #80	; 0x50
 80032d6:	f000 fade 	bl	8003896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	50060800 	.word	0x50060800
 80032e8:	40023800 	.word	0x40023800

080032ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032f0:	e7fe      	b.n	80032f0 <NMI_Handler+0x4>

080032f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032f2:	b480      	push	{r7}
 80032f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032f6:	e7fe      	b.n	80032f6 <HardFault_Handler+0x4>

080032f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032fc:	e7fe      	b.n	80032fc <MemManage_Handler+0x4>

080032fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032fe:	b480      	push	{r7}
 8003300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003302:	e7fe      	b.n	8003302 <BusFault_Handler+0x4>

08003304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003308:	e7fe      	b.n	8003308 <UsageFault_Handler+0x4>

0800330a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800330a:	b480      	push	{r7}
 800330c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800331c:	bf00      	nop
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003326:	b480      	push	{r7}
 8003328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800332a:	bf00      	nop
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003338:	f000 f972 	bl	8003620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800333c:	bf00      	nop
 800333e:	bd80      	pop	{r7, pc}

08003340 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003344:	2001      	movs	r0, #1
 8003346:	f000 fc8f 	bl	8003c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003354:	4802      	ldr	r0, [pc, #8]	; (8003360 <OTG_FS_IRQHandler+0x10>)
 8003356:	f000 ff09 	bl	800416c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	2000053c 	.word	0x2000053c

08003364 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8003368:	4802      	ldr	r0, [pc, #8]	; (8003374 <HASH_RNG_IRQHandler+0x10>)
 800336a:	f003 fcab 	bl	8006cc4 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000148 	.word	0x20000148

08003378 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return 1;
 800337c:	2301      	movs	r3, #1
}
 800337e:	4618      	mov	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <_kill>:

int _kill(int pid, int sig)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003392:	f005 ffcb 	bl	800932c <__errno>
 8003396:	4603      	mov	r3, r0
 8003398:	2216      	movs	r2, #22
 800339a:	601a      	str	r2, [r3, #0]
  return -1;
 800339c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <_exit>:

void _exit (int status)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033b0:	f04f 31ff 	mov.w	r1, #4294967295
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ffe7 	bl	8003388 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033ba:	e7fe      	b.n	80033ba <_exit+0x12>

080033bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	e00a      	b.n	80033e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033ce:	f3af 8000 	nop.w
 80033d2:	4601      	mov	r1, r0
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	60ba      	str	r2, [r7, #8]
 80033da:	b2ca      	uxtb	r2, r1
 80033dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	3301      	adds	r3, #1
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	dbf0      	blt.n	80033ce <_read+0x12>
  }

  return len;
 80033ec:	687b      	ldr	r3, [r7, #4]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	e009      	b.n	800341c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	60ba      	str	r2, [r7, #8]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	3301      	adds	r3, #1
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	429a      	cmp	r2, r3
 8003422:	dbf1      	blt.n	8003408 <_write+0x12>
  }
  return len;
 8003424:	687b      	ldr	r3, [r7, #4]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <_close>:

int _close(int file)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003436:	f04f 33ff 	mov.w	r3, #4294967295
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003456:	605a      	str	r2, [r3, #4]
  return 0;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <_isatty>:

int _isatty(int file)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800346e:	2301      	movs	r3, #1
}
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034a0:	4a14      	ldr	r2, [pc, #80]	; (80034f4 <_sbrk+0x5c>)
 80034a2:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <_sbrk+0x60>)
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034ac:	4b13      	ldr	r3, [pc, #76]	; (80034fc <_sbrk+0x64>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034b4:	4b11      	ldr	r3, [pc, #68]	; (80034fc <_sbrk+0x64>)
 80034b6:	4a12      	ldr	r2, [pc, #72]	; (8003500 <_sbrk+0x68>)
 80034b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034ba:	4b10      	ldr	r3, [pc, #64]	; (80034fc <_sbrk+0x64>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4413      	add	r3, r2
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d207      	bcs.n	80034d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034c8:	f005 ff30 	bl	800932c <__errno>
 80034cc:	4603      	mov	r3, r0
 80034ce:	220c      	movs	r2, #12
 80034d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034d2:	f04f 33ff 	mov.w	r3, #4294967295
 80034d6:	e009      	b.n	80034ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034d8:	4b08      	ldr	r3, [pc, #32]	; (80034fc <_sbrk+0x64>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034de:	4b07      	ldr	r3, [pc, #28]	; (80034fc <_sbrk+0x64>)
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4413      	add	r3, r2
 80034e6:	4a05      	ldr	r2, [pc, #20]	; (80034fc <_sbrk+0x64>)
 80034e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034ea:	68fb      	ldr	r3, [r7, #12]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	20020000 	.word	0x20020000
 80034f8:	00000400 	.word	0x00000400
 80034fc:	20000158 	.word	0x20000158
 8003500:	20000850 	.word	0x20000850

08003504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003508:	4b06      	ldr	r3, [pc, #24]	; (8003524 <SystemInit+0x20>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	4a05      	ldr	r2, [pc, #20]	; (8003524 <SystemInit+0x20>)
 8003510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8003528:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003560 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800352c:	480d      	ldr	r0, [pc, #52]	; (8003564 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800352e:	490e      	ldr	r1, [pc, #56]	; (8003568 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003530:	4a0e      	ldr	r2, [pc, #56]	; (800356c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003534:	e002      	b.n	800353c <LoopCopyDataInit>

08003536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800353a:	3304      	adds	r3, #4

0800353c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800353c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800353e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003540:	d3f9      	bcc.n	8003536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003542:	4a0b      	ldr	r2, [pc, #44]	; (8003570 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003544:	4c0b      	ldr	r4, [pc, #44]	; (8003574 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003548:	e001      	b.n	800354e <LoopFillZerobss>

0800354a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800354a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800354c:	3204      	adds	r2, #4

0800354e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800354e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003550:	d3fb      	bcc.n	800354a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003552:	f7ff ffd7 	bl	8003504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003556:	f005 feef 	bl	8009338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800355a:	f7fd f895 	bl	8000688 <main>
  bx  lr    
 800355e:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8003560:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003568:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800356c:	0800a604 	.word	0x0800a604
  ldr r2, =_sbss
 8003570:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003574:	20000850 	.word	0x20000850

08003578 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003578:	e7fe      	b.n	8003578 <ADC_IRQHandler>
	...

0800357c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003580:	4b0e      	ldr	r3, [pc, #56]	; (80035bc <HAL_Init+0x40>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a0d      	ldr	r2, [pc, #52]	; (80035bc <HAL_Init+0x40>)
 8003586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800358a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800358c:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <HAL_Init+0x40>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <HAL_Init+0x40>)
 8003592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003596:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003598:	4b08      	ldr	r3, [pc, #32]	; (80035bc <HAL_Init+0x40>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a07      	ldr	r2, [pc, #28]	; (80035bc <HAL_Init+0x40>)
 800359e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035a4:	2003      	movs	r0, #3
 80035a6:	f000 f94f 	bl	8003848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035aa:	2000      	movs	r0, #0
 80035ac:	f000 f808 	bl	80035c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035b0:	f7ff fd84 	bl	80030bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40023c00 	.word	0x40023c00

080035c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035c8:	4b12      	ldr	r3, [pc, #72]	; (8003614 <HAL_InitTick+0x54>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4b12      	ldr	r3, [pc, #72]	; (8003618 <HAL_InitTick+0x58>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	4619      	mov	r1, r3
 80035d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80035da:	fbb2 f3f3 	udiv	r3, r2, r3
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 f967 	bl	80038b2 <HAL_SYSTICK_Config>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e00e      	b.n	800360c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b0f      	cmp	r3, #15
 80035f2:	d80a      	bhi.n	800360a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035f4:	2200      	movs	r2, #0
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	f04f 30ff 	mov.w	r0, #4294967295
 80035fc:	f000 f92f 	bl	800385e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003600:	4a06      	ldr	r2, [pc, #24]	; (800361c <HAL_InitTick+0x5c>)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	e000      	b.n	800360c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
}
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20000000 	.word	0x20000000
 8003618:	20000008 	.word	0x20000008
 800361c:	20000004 	.word	0x20000004

08003620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_IncTick+0x20>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	461a      	mov	r2, r3
 800362a:	4b06      	ldr	r3, [pc, #24]	; (8003644 <HAL_IncTick+0x24>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4413      	add	r3, r2
 8003630:	4a04      	ldr	r2, [pc, #16]	; (8003644 <HAL_IncTick+0x24>)
 8003632:	6013      	str	r3, [r2, #0]
}
 8003634:	bf00      	nop
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	20000008 	.word	0x20000008
 8003644:	2000015c 	.word	0x2000015c

08003648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  return uwTick;
 800364c:	4b03      	ldr	r3, [pc, #12]	; (800365c <HAL_GetTick+0x14>)
 800364e:	681b      	ldr	r3, [r3, #0]
}
 8003650:	4618      	mov	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	2000015c 	.word	0x2000015c

08003660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003668:	f7ff ffee 	bl	8003648 <HAL_GetTick>
 800366c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003678:	d005      	beq.n	8003686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800367a:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <HAL_Delay+0x44>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4413      	add	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003686:	bf00      	nop
 8003688:	f7ff ffde 	bl	8003648 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	429a      	cmp	r2, r3
 8003696:	d8f7      	bhi.n	8003688 <HAL_Delay+0x28>
  {
  }
}
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000008 	.word	0x20000008

080036a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <__NVIC_SetPriorityGrouping+0x44>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036c4:	4013      	ands	r3, r2
 80036c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036da:	4a04      	ldr	r2, [pc, #16]	; (80036ec <__NVIC_SetPriorityGrouping+0x44>)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	60d3      	str	r3, [r2, #12]
}
 80036e0:	bf00      	nop
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036f4:	4b04      	ldr	r3, [pc, #16]	; (8003708 <__NVIC_GetPriorityGrouping+0x18>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	0a1b      	lsrs	r3, r3, #8
 80036fa:	f003 0307 	and.w	r3, r3, #7
}
 80036fe:	4618      	mov	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	e000ed00 	.word	0xe000ed00

0800370c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371a:	2b00      	cmp	r3, #0
 800371c:	db0b      	blt.n	8003736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	f003 021f 	and.w	r2, r3, #31
 8003724:	4907      	ldr	r1, [pc, #28]	; (8003744 <__NVIC_EnableIRQ+0x38>)
 8003726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	2001      	movs	r0, #1
 800372e:	fa00 f202 	lsl.w	r2, r0, r2
 8003732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	e000e100 	.word	0xe000e100

08003748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	6039      	str	r1, [r7, #0]
 8003752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003758:	2b00      	cmp	r3, #0
 800375a:	db0a      	blt.n	8003772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	b2da      	uxtb	r2, r3
 8003760:	490c      	ldr	r1, [pc, #48]	; (8003794 <__NVIC_SetPriority+0x4c>)
 8003762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003766:	0112      	lsls	r2, r2, #4
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	440b      	add	r3, r1
 800376c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003770:	e00a      	b.n	8003788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	b2da      	uxtb	r2, r3
 8003776:	4908      	ldr	r1, [pc, #32]	; (8003798 <__NVIC_SetPriority+0x50>)
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	3b04      	subs	r3, #4
 8003780:	0112      	lsls	r2, r2, #4
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	440b      	add	r3, r1
 8003786:	761a      	strb	r2, [r3, #24]
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	e000e100 	.word	0xe000e100
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800379c:	b480      	push	{r7}
 800379e:	b089      	sub	sp, #36	; 0x24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f1c3 0307 	rsb	r3, r3, #7
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	bf28      	it	cs
 80037ba:	2304      	movcs	r3, #4
 80037bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	3304      	adds	r3, #4
 80037c2:	2b06      	cmp	r3, #6
 80037c4:	d902      	bls.n	80037cc <NVIC_EncodePriority+0x30>
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	3b03      	subs	r3, #3
 80037ca:	e000      	b.n	80037ce <NVIC_EncodePriority+0x32>
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d0:	f04f 32ff 	mov.w	r2, #4294967295
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43da      	mvns	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	401a      	ands	r2, r3
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037e4:	f04f 31ff 	mov.w	r1, #4294967295
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	fa01 f303 	lsl.w	r3, r1, r3
 80037ee:	43d9      	mvns	r1, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f4:	4313      	orrs	r3, r2
         );
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3724      	adds	r7, #36	; 0x24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
	...

08003804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3b01      	subs	r3, #1
 8003810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003814:	d301      	bcc.n	800381a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003816:	2301      	movs	r3, #1
 8003818:	e00f      	b.n	800383a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800381a:	4a0a      	ldr	r2, [pc, #40]	; (8003844 <SysTick_Config+0x40>)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3b01      	subs	r3, #1
 8003820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003822:	210f      	movs	r1, #15
 8003824:	f04f 30ff 	mov.w	r0, #4294967295
 8003828:	f7ff ff8e 	bl	8003748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800382c:	4b05      	ldr	r3, [pc, #20]	; (8003844 <SysTick_Config+0x40>)
 800382e:	2200      	movs	r2, #0
 8003830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003832:	4b04      	ldr	r3, [pc, #16]	; (8003844 <SysTick_Config+0x40>)
 8003834:	2207      	movs	r2, #7
 8003836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	e000e010 	.word	0xe000e010

08003848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff ff29 	bl	80036a8 <__NVIC_SetPriorityGrouping>
}
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800385e:	b580      	push	{r7, lr}
 8003860:	b086      	sub	sp, #24
 8003862:	af00      	add	r7, sp, #0
 8003864:	4603      	mov	r3, r0
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
 800386a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003870:	f7ff ff3e 	bl	80036f0 <__NVIC_GetPriorityGrouping>
 8003874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	68b9      	ldr	r1, [r7, #8]
 800387a:	6978      	ldr	r0, [r7, #20]
 800387c:	f7ff ff8e 	bl	800379c <NVIC_EncodePriority>
 8003880:	4602      	mov	r2, r0
 8003882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003886:	4611      	mov	r1, r2
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff ff5d 	bl	8003748 <__NVIC_SetPriority>
}
 800388e:	bf00      	nop
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b082      	sub	sp, #8
 800389a:	af00      	add	r7, sp, #0
 800389c:	4603      	mov	r3, r0
 800389e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff ff31 	bl	800370c <__NVIC_EnableIRQ>
}
 80038aa:	bf00      	nop
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff ffa2 	bl	8003804 <SysTick_Config>
 80038c0:	4603      	mov	r3, r0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b089      	sub	sp, #36	; 0x24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038da:	2300      	movs	r3, #0
 80038dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038de:	2300      	movs	r3, #0
 80038e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038e2:	2300      	movs	r3, #0
 80038e4:	61fb      	str	r3, [r7, #28]
 80038e6:	e16b      	b.n	8003bc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038e8:	2201      	movs	r2, #1
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4013      	ands	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	429a      	cmp	r2, r3
 8003902:	f040 815a 	bne.w	8003bba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	2b01      	cmp	r3, #1
 8003910:	d005      	beq.n	800391e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800391a:	2b02      	cmp	r3, #2
 800391c:	d130      	bne.n	8003980 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	2203      	movs	r2, #3
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	43db      	mvns	r3, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4013      	ands	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003954:	2201      	movs	r2, #1
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	091b      	lsrs	r3, r3, #4
 800396a:	f003 0201 	and.w	r2, r3, #1
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	2b03      	cmp	r3, #3
 800398a:	d017      	beq.n	80039bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	2203      	movs	r2, #3
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4013      	ands	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d123      	bne.n	8003a10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	08da      	lsrs	r2, r3, #3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3208      	adds	r2, #8
 80039d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	220f      	movs	r2, #15
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4013      	ands	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	08da      	lsrs	r2, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3208      	adds	r2, #8
 8003a0a:	69b9      	ldr	r1, [r7, #24]
 8003a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	43db      	mvns	r3, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 0203 	and.w	r2, r3, #3
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 80b4 	beq.w	8003bba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	4b60      	ldr	r3, [pc, #384]	; (8003bd8 <HAL_GPIO_Init+0x30c>)
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	4a5f      	ldr	r2, [pc, #380]	; (8003bd8 <HAL_GPIO_Init+0x30c>)
 8003a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a60:	6453      	str	r3, [r2, #68]	; 0x44
 8003a62:	4b5d      	ldr	r3, [pc, #372]	; (8003bd8 <HAL_GPIO_Init+0x30c>)
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a6e:	4a5b      	ldr	r2, [pc, #364]	; (8003bdc <HAL_GPIO_Init+0x310>)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	089b      	lsrs	r3, r3, #2
 8003a74:	3302      	adds	r3, #2
 8003a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	220f      	movs	r2, #15
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a52      	ldr	r2, [pc, #328]	; (8003be0 <HAL_GPIO_Init+0x314>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d02b      	beq.n	8003af2 <HAL_GPIO_Init+0x226>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a51      	ldr	r2, [pc, #324]	; (8003be4 <HAL_GPIO_Init+0x318>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d025      	beq.n	8003aee <HAL_GPIO_Init+0x222>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a50      	ldr	r2, [pc, #320]	; (8003be8 <HAL_GPIO_Init+0x31c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d01f      	beq.n	8003aea <HAL_GPIO_Init+0x21e>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a4f      	ldr	r2, [pc, #316]	; (8003bec <HAL_GPIO_Init+0x320>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d019      	beq.n	8003ae6 <HAL_GPIO_Init+0x21a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a4e      	ldr	r2, [pc, #312]	; (8003bf0 <HAL_GPIO_Init+0x324>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d013      	beq.n	8003ae2 <HAL_GPIO_Init+0x216>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a4d      	ldr	r2, [pc, #308]	; (8003bf4 <HAL_GPIO_Init+0x328>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00d      	beq.n	8003ade <HAL_GPIO_Init+0x212>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a4c      	ldr	r2, [pc, #304]	; (8003bf8 <HAL_GPIO_Init+0x32c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d007      	beq.n	8003ada <HAL_GPIO_Init+0x20e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a4b      	ldr	r2, [pc, #300]	; (8003bfc <HAL_GPIO_Init+0x330>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d101      	bne.n	8003ad6 <HAL_GPIO_Init+0x20a>
 8003ad2:	2307      	movs	r3, #7
 8003ad4:	e00e      	b.n	8003af4 <HAL_GPIO_Init+0x228>
 8003ad6:	2308      	movs	r3, #8
 8003ad8:	e00c      	b.n	8003af4 <HAL_GPIO_Init+0x228>
 8003ada:	2306      	movs	r3, #6
 8003adc:	e00a      	b.n	8003af4 <HAL_GPIO_Init+0x228>
 8003ade:	2305      	movs	r3, #5
 8003ae0:	e008      	b.n	8003af4 <HAL_GPIO_Init+0x228>
 8003ae2:	2304      	movs	r3, #4
 8003ae4:	e006      	b.n	8003af4 <HAL_GPIO_Init+0x228>
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e004      	b.n	8003af4 <HAL_GPIO_Init+0x228>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e002      	b.n	8003af4 <HAL_GPIO_Init+0x228>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <HAL_GPIO_Init+0x228>
 8003af2:	2300      	movs	r3, #0
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	f002 0203 	and.w	r2, r2, #3
 8003afa:	0092      	lsls	r2, r2, #2
 8003afc:	4093      	lsls	r3, r2
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b04:	4935      	ldr	r1, [pc, #212]	; (8003bdc <HAL_GPIO_Init+0x310>)
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	089b      	lsrs	r3, r3, #2
 8003b0a:	3302      	adds	r3, #2
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b12:	4b3b      	ldr	r3, [pc, #236]	; (8003c00 <HAL_GPIO_Init+0x334>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b36:	4a32      	ldr	r2, [pc, #200]	; (8003c00 <HAL_GPIO_Init+0x334>)
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b3c:	4b30      	ldr	r3, [pc, #192]	; (8003c00 <HAL_GPIO_Init+0x334>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	43db      	mvns	r3, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b60:	4a27      	ldr	r2, [pc, #156]	; (8003c00 <HAL_GPIO_Init+0x334>)
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b66:	4b26      	ldr	r3, [pc, #152]	; (8003c00 <HAL_GPIO_Init+0x334>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4013      	ands	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b8a:	4a1d      	ldr	r2, [pc, #116]	; (8003c00 <HAL_GPIO_Init+0x334>)
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b90:	4b1b      	ldr	r3, [pc, #108]	; (8003c00 <HAL_GPIO_Init+0x334>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bb4:	4a12      	ldr	r2, [pc, #72]	; (8003c00 <HAL_GPIO_Init+0x334>)
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	61fb      	str	r3, [r7, #28]
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	2b0f      	cmp	r3, #15
 8003bc4:	f67f ae90 	bls.w	80038e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bc8:	bf00      	nop
 8003bca:	bf00      	nop
 8003bcc:	3724      	adds	r7, #36	; 0x24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	40013800 	.word	0x40013800
 8003be0:	40020000 	.word	0x40020000
 8003be4:	40020400 	.word	0x40020400
 8003be8:	40020800 	.word	0x40020800
 8003bec:	40020c00 	.word	0x40020c00
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	40021400 	.word	0x40021400
 8003bf8:	40021800 	.word	0x40021800
 8003bfc:	40021c00 	.word	0x40021c00
 8003c00:	40013c00 	.word	0x40013c00

08003c04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	887b      	ldrh	r3, [r7, #2]
 8003c16:	4013      	ands	r3, r2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	73fb      	strb	r3, [r7, #15]
 8003c20:	e001      	b.n	8003c26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c22:	2300      	movs	r3, #0
 8003c24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	807b      	strh	r3, [r7, #2]
 8003c40:	4613      	mov	r3, r2
 8003c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c44:	787b      	ldrb	r3, [r7, #1]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c4a:	887a      	ldrh	r2, [r7, #2]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c50:	e003      	b.n	8003c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c52:	887b      	ldrh	r3, [r7, #2]
 8003c54:	041a      	lsls	r2, r3, #16
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	619a      	str	r2, [r3, #24]
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c72:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d006      	beq.n	8003c8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c7e:	4a05      	ldr	r2, [pc, #20]	; (8003c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c80:	88fb      	ldrh	r3, [r7, #6]
 8003c82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c84:	88fb      	ldrh	r3, [r7, #6]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fc fe1c 	bl	80008c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40013c00 	.word	0x40013c00

08003c98 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c9a:	b08f      	sub	sp, #60	; 0x3c
 8003c9c:	af0a      	add	r7, sp, #40	; 0x28
 8003c9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e054      	b.n	8003d54 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d106      	bne.n	8003cca <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f005 f8d5 	bl	8008e74 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2203      	movs	r2, #3
 8003cce:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d102      	bne.n	8003ce4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f003 f8c8 	bl	8006e7e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	603b      	str	r3, [r7, #0]
 8003cf4:	687e      	ldr	r6, [r7, #4]
 8003cf6:	466d      	mov	r5, sp
 8003cf8:	f106 0410 	add.w	r4, r6, #16
 8003cfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d08:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d0c:	1d33      	adds	r3, r6, #4
 8003d0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d10:	6838      	ldr	r0, [r7, #0]
 8003d12:	f003 f842 	bl	8006d9a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f003 f8bf 	bl	8006ea0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	687e      	ldr	r6, [r7, #4]
 8003d2a:	466d      	mov	r5, sp
 8003d2c:	f106 0410 	add.w	r4, r6, #16
 8003d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d40:	1d33      	adds	r3, r6, #4
 8003d42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d44:	6838      	ldr	r0, [r7, #0]
 8003d46:	f003 fa47 	bl	80071d8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d5c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003d5c:	b590      	push	{r4, r7, lr}
 8003d5e:	b089      	sub	sp, #36	; 0x24
 8003d60:	af04      	add	r7, sp, #16
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	4608      	mov	r0, r1
 8003d66:	4611      	mov	r1, r2
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	70fb      	strb	r3, [r7, #3]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	70bb      	strb	r3, [r7, #2]
 8003d72:	4613      	mov	r3, r2
 8003d74:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_HCD_HC_Init+0x28>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e076      	b.n	8003e72 <HAL_HCD_HC_Init+0x116>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003d8c:	78fb      	ldrb	r3, [r7, #3]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	212c      	movs	r1, #44	; 0x2c
 8003d92:	fb01 f303 	mul.w	r3, r1, r3
 8003d96:	4413      	add	r3, r2
 8003d98:	333d      	adds	r3, #61	; 0x3d
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	212c      	movs	r1, #44	; 0x2c
 8003da4:	fb01 f303 	mul.w	r3, r1, r3
 8003da8:	4413      	add	r3, r2
 8003daa:	3338      	adds	r3, #56	; 0x38
 8003dac:	787a      	ldrb	r2, [r7, #1]
 8003dae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	212c      	movs	r1, #44	; 0x2c
 8003db6:	fb01 f303 	mul.w	r3, r1, r3
 8003dba:	4413      	add	r3, r2
 8003dbc:	3340      	adds	r3, #64	; 0x40
 8003dbe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003dc0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003dc2:	78fb      	ldrb	r3, [r7, #3]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	212c      	movs	r1, #44	; 0x2c
 8003dc8:	fb01 f303 	mul.w	r3, r1, r3
 8003dcc:	4413      	add	r3, r2
 8003dce:	3339      	adds	r3, #57	; 0x39
 8003dd0:	78fa      	ldrb	r2, [r7, #3]
 8003dd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	212c      	movs	r1, #44	; 0x2c
 8003dda:	fb01 f303 	mul.w	r3, r1, r3
 8003dde:	4413      	add	r3, r2
 8003de0:	333f      	adds	r3, #63	; 0x3f
 8003de2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003de6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	78ba      	ldrb	r2, [r7, #2]
 8003dec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003df0:	b2d0      	uxtb	r0, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	212c      	movs	r1, #44	; 0x2c
 8003df6:	fb01 f303 	mul.w	r3, r1, r3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	333a      	adds	r3, #58	; 0x3a
 8003dfe:	4602      	mov	r2, r0
 8003e00:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003e02:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	da09      	bge.n	8003e1e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	212c      	movs	r1, #44	; 0x2c
 8003e10:	fb01 f303 	mul.w	r3, r1, r3
 8003e14:	4413      	add	r3, r2
 8003e16:	333b      	adds	r3, #59	; 0x3b
 8003e18:	2201      	movs	r2, #1
 8003e1a:	701a      	strb	r2, [r3, #0]
 8003e1c:	e008      	b.n	8003e30 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003e1e:	78fb      	ldrb	r3, [r7, #3]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	212c      	movs	r1, #44	; 0x2c
 8003e24:	fb01 f303 	mul.w	r3, r1, r3
 8003e28:	4413      	add	r3, r2
 8003e2a:	333b      	adds	r3, #59	; 0x3b
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	212c      	movs	r1, #44	; 0x2c
 8003e36:	fb01 f303 	mul.w	r3, r1, r3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	333c      	adds	r3, #60	; 0x3c
 8003e3e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003e42:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	787c      	ldrb	r4, [r7, #1]
 8003e4a:	78ba      	ldrb	r2, [r7, #2]
 8003e4c:	78f9      	ldrb	r1, [r7, #3]
 8003e4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e50:	9302      	str	r3, [sp, #8]
 8003e52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003e56:	9301      	str	r3, [sp, #4]
 8003e58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	4623      	mov	r3, r4
 8003e60:	f003 fb16 	bl	8007490 <USB_HC_Init>
 8003e64:	4603      	mov	r3, r0
 8003e66:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd90      	pop	{r4, r7, pc}

08003e7a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	460b      	mov	r3, r1
 8003e84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_HCD_HC_Halt+0x1e>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e00f      	b.n	8003eb8 <HAL_HCD_HC_Halt+0x3e>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	78fa      	ldrb	r2, [r7, #3]
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f003 fd66 	bl	800797a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	4608      	mov	r0, r1
 8003eca:	4611      	mov	r1, r2
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4603      	mov	r3, r0
 8003ed0:	70fb      	strb	r3, [r7, #3]
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	70bb      	strb	r3, [r7, #2]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	212c      	movs	r1, #44	; 0x2c
 8003ee0:	fb01 f303 	mul.w	r3, r1, r3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	333b      	adds	r3, #59	; 0x3b
 8003ee8:	78ba      	ldrb	r2, [r7, #2]
 8003eea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	212c      	movs	r1, #44	; 0x2c
 8003ef2:	fb01 f303 	mul.w	r3, r1, r3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	333f      	adds	r3, #63	; 0x3f
 8003efa:	787a      	ldrb	r2, [r7, #1]
 8003efc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003efe:	7c3b      	ldrb	r3, [r7, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d112      	bne.n	8003f2a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	212c      	movs	r1, #44	; 0x2c
 8003f0a:	fb01 f303 	mul.w	r3, r1, r3
 8003f0e:	4413      	add	r3, r2
 8003f10:	3342      	adds	r3, #66	; 0x42
 8003f12:	2203      	movs	r2, #3
 8003f14:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003f16:	78fb      	ldrb	r3, [r7, #3]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	212c      	movs	r1, #44	; 0x2c
 8003f1c:	fb01 f303 	mul.w	r3, r1, r3
 8003f20:	4413      	add	r3, r2
 8003f22:	333d      	adds	r3, #61	; 0x3d
 8003f24:	7f3a      	ldrb	r2, [r7, #28]
 8003f26:	701a      	strb	r2, [r3, #0]
 8003f28:	e008      	b.n	8003f3c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	212c      	movs	r1, #44	; 0x2c
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	4413      	add	r3, r2
 8003f36:	3342      	adds	r3, #66	; 0x42
 8003f38:	2202      	movs	r2, #2
 8003f3a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003f3c:	787b      	ldrb	r3, [r7, #1]
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	f200 80c6 	bhi.w	80040d0 <HAL_HCD_HC_SubmitRequest+0x210>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003f5d 	.word	0x08003f5d
 8003f50:	080040bd 	.word	0x080040bd
 8003f54:	08003fc1 	.word	0x08003fc1
 8003f58:	0800403f 	.word	0x0800403f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003f5c:	7c3b      	ldrb	r3, [r7, #16]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	f040 80b8 	bne.w	80040d4 <HAL_HCD_HC_SubmitRequest+0x214>
 8003f64:	78bb      	ldrb	r3, [r7, #2]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f040 80b4 	bne.w	80040d4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003f6c:	8b3b      	ldrh	r3, [r7, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d108      	bne.n	8003f84 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003f72:	78fb      	ldrb	r3, [r7, #3]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	212c      	movs	r1, #44	; 0x2c
 8003f78:	fb01 f303 	mul.w	r3, r1, r3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3355      	adds	r3, #85	; 0x55
 8003f80:	2201      	movs	r2, #1
 8003f82:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	212c      	movs	r1, #44	; 0x2c
 8003f8a:	fb01 f303 	mul.w	r3, r1, r3
 8003f8e:	4413      	add	r3, r2
 8003f90:	3355      	adds	r3, #85	; 0x55
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d109      	bne.n	8003fac <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	212c      	movs	r1, #44	; 0x2c
 8003f9e:	fb01 f303 	mul.w	r3, r1, r3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	3342      	adds	r3, #66	; 0x42
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003faa:	e093      	b.n	80040d4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	212c      	movs	r1, #44	; 0x2c
 8003fb2:	fb01 f303 	mul.w	r3, r1, r3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3342      	adds	r3, #66	; 0x42
 8003fba:	2202      	movs	r2, #2
 8003fbc:	701a      	strb	r2, [r3, #0]
      break;
 8003fbe:	e089      	b.n	80040d4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003fc0:	78bb      	ldrb	r3, [r7, #2]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d11d      	bne.n	8004002 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003fc6:	78fb      	ldrb	r3, [r7, #3]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	212c      	movs	r1, #44	; 0x2c
 8003fcc:	fb01 f303 	mul.w	r3, r1, r3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3355      	adds	r3, #85	; 0x55
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003fda:	78fb      	ldrb	r3, [r7, #3]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	212c      	movs	r1, #44	; 0x2c
 8003fe0:	fb01 f303 	mul.w	r3, r1, r3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3342      	adds	r3, #66	; 0x42
 8003fe8:	2200      	movs	r2, #0
 8003fea:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003fec:	e073      	b.n	80040d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003fee:	78fb      	ldrb	r3, [r7, #3]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	212c      	movs	r1, #44	; 0x2c
 8003ff4:	fb01 f303 	mul.w	r3, r1, r3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	3342      	adds	r3, #66	; 0x42
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	701a      	strb	r2, [r3, #0]
      break;
 8004000:	e069      	b.n	80040d6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004002:	78fb      	ldrb	r3, [r7, #3]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	212c      	movs	r1, #44	; 0x2c
 8004008:	fb01 f303 	mul.w	r3, r1, r3
 800400c:	4413      	add	r3, r2
 800400e:	3354      	adds	r3, #84	; 0x54
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d109      	bne.n	800402a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004016:	78fb      	ldrb	r3, [r7, #3]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	212c      	movs	r1, #44	; 0x2c
 800401c:	fb01 f303 	mul.w	r3, r1, r3
 8004020:	4413      	add	r3, r2
 8004022:	3342      	adds	r3, #66	; 0x42
 8004024:	2200      	movs	r2, #0
 8004026:	701a      	strb	r2, [r3, #0]
      break;
 8004028:	e055      	b.n	80040d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	212c      	movs	r1, #44	; 0x2c
 8004030:	fb01 f303 	mul.w	r3, r1, r3
 8004034:	4413      	add	r3, r2
 8004036:	3342      	adds	r3, #66	; 0x42
 8004038:	2202      	movs	r2, #2
 800403a:	701a      	strb	r2, [r3, #0]
      break;
 800403c:	e04b      	b.n	80040d6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800403e:	78bb      	ldrb	r3, [r7, #2]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d11d      	bne.n	8004080 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	212c      	movs	r1, #44	; 0x2c
 800404a:	fb01 f303 	mul.w	r3, r1, r3
 800404e:	4413      	add	r3, r2
 8004050:	3355      	adds	r3, #85	; 0x55
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d109      	bne.n	800406c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	212c      	movs	r1, #44	; 0x2c
 800405e:	fb01 f303 	mul.w	r3, r1, r3
 8004062:	4413      	add	r3, r2
 8004064:	3342      	adds	r3, #66	; 0x42
 8004066:	2200      	movs	r2, #0
 8004068:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800406a:	e034      	b.n	80040d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800406c:	78fb      	ldrb	r3, [r7, #3]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	212c      	movs	r1, #44	; 0x2c
 8004072:	fb01 f303 	mul.w	r3, r1, r3
 8004076:	4413      	add	r3, r2
 8004078:	3342      	adds	r3, #66	; 0x42
 800407a:	2202      	movs	r2, #2
 800407c:	701a      	strb	r2, [r3, #0]
      break;
 800407e:	e02a      	b.n	80040d6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	212c      	movs	r1, #44	; 0x2c
 8004086:	fb01 f303 	mul.w	r3, r1, r3
 800408a:	4413      	add	r3, r2
 800408c:	3354      	adds	r3, #84	; 0x54
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d109      	bne.n	80040a8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	212c      	movs	r1, #44	; 0x2c
 800409a:	fb01 f303 	mul.w	r3, r1, r3
 800409e:	4413      	add	r3, r2
 80040a0:	3342      	adds	r3, #66	; 0x42
 80040a2:	2200      	movs	r2, #0
 80040a4:	701a      	strb	r2, [r3, #0]
      break;
 80040a6:	e016      	b.n	80040d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040a8:	78fb      	ldrb	r3, [r7, #3]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	212c      	movs	r1, #44	; 0x2c
 80040ae:	fb01 f303 	mul.w	r3, r1, r3
 80040b2:	4413      	add	r3, r2
 80040b4:	3342      	adds	r3, #66	; 0x42
 80040b6:	2202      	movs	r2, #2
 80040b8:	701a      	strb	r2, [r3, #0]
      break;
 80040ba:	e00c      	b.n	80040d6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	212c      	movs	r1, #44	; 0x2c
 80040c2:	fb01 f303 	mul.w	r3, r1, r3
 80040c6:	4413      	add	r3, r2
 80040c8:	3342      	adds	r3, #66	; 0x42
 80040ca:	2200      	movs	r2, #0
 80040cc:	701a      	strb	r2, [r3, #0]
      break;
 80040ce:	e002      	b.n	80040d6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80040d0:	bf00      	nop
 80040d2:	e000      	b.n	80040d6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80040d4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80040d6:	78fb      	ldrb	r3, [r7, #3]
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	212c      	movs	r1, #44	; 0x2c
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	4413      	add	r3, r2
 80040e2:	3344      	adds	r3, #68	; 0x44
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	8b3a      	ldrh	r2, [r7, #24]
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	202c      	movs	r0, #44	; 0x2c
 80040f0:	fb00 f303 	mul.w	r3, r0, r3
 80040f4:	440b      	add	r3, r1
 80040f6:	334c      	adds	r3, #76	; 0x4c
 80040f8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80040fa:	78fb      	ldrb	r3, [r7, #3]
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	212c      	movs	r1, #44	; 0x2c
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	4413      	add	r3, r2
 8004106:	3360      	adds	r3, #96	; 0x60
 8004108:	2200      	movs	r2, #0
 800410a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	212c      	movs	r1, #44	; 0x2c
 8004112:	fb01 f303 	mul.w	r3, r1, r3
 8004116:	4413      	add	r3, r2
 8004118:	3350      	adds	r3, #80	; 0x50
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800411e:	78fb      	ldrb	r3, [r7, #3]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	212c      	movs	r1, #44	; 0x2c
 8004124:	fb01 f303 	mul.w	r3, r1, r3
 8004128:	4413      	add	r3, r2
 800412a:	3339      	adds	r3, #57	; 0x39
 800412c:	78fa      	ldrb	r2, [r7, #3]
 800412e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	212c      	movs	r1, #44	; 0x2c
 8004136:	fb01 f303 	mul.w	r3, r1, r3
 800413a:	4413      	add	r3, r2
 800413c:	3361      	adds	r3, #97	; 0x61
 800413e:	2200      	movs	r2, #0
 8004140:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	78fb      	ldrb	r3, [r7, #3]
 8004148:	222c      	movs	r2, #44	; 0x2c
 800414a:	fb02 f303 	mul.w	r3, r2, r3
 800414e:	3338      	adds	r3, #56	; 0x38
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	18d1      	adds	r1, r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	461a      	mov	r2, r3
 800415c:	f003 faba 	bl	80076d4 <USB_HC_StartXfer>
 8004160:	4603      	mov	r3, r0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop

0800416c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f002 ffe5 	bl	8007152 <USB_GetMode>
 8004188:	4603      	mov	r3, r0
 800418a:	2b01      	cmp	r3, #1
 800418c:	f040 80f6 	bne.w	800437c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f002 ffc9 	bl	800712c <USB_ReadInterrupts>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 80ec 	beq.w	800437a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f002 ffc0 	bl	800712c <USB_ReadInterrupts>
 80041ac:	4603      	mov	r3, r0
 80041ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041b6:	d104      	bne.n	80041c2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80041c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f002 ffb0 	bl	800712c <USB_ReadInterrupts>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041d6:	d104      	bne.n	80041e2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80041e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f002 ffa0 	bl	800712c <USB_ReadInterrupts>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041f6:	d104      	bne.n	8004202 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004200:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f002 ff90 	bl	800712c <USB_ReadInterrupts>
 800420c:	4603      	mov	r3, r0
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b02      	cmp	r3, #2
 8004214:	d103      	bne.n	800421e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2202      	movs	r2, #2
 800421c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f002 ff82 	bl	800712c <USB_ReadInterrupts>
 8004228:	4603      	mov	r3, r0
 800422a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800422e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004232:	d11c      	bne.n	800426e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800423c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10f      	bne.n	800426e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800424e:	2110      	movs	r1, #16
 8004250:	6938      	ldr	r0, [r7, #16]
 8004252:	f002 fe71 	bl	8006f38 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004256:	6938      	ldr	r0, [r7, #16]
 8004258:	f002 fea2 	bl	8006fa0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2101      	movs	r1, #1
 8004262:	4618      	mov	r0, r3
 8004264:	f003 f878 	bl	8007358 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f004 fe81 	bl	8008f70 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f002 ff5a 	bl	800712c <USB_ReadInterrupts>
 8004278:	4603      	mov	r3, r0
 800427a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800427e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004282:	d102      	bne.n	800428a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f001 f882 	bl	800538e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f002 ff4c 	bl	800712c <USB_ReadInterrupts>
 8004294:	4603      	mov	r3, r0
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b08      	cmp	r3, #8
 800429c:	d106      	bne.n	80042ac <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f004 fe4a 	bl	8008f38 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2208      	movs	r2, #8
 80042aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f002 ff3b 	bl	800712c <USB_ReadInterrupts>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f003 0310 	and.w	r3, r3, #16
 80042bc:	2b10      	cmp	r3, #16
 80042be:	d101      	bne.n	80042c4 <HAL_HCD_IRQHandler+0x158>
 80042c0:	2301      	movs	r3, #1
 80042c2:	e000      	b.n	80042c6 <HAL_HCD_IRQHandler+0x15a>
 80042c4:	2300      	movs	r3, #0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d012      	beq.n	80042f0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699a      	ldr	r2, [r3, #24]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0210 	bic.w	r2, r2, #16
 80042d8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 ff85 	bl	80051ea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699a      	ldr	r2, [r3, #24]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0210 	orr.w	r2, r2, #16
 80042ee:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f002 ff19 	bl	800712c <USB_ReadInterrupts>
 80042fa:	4603      	mov	r3, r0
 80042fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004300:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004304:	d13a      	bne.n	800437c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f003 fb24 	bl	8007958 <USB_HC_ReadInterrupt>
 8004310:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	e025      	b.n	8004364 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	fa22 f303 	lsr.w	r3, r2, r3
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d018      	beq.n	800435e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4413      	add	r3, r2
 8004334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800433e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004342:	d106      	bne.n	8004352 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	4619      	mov	r1, r3
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f88f 	bl	800446e <HCD_HC_IN_IRQHandler>
 8004350:	e005      	b.n	800435e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	4619      	mov	r1, r3
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 fbdd 	bl	8004b18 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	3301      	adds	r3, #1
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	429a      	cmp	r2, r3
 800436c:	d3d4      	bcc.n	8004318 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004376:	615a      	str	r2, [r3, #20]
 8004378:	e000      	b.n	800437c <HAL_HCD_IRQHandler+0x210>
      return;
 800437a:	bf00      	nop
    }
  }
}
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_HCD_Start+0x16>
 8004394:	2302      	movs	r3, #2
 8004396:	e013      	b.n	80043c0 <HAL_HCD_Start+0x3e>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2101      	movs	r1, #1
 80043a6:	4618      	mov	r0, r3
 80043a8:	f003 f810 	bl	80073cc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f002 fd53 	bl	8006e5c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d101      	bne.n	80043de <HAL_HCD_Stop+0x16>
 80043da:	2302      	movs	r3, #2
 80043dc:	e00d      	b.n	80043fa <HAL_HCD_Stop+0x32>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f003 fbfe 	bl	8007bec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	460b      	mov	r3, r1
 800440c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800440e:	78fb      	ldrb	r3, [r7, #3]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	212c      	movs	r1, #44	; 0x2c
 8004414:	fb01 f303 	mul.w	r3, r1, r3
 8004418:	4413      	add	r3, r2
 800441a:	3360      	adds	r3, #96	; 0x60
 800441c:	781b      	ldrb	r3, [r3, #0]
}
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	460b      	mov	r3, r1
 8004434:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	212c      	movs	r1, #44	; 0x2c
 800443c:	fb01 f303 	mul.w	r3, r1, r3
 8004440:	4413      	add	r3, r2
 8004442:	3350      	adds	r3, #80	; 0x50
 8004444:	681b      	ldr	r3, [r3, #0]
}
 8004446:	4618      	mov	r0, r3
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f003 f804 	bl	800746c <USB_GetCurrentFrame>
 8004464:	4603      	mov	r3, r0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b086      	sub	sp, #24
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	460b      	mov	r3, r1
 8004478:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	4413      	add	r3, r2
 8004490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b04      	cmp	r3, #4
 800449c:	d11a      	bne.n	80044d4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044aa:	461a      	mov	r2, r3
 80044ac:	2304      	movs	r3, #4
 80044ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	212c      	movs	r1, #44	; 0x2c
 80044b6:	fb01 f303 	mul.w	r3, r1, r3
 80044ba:	4413      	add	r3, r2
 80044bc:	3361      	adds	r3, #97	; 0x61
 80044be:	2206      	movs	r2, #6
 80044c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	4611      	mov	r1, r2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f003 fa54 	bl	800797a <USB_HC_Halt>
 80044d2:	e0af      	b.n	8004634 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ea:	d11b      	bne.n	8004524 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f8:	461a      	mov	r2, r3
 80044fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	212c      	movs	r1, #44	; 0x2c
 8004506:	fb01 f303 	mul.w	r3, r1, r3
 800450a:	4413      	add	r3, r2
 800450c:	3361      	adds	r3, #97	; 0x61
 800450e:	2207      	movs	r2, #7
 8004510:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	4611      	mov	r1, r2
 800451c:	4618      	mov	r0, r3
 800451e:	f003 fa2c 	bl	800797a <USB_HC_Halt>
 8004522:	e087      	b.n	8004634 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	4413      	add	r3, r2
 800452c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b20      	cmp	r3, #32
 8004538:	d109      	bne.n	800454e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	4413      	add	r3, r2
 8004542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004546:	461a      	mov	r2, r3
 8004548:	2320      	movs	r3, #32
 800454a:	6093      	str	r3, [r2, #8]
 800454c:	e072      	b.n	8004634 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4413      	add	r3, r2
 8004556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b08      	cmp	r3, #8
 8004562:	d11a      	bne.n	800459a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4413      	add	r3, r2
 800456c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004570:	461a      	mov	r2, r3
 8004572:	2308      	movs	r3, #8
 8004574:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	212c      	movs	r1, #44	; 0x2c
 800457c:	fb01 f303 	mul.w	r3, r1, r3
 8004580:	4413      	add	r3, r2
 8004582:	3361      	adds	r3, #97	; 0x61
 8004584:	2205      	movs	r2, #5
 8004586:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	4611      	mov	r1, r2
 8004592:	4618      	mov	r0, r3
 8004594:	f003 f9f1 	bl	800797a <USB_HC_Halt>
 8004598:	e04c      	b.n	8004634 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b0:	d11b      	bne.n	80045ea <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045be:	461a      	mov	r2, r3
 80045c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	212c      	movs	r1, #44	; 0x2c
 80045cc:	fb01 f303 	mul.w	r3, r1, r3
 80045d0:	4413      	add	r3, r2
 80045d2:	3361      	adds	r3, #97	; 0x61
 80045d4:	2208      	movs	r2, #8
 80045d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	4611      	mov	r1, r2
 80045e2:	4618      	mov	r0, r3
 80045e4:	f003 f9c9 	bl	800797a <USB_HC_Halt>
 80045e8:	e024      	b.n	8004634 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fc:	2b80      	cmp	r3, #128	; 0x80
 80045fe:	d119      	bne.n	8004634 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4413      	add	r3, r2
 8004608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800460c:	461a      	mov	r2, r3
 800460e:	2380      	movs	r3, #128	; 0x80
 8004610:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	212c      	movs	r1, #44	; 0x2c
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	4413      	add	r3, r2
 800461e:	3361      	adds	r3, #97	; 0x61
 8004620:	2206      	movs	r2, #6
 8004622:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	4611      	mov	r1, r2
 800462e:	4618      	mov	r0, r3
 8004630:	f003 f9a3 	bl	800797a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	4413      	add	r3, r2
 800463c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800464a:	d112      	bne.n	8004672 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	4611      	mov	r1, r2
 8004656:	4618      	mov	r0, r3
 8004658:	f003 f98f 	bl	800797a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	4413      	add	r3, r2
 8004664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004668:	461a      	mov	r2, r3
 800466a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800466e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004670:	e24e      	b.n	8004b10 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	4413      	add	r3, r2
 800467a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b01      	cmp	r3, #1
 8004686:	f040 80df 	bne.w	8004848 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d019      	beq.n	80046c6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	212c      	movs	r1, #44	; 0x2c
 8004698:	fb01 f303 	mul.w	r3, r1, r3
 800469c:	4413      	add	r3, r2
 800469e:	3348      	adds	r3, #72	; 0x48
 80046a0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	0159      	lsls	r1, r3, #5
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	440b      	add	r3, r1
 80046aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80046b4:	1ad2      	subs	r2, r2, r3
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	202c      	movs	r0, #44	; 0x2c
 80046bc:	fb00 f303 	mul.w	r3, r0, r3
 80046c0:	440b      	add	r3, r1
 80046c2:	3350      	adds	r3, #80	; 0x50
 80046c4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	212c      	movs	r1, #44	; 0x2c
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	4413      	add	r3, r2
 80046d2:	3361      	adds	r3, #97	; 0x61
 80046d4:	2201      	movs	r2, #1
 80046d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	212c      	movs	r1, #44	; 0x2c
 80046de:	fb01 f303 	mul.w	r3, r1, r3
 80046e2:	4413      	add	r3, r2
 80046e4:	335c      	adds	r3, #92	; 0x5c
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f6:	461a      	mov	r2, r3
 80046f8:	2301      	movs	r3, #1
 80046fa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	212c      	movs	r1, #44	; 0x2c
 8004702:	fb01 f303 	mul.w	r3, r1, r3
 8004706:	4413      	add	r3, r2
 8004708:	333f      	adds	r3, #63	; 0x3f
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d009      	beq.n	8004724 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	212c      	movs	r1, #44	; 0x2c
 8004716:	fb01 f303 	mul.w	r3, r1, r3
 800471a:	4413      	add	r3, r2
 800471c:	333f      	adds	r3, #63	; 0x3f
 800471e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004720:	2b02      	cmp	r3, #2
 8004722:	d111      	bne.n	8004748 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	4611      	mov	r1, r2
 800472e:	4618      	mov	r0, r3
 8004730:	f003 f923 	bl	800797a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	4413      	add	r3, r2
 800473c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004740:	461a      	mov	r2, r3
 8004742:	2310      	movs	r3, #16
 8004744:	6093      	str	r3, [r2, #8]
 8004746:	e03a      	b.n	80047be <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	212c      	movs	r1, #44	; 0x2c
 800474e:	fb01 f303 	mul.w	r3, r1, r3
 8004752:	4413      	add	r3, r2
 8004754:	333f      	adds	r3, #63	; 0x3f
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b03      	cmp	r3, #3
 800475a:	d009      	beq.n	8004770 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	212c      	movs	r1, #44	; 0x2c
 8004762:	fb01 f303 	mul.w	r3, r1, r3
 8004766:	4413      	add	r3, r2
 8004768:	333f      	adds	r3, #63	; 0x3f
 800476a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800476c:	2b01      	cmp	r3, #1
 800476e:	d126      	bne.n	80047be <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	4413      	add	r3, r2
 8004778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	0151      	lsls	r1, r2, #5
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	440a      	add	r2, r1
 8004786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800478a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800478e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	212c      	movs	r1, #44	; 0x2c
 8004796:	fb01 f303 	mul.w	r3, r1, r3
 800479a:	4413      	add	r3, r2
 800479c:	3360      	adds	r3, #96	; 0x60
 800479e:	2201      	movs	r2, #1
 80047a0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	b2d9      	uxtb	r1, r3
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	202c      	movs	r0, #44	; 0x2c
 80047ac:	fb00 f303 	mul.w	r3, r0, r3
 80047b0:	4413      	add	r3, r2
 80047b2:	3360      	adds	r3, #96	; 0x60
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f004 fbe7 	bl	8008f8c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d12b      	bne.n	800481e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	212c      	movs	r1, #44	; 0x2c
 80047cc:	fb01 f303 	mul.w	r3, r1, r3
 80047d0:	4413      	add	r3, r2
 80047d2:	3348      	adds	r3, #72	; 0x48
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	202c      	movs	r0, #44	; 0x2c
 80047dc:	fb00 f202 	mul.w	r2, r0, r2
 80047e0:	440a      	add	r2, r1
 80047e2:	3240      	adds	r2, #64	; 0x40
 80047e4:	8812      	ldrh	r2, [r2, #0]
 80047e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 818e 	beq.w	8004b10 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	212c      	movs	r1, #44	; 0x2c
 80047fa:	fb01 f303 	mul.w	r3, r1, r3
 80047fe:	4413      	add	r3, r2
 8004800:	3354      	adds	r3, #84	; 0x54
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	f083 0301 	eor.w	r3, r3, #1
 8004808:	b2d8      	uxtb	r0, r3
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	212c      	movs	r1, #44	; 0x2c
 8004810:	fb01 f303 	mul.w	r3, r1, r3
 8004814:	4413      	add	r3, r2
 8004816:	3354      	adds	r3, #84	; 0x54
 8004818:	4602      	mov	r2, r0
 800481a:	701a      	strb	r2, [r3, #0]
}
 800481c:	e178      	b.n	8004b10 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	212c      	movs	r1, #44	; 0x2c
 8004824:	fb01 f303 	mul.w	r3, r1, r3
 8004828:	4413      	add	r3, r2
 800482a:	3354      	adds	r3, #84	; 0x54
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	f083 0301 	eor.w	r3, r3, #1
 8004832:	b2d8      	uxtb	r0, r3
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	212c      	movs	r1, #44	; 0x2c
 800483a:	fb01 f303 	mul.w	r3, r1, r3
 800483e:	4413      	add	r3, r2
 8004840:	3354      	adds	r3, #84	; 0x54
 8004842:	4602      	mov	r2, r0
 8004844:	701a      	strb	r2, [r3, #0]
}
 8004846:	e163      	b.n	8004b10 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4413      	add	r3, r2
 8004850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b02      	cmp	r3, #2
 800485c:	f040 80f6 	bne.w	8004a4c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	212c      	movs	r1, #44	; 0x2c
 8004866:	fb01 f303 	mul.w	r3, r1, r3
 800486a:	4413      	add	r3, r2
 800486c:	3361      	adds	r3, #97	; 0x61
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d109      	bne.n	8004888 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	212c      	movs	r1, #44	; 0x2c
 800487a:	fb01 f303 	mul.w	r3, r1, r3
 800487e:	4413      	add	r3, r2
 8004880:	3360      	adds	r3, #96	; 0x60
 8004882:	2201      	movs	r2, #1
 8004884:	701a      	strb	r2, [r3, #0]
 8004886:	e0c9      	b.n	8004a1c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	212c      	movs	r1, #44	; 0x2c
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	4413      	add	r3, r2
 8004894:	3361      	adds	r3, #97	; 0x61
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b05      	cmp	r3, #5
 800489a:	d109      	bne.n	80048b0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	212c      	movs	r1, #44	; 0x2c
 80048a2:	fb01 f303 	mul.w	r3, r1, r3
 80048a6:	4413      	add	r3, r2
 80048a8:	3360      	adds	r3, #96	; 0x60
 80048aa:	2205      	movs	r2, #5
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	e0b5      	b.n	8004a1c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	212c      	movs	r1, #44	; 0x2c
 80048b6:	fb01 f303 	mul.w	r3, r1, r3
 80048ba:	4413      	add	r3, r2
 80048bc:	3361      	adds	r3, #97	; 0x61
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b06      	cmp	r3, #6
 80048c2:	d009      	beq.n	80048d8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	212c      	movs	r1, #44	; 0x2c
 80048ca:	fb01 f303 	mul.w	r3, r1, r3
 80048ce:	4413      	add	r3, r2
 80048d0:	3361      	adds	r3, #97	; 0x61
 80048d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d150      	bne.n	800497a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	212c      	movs	r1, #44	; 0x2c
 80048de:	fb01 f303 	mul.w	r3, r1, r3
 80048e2:	4413      	add	r3, r2
 80048e4:	335c      	adds	r3, #92	; 0x5c
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	202c      	movs	r0, #44	; 0x2c
 80048f0:	fb00 f303 	mul.w	r3, r0, r3
 80048f4:	440b      	add	r3, r1
 80048f6:	335c      	adds	r3, #92	; 0x5c
 80048f8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	212c      	movs	r1, #44	; 0x2c
 8004900:	fb01 f303 	mul.w	r3, r1, r3
 8004904:	4413      	add	r3, r2
 8004906:	335c      	adds	r3, #92	; 0x5c
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b02      	cmp	r3, #2
 800490c:	d912      	bls.n	8004934 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	212c      	movs	r1, #44	; 0x2c
 8004914:	fb01 f303 	mul.w	r3, r1, r3
 8004918:	4413      	add	r3, r2
 800491a:	335c      	adds	r3, #92	; 0x5c
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	212c      	movs	r1, #44	; 0x2c
 8004926:	fb01 f303 	mul.w	r3, r1, r3
 800492a:	4413      	add	r3, r2
 800492c:	3360      	adds	r3, #96	; 0x60
 800492e:	2204      	movs	r2, #4
 8004930:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004932:	e073      	b.n	8004a1c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	212c      	movs	r1, #44	; 0x2c
 800493a:	fb01 f303 	mul.w	r3, r1, r3
 800493e:	4413      	add	r3, r2
 8004940:	3360      	adds	r3, #96	; 0x60
 8004942:	2202      	movs	r2, #2
 8004944:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	4413      	add	r3, r2
 800494e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800495c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004964:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4413      	add	r3, r2
 800496e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004972:	461a      	mov	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004978:	e050      	b.n	8004a1c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	212c      	movs	r1, #44	; 0x2c
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	4413      	add	r3, r2
 8004986:	3361      	adds	r3, #97	; 0x61
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2b03      	cmp	r3, #3
 800498c:	d122      	bne.n	80049d4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	212c      	movs	r1, #44	; 0x2c
 8004994:	fb01 f303 	mul.w	r3, r1, r3
 8004998:	4413      	add	r3, r2
 800499a:	3360      	adds	r3, #96	; 0x60
 800499c:	2202      	movs	r2, #2
 800499e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049b6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049be:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049cc:	461a      	mov	r2, r3
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	e023      	b.n	8004a1c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	212c      	movs	r1, #44	; 0x2c
 80049da:	fb01 f303 	mul.w	r3, r1, r3
 80049de:	4413      	add	r3, r2
 80049e0:	3361      	adds	r3, #97	; 0x61
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	2b07      	cmp	r3, #7
 80049e6:	d119      	bne.n	8004a1c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	212c      	movs	r1, #44	; 0x2c
 80049ee:	fb01 f303 	mul.w	r3, r1, r3
 80049f2:	4413      	add	r3, r2
 80049f4:	335c      	adds	r3, #92	; 0x5c
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	202c      	movs	r0, #44	; 0x2c
 8004a00:	fb00 f303 	mul.w	r3, r0, r3
 8004a04:	440b      	add	r3, r1
 8004a06:	335c      	adds	r3, #92	; 0x5c
 8004a08:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	212c      	movs	r1, #44	; 0x2c
 8004a10:	fb01 f303 	mul.w	r3, r1, r3
 8004a14:	4413      	add	r3, r2
 8004a16:	3360      	adds	r3, #96	; 0x60
 8004a18:	2204      	movs	r2, #4
 8004a1a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a28:	461a      	mov	r2, r3
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	b2d9      	uxtb	r1, r3
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	202c      	movs	r0, #44	; 0x2c
 8004a38:	fb00 f303 	mul.w	r3, r0, r3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3360      	adds	r3, #96	; 0x60
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f004 faa1 	bl	8008f8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004a4a:	e061      	b.n	8004b10 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 0310 	and.w	r3, r3, #16
 8004a5e:	2b10      	cmp	r3, #16
 8004a60:	d156      	bne.n	8004b10 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	212c      	movs	r1, #44	; 0x2c
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	333f      	adds	r3, #63	; 0x3f
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d111      	bne.n	8004a9a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	212c      	movs	r1, #44	; 0x2c
 8004a7c:	fb01 f303 	mul.w	r3, r1, r3
 8004a80:	4413      	add	r3, r2
 8004a82:	335c      	adds	r3, #92	; 0x5c
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	4611      	mov	r1, r2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f002 ff71 	bl	800797a <USB_HC_Halt>
 8004a98:	e031      	b.n	8004afe <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	212c      	movs	r1, #44	; 0x2c
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	333f      	adds	r3, #63	; 0x3f
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	212c      	movs	r1, #44	; 0x2c
 8004ab4:	fb01 f303 	mul.w	r3, r1, r3
 8004ab8:	4413      	add	r3, r2
 8004aba:	333f      	adds	r3, #63	; 0x3f
 8004abc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d11d      	bne.n	8004afe <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	212c      	movs	r1, #44	; 0x2c
 8004ac8:	fb01 f303 	mul.w	r3, r1, r3
 8004acc:	4413      	add	r3, r2
 8004ace:	335c      	adds	r3, #92	; 0x5c
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d110      	bne.n	8004afe <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	212c      	movs	r1, #44	; 0x2c
 8004ae2:	fb01 f303 	mul.w	r3, r1, r3
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3361      	adds	r3, #97	; 0x61
 8004aea:	2203      	movs	r2, #3
 8004aec:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	4611      	mov	r1, r2
 8004af8:	4618      	mov	r0, r3
 8004afa:	f002 ff3e 	bl	800797a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	6093      	str	r3, [r2, #8]
}
 8004b10:	bf00      	nop
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004b2e:	78fb      	ldrb	r3, [r7, #3]
 8004b30:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d11a      	bne.n	8004b7e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b54:	461a      	mov	r2, r3
 8004b56:	2304      	movs	r3, #4
 8004b58:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	212c      	movs	r1, #44	; 0x2c
 8004b60:	fb01 f303 	mul.w	r3, r1, r3
 8004b64:	4413      	add	r3, r2
 8004b66:	3361      	adds	r3, #97	; 0x61
 8004b68:	2206      	movs	r2, #6
 8004b6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	4611      	mov	r1, r2
 8004b76:	4618      	mov	r0, r3
 8004b78:	f002 feff 	bl	800797a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004b7c:	e331      	b.n	80051e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	015a      	lsls	r2, r3, #5
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	4413      	add	r3, r2
 8004b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	d12e      	bne.n	8004bf2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	2320      	movs	r3, #32
 8004ba4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	212c      	movs	r1, #44	; 0x2c
 8004bac:	fb01 f303 	mul.w	r3, r1, r3
 8004bb0:	4413      	add	r3, r2
 8004bb2:	333d      	adds	r3, #61	; 0x3d
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	f040 8313 	bne.w	80051e2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	212c      	movs	r1, #44	; 0x2c
 8004bc2:	fb01 f303 	mul.w	r3, r1, r3
 8004bc6:	4413      	add	r3, r2
 8004bc8:	333d      	adds	r3, #61	; 0x3d
 8004bca:	2200      	movs	r2, #0
 8004bcc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	212c      	movs	r1, #44	; 0x2c
 8004bd4:	fb01 f303 	mul.w	r3, r1, r3
 8004bd8:	4413      	add	r3, r2
 8004bda:	3360      	adds	r3, #96	; 0x60
 8004bdc:	2202      	movs	r2, #2
 8004bde:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	4611      	mov	r1, r2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f002 fec5 	bl	800797a <USB_HC_Halt>
}
 8004bf0:	e2f7      	b.n	80051e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c08:	d112      	bne.n	8004c30 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c16:	461a      	mov	r2, r3
 8004c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c1c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	4611      	mov	r1, r2
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f002 fea6 	bl	800797a <USB_HC_Halt>
}
 8004c2e:	e2d8      	b.n	80051e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d140      	bne.n	8004cc8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	212c      	movs	r1, #44	; 0x2c
 8004c4c:	fb01 f303 	mul.w	r3, r1, r3
 8004c50:	4413      	add	r3, r2
 8004c52:	335c      	adds	r3, #92	; 0x5c
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6a:	2b40      	cmp	r3, #64	; 0x40
 8004c6c:	d111      	bne.n	8004c92 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	212c      	movs	r1, #44	; 0x2c
 8004c74:	fb01 f303 	mul.w	r3, r1, r3
 8004c78:	4413      	add	r3, r2
 8004c7a:	333d      	adds	r3, #61	; 0x3d
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	2340      	movs	r3, #64	; 0x40
 8004c90:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	212c      	movs	r1, #44	; 0x2c
 8004caa:	fb01 f303 	mul.w	r3, r1, r3
 8004cae:	4413      	add	r3, r2
 8004cb0:	3361      	adds	r3, #97	; 0x61
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f002 fe5a 	bl	800797a <USB_HC_Halt>
}
 8004cc6:	e28c      	b.n	80051e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cda:	2b40      	cmp	r3, #64	; 0x40
 8004cdc:	d12c      	bne.n	8004d38 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	212c      	movs	r1, #44	; 0x2c
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	4413      	add	r3, r2
 8004cea:	3361      	adds	r3, #97	; 0x61
 8004cec:	2204      	movs	r2, #4
 8004cee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	212c      	movs	r1, #44	; 0x2c
 8004cf6:	fb01 f303 	mul.w	r3, r1, r3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	333d      	adds	r3, #61	; 0x3d
 8004cfe:	2201      	movs	r2, #1
 8004d00:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	212c      	movs	r1, #44	; 0x2c
 8004d08:	fb01 f303 	mul.w	r3, r1, r3
 8004d0c:	4413      	add	r3, r2
 8004d0e:	335c      	adds	r3, #92	; 0x5c
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f002 fe2b 	bl	800797a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d30:	461a      	mov	r2, r3
 8004d32:	2340      	movs	r3, #64	; 0x40
 8004d34:	6093      	str	r3, [r2, #8]
}
 8004d36:	e254      	b.n	80051e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b08      	cmp	r3, #8
 8004d4c:	d11a      	bne.n	8004d84 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	2308      	movs	r3, #8
 8004d5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	212c      	movs	r1, #44	; 0x2c
 8004d66:	fb01 f303 	mul.w	r3, r1, r3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	3361      	adds	r3, #97	; 0x61
 8004d6e:	2205      	movs	r2, #5
 8004d70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	4611      	mov	r1, r2
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f002 fdfc 	bl	800797a <USB_HC_Halt>
}
 8004d82:	e22e      	b.n	80051e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 0310 	and.w	r3, r3, #16
 8004d96:	2b10      	cmp	r3, #16
 8004d98:	d140      	bne.n	8004e1c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	212c      	movs	r1, #44	; 0x2c
 8004da0:	fb01 f303 	mul.w	r3, r1, r3
 8004da4:	4413      	add	r3, r2
 8004da6:	335c      	adds	r3, #92	; 0x5c
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	212c      	movs	r1, #44	; 0x2c
 8004db2:	fb01 f303 	mul.w	r3, r1, r3
 8004db6:	4413      	add	r3, r2
 8004db8:	3361      	adds	r3, #97	; 0x61
 8004dba:	2203      	movs	r2, #3
 8004dbc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	212c      	movs	r1, #44	; 0x2c
 8004dc4:	fb01 f303 	mul.w	r3, r1, r3
 8004dc8:	4413      	add	r3, r2
 8004dca:	333d      	adds	r3, #61	; 0x3d
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d112      	bne.n	8004df8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	212c      	movs	r1, #44	; 0x2c
 8004dd8:	fb01 f303 	mul.w	r3, r1, r3
 8004ddc:	4413      	add	r3, r2
 8004dde:	333c      	adds	r3, #60	; 0x3c
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d108      	bne.n	8004df8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	212c      	movs	r1, #44	; 0x2c
 8004dec:	fb01 f303 	mul.w	r3, r1, r3
 8004df0:	4413      	add	r3, r2
 8004df2:	333d      	adds	r3, #61	; 0x3d
 8004df4:	2201      	movs	r2, #1
 8004df6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	4611      	mov	r1, r2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f002 fdb9 	bl	800797a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e14:	461a      	mov	r2, r3
 8004e16:	2310      	movs	r3, #16
 8004e18:	6093      	str	r3, [r2, #8]
}
 8004e1a:	e1e2      	b.n	80051e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2e:	2b80      	cmp	r3, #128	; 0x80
 8004e30:	d164      	bne.n	8004efc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d111      	bne.n	8004e5e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	212c      	movs	r1, #44	; 0x2c
 8004e40:	fb01 f303 	mul.w	r3, r1, r3
 8004e44:	4413      	add	r3, r2
 8004e46:	3361      	adds	r3, #97	; 0x61
 8004e48:	2206      	movs	r2, #6
 8004e4a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	4611      	mov	r1, r2
 8004e56:	4618      	mov	r0, r3
 8004e58:	f002 fd8f 	bl	800797a <USB_HC_Halt>
 8004e5c:	e044      	b.n	8004ee8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	212c      	movs	r1, #44	; 0x2c
 8004e64:	fb01 f303 	mul.w	r3, r1, r3
 8004e68:	4413      	add	r3, r2
 8004e6a:	335c      	adds	r3, #92	; 0x5c
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	6879      	ldr	r1, [r7, #4]
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	202c      	movs	r0, #44	; 0x2c
 8004e76:	fb00 f303 	mul.w	r3, r0, r3
 8004e7a:	440b      	add	r3, r1
 8004e7c:	335c      	adds	r3, #92	; 0x5c
 8004e7e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	212c      	movs	r1, #44	; 0x2c
 8004e86:	fb01 f303 	mul.w	r3, r1, r3
 8004e8a:	4413      	add	r3, r2
 8004e8c:	335c      	adds	r3, #92	; 0x5c
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d920      	bls.n	8004ed6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	212c      	movs	r1, #44	; 0x2c
 8004e9a:	fb01 f303 	mul.w	r3, r1, r3
 8004e9e:	4413      	add	r3, r2
 8004ea0:	335c      	adds	r3, #92	; 0x5c
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	212c      	movs	r1, #44	; 0x2c
 8004eac:	fb01 f303 	mul.w	r3, r1, r3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	3360      	adds	r3, #96	; 0x60
 8004eb4:	2204      	movs	r2, #4
 8004eb6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	b2d9      	uxtb	r1, r3
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	202c      	movs	r0, #44	; 0x2c
 8004ec2:	fb00 f303 	mul.w	r3, r0, r3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	3360      	adds	r3, #96	; 0x60
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f004 f85c 	bl	8008f8c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004ed4:	e008      	b.n	8004ee8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	212c      	movs	r1, #44	; 0x2c
 8004edc:	fb01 f303 	mul.w	r3, r1, r3
 8004ee0:	4413      	add	r3, r2
 8004ee2:	3360      	adds	r3, #96	; 0x60
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	2380      	movs	r3, #128	; 0x80
 8004ef8:	6093      	str	r3, [r2, #8]
}
 8004efa:	e172      	b.n	80051e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f12:	d11b      	bne.n	8004f4c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	212c      	movs	r1, #44	; 0x2c
 8004f1a:	fb01 f303 	mul.w	r3, r1, r3
 8004f1e:	4413      	add	r3, r2
 8004f20:	3361      	adds	r3, #97	; 0x61
 8004f22:	2208      	movs	r2, #8
 8004f24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	4611      	mov	r1, r2
 8004f30:	4618      	mov	r0, r3
 8004f32:	f002 fd22 	bl	800797a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f42:	461a      	mov	r2, r3
 8004f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f48:	6093      	str	r3, [r2, #8]
}
 8004f4a:	e14a      	b.n	80051e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	f040 813f 	bne.w	80051e2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	212c      	movs	r1, #44	; 0x2c
 8004f6a:	fb01 f303 	mul.w	r3, r1, r3
 8004f6e:	4413      	add	r3, r2
 8004f70:	3361      	adds	r3, #97	; 0x61
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d17d      	bne.n	8005074 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	212c      	movs	r1, #44	; 0x2c
 8004f7e:	fb01 f303 	mul.w	r3, r1, r3
 8004f82:	4413      	add	r3, r2
 8004f84:	3360      	adds	r3, #96	; 0x60
 8004f86:	2201      	movs	r2, #1
 8004f88:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	212c      	movs	r1, #44	; 0x2c
 8004f90:	fb01 f303 	mul.w	r3, r1, r3
 8004f94:	4413      	add	r3, r2
 8004f96:	333f      	adds	r3, #63	; 0x3f
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d00a      	beq.n	8004fb4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	212c      	movs	r1, #44	; 0x2c
 8004fa4:	fb01 f303 	mul.w	r3, r1, r3
 8004fa8:	4413      	add	r3, r2
 8004faa:	333f      	adds	r3, #63	; 0x3f
 8004fac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	f040 8100 	bne.w	80051b4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d113      	bne.n	8004fe4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	212c      	movs	r1, #44	; 0x2c
 8004fc2:	fb01 f303 	mul.w	r3, r1, r3
 8004fc6:	4413      	add	r3, r2
 8004fc8:	3355      	adds	r3, #85	; 0x55
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	f083 0301 	eor.w	r3, r3, #1
 8004fd0:	b2d8      	uxtb	r0, r3
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	212c      	movs	r1, #44	; 0x2c
 8004fd8:	fb01 f303 	mul.w	r3, r1, r3
 8004fdc:	4413      	add	r3, r2
 8004fde:	3355      	adds	r3, #85	; 0x55
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	f040 80e3 	bne.w	80051b4 <HCD_HC_OUT_IRQHandler+0x69c>
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	212c      	movs	r1, #44	; 0x2c
 8004ff4:	fb01 f303 	mul.w	r3, r1, r3
 8004ff8:	4413      	add	r3, r2
 8004ffa:	334c      	adds	r3, #76	; 0x4c
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 80d8 	beq.w	80051b4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	212c      	movs	r1, #44	; 0x2c
 800500a:	fb01 f303 	mul.w	r3, r1, r3
 800500e:	4413      	add	r3, r2
 8005010:	334c      	adds	r3, #76	; 0x4c
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6879      	ldr	r1, [r7, #4]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	202c      	movs	r0, #44	; 0x2c
 800501a:	fb00 f202 	mul.w	r2, r0, r2
 800501e:	440a      	add	r2, r1
 8005020:	3240      	adds	r2, #64	; 0x40
 8005022:	8812      	ldrh	r2, [r2, #0]
 8005024:	4413      	add	r3, r2
 8005026:	3b01      	subs	r3, #1
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	202c      	movs	r0, #44	; 0x2c
 800502e:	fb00 f202 	mul.w	r2, r0, r2
 8005032:	440a      	add	r2, r1
 8005034:	3240      	adds	r2, #64	; 0x40
 8005036:	8812      	ldrh	r2, [r2, #0]
 8005038:	fbb3 f3f2 	udiv	r3, r3, r2
 800503c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 80b5 	beq.w	80051b4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	212c      	movs	r1, #44	; 0x2c
 8005050:	fb01 f303 	mul.w	r3, r1, r3
 8005054:	4413      	add	r3, r2
 8005056:	3355      	adds	r3, #85	; 0x55
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	f083 0301 	eor.w	r3, r3, #1
 800505e:	b2d8      	uxtb	r0, r3
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	212c      	movs	r1, #44	; 0x2c
 8005066:	fb01 f303 	mul.w	r3, r1, r3
 800506a:	4413      	add	r3, r2
 800506c:	3355      	adds	r3, #85	; 0x55
 800506e:	4602      	mov	r2, r0
 8005070:	701a      	strb	r2, [r3, #0]
 8005072:	e09f      	b.n	80051b4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	212c      	movs	r1, #44	; 0x2c
 800507a:	fb01 f303 	mul.w	r3, r1, r3
 800507e:	4413      	add	r3, r2
 8005080:	3361      	adds	r3, #97	; 0x61
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b03      	cmp	r3, #3
 8005086:	d109      	bne.n	800509c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	212c      	movs	r1, #44	; 0x2c
 800508e:	fb01 f303 	mul.w	r3, r1, r3
 8005092:	4413      	add	r3, r2
 8005094:	3360      	adds	r3, #96	; 0x60
 8005096:	2202      	movs	r2, #2
 8005098:	701a      	strb	r2, [r3, #0]
 800509a:	e08b      	b.n	80051b4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	212c      	movs	r1, #44	; 0x2c
 80050a2:	fb01 f303 	mul.w	r3, r1, r3
 80050a6:	4413      	add	r3, r2
 80050a8:	3361      	adds	r3, #97	; 0x61
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	d109      	bne.n	80050c4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	212c      	movs	r1, #44	; 0x2c
 80050b6:	fb01 f303 	mul.w	r3, r1, r3
 80050ba:	4413      	add	r3, r2
 80050bc:	3360      	adds	r3, #96	; 0x60
 80050be:	2202      	movs	r2, #2
 80050c0:	701a      	strb	r2, [r3, #0]
 80050c2:	e077      	b.n	80051b4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	212c      	movs	r1, #44	; 0x2c
 80050ca:	fb01 f303 	mul.w	r3, r1, r3
 80050ce:	4413      	add	r3, r2
 80050d0:	3361      	adds	r3, #97	; 0x61
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b05      	cmp	r3, #5
 80050d6:	d109      	bne.n	80050ec <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	212c      	movs	r1, #44	; 0x2c
 80050de:	fb01 f303 	mul.w	r3, r1, r3
 80050e2:	4413      	add	r3, r2
 80050e4:	3360      	adds	r3, #96	; 0x60
 80050e6:	2205      	movs	r2, #5
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	e063      	b.n	80051b4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	212c      	movs	r1, #44	; 0x2c
 80050f2:	fb01 f303 	mul.w	r3, r1, r3
 80050f6:	4413      	add	r3, r2
 80050f8:	3361      	adds	r3, #97	; 0x61
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b06      	cmp	r3, #6
 80050fe:	d009      	beq.n	8005114 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	212c      	movs	r1, #44	; 0x2c
 8005106:	fb01 f303 	mul.w	r3, r1, r3
 800510a:	4413      	add	r3, r2
 800510c:	3361      	adds	r3, #97	; 0x61
 800510e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005110:	2b08      	cmp	r3, #8
 8005112:	d14f      	bne.n	80051b4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	212c      	movs	r1, #44	; 0x2c
 800511a:	fb01 f303 	mul.w	r3, r1, r3
 800511e:	4413      	add	r3, r2
 8005120:	335c      	adds	r3, #92	; 0x5c
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	202c      	movs	r0, #44	; 0x2c
 800512c:	fb00 f303 	mul.w	r3, r0, r3
 8005130:	440b      	add	r3, r1
 8005132:	335c      	adds	r3, #92	; 0x5c
 8005134:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	212c      	movs	r1, #44	; 0x2c
 800513c:	fb01 f303 	mul.w	r3, r1, r3
 8005140:	4413      	add	r3, r2
 8005142:	335c      	adds	r3, #92	; 0x5c
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d912      	bls.n	8005170 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	212c      	movs	r1, #44	; 0x2c
 8005150:	fb01 f303 	mul.w	r3, r1, r3
 8005154:	4413      	add	r3, r2
 8005156:	335c      	adds	r3, #92	; 0x5c
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	212c      	movs	r1, #44	; 0x2c
 8005162:	fb01 f303 	mul.w	r3, r1, r3
 8005166:	4413      	add	r3, r2
 8005168:	3360      	adds	r3, #96	; 0x60
 800516a:	2204      	movs	r2, #4
 800516c:	701a      	strb	r2, [r3, #0]
 800516e:	e021      	b.n	80051b4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	212c      	movs	r1, #44	; 0x2c
 8005176:	fb01 f303 	mul.w	r3, r1, r3
 800517a:	4413      	add	r3, r2
 800517c:	3360      	adds	r3, #96	; 0x60
 800517e:	2202      	movs	r2, #2
 8005180:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	4413      	add	r3, r2
 800518a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005198:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051a0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ae:	461a      	mov	r2, r3
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c0:	461a      	mov	r2, r3
 80051c2:	2302      	movs	r3, #2
 80051c4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	b2d9      	uxtb	r1, r3
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	202c      	movs	r0, #44	; 0x2c
 80051d0:	fb00 f303 	mul.w	r3, r0, r3
 80051d4:	4413      	add	r3, r2
 80051d6:	3360      	adds	r3, #96	; 0x60
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	461a      	mov	r2, r3
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f003 fed5 	bl	8008f8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80051e2:	bf00      	nop
 80051e4:	3720      	adds	r7, #32
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b08a      	sub	sp, #40	; 0x28
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	0c5b      	lsrs	r3, r3, #17
 8005210:	f003 030f 	and.w	r3, r3, #15
 8005214:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	091b      	lsrs	r3, r3, #4
 800521a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800521e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2b02      	cmp	r3, #2
 8005224:	d004      	beq.n	8005230 <HCD_RXQLVL_IRQHandler+0x46>
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b05      	cmp	r3, #5
 800522a:	f000 80a9 	beq.w	8005380 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800522e:	e0aa      	b.n	8005386 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 80a6 	beq.w	8005384 <HCD_RXQLVL_IRQHandler+0x19a>
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	212c      	movs	r1, #44	; 0x2c
 800523e:	fb01 f303 	mul.w	r3, r1, r3
 8005242:	4413      	add	r3, r2
 8005244:	3344      	adds	r3, #68	; 0x44
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 809b 	beq.w	8005384 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	212c      	movs	r1, #44	; 0x2c
 8005254:	fb01 f303 	mul.w	r3, r1, r3
 8005258:	4413      	add	r3, r2
 800525a:	3350      	adds	r3, #80	; 0x50
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	441a      	add	r2, r3
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	202c      	movs	r0, #44	; 0x2c
 8005268:	fb00 f303 	mul.w	r3, r0, r3
 800526c:	440b      	add	r3, r1
 800526e:	334c      	adds	r3, #76	; 0x4c
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	d87a      	bhi.n	800536c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6818      	ldr	r0, [r3, #0]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	212c      	movs	r1, #44	; 0x2c
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	4413      	add	r3, r2
 8005286:	3344      	adds	r3, #68	; 0x44
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	b292      	uxth	r2, r2
 800528e:	4619      	mov	r1, r3
 8005290:	f001 fef4 	bl	800707c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	212c      	movs	r1, #44	; 0x2c
 800529a:	fb01 f303 	mul.w	r3, r1, r3
 800529e:	4413      	add	r3, r2
 80052a0:	3344      	adds	r3, #68	; 0x44
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	441a      	add	r2, r3
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	202c      	movs	r0, #44	; 0x2c
 80052ae:	fb00 f303 	mul.w	r3, r0, r3
 80052b2:	440b      	add	r3, r1
 80052b4:	3344      	adds	r3, #68	; 0x44
 80052b6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	212c      	movs	r1, #44	; 0x2c
 80052be:	fb01 f303 	mul.w	r3, r1, r3
 80052c2:	4413      	add	r3, r2
 80052c4:	3350      	adds	r3, #80	; 0x50
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	441a      	add	r2, r3
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	202c      	movs	r0, #44	; 0x2c
 80052d2:	fb00 f303 	mul.w	r3, r0, r3
 80052d6:	440b      	add	r3, r1
 80052d8:	3350      	adds	r3, #80	; 0x50
 80052da:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	0cdb      	lsrs	r3, r3, #19
 80052ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052f0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	212c      	movs	r1, #44	; 0x2c
 80052f8:	fb01 f303 	mul.w	r3, r1, r3
 80052fc:	4413      	add	r3, r2
 80052fe:	3340      	adds	r3, #64	; 0x40
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	4293      	cmp	r3, r2
 8005308:	d13c      	bne.n	8005384 <HCD_RXQLVL_IRQHandler+0x19a>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d039      	beq.n	8005384 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	4413      	add	r3, r2
 8005318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005326:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800532e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	4413      	add	r3, r2
 8005338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800533c:	461a      	mov	r2, r3
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	212c      	movs	r1, #44	; 0x2c
 8005348:	fb01 f303 	mul.w	r3, r1, r3
 800534c:	4413      	add	r3, r2
 800534e:	3354      	adds	r3, #84	; 0x54
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	f083 0301 	eor.w	r3, r3, #1
 8005356:	b2d8      	uxtb	r0, r3
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	212c      	movs	r1, #44	; 0x2c
 800535e:	fb01 f303 	mul.w	r3, r1, r3
 8005362:	4413      	add	r3, r2
 8005364:	3354      	adds	r3, #84	; 0x54
 8005366:	4602      	mov	r2, r0
 8005368:	701a      	strb	r2, [r3, #0]
      break;
 800536a:	e00b      	b.n	8005384 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	212c      	movs	r1, #44	; 0x2c
 8005372:	fb01 f303 	mul.w	r3, r1, r3
 8005376:	4413      	add	r3, r2
 8005378:	3360      	adds	r3, #96	; 0x60
 800537a:	2204      	movs	r2, #4
 800537c:	701a      	strb	r2, [r3, #0]
      break;
 800537e:	e001      	b.n	8005384 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005380:	bf00      	nop
 8005382:	e000      	b.n	8005386 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005384:	bf00      	nop
  }
}
 8005386:	bf00      	nop
 8005388:	3728      	adds	r7, #40	; 0x28
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b086      	sub	sp, #24
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80053ba:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d10b      	bne.n	80053de <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d102      	bne.n	80053d6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f003 fdbf 	bl	8008f54 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f043 0302 	orr.w	r3, r3, #2
 80053dc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f003 0308 	and.w	r3, r3, #8
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d132      	bne.n	800544e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f043 0308 	orr.w	r3, r3, #8
 80053ee:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f003 0304 	and.w	r3, r3, #4
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d126      	bne.n	8005448 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d113      	bne.n	800542a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005408:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800540c:	d106      	bne.n	800541c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2102      	movs	r1, #2
 8005414:	4618      	mov	r0, r3
 8005416:	f001 ff9f 	bl	8007358 <USB_InitFSLSPClkSel>
 800541a:	e011      	b.n	8005440 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2101      	movs	r1, #1
 8005422:	4618      	mov	r0, r3
 8005424:	f001 ff98 	bl	8007358 <USB_InitFSLSPClkSel>
 8005428:	e00a      	b.n	8005440 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d106      	bne.n	8005440 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005438:	461a      	mov	r2, r3
 800543a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800543e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f003 fdb1 	bl	8008fa8 <HAL_HCD_PortEnabled_Callback>
 8005446:	e002      	b.n	800544e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f003 fdbb 	bl	8008fc4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f003 0320 	and.w	r3, r3, #32
 8005454:	2b20      	cmp	r3, #32
 8005456:	d103      	bne.n	8005460 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	f043 0320 	orr.w	r3, r3, #32
 800545e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005466:	461a      	mov	r2, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	6013      	str	r3, [r2, #0]
}
 800546c:	bf00      	nop
 800546e:	3718      	adds	r7, #24
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e12b      	b.n	80056de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fd fe36 	bl	800310c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2224      	movs	r2, #36	; 0x24
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0201 	bic.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054d8:	f001 fa20 	bl	800691c <HAL_RCC_GetPCLK1Freq>
 80054dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	4a81      	ldr	r2, [pc, #516]	; (80056e8 <HAL_I2C_Init+0x274>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d807      	bhi.n	80054f8 <HAL_I2C_Init+0x84>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4a80      	ldr	r2, [pc, #512]	; (80056ec <HAL_I2C_Init+0x278>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	bf94      	ite	ls
 80054f0:	2301      	movls	r3, #1
 80054f2:	2300      	movhi	r3, #0
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	e006      	b.n	8005506 <HAL_I2C_Init+0x92>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4a7d      	ldr	r2, [pc, #500]	; (80056f0 <HAL_I2C_Init+0x27c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	bf94      	ite	ls
 8005500:	2301      	movls	r3, #1
 8005502:	2300      	movhi	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e0e7      	b.n	80056de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	4a78      	ldr	r2, [pc, #480]	; (80056f4 <HAL_I2C_Init+0x280>)
 8005512:	fba2 2303 	umull	r2, r3, r2, r3
 8005516:	0c9b      	lsrs	r3, r3, #18
 8005518:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	430a      	orrs	r2, r1
 800552c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	4a6a      	ldr	r2, [pc, #424]	; (80056e8 <HAL_I2C_Init+0x274>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d802      	bhi.n	8005548 <HAL_I2C_Init+0xd4>
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	3301      	adds	r3, #1
 8005546:	e009      	b.n	800555c <HAL_I2C_Init+0xe8>
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800554e:	fb02 f303 	mul.w	r3, r2, r3
 8005552:	4a69      	ldr	r2, [pc, #420]	; (80056f8 <HAL_I2C_Init+0x284>)
 8005554:	fba2 2303 	umull	r2, r3, r2, r3
 8005558:	099b      	lsrs	r3, r3, #6
 800555a:	3301      	adds	r3, #1
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6812      	ldr	r2, [r2, #0]
 8005560:	430b      	orrs	r3, r1
 8005562:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800556e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	495c      	ldr	r1, [pc, #368]	; (80056e8 <HAL_I2C_Init+0x274>)
 8005578:	428b      	cmp	r3, r1
 800557a:	d819      	bhi.n	80055b0 <HAL_I2C_Init+0x13c>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	1e59      	subs	r1, r3, #1
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	fbb1 f3f3 	udiv	r3, r1, r3
 800558a:	1c59      	adds	r1, r3, #1
 800558c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005590:	400b      	ands	r3, r1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <HAL_I2C_Init+0x138>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	1e59      	subs	r1, r3, #1
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80055a4:	3301      	adds	r3, #1
 80055a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055aa:	e051      	b.n	8005650 <HAL_I2C_Init+0x1dc>
 80055ac:	2304      	movs	r3, #4
 80055ae:	e04f      	b.n	8005650 <HAL_I2C_Init+0x1dc>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d111      	bne.n	80055dc <HAL_I2C_Init+0x168>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	1e58      	subs	r0, r3, #1
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6859      	ldr	r1, [r3, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	440b      	add	r3, r1
 80055c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ca:	3301      	adds	r3, #1
 80055cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	bf0c      	ite	eq
 80055d4:	2301      	moveq	r3, #1
 80055d6:	2300      	movne	r3, #0
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	e012      	b.n	8005602 <HAL_I2C_Init+0x18e>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	1e58      	subs	r0, r3, #1
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6859      	ldr	r1, [r3, #4]
 80055e4:	460b      	mov	r3, r1
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	440b      	add	r3, r1
 80055ea:	0099      	lsls	r1, r3, #2
 80055ec:	440b      	add	r3, r1
 80055ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80055f2:	3301      	adds	r3, #1
 80055f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	bf0c      	ite	eq
 80055fc:	2301      	moveq	r3, #1
 80055fe:	2300      	movne	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <HAL_I2C_Init+0x196>
 8005606:	2301      	movs	r3, #1
 8005608:	e022      	b.n	8005650 <HAL_I2C_Init+0x1dc>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10e      	bne.n	8005630 <HAL_I2C_Init+0x1bc>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	1e58      	subs	r0, r3, #1
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6859      	ldr	r1, [r3, #4]
 800561a:	460b      	mov	r3, r1
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	440b      	add	r3, r1
 8005620:	fbb0 f3f3 	udiv	r3, r0, r3
 8005624:	3301      	adds	r3, #1
 8005626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800562a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800562e:	e00f      	b.n	8005650 <HAL_I2C_Init+0x1dc>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	1e58      	subs	r0, r3, #1
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6859      	ldr	r1, [r3, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	0099      	lsls	r1, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	fbb0 f3f3 	udiv	r3, r0, r3
 8005646:	3301      	adds	r3, #1
 8005648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800564c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	6809      	ldr	r1, [r1, #0]
 8005654:	4313      	orrs	r3, r2
 8005656:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69da      	ldr	r2, [r3, #28]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800567e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	6911      	ldr	r1, [r2, #16]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	68d2      	ldr	r2, [r2, #12]
 800568a:	4311      	orrs	r1, r2
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6812      	ldr	r2, [r2, #0]
 8005690:	430b      	orrs	r3, r1
 8005692:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695a      	ldr	r2, [r3, #20]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	431a      	orrs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0201 	orr.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2220      	movs	r2, #32
 80056ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	000186a0 	.word	0x000186a0
 80056ec:	001e847f 	.word	0x001e847f
 80056f0:	003d08ff 	.word	0x003d08ff
 80056f4:	431bde83 	.word	0x431bde83
 80056f8:	10624dd3 	.word	0x10624dd3

080056fc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e128      	b.n	8005960 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d109      	bne.n	800572e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a90      	ldr	r2, [pc, #576]	; (8005968 <HAL_I2S_Init+0x26c>)
 8005726:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7fd fd37 	bl	800319c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2202      	movs	r2, #2
 8005732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6812      	ldr	r2, [r2, #0]
 8005740:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005744:	f023 030f 	bic.w	r3, r3, #15
 8005748:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2202      	movs	r2, #2
 8005750:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	2b02      	cmp	r3, #2
 8005758:	d060      	beq.n	800581c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d102      	bne.n	8005768 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005762:	2310      	movs	r3, #16
 8005764:	617b      	str	r3, [r7, #20]
 8005766:	e001      	b.n	800576c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005768:	2320      	movs	r3, #32
 800576a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	2b20      	cmp	r3, #32
 8005772:	d802      	bhi.n	800577a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800577a:	2001      	movs	r0, #1
 800577c:	f001 f9c4 	bl	8006b08 <HAL_RCCEx_GetPeriphCLKFreq>
 8005780:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800578a:	d125      	bne.n	80057d8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d010      	beq.n	80057b6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	fbb2 f2f3 	udiv	r2, r2, r3
 800579e:	4613      	mov	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	461a      	mov	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b0:	3305      	adds	r3, #5
 80057b2:	613b      	str	r3, [r7, #16]
 80057b4:	e01f      	b.n	80057f6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	461a      	mov	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d2:	3305      	adds	r3, #5
 80057d4:	613b      	str	r3, [r7, #16]
 80057d6:	e00e      	b.n	80057f6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80057e0:	4613      	mov	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	461a      	mov	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f2:	3305      	adds	r3, #5
 80057f4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	4a5c      	ldr	r2, [pc, #368]	; (800596c <HAL_I2S_Init+0x270>)
 80057fa:	fba2 2303 	umull	r2, r3, r2, r3
 80057fe:	08db      	lsrs	r3, r3, #3
 8005800:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	085b      	lsrs	r3, r3, #1
 8005812:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	61bb      	str	r3, [r7, #24]
 800581a:	e003      	b.n	8005824 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800581c:	2302      	movs	r3, #2
 800581e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d902      	bls.n	8005830 <HAL_I2S_Init+0x134>
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	2bff      	cmp	r3, #255	; 0xff
 800582e:	d907      	bls.n	8005840 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005834:	f043 0210 	orr.w	r2, r3, #16
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e08f      	b.n	8005960 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691a      	ldr	r2, [r3, #16]
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	ea42 0103 	orr.w	r1, r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69fa      	ldr	r2, [r7, #28]
 8005850:	430a      	orrs	r2, r1
 8005852:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800585e:	f023 030f 	bic.w	r3, r3, #15
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6851      	ldr	r1, [r2, #4]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6892      	ldr	r2, [r2, #8]
 800586a:	4311      	orrs	r1, r2
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	68d2      	ldr	r2, [r2, #12]
 8005870:	4311      	orrs	r1, r2
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6992      	ldr	r2, [r2, #24]
 8005876:	430a      	orrs	r2, r1
 8005878:	431a      	orrs	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005882:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d161      	bne.n	8005950 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a38      	ldr	r2, [pc, #224]	; (8005970 <HAL_I2S_Init+0x274>)
 8005890:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a37      	ldr	r2, [pc, #220]	; (8005974 <HAL_I2S_Init+0x278>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d101      	bne.n	80058a0 <HAL_I2S_Init+0x1a4>
 800589c:	4b36      	ldr	r3, [pc, #216]	; (8005978 <HAL_I2S_Init+0x27c>)
 800589e:	e001      	b.n	80058a4 <HAL_I2S_Init+0x1a8>
 80058a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6812      	ldr	r2, [r2, #0]
 80058aa:	4932      	ldr	r1, [pc, #200]	; (8005974 <HAL_I2S_Init+0x278>)
 80058ac:	428a      	cmp	r2, r1
 80058ae:	d101      	bne.n	80058b4 <HAL_I2S_Init+0x1b8>
 80058b0:	4a31      	ldr	r2, [pc, #196]	; (8005978 <HAL_I2S_Init+0x27c>)
 80058b2:	e001      	b.n	80058b8 <HAL_I2S_Init+0x1bc>
 80058b4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80058b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80058bc:	f023 030f 	bic.w	r3, r3, #15
 80058c0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a2b      	ldr	r2, [pc, #172]	; (8005974 <HAL_I2S_Init+0x278>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d101      	bne.n	80058d0 <HAL_I2S_Init+0x1d4>
 80058cc:	4b2a      	ldr	r3, [pc, #168]	; (8005978 <HAL_I2S_Init+0x27c>)
 80058ce:	e001      	b.n	80058d4 <HAL_I2S_Init+0x1d8>
 80058d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058d4:	2202      	movs	r2, #2
 80058d6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a25      	ldr	r2, [pc, #148]	; (8005974 <HAL_I2S_Init+0x278>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d101      	bne.n	80058e6 <HAL_I2S_Init+0x1ea>
 80058e2:	4b25      	ldr	r3, [pc, #148]	; (8005978 <HAL_I2S_Init+0x27c>)
 80058e4:	e001      	b.n	80058ea <HAL_I2S_Init+0x1ee>
 80058e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058f6:	d003      	beq.n	8005900 <HAL_I2S_Init+0x204>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d103      	bne.n	8005908 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005900:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005904:	613b      	str	r3, [r7, #16]
 8005906:	e001      	b.n	800590c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005908:	2300      	movs	r3, #0
 800590a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005916:	4313      	orrs	r3, r2
 8005918:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005920:	4313      	orrs	r3, r2
 8005922:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800592a:	4313      	orrs	r3, r2
 800592c:	b29a      	uxth	r2, r3
 800592e:	897b      	ldrh	r3, [r7, #10]
 8005930:	4313      	orrs	r3, r2
 8005932:	b29b      	uxth	r3, r3
 8005934:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005938:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a0d      	ldr	r2, [pc, #52]	; (8005974 <HAL_I2S_Init+0x278>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d101      	bne.n	8005948 <HAL_I2S_Init+0x24c>
 8005944:	4b0c      	ldr	r3, [pc, #48]	; (8005978 <HAL_I2S_Init+0x27c>)
 8005946:	e001      	b.n	800594c <HAL_I2S_Init+0x250>
 8005948:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800594c:	897a      	ldrh	r2, [r7, #10]
 800594e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3720      	adds	r7, #32
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	08005a73 	.word	0x08005a73
 800596c:	cccccccd 	.word	0xcccccccd
 8005970:	08005b89 	.word	0x08005b89
 8005974:	40003800 	.word	0x40003800
 8005978:	40003400 	.word	0x40003400

0800597c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	881a      	ldrh	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	1c9a      	adds	r2, r3, #2
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059da:	b29b      	uxth	r3, r3
 80059dc:	3b01      	subs	r3, #1
 80059de:	b29a      	uxth	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10e      	bne.n	8005a0c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059fc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7ff ffb8 	bl	800597c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005a0c:	bf00      	nop
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a26:	b292      	uxth	r2, r2
 8005a28:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2e:	1c9a      	adds	r2, r3, #2
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10e      	bne.n	8005a6a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a5a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7ff ff93 	bl	8005990 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005a6a:	bf00      	nop
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b086      	sub	sp, #24
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d13a      	bne.n	8005b04 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d109      	bne.n	8005aac <I2S_IRQHandler+0x3a>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa2:	2b40      	cmp	r3, #64	; 0x40
 8005aa4:	d102      	bne.n	8005aac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7ff ffb4 	bl	8005a14 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab2:	2b40      	cmp	r3, #64	; 0x40
 8005ab4:	d126      	bne.n	8005b04 <I2S_IRQHandler+0x92>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f003 0320 	and.w	r3, r3, #32
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	d11f      	bne.n	8005b04 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ad2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	613b      	str	r3, [r7, #16]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	613b      	str	r3, [r7, #16]
 8005ae8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af6:	f043 0202 	orr.w	r2, r3, #2
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7ff ff50 	bl	80059a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b03      	cmp	r3, #3
 8005b0e:	d136      	bne.n	8005b7e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d109      	bne.n	8005b2e <I2S_IRQHandler+0xbc>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b24:	2b80      	cmp	r3, #128	; 0x80
 8005b26:	d102      	bne.n	8005b2e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7ff ff45 	bl	80059b8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f003 0308 	and.w	r3, r3, #8
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d122      	bne.n	8005b7e <I2S_IRQHandler+0x10c>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b20      	cmp	r3, #32
 8005b44:	d11b      	bne.n	8005b7e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b54:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b70:	f043 0204 	orr.w	r2, r3, #4
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7ff ff13 	bl	80059a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b7e:	bf00      	nop
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a92      	ldr	r2, [pc, #584]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d101      	bne.n	8005ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005ba2:	4b92      	ldr	r3, [pc, #584]	; (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ba4:	e001      	b.n	8005baa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005ba6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a8b      	ldr	r2, [pc, #556]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d101      	bne.n	8005bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005bc0:	4b8a      	ldr	r3, [pc, #552]	; (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005bc2:	e001      	b.n	8005bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005bc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bd4:	d004      	beq.n	8005be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f040 8099 	bne.w	8005d12 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d107      	bne.n	8005bfa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f925 	bl	8005e44 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d107      	bne.n	8005c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f9c8 	bl	8005fa4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1a:	2b40      	cmp	r3, #64	; 0x40
 8005c1c:	d13a      	bne.n	8005c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f003 0320 	and.w	r3, r3, #32
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d035      	beq.n	8005c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a6e      	ldr	r2, [pc, #440]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d101      	bne.n	8005c36 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005c32:	4b6e      	ldr	r3, [pc, #440]	; (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c34:	e001      	b.n	8005c3a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005c36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4969      	ldr	r1, [pc, #420]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c42:	428b      	cmp	r3, r1
 8005c44:	d101      	bne.n	8005c4a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005c46:	4b69      	ldr	r3, [pc, #420]	; (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c48:	e001      	b.n	8005c4e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005c4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c52:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005c64:	2300      	movs	r3, #0
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c86:	f043 0202 	orr.w	r2, r3, #2
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7ff fe88 	bl	80059a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b08      	cmp	r3, #8
 8005c9c:	f040 80c3 	bne.w	8005e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f003 0320 	and.w	r3, r3, #32
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 80bd 	beq.w	8005e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005cba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a49      	ldr	r2, [pc, #292]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d101      	bne.n	8005cca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005cc6:	4b49      	ldr	r3, [pc, #292]	; (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005cc8:	e001      	b.n	8005cce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005cca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4944      	ldr	r1, [pc, #272]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005cd6:	428b      	cmp	r3, r1
 8005cd8:	d101      	bne.n	8005cde <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005cda:	4b44      	ldr	r3, [pc, #272]	; (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005cdc:	e001      	b.n	8005ce2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005cde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ce2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ce6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005ce8:	2300      	movs	r3, #0
 8005cea:	60bb      	str	r3, [r7, #8]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	60bb      	str	r3, [r7, #8]
 8005cf4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d02:	f043 0204 	orr.w	r2, r3, #4
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7ff fe4a 	bl	80059a4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005d10:	e089      	b.n	8005e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d107      	bne.n	8005d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f8be 	bl	8005ea8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d107      	bne.n	8005d46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f8fd 	bl	8005f40 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4c:	2b40      	cmp	r3, #64	; 0x40
 8005d4e:	d12f      	bne.n	8005db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f003 0320 	and.w	r3, r3, #32
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d02a      	beq.n	8005db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d68:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a1e      	ldr	r2, [pc, #120]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d101      	bne.n	8005d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005d74:	4b1d      	ldr	r3, [pc, #116]	; (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d76:	e001      	b.n	8005d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005d78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4919      	ldr	r1, [pc, #100]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d84:	428b      	cmp	r3, r1
 8005d86:	d101      	bne.n	8005d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005d88:	4b18      	ldr	r3, [pc, #96]	; (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d8a:	e001      	b.n	8005d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005d8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d94:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da2:	f043 0202 	orr.w	r2, r3, #2
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff fdfa 	bl	80059a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	f003 0308 	and.w	r3, r3, #8
 8005db6:	2b08      	cmp	r3, #8
 8005db8:	d136      	bne.n	8005e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d031      	beq.n	8005e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a07      	ldr	r2, [pc, #28]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d101      	bne.n	8005dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005dce:	4b07      	ldr	r3, [pc, #28]	; (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005dd0:	e001      	b.n	8005dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005dd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4902      	ldr	r1, [pc, #8]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005dde:	428b      	cmp	r3, r1
 8005de0:	d106      	bne.n	8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005de2:	4b02      	ldr	r3, [pc, #8]	; (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005de4:	e006      	b.n	8005df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005de6:	bf00      	nop
 8005de8:	40003800 	.word	0x40003800
 8005dec:	40003400 	.word	0x40003400
 8005df0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005df4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005df8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e08:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e16:	f043 0204 	orr.w	r2, r3, #4
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff fdc0 	bl	80059a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e24:	e000      	b.n	8005e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e26:	bf00      	nop
}
 8005e28:	bf00      	nop
 8005e2a:	3720      	adds	r7, #32
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	1c99      	adds	r1, r3, #2
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6251      	str	r1, [r2, #36]	; 0x24
 8005e56:	881a      	ldrh	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d113      	bne.n	8005e9e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e84:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d106      	bne.n	8005e9e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f7ff ffc9 	bl	8005e30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e9e:	bf00      	nop
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	1c99      	adds	r1, r3, #2
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6251      	str	r1, [r2, #36]	; 0x24
 8005eba:	8819      	ldrh	r1, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a1d      	ldr	r2, [pc, #116]	; (8005f38 <I2SEx_TxISR_I2SExt+0x90>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d101      	bne.n	8005eca <I2SEx_TxISR_I2SExt+0x22>
 8005ec6:	4b1d      	ldr	r3, [pc, #116]	; (8005f3c <I2SEx_TxISR_I2SExt+0x94>)
 8005ec8:	e001      	b.n	8005ece <I2SEx_TxISR_I2SExt+0x26>
 8005eca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ece:	460a      	mov	r2, r1
 8005ed0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d121      	bne.n	8005f2e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a12      	ldr	r2, [pc, #72]	; (8005f38 <I2SEx_TxISR_I2SExt+0x90>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d101      	bne.n	8005ef8 <I2SEx_TxISR_I2SExt+0x50>
 8005ef4:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <I2SEx_TxISR_I2SExt+0x94>)
 8005ef6:	e001      	b.n	8005efc <I2SEx_TxISR_I2SExt+0x54>
 8005ef8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	490d      	ldr	r1, [pc, #52]	; (8005f38 <I2SEx_TxISR_I2SExt+0x90>)
 8005f04:	428b      	cmp	r3, r1
 8005f06:	d101      	bne.n	8005f0c <I2SEx_TxISR_I2SExt+0x64>
 8005f08:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <I2SEx_TxISR_I2SExt+0x94>)
 8005f0a:	e001      	b.n	8005f10 <I2SEx_TxISR_I2SExt+0x68>
 8005f0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f14:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d106      	bne.n	8005f2e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff ff81 	bl	8005e30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f2e:	bf00      	nop
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	40003800 	.word	0x40003800
 8005f3c:	40003400 	.word	0x40003400

08005f40 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68d8      	ldr	r0, [r3, #12]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f52:	1c99      	adds	r1, r3, #2
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005f58:	b282      	uxth	r2, r0
 8005f5a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d113      	bne.n	8005f9c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f82:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d106      	bne.n	8005f9c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7ff ff4a 	bl	8005e30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f9c:	bf00      	nop
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a20      	ldr	r2, [pc, #128]	; (8006034 <I2SEx_RxISR_I2SExt+0x90>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d101      	bne.n	8005fba <I2SEx_RxISR_I2SExt+0x16>
 8005fb6:	4b20      	ldr	r3, [pc, #128]	; (8006038 <I2SEx_RxISR_I2SExt+0x94>)
 8005fb8:	e001      	b.n	8005fbe <I2SEx_RxISR_I2SExt+0x1a>
 8005fba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fbe:	68d8      	ldr	r0, [r3, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	1c99      	adds	r1, r3, #2
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005fca:	b282      	uxth	r2, r0
 8005fcc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d121      	bne.n	800602a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a12      	ldr	r2, [pc, #72]	; (8006034 <I2SEx_RxISR_I2SExt+0x90>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d101      	bne.n	8005ff4 <I2SEx_RxISR_I2SExt+0x50>
 8005ff0:	4b11      	ldr	r3, [pc, #68]	; (8006038 <I2SEx_RxISR_I2SExt+0x94>)
 8005ff2:	e001      	b.n	8005ff8 <I2SEx_RxISR_I2SExt+0x54>
 8005ff4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	490d      	ldr	r1, [pc, #52]	; (8006034 <I2SEx_RxISR_I2SExt+0x90>)
 8006000:	428b      	cmp	r3, r1
 8006002:	d101      	bne.n	8006008 <I2SEx_RxISR_I2SExt+0x64>
 8006004:	4b0c      	ldr	r3, [pc, #48]	; (8006038 <I2SEx_RxISR_I2SExt+0x94>)
 8006006:	e001      	b.n	800600c <I2SEx_RxISR_I2SExt+0x68>
 8006008:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800600c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006010:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006016:	b29b      	uxth	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	d106      	bne.n	800602a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff ff03 	bl	8005e30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800602a:	bf00      	nop
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	40003800 	.word	0x40003800
 8006038:	40003400 	.word	0x40003400

0800603c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e267      	b.n	800651e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d075      	beq.n	8006146 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800605a:	4b88      	ldr	r3, [pc, #544]	; (800627c <HAL_RCC_OscConfig+0x240>)
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f003 030c 	and.w	r3, r3, #12
 8006062:	2b04      	cmp	r3, #4
 8006064:	d00c      	beq.n	8006080 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006066:	4b85      	ldr	r3, [pc, #532]	; (800627c <HAL_RCC_OscConfig+0x240>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800606e:	2b08      	cmp	r3, #8
 8006070:	d112      	bne.n	8006098 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006072:	4b82      	ldr	r3, [pc, #520]	; (800627c <HAL_RCC_OscConfig+0x240>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800607a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800607e:	d10b      	bne.n	8006098 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006080:	4b7e      	ldr	r3, [pc, #504]	; (800627c <HAL_RCC_OscConfig+0x240>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d05b      	beq.n	8006144 <HAL_RCC_OscConfig+0x108>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d157      	bne.n	8006144 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e242      	b.n	800651e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060a0:	d106      	bne.n	80060b0 <HAL_RCC_OscConfig+0x74>
 80060a2:	4b76      	ldr	r3, [pc, #472]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a75      	ldr	r2, [pc, #468]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80060a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ac:	6013      	str	r3, [r2, #0]
 80060ae:	e01d      	b.n	80060ec <HAL_RCC_OscConfig+0xb0>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060b8:	d10c      	bne.n	80060d4 <HAL_RCC_OscConfig+0x98>
 80060ba:	4b70      	ldr	r3, [pc, #448]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a6f      	ldr	r2, [pc, #444]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80060c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	4b6d      	ldr	r3, [pc, #436]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a6c      	ldr	r2, [pc, #432]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80060cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	e00b      	b.n	80060ec <HAL_RCC_OscConfig+0xb0>
 80060d4:	4b69      	ldr	r3, [pc, #420]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a68      	ldr	r2, [pc, #416]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80060da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060de:	6013      	str	r3, [r2, #0]
 80060e0:	4b66      	ldr	r3, [pc, #408]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a65      	ldr	r2, [pc, #404]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80060e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d013      	beq.n	800611c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f4:	f7fd faa8 	bl	8003648 <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060fa:	e008      	b.n	800610e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060fc:	f7fd faa4 	bl	8003648 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b64      	cmp	r3, #100	; 0x64
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e207      	b.n	800651e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800610e:	4b5b      	ldr	r3, [pc, #364]	; (800627c <HAL_RCC_OscConfig+0x240>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0f0      	beq.n	80060fc <HAL_RCC_OscConfig+0xc0>
 800611a:	e014      	b.n	8006146 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800611c:	f7fd fa94 	bl	8003648 <HAL_GetTick>
 8006120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006122:	e008      	b.n	8006136 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006124:	f7fd fa90 	bl	8003648 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b64      	cmp	r3, #100	; 0x64
 8006130:	d901      	bls.n	8006136 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e1f3      	b.n	800651e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006136:	4b51      	ldr	r3, [pc, #324]	; (800627c <HAL_RCC_OscConfig+0x240>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1f0      	bne.n	8006124 <HAL_RCC_OscConfig+0xe8>
 8006142:	e000      	b.n	8006146 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d063      	beq.n	800621a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006152:	4b4a      	ldr	r3, [pc, #296]	; (800627c <HAL_RCC_OscConfig+0x240>)
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 030c 	and.w	r3, r3, #12
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00b      	beq.n	8006176 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800615e:	4b47      	ldr	r3, [pc, #284]	; (800627c <HAL_RCC_OscConfig+0x240>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006166:	2b08      	cmp	r3, #8
 8006168:	d11c      	bne.n	80061a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800616a:	4b44      	ldr	r3, [pc, #272]	; (800627c <HAL_RCC_OscConfig+0x240>)
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d116      	bne.n	80061a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006176:	4b41      	ldr	r3, [pc, #260]	; (800627c <HAL_RCC_OscConfig+0x240>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d005      	beq.n	800618e <HAL_RCC_OscConfig+0x152>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d001      	beq.n	800618e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e1c7      	b.n	800651e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800618e:	4b3b      	ldr	r3, [pc, #236]	; (800627c <HAL_RCC_OscConfig+0x240>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	00db      	lsls	r3, r3, #3
 800619c:	4937      	ldr	r1, [pc, #220]	; (800627c <HAL_RCC_OscConfig+0x240>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061a2:	e03a      	b.n	800621a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d020      	beq.n	80061ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061ac:	4b34      	ldr	r3, [pc, #208]	; (8006280 <HAL_RCC_OscConfig+0x244>)
 80061ae:	2201      	movs	r2, #1
 80061b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b2:	f7fd fa49 	bl	8003648 <HAL_GetTick>
 80061b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061b8:	e008      	b.n	80061cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061ba:	f7fd fa45 	bl	8003648 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d901      	bls.n	80061cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e1a8      	b.n	800651e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061cc:	4b2b      	ldr	r3, [pc, #172]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0f0      	beq.n	80061ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061d8:	4b28      	ldr	r3, [pc, #160]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	00db      	lsls	r3, r3, #3
 80061e6:	4925      	ldr	r1, [pc, #148]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	600b      	str	r3, [r1, #0]
 80061ec:	e015      	b.n	800621a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061ee:	4b24      	ldr	r3, [pc, #144]	; (8006280 <HAL_RCC_OscConfig+0x244>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f4:	f7fd fa28 	bl	8003648 <HAL_GetTick>
 80061f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061fa:	e008      	b.n	800620e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061fc:	f7fd fa24 	bl	8003648 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b02      	cmp	r3, #2
 8006208:	d901      	bls.n	800620e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e187      	b.n	800651e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800620e:	4b1b      	ldr	r3, [pc, #108]	; (800627c <HAL_RCC_OscConfig+0x240>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1f0      	bne.n	80061fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d036      	beq.n	8006294 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d016      	beq.n	800625c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800622e:	4b15      	ldr	r3, [pc, #84]	; (8006284 <HAL_RCC_OscConfig+0x248>)
 8006230:	2201      	movs	r2, #1
 8006232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006234:	f7fd fa08 	bl	8003648 <HAL_GetTick>
 8006238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800623a:	e008      	b.n	800624e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800623c:	f7fd fa04 	bl	8003648 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	2b02      	cmp	r3, #2
 8006248:	d901      	bls.n	800624e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e167      	b.n	800651e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800624e:	4b0b      	ldr	r3, [pc, #44]	; (800627c <HAL_RCC_OscConfig+0x240>)
 8006250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0f0      	beq.n	800623c <HAL_RCC_OscConfig+0x200>
 800625a:	e01b      	b.n	8006294 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800625c:	4b09      	ldr	r3, [pc, #36]	; (8006284 <HAL_RCC_OscConfig+0x248>)
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006262:	f7fd f9f1 	bl	8003648 <HAL_GetTick>
 8006266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006268:	e00e      	b.n	8006288 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800626a:	f7fd f9ed 	bl	8003648 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	2b02      	cmp	r3, #2
 8006276:	d907      	bls.n	8006288 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e150      	b.n	800651e <HAL_RCC_OscConfig+0x4e2>
 800627c:	40023800 	.word	0x40023800
 8006280:	42470000 	.word	0x42470000
 8006284:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006288:	4b88      	ldr	r3, [pc, #544]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 800628a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1ea      	bne.n	800626a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0304 	and.w	r3, r3, #4
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 8097 	beq.w	80063d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062a2:	2300      	movs	r3, #0
 80062a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062a6:	4b81      	ldr	r3, [pc, #516]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10f      	bne.n	80062d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062b2:	2300      	movs	r3, #0
 80062b4:	60bb      	str	r3, [r7, #8]
 80062b6:	4b7d      	ldr	r3, [pc, #500]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	4a7c      	ldr	r2, [pc, #496]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 80062bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062c0:	6413      	str	r3, [r2, #64]	; 0x40
 80062c2:	4b7a      	ldr	r3, [pc, #488]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ca:	60bb      	str	r3, [r7, #8]
 80062cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062ce:	2301      	movs	r3, #1
 80062d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062d2:	4b77      	ldr	r3, [pc, #476]	; (80064b0 <HAL_RCC_OscConfig+0x474>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d118      	bne.n	8006310 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062de:	4b74      	ldr	r3, [pc, #464]	; (80064b0 <HAL_RCC_OscConfig+0x474>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a73      	ldr	r2, [pc, #460]	; (80064b0 <HAL_RCC_OscConfig+0x474>)
 80062e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062ea:	f7fd f9ad 	bl	8003648 <HAL_GetTick>
 80062ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062f0:	e008      	b.n	8006304 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062f2:	f7fd f9a9 	bl	8003648 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e10c      	b.n	800651e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006304:	4b6a      	ldr	r3, [pc, #424]	; (80064b0 <HAL_RCC_OscConfig+0x474>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0f0      	beq.n	80062f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d106      	bne.n	8006326 <HAL_RCC_OscConfig+0x2ea>
 8006318:	4b64      	ldr	r3, [pc, #400]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 800631a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631c:	4a63      	ldr	r2, [pc, #396]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 800631e:	f043 0301 	orr.w	r3, r3, #1
 8006322:	6713      	str	r3, [r2, #112]	; 0x70
 8006324:	e01c      	b.n	8006360 <HAL_RCC_OscConfig+0x324>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	2b05      	cmp	r3, #5
 800632c:	d10c      	bne.n	8006348 <HAL_RCC_OscConfig+0x30c>
 800632e:	4b5f      	ldr	r3, [pc, #380]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 8006330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006332:	4a5e      	ldr	r2, [pc, #376]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 8006334:	f043 0304 	orr.w	r3, r3, #4
 8006338:	6713      	str	r3, [r2, #112]	; 0x70
 800633a:	4b5c      	ldr	r3, [pc, #368]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 800633c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633e:	4a5b      	ldr	r2, [pc, #364]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 8006340:	f043 0301 	orr.w	r3, r3, #1
 8006344:	6713      	str	r3, [r2, #112]	; 0x70
 8006346:	e00b      	b.n	8006360 <HAL_RCC_OscConfig+0x324>
 8006348:	4b58      	ldr	r3, [pc, #352]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 800634a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634c:	4a57      	ldr	r2, [pc, #348]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 800634e:	f023 0301 	bic.w	r3, r3, #1
 8006352:	6713      	str	r3, [r2, #112]	; 0x70
 8006354:	4b55      	ldr	r3, [pc, #340]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 8006356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006358:	4a54      	ldr	r2, [pc, #336]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 800635a:	f023 0304 	bic.w	r3, r3, #4
 800635e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d015      	beq.n	8006394 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006368:	f7fd f96e 	bl	8003648 <HAL_GetTick>
 800636c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800636e:	e00a      	b.n	8006386 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006370:	f7fd f96a 	bl	8003648 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	f241 3288 	movw	r2, #5000	; 0x1388
 800637e:	4293      	cmp	r3, r2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e0cb      	b.n	800651e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006386:	4b49      	ldr	r3, [pc, #292]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 8006388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0ee      	beq.n	8006370 <HAL_RCC_OscConfig+0x334>
 8006392:	e014      	b.n	80063be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006394:	f7fd f958 	bl	8003648 <HAL_GetTick>
 8006398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800639a:	e00a      	b.n	80063b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800639c:	f7fd f954 	bl	8003648 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e0b5      	b.n	800651e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063b2:	4b3e      	ldr	r3, [pc, #248]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 80063b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1ee      	bne.n	800639c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063be:	7dfb      	ldrb	r3, [r7, #23]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d105      	bne.n	80063d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063c4:	4b39      	ldr	r3, [pc, #228]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 80063c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c8:	4a38      	ldr	r2, [pc, #224]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 80063ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 80a1 	beq.w	800651c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063da:	4b34      	ldr	r3, [pc, #208]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 030c 	and.w	r3, r3, #12
 80063e2:	2b08      	cmp	r3, #8
 80063e4:	d05c      	beq.n	80064a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d141      	bne.n	8006472 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ee:	4b31      	ldr	r3, [pc, #196]	; (80064b4 <HAL_RCC_OscConfig+0x478>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f4:	f7fd f928 	bl	8003648 <HAL_GetTick>
 80063f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063fa:	e008      	b.n	800640e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063fc:	f7fd f924 	bl	8003648 <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	2b02      	cmp	r3, #2
 8006408:	d901      	bls.n	800640e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e087      	b.n	800651e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800640e:	4b27      	ldr	r3, [pc, #156]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1f0      	bne.n	80063fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	69da      	ldr	r2, [r3, #28]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	431a      	orrs	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	019b      	lsls	r3, r3, #6
 800642a:	431a      	orrs	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006430:	085b      	lsrs	r3, r3, #1
 8006432:	3b01      	subs	r3, #1
 8006434:	041b      	lsls	r3, r3, #16
 8006436:	431a      	orrs	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643c:	061b      	lsls	r3, r3, #24
 800643e:	491b      	ldr	r1, [pc, #108]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 8006440:	4313      	orrs	r3, r2
 8006442:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006444:	4b1b      	ldr	r3, [pc, #108]	; (80064b4 <HAL_RCC_OscConfig+0x478>)
 8006446:	2201      	movs	r2, #1
 8006448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800644a:	f7fd f8fd 	bl	8003648 <HAL_GetTick>
 800644e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006450:	e008      	b.n	8006464 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006452:	f7fd f8f9 	bl	8003648 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d901      	bls.n	8006464 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e05c      	b.n	800651e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006464:	4b11      	ldr	r3, [pc, #68]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d0f0      	beq.n	8006452 <HAL_RCC_OscConfig+0x416>
 8006470:	e054      	b.n	800651c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006472:	4b10      	ldr	r3, [pc, #64]	; (80064b4 <HAL_RCC_OscConfig+0x478>)
 8006474:	2200      	movs	r2, #0
 8006476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006478:	f7fd f8e6 	bl	8003648 <HAL_GetTick>
 800647c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800647e:	e008      	b.n	8006492 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006480:	f7fd f8e2 	bl	8003648 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b02      	cmp	r3, #2
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e045      	b.n	800651e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006492:	4b06      	ldr	r3, [pc, #24]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1f0      	bne.n	8006480 <HAL_RCC_OscConfig+0x444>
 800649e:	e03d      	b.n	800651c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d107      	bne.n	80064b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e038      	b.n	800651e <HAL_RCC_OscConfig+0x4e2>
 80064ac:	40023800 	.word	0x40023800
 80064b0:	40007000 	.word	0x40007000
 80064b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064b8:	4b1b      	ldr	r3, [pc, #108]	; (8006528 <HAL_RCC_OscConfig+0x4ec>)
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d028      	beq.n	8006518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d121      	bne.n	8006518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064de:	429a      	cmp	r2, r3
 80064e0:	d11a      	bne.n	8006518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80064e8:	4013      	ands	r3, r2
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80064ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d111      	bne.n	8006518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fe:	085b      	lsrs	r3, r3, #1
 8006500:	3b01      	subs	r3, #1
 8006502:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006504:	429a      	cmp	r2, r3
 8006506:	d107      	bne.n	8006518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006512:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006514:	429a      	cmp	r2, r3
 8006516:	d001      	beq.n	800651c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e000      	b.n	800651e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	40023800 	.word	0x40023800

0800652c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e0cc      	b.n	80066da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006540:	4b68      	ldr	r3, [pc, #416]	; (80066e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0307 	and.w	r3, r3, #7
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d90c      	bls.n	8006568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800654e:	4b65      	ldr	r3, [pc, #404]	; (80066e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	b2d2      	uxtb	r2, r2
 8006554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006556:	4b63      	ldr	r3, [pc, #396]	; (80066e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0307 	and.w	r3, r3, #7
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	429a      	cmp	r2, r3
 8006562:	d001      	beq.n	8006568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e0b8      	b.n	80066da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d020      	beq.n	80065b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b00      	cmp	r3, #0
 800657e:	d005      	beq.n	800658c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006580:	4b59      	ldr	r3, [pc, #356]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	4a58      	ldr	r2, [pc, #352]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006586:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800658a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0308 	and.w	r3, r3, #8
 8006594:	2b00      	cmp	r3, #0
 8006596:	d005      	beq.n	80065a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006598:	4b53      	ldr	r3, [pc, #332]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	4a52      	ldr	r2, [pc, #328]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 800659e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80065a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065a4:	4b50      	ldr	r3, [pc, #320]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	494d      	ldr	r1, [pc, #308]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d044      	beq.n	800664c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d107      	bne.n	80065da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ca:	4b47      	ldr	r3, [pc, #284]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d119      	bne.n	800660a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e07f      	b.n	80066da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d003      	beq.n	80065ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d107      	bne.n	80065fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ea:	4b3f      	ldr	r3, [pc, #252]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d109      	bne.n	800660a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e06f      	b.n	80066da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065fa:	4b3b      	ldr	r3, [pc, #236]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e067      	b.n	80066da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800660a:	4b37      	ldr	r3, [pc, #220]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f023 0203 	bic.w	r2, r3, #3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	4934      	ldr	r1, [pc, #208]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006618:	4313      	orrs	r3, r2
 800661a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800661c:	f7fd f814 	bl	8003648 <HAL_GetTick>
 8006620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006622:	e00a      	b.n	800663a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006624:	f7fd f810 	bl	8003648 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006632:	4293      	cmp	r3, r2
 8006634:	d901      	bls.n	800663a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e04f      	b.n	80066da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800663a:	4b2b      	ldr	r3, [pc, #172]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f003 020c 	and.w	r2, r3, #12
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	429a      	cmp	r2, r3
 800664a:	d1eb      	bne.n	8006624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800664c:	4b25      	ldr	r3, [pc, #148]	; (80066e4 <HAL_RCC_ClockConfig+0x1b8>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0307 	and.w	r3, r3, #7
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d20c      	bcs.n	8006674 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800665a:	4b22      	ldr	r3, [pc, #136]	; (80066e4 <HAL_RCC_ClockConfig+0x1b8>)
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006662:	4b20      	ldr	r3, [pc, #128]	; (80066e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0307 	and.w	r3, r3, #7
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	429a      	cmp	r2, r3
 800666e:	d001      	beq.n	8006674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e032      	b.n	80066da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b00      	cmp	r3, #0
 800667e:	d008      	beq.n	8006692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006680:	4b19      	ldr	r3, [pc, #100]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	4916      	ldr	r1, [pc, #88]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 800668e:	4313      	orrs	r3, r2
 8006690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0308 	and.w	r3, r3, #8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d009      	beq.n	80066b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800669e:	4b12      	ldr	r3, [pc, #72]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	00db      	lsls	r3, r3, #3
 80066ac:	490e      	ldr	r1, [pc, #56]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80066b2:	f000 f821 	bl	80066f8 <HAL_RCC_GetSysClockFreq>
 80066b6:	4602      	mov	r2, r0
 80066b8:	4b0b      	ldr	r3, [pc, #44]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	091b      	lsrs	r3, r3, #4
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	490a      	ldr	r1, [pc, #40]	; (80066ec <HAL_RCC_ClockConfig+0x1c0>)
 80066c4:	5ccb      	ldrb	r3, [r1, r3]
 80066c6:	fa22 f303 	lsr.w	r3, r2, r3
 80066ca:	4a09      	ldr	r2, [pc, #36]	; (80066f0 <HAL_RCC_ClockConfig+0x1c4>)
 80066cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80066ce:	4b09      	ldr	r3, [pc, #36]	; (80066f4 <HAL_RCC_ClockConfig+0x1c8>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7fc ff74 	bl	80035c0 <HAL_InitTick>

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	40023c00 	.word	0x40023c00
 80066e8:	40023800 	.word	0x40023800
 80066ec:	0800a494 	.word	0x0800a494
 80066f0:	20000000 	.word	0x20000000
 80066f4:	20000004 	.word	0x20000004

080066f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066fc:	b094      	sub	sp, #80	; 0x50
 80066fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006700:	2300      	movs	r3, #0
 8006702:	647b      	str	r3, [r7, #68]	; 0x44
 8006704:	2300      	movs	r3, #0
 8006706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006708:	2300      	movs	r3, #0
 800670a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006710:	4b79      	ldr	r3, [pc, #484]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f003 030c 	and.w	r3, r3, #12
 8006718:	2b08      	cmp	r3, #8
 800671a:	d00d      	beq.n	8006738 <HAL_RCC_GetSysClockFreq+0x40>
 800671c:	2b08      	cmp	r3, #8
 800671e:	f200 80e1 	bhi.w	80068e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006722:	2b00      	cmp	r3, #0
 8006724:	d002      	beq.n	800672c <HAL_RCC_GetSysClockFreq+0x34>
 8006726:	2b04      	cmp	r3, #4
 8006728:	d003      	beq.n	8006732 <HAL_RCC_GetSysClockFreq+0x3a>
 800672a:	e0db      	b.n	80068e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800672c:	4b73      	ldr	r3, [pc, #460]	; (80068fc <HAL_RCC_GetSysClockFreq+0x204>)
 800672e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006730:	e0db      	b.n	80068ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006732:	4b73      	ldr	r3, [pc, #460]	; (8006900 <HAL_RCC_GetSysClockFreq+0x208>)
 8006734:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006736:	e0d8      	b.n	80068ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006738:	4b6f      	ldr	r3, [pc, #444]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006740:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006742:	4b6d      	ldr	r3, [pc, #436]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d063      	beq.n	8006816 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800674e:	4b6a      	ldr	r3, [pc, #424]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	099b      	lsrs	r3, r3, #6
 8006754:	2200      	movs	r2, #0
 8006756:	63bb      	str	r3, [r7, #56]	; 0x38
 8006758:	63fa      	str	r2, [r7, #60]	; 0x3c
 800675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006760:	633b      	str	r3, [r7, #48]	; 0x30
 8006762:	2300      	movs	r3, #0
 8006764:	637b      	str	r3, [r7, #52]	; 0x34
 8006766:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800676a:	4622      	mov	r2, r4
 800676c:	462b      	mov	r3, r5
 800676e:	f04f 0000 	mov.w	r0, #0
 8006772:	f04f 0100 	mov.w	r1, #0
 8006776:	0159      	lsls	r1, r3, #5
 8006778:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800677c:	0150      	lsls	r0, r2, #5
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	4621      	mov	r1, r4
 8006784:	1a51      	subs	r1, r2, r1
 8006786:	6139      	str	r1, [r7, #16]
 8006788:	4629      	mov	r1, r5
 800678a:	eb63 0301 	sbc.w	r3, r3, r1
 800678e:	617b      	str	r3, [r7, #20]
 8006790:	f04f 0200 	mov.w	r2, #0
 8006794:	f04f 0300 	mov.w	r3, #0
 8006798:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800679c:	4659      	mov	r1, fp
 800679e:	018b      	lsls	r3, r1, #6
 80067a0:	4651      	mov	r1, sl
 80067a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067a6:	4651      	mov	r1, sl
 80067a8:	018a      	lsls	r2, r1, #6
 80067aa:	4651      	mov	r1, sl
 80067ac:	ebb2 0801 	subs.w	r8, r2, r1
 80067b0:	4659      	mov	r1, fp
 80067b2:	eb63 0901 	sbc.w	r9, r3, r1
 80067b6:	f04f 0200 	mov.w	r2, #0
 80067ba:	f04f 0300 	mov.w	r3, #0
 80067be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067ca:	4690      	mov	r8, r2
 80067cc:	4699      	mov	r9, r3
 80067ce:	4623      	mov	r3, r4
 80067d0:	eb18 0303 	adds.w	r3, r8, r3
 80067d4:	60bb      	str	r3, [r7, #8]
 80067d6:	462b      	mov	r3, r5
 80067d8:	eb49 0303 	adc.w	r3, r9, r3
 80067dc:	60fb      	str	r3, [r7, #12]
 80067de:	f04f 0200 	mov.w	r2, #0
 80067e2:	f04f 0300 	mov.w	r3, #0
 80067e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80067ea:	4629      	mov	r1, r5
 80067ec:	024b      	lsls	r3, r1, #9
 80067ee:	4621      	mov	r1, r4
 80067f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80067f4:	4621      	mov	r1, r4
 80067f6:	024a      	lsls	r2, r1, #9
 80067f8:	4610      	mov	r0, r2
 80067fa:	4619      	mov	r1, r3
 80067fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067fe:	2200      	movs	r2, #0
 8006800:	62bb      	str	r3, [r7, #40]	; 0x28
 8006802:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006804:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006808:	f7f9 fd32 	bl	8000270 <__aeabi_uldivmod>
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	4613      	mov	r3, r2
 8006812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006814:	e058      	b.n	80068c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006816:	4b38      	ldr	r3, [pc, #224]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	099b      	lsrs	r3, r3, #6
 800681c:	2200      	movs	r2, #0
 800681e:	4618      	mov	r0, r3
 8006820:	4611      	mov	r1, r2
 8006822:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006826:	623b      	str	r3, [r7, #32]
 8006828:	2300      	movs	r3, #0
 800682a:	627b      	str	r3, [r7, #36]	; 0x24
 800682c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006830:	4642      	mov	r2, r8
 8006832:	464b      	mov	r3, r9
 8006834:	f04f 0000 	mov.w	r0, #0
 8006838:	f04f 0100 	mov.w	r1, #0
 800683c:	0159      	lsls	r1, r3, #5
 800683e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006842:	0150      	lsls	r0, r2, #5
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4641      	mov	r1, r8
 800684a:	ebb2 0a01 	subs.w	sl, r2, r1
 800684e:	4649      	mov	r1, r9
 8006850:	eb63 0b01 	sbc.w	fp, r3, r1
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006860:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006864:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006868:	ebb2 040a 	subs.w	r4, r2, sl
 800686c:	eb63 050b 	sbc.w	r5, r3, fp
 8006870:	f04f 0200 	mov.w	r2, #0
 8006874:	f04f 0300 	mov.w	r3, #0
 8006878:	00eb      	lsls	r3, r5, #3
 800687a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800687e:	00e2      	lsls	r2, r4, #3
 8006880:	4614      	mov	r4, r2
 8006882:	461d      	mov	r5, r3
 8006884:	4643      	mov	r3, r8
 8006886:	18e3      	adds	r3, r4, r3
 8006888:	603b      	str	r3, [r7, #0]
 800688a:	464b      	mov	r3, r9
 800688c:	eb45 0303 	adc.w	r3, r5, r3
 8006890:	607b      	str	r3, [r7, #4]
 8006892:	f04f 0200 	mov.w	r2, #0
 8006896:	f04f 0300 	mov.w	r3, #0
 800689a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800689e:	4629      	mov	r1, r5
 80068a0:	028b      	lsls	r3, r1, #10
 80068a2:	4621      	mov	r1, r4
 80068a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068a8:	4621      	mov	r1, r4
 80068aa:	028a      	lsls	r2, r1, #10
 80068ac:	4610      	mov	r0, r2
 80068ae:	4619      	mov	r1, r3
 80068b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068b2:	2200      	movs	r2, #0
 80068b4:	61bb      	str	r3, [r7, #24]
 80068b6:	61fa      	str	r2, [r7, #28]
 80068b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068bc:	f7f9 fcd8 	bl	8000270 <__aeabi_uldivmod>
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4613      	mov	r3, r2
 80068c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80068c8:	4b0b      	ldr	r3, [pc, #44]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	0c1b      	lsrs	r3, r3, #16
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	3301      	adds	r3, #1
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80068d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068e2:	e002      	b.n	80068ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068e4:	4b05      	ldr	r3, [pc, #20]	; (80068fc <HAL_RCC_GetSysClockFreq+0x204>)
 80068e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3750      	adds	r7, #80	; 0x50
 80068f0:	46bd      	mov	sp, r7
 80068f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068f6:	bf00      	nop
 80068f8:	40023800 	.word	0x40023800
 80068fc:	00f42400 	.word	0x00f42400
 8006900:	007a1200 	.word	0x007a1200

08006904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006904:	b480      	push	{r7}
 8006906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006908:	4b03      	ldr	r3, [pc, #12]	; (8006918 <HAL_RCC_GetHCLKFreq+0x14>)
 800690a:	681b      	ldr	r3, [r3, #0]
}
 800690c:	4618      	mov	r0, r3
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	20000000 	.word	0x20000000

0800691c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006920:	f7ff fff0 	bl	8006904 <HAL_RCC_GetHCLKFreq>
 8006924:	4602      	mov	r2, r0
 8006926:	4b05      	ldr	r3, [pc, #20]	; (800693c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	0a9b      	lsrs	r3, r3, #10
 800692c:	f003 0307 	and.w	r3, r3, #7
 8006930:	4903      	ldr	r1, [pc, #12]	; (8006940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006932:	5ccb      	ldrb	r3, [r1, r3]
 8006934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006938:	4618      	mov	r0, r3
 800693a:	bd80      	pop	{r7, pc}
 800693c:	40023800 	.word	0x40023800
 8006940:	0800a4a4 	.word	0x0800a4a4

08006944 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	d105      	bne.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006968:	2b00      	cmp	r3, #0
 800696a:	d035      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800696c:	4b62      	ldr	r3, [pc, #392]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800696e:	2200      	movs	r2, #0
 8006970:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006972:	f7fc fe69 	bl	8003648 <HAL_GetTick>
 8006976:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006978:	e008      	b.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800697a:	f7fc fe65 	bl	8003648 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b02      	cmp	r3, #2
 8006986:	d901      	bls.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e0b0      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800698c:	4b5b      	ldr	r3, [pc, #364]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1f0      	bne.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	019a      	lsls	r2, r3, #6
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	071b      	lsls	r3, r3, #28
 80069a4:	4955      	ldr	r1, [pc, #340]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80069ac:	4b52      	ldr	r3, [pc, #328]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80069ae:	2201      	movs	r2, #1
 80069b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069b2:	f7fc fe49 	bl	8003648 <HAL_GetTick>
 80069b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069b8:	e008      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80069ba:	f7fc fe45 	bl	8003648 <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d901      	bls.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e090      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069cc:	4b4b      	ldr	r3, [pc, #300]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0f0      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 8083 	beq.w	8006aec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80069e6:	2300      	movs	r3, #0
 80069e8:	60fb      	str	r3, [r7, #12]
 80069ea:	4b44      	ldr	r3, [pc, #272]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ee:	4a43      	ldr	r2, [pc, #268]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069f4:	6413      	str	r3, [r2, #64]	; 0x40
 80069f6:	4b41      	ldr	r3, [pc, #260]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006a02:	4b3f      	ldr	r3, [pc, #252]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a3e      	ldr	r2, [pc, #248]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a0e:	f7fc fe1b 	bl	8003648 <HAL_GetTick>
 8006a12:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006a14:	e008      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006a16:	f7fc fe17 	bl	8003648 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d901      	bls.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e062      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006a28:	4b35      	ldr	r3, [pc, #212]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d0f0      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a34:	4b31      	ldr	r3, [pc, #196]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a3c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d02f      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d028      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a52:	4b2a      	ldr	r3, [pc, #168]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a5a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a5c:	4b29      	ldr	r3, [pc, #164]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006a5e:	2201      	movs	r2, #1
 8006a60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a62:	4b28      	ldr	r3, [pc, #160]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006a68:	4a24      	ldr	r2, [pc, #144]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a6e:	4b23      	ldr	r3, [pc, #140]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d114      	bne.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006a7a:	f7fc fde5 	bl	8003648 <HAL_GetTick>
 8006a7e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a80:	e00a      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a82:	f7fc fde1 	bl	8003648 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d901      	bls.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e02a      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a98:	4b18      	ldr	r3, [pc, #96]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0ee      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ab0:	d10d      	bne.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006ab2:	4b12      	ldr	r3, [pc, #72]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac6:	490d      	ldr	r1, [pc, #52]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	608b      	str	r3, [r1, #8]
 8006acc:	e005      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006ace:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	4a0a      	ldr	r2, [pc, #40]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ad4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006ad8:	6093      	str	r3, [r2, #8]
 8006ada:	4b08      	ldr	r3, [pc, #32]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006adc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ae6:	4905      	ldr	r1, [pc, #20]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3718      	adds	r7, #24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	42470068 	.word	0x42470068
 8006afc:	40023800 	.word	0x40023800
 8006b00:	40007000 	.word	0x40007000
 8006b04:	42470e40 	.word	0x42470e40

08006b08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006b14:	2300      	movs	r3, #0
 8006b16:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d13e      	bne.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006b26:	4b23      	ldr	r3, [pc, #140]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d12f      	bne.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006b3c:	4b1e      	ldr	r3, [pc, #120]	; (8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b3e:	617b      	str	r3, [r7, #20]
          break;
 8006b40:	e02f      	b.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006b42:	4b1c      	ldr	r3, [pc, #112]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b4e:	d108      	bne.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b50:	4b18      	ldr	r3, [pc, #96]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b58:	4a18      	ldr	r2, [pc, #96]	; (8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b5e:	613b      	str	r3, [r7, #16]
 8006b60:	e007      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b62:	4b14      	ldr	r3, [pc, #80]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b6a:	4a15      	ldr	r2, [pc, #84]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b70:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006b72:	4b10      	ldr	r3, [pc, #64]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b78:	099b      	lsrs	r3, r3, #6
 8006b7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	fb02 f303 	mul.w	r3, r2, r3
 8006b84:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006b86:	4b0b      	ldr	r3, [pc, #44]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b8c:	0f1b      	lsrs	r3, r3, #28
 8006b8e:	f003 0307 	and.w	r3, r3, #7
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b98:	617b      	str	r3, [r7, #20]
          break;
 8006b9a:	e002      	b.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	617b      	str	r3, [r7, #20]
          break;
 8006ba0:	bf00      	nop
        }
      }
      break;
 8006ba2:	bf00      	nop
    }
  }
  return frequency;
 8006ba4:	697b      	ldr	r3, [r7, #20]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	371c      	adds	r7, #28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	40023800 	.word	0x40023800
 8006bb8:	00bb8000 	.word	0x00bb8000
 8006bbc:	007a1200 	.word	0x007a1200
 8006bc0:	00f42400 	.word	0x00f42400

08006bc4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e01c      	b.n	8006c10 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	795b      	ldrb	r3, [r3, #5]
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d105      	bne.n	8006bec <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7fc fb58 	bl	800329c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f042 0204 	orr.w	r2, r2, #4
 8006c00:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	791b      	ldrb	r3, [r3, #4]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d101      	bne.n	8006c32 <HAL_RNG_GenerateRandomNumber+0x1a>
 8006c2e:	2302      	movs	r3, #2
 8006c30:	e044      	b.n	8006cbc <HAL_RNG_GenerateRandomNumber+0xa4>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	795b      	ldrb	r3, [r3, #5]
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d133      	bne.n	8006caa <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2202      	movs	r2, #2
 8006c46:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c48:	f7fc fcfe 	bl	8003648 <HAL_GetTick>
 8006c4c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006c4e:	e018      	b.n	8006c82 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006c50:	f7fc fcfa 	bl	8003648 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d911      	bls.n	8006c82 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d00a      	beq.n	8006c82 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2202      	movs	r2, #2
 8006c76:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e01c      	b.n	8006cbc <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d1df      	bne.n	8006c50 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689a      	ldr	r2, [r3, #8]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68da      	ldr	r2, [r3, #12]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	715a      	strb	r2, [r3, #5]
 8006ca8:	e004      	b.n	8006cb4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2204      	movs	r2, #4
 8006cae:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	711a      	strb	r2, [r3, #4]

  return status;
 8006cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b20      	cmp	r3, #32
 8006cdc:	d105      	bne.n	8006cea <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2210      	movs	r2, #16
 8006ce2:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	e00b      	b.n	8006d02 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf4:	2b40      	cmp	r3, #64	; 0x40
 8006cf6:	d104      	bne.n	8006d02 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2208      	movs	r2, #8
 8006cfc:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d10b      	bne.n	8006d20 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2204      	movs	r2, #4
 8006d0c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f839 	bl	8006d86 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8006d1c:	605a      	str	r2, [r3, #4]

    return;
 8006d1e:	e024      	b.n	8006d6a <HAL_RNG_IRQHandler+0xa6>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d11d      	bne.n	8006d6a <HAL_RNG_IRQHandler+0xa6>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0208 	bic.w	r2, r2, #8
 8006d3c:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	795b      	ldrb	r3, [r3, #5]
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d00b      	beq.n	8006d6a <HAL_RNG_IRQHandler+0xa6>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f803 	bl	8006d70 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8006d7a:	bf00      	nop
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	f107 001c 	add.w	r0, r7, #28
 8006da8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d122      	bne.n	8006df8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d105      	bne.n	8006dec <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f9bf 	bl	8007170 <USB_CoreReset>
 8006df2:	4603      	mov	r3, r0
 8006df4:	73fb      	strb	r3, [r7, #15]
 8006df6:	e01a      	b.n	8006e2e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f9b3 	bl	8007170 <USB_CoreReset>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d106      	bne.n	8006e22 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	639a      	str	r2, [r3, #56]	; 0x38
 8006e20:	e005      	b.n	8006e2e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d10b      	bne.n	8006e4c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f043 0206 	orr.w	r2, r3, #6
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f043 0220 	orr.w	r2, r3, #32
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e58:	b004      	add	sp, #16
 8006e5a:	4770      	bx	lr

08006e5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f043 0201 	orr.w	r2, r3, #1
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b083      	sub	sp, #12
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f023 0201 	bic.w	r2, r3, #1
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ebc:	78fb      	ldrb	r3, [r7, #3]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d115      	bne.n	8006eee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ece:	2001      	movs	r0, #1
 8006ed0:	f7fc fbc6 	bl	8003660 <HAL_Delay>
      ms++;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f939 	bl	8007152 <USB_GetMode>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d01e      	beq.n	8006f24 <USB_SetCurrentMode+0x84>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b31      	cmp	r3, #49	; 0x31
 8006eea:	d9f0      	bls.n	8006ece <USB_SetCurrentMode+0x2e>
 8006eec:	e01a      	b.n	8006f24 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006eee:	78fb      	ldrb	r3, [r7, #3]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d115      	bne.n	8006f20 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f00:	2001      	movs	r0, #1
 8006f02:	f7fc fbad 	bl	8003660 <HAL_Delay>
      ms++;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f920 	bl	8007152 <USB_GetMode>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d005      	beq.n	8006f24 <USB_SetCurrentMode+0x84>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2b31      	cmp	r3, #49	; 0x31
 8006f1c:	d9f0      	bls.n	8006f00 <USB_SetCurrentMode+0x60>
 8006f1e:	e001      	b.n	8006f24 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e005      	b.n	8006f30 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2b32      	cmp	r3, #50	; 0x32
 8006f28:	d101      	bne.n	8006f2e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e000      	b.n	8006f30 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4a13      	ldr	r2, [pc, #76]	; (8006f9c <USB_FlushTxFifo+0x64>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d901      	bls.n	8006f58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e01b      	b.n	8006f90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	daf2      	bge.n	8006f46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	019b      	lsls	r3, r3, #6
 8006f68:	f043 0220 	orr.w	r2, r3, #32
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3301      	adds	r3, #1
 8006f74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	4a08      	ldr	r2, [pc, #32]	; (8006f9c <USB_FlushTxFifo+0x64>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d901      	bls.n	8006f82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e006      	b.n	8006f90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	f003 0320 	and.w	r3, r3, #32
 8006f8a:	2b20      	cmp	r3, #32
 8006f8c:	d0f0      	beq.n	8006f70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	00030d40 	.word	0x00030d40

08006fa0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	4a11      	ldr	r2, [pc, #68]	; (8006ffc <USB_FlushRxFifo+0x5c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d901      	bls.n	8006fbe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e018      	b.n	8006ff0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	daf2      	bge.n	8006fac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2210      	movs	r2, #16
 8006fce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	4a08      	ldr	r2, [pc, #32]	; (8006ffc <USB_FlushRxFifo+0x5c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d901      	bls.n	8006fe2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e006      	b.n	8006ff0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	f003 0310 	and.w	r3, r3, #16
 8006fea:	2b10      	cmp	r3, #16
 8006fec:	d0f0      	beq.n	8006fd0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	00030d40 	.word	0x00030d40

08007000 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007000:	b480      	push	{r7}
 8007002:	b089      	sub	sp, #36	; 0x24
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	4611      	mov	r1, r2
 800700c:	461a      	mov	r2, r3
 800700e:	460b      	mov	r3, r1
 8007010:	71fb      	strb	r3, [r7, #7]
 8007012:	4613      	mov	r3, r2
 8007014:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800701e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007022:	2b00      	cmp	r3, #0
 8007024:	d123      	bne.n	800706e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007026:	88bb      	ldrh	r3, [r7, #4]
 8007028:	3303      	adds	r3, #3
 800702a:	089b      	lsrs	r3, r3, #2
 800702c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800702e:	2300      	movs	r3, #0
 8007030:	61bb      	str	r3, [r7, #24]
 8007032:	e018      	b.n	8007066 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	031a      	lsls	r2, r3, #12
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	4413      	add	r3, r2
 800703c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007040:	461a      	mov	r2, r3
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	3301      	adds	r3, #1
 800704c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	3301      	adds	r3, #1
 8007052:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	3301      	adds	r3, #1
 8007058:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	3301      	adds	r3, #1
 800705e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	3301      	adds	r3, #1
 8007064:	61bb      	str	r3, [r7, #24]
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	429a      	cmp	r2, r3
 800706c:	d3e2      	bcc.n	8007034 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3724      	adds	r7, #36	; 0x24
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800707c:	b480      	push	{r7}
 800707e:	b08b      	sub	sp, #44	; 0x2c
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	4613      	mov	r3, r2
 8007088:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007092:	88fb      	ldrh	r3, [r7, #6]
 8007094:	089b      	lsrs	r3, r3, #2
 8007096:	b29b      	uxth	r3, r3
 8007098:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800709a:	88fb      	ldrh	r3, [r7, #6]
 800709c:	f003 0303 	and.w	r3, r3, #3
 80070a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80070a2:	2300      	movs	r3, #0
 80070a4:	623b      	str	r3, [r7, #32]
 80070a6:	e014      	b.n	80070d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	3301      	adds	r3, #1
 80070b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070bc:	3301      	adds	r3, #1
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	3301      	adds	r3, #1
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c8:	3301      	adds	r3, #1
 80070ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	3301      	adds	r3, #1
 80070d0:	623b      	str	r3, [r7, #32]
 80070d2:	6a3a      	ldr	r2, [r7, #32]
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d3e6      	bcc.n	80070a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80070da:	8bfb      	ldrh	r3, [r7, #30]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d01e      	beq.n	800711e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ea:	461a      	mov	r2, r3
 80070ec:	f107 0310 	add.w	r3, r7, #16
 80070f0:	6812      	ldr	r2, [r2, #0]
 80070f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007100:	b2da      	uxtb	r2, r3
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	701a      	strb	r2, [r3, #0]
      i++;
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	3301      	adds	r3, #1
 800710a:	623b      	str	r3, [r7, #32]
      pDest++;
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	3301      	adds	r3, #1
 8007110:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007112:	8bfb      	ldrh	r3, [r7, #30]
 8007114:	3b01      	subs	r3, #1
 8007116:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007118:	8bfb      	ldrh	r3, [r7, #30]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1ea      	bne.n	80070f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800711e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007120:	4618      	mov	r0, r3
 8007122:	372c      	adds	r7, #44	; 0x2c
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	4013      	ands	r3, r2
 8007142:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007144:	68fb      	ldr	r3, [r7, #12]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007152:	b480      	push	{r7}
 8007154:	b083      	sub	sp, #12
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	f003 0301 	and.w	r3, r3, #1
}
 8007162:	4618      	mov	r0, r3
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
	...

08007170 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	3301      	adds	r3, #1
 8007180:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	4a13      	ldr	r2, [pc, #76]	; (80071d4 <USB_CoreReset+0x64>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d901      	bls.n	800718e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e01b      	b.n	80071c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	2b00      	cmp	r3, #0
 8007194:	daf2      	bge.n	800717c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	f043 0201 	orr.w	r2, r3, #1
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3301      	adds	r3, #1
 80071aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4a09      	ldr	r2, [pc, #36]	; (80071d4 <USB_CoreReset+0x64>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d901      	bls.n	80071b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e006      	b.n	80071c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d0f0      	beq.n	80071a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	00030d40 	.word	0x00030d40

080071d8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071d8:	b084      	sub	sp, #16
 80071da:	b580      	push	{r7, lr}
 80071dc:	b086      	sub	sp, #24
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80071e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071f8:	461a      	mov	r2, r3
 80071fa:	2300      	movs	r3, #0
 80071fc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007202:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800722a:	2b00      	cmp	r3, #0
 800722c:	d018      	beq.n	8007260 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800722e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007230:	2b01      	cmp	r3, #1
 8007232:	d10a      	bne.n	800724a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007242:	f043 0304 	orr.w	r3, r3, #4
 8007246:	6013      	str	r3, [r2, #0]
 8007248:	e014      	b.n	8007274 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007258:	f023 0304 	bic.w	r3, r3, #4
 800725c:	6013      	str	r3, [r2, #0]
 800725e:	e009      	b.n	8007274 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800726e:	f023 0304 	bic.w	r3, r3, #4
 8007272:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007274:	2110      	movs	r1, #16
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7ff fe5e 	bl	8006f38 <USB_FlushTxFifo>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7ff fe8a 	bl	8006fa0 <USB_FlushRxFifo>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d001      	beq.n	8007296 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007296:	2300      	movs	r3, #0
 8007298:	613b      	str	r3, [r7, #16]
 800729a:	e015      	b.n	80072c8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a8:	461a      	mov	r2, r3
 80072aa:	f04f 33ff 	mov.w	r3, #4294967295
 80072ae:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072bc:	461a      	mov	r2, r3
 80072be:	2300      	movs	r3, #0
 80072c0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	3301      	adds	r3, #1
 80072c6:	613b      	str	r3, [r7, #16]
 80072c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d3e5      	bcc.n	800729c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f04f 32ff 	mov.w	r2, #4294967295
 80072dc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00b      	beq.n	8007302 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072f0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a13      	ldr	r2, [pc, #76]	; (8007344 <USB_HostInit+0x16c>)
 80072f6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a13      	ldr	r2, [pc, #76]	; (8007348 <USB_HostInit+0x170>)
 80072fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007300:	e009      	b.n	8007316 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2280      	movs	r2, #128	; 0x80
 8007306:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a10      	ldr	r2, [pc, #64]	; (800734c <USB_HostInit+0x174>)
 800730c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a0f      	ldr	r2, [pc, #60]	; (8007350 <USB_HostInit+0x178>)
 8007312:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	2b00      	cmp	r3, #0
 800731a:	d105      	bne.n	8007328 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	f043 0210 	orr.w	r2, r3, #16
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	699a      	ldr	r2, [r3, #24]
 800732c:	4b09      	ldr	r3, [pc, #36]	; (8007354 <USB_HostInit+0x17c>)
 800732e:	4313      	orrs	r3, r2
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007334:	7dfb      	ldrb	r3, [r7, #23]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3718      	adds	r7, #24
 800733a:	46bd      	mov	sp, r7
 800733c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007340:	b004      	add	sp, #16
 8007342:	4770      	bx	lr
 8007344:	01000200 	.word	0x01000200
 8007348:	00e00300 	.word	0x00e00300
 800734c:	00600080 	.word	0x00600080
 8007350:	004000e0 	.word	0x004000e0
 8007354:	a3200008 	.word	0xa3200008

08007358 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	460b      	mov	r3, r1
 8007362:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007376:	f023 0303 	bic.w	r3, r3, #3
 800737a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	78fb      	ldrb	r3, [r7, #3]
 8007386:	f003 0303 	and.w	r3, r3, #3
 800738a:	68f9      	ldr	r1, [r7, #12]
 800738c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007390:	4313      	orrs	r3, r2
 8007392:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007394:	78fb      	ldrb	r3, [r7, #3]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d107      	bne.n	80073aa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073a0:	461a      	mov	r2, r3
 80073a2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80073a6:	6053      	str	r3, [r2, #4]
 80073a8:	e009      	b.n	80073be <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80073aa:	78fb      	ldrb	r3, [r7, #3]
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d106      	bne.n	80073be <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073b6:	461a      	mov	r2, r3
 80073b8:	f241 7370 	movw	r3, #6000	; 0x1770
 80073bc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80073dc:	2300      	movs	r3, #0
 80073de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80073f0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d109      	bne.n	8007410 <USB_DriveVbus+0x44>
 80073fc:	78fb      	ldrb	r3, [r7, #3]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d106      	bne.n	8007410 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800740a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800740e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800741a:	d109      	bne.n	8007430 <USB_DriveVbus+0x64>
 800741c:	78fb      	ldrb	r3, [r7, #3]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d106      	bne.n	8007430 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800742a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800742e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800743e:	b480      	push	{r7}
 8007440:	b085      	sub	sp, #20
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800744a:	2300      	movs	r3, #0
 800744c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	0c5b      	lsrs	r3, r3, #17
 800745c:	f003 0303 	and.w	r3, r3, #3
}
 8007460:	4618      	mov	r0, r3
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	b29b      	uxth	r3, r3
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
	...

08007490 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b088      	sub	sp, #32
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	4608      	mov	r0, r1
 800749a:	4611      	mov	r1, r2
 800749c:	461a      	mov	r2, r3
 800749e:	4603      	mov	r3, r0
 80074a0:	70fb      	strb	r3, [r7, #3]
 80074a2:	460b      	mov	r3, r1
 80074a4:	70bb      	strb	r3, [r7, #2]
 80074a6:	4613      	mov	r3, r2
 80074a8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80074b2:	78fb      	ldrb	r3, [r7, #3]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074be:	461a      	mov	r2, r3
 80074c0:	f04f 33ff 	mov.w	r3, #4294967295
 80074c4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80074c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80074ca:	2b03      	cmp	r3, #3
 80074cc:	d87e      	bhi.n	80075cc <USB_HC_Init+0x13c>
 80074ce:	a201      	add	r2, pc, #4	; (adr r2, 80074d4 <USB_HC_Init+0x44>)
 80074d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d4:	080074e5 	.word	0x080074e5
 80074d8:	0800758f 	.word	0x0800758f
 80074dc:	080074e5 	.word	0x080074e5
 80074e0:	08007551 	.word	0x08007551
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80074e4:	78fb      	ldrb	r3, [r7, #3]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f0:	461a      	mov	r2, r3
 80074f2:	f240 439d 	movw	r3, #1181	; 0x49d
 80074f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80074f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	da10      	bge.n	8007522 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007500:	78fb      	ldrb	r3, [r7, #3]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	4413      	add	r3, r2
 8007508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	78fa      	ldrb	r2, [r7, #3]
 8007510:	0151      	lsls	r1, r2, #5
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	440a      	add	r2, r1
 8007516:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800751a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800751e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007520:	e057      	b.n	80075d2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800752a:	2b00      	cmp	r3, #0
 800752c:	d051      	beq.n	80075d2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800752e:	78fb      	ldrb	r3, [r7, #3]
 8007530:	015a      	lsls	r2, r3, #5
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	4413      	add	r3, r2
 8007536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	78fa      	ldrb	r2, [r7, #3]
 800753e:	0151      	lsls	r1, r2, #5
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	440a      	add	r2, r1
 8007544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007548:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800754c:	60d3      	str	r3, [r2, #12]
      break;
 800754e:	e040      	b.n	80075d2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007550:	78fb      	ldrb	r3, [r7, #3]
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	4413      	add	r3, r2
 8007558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800755c:	461a      	mov	r2, r3
 800755e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007562:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007564:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007568:	2b00      	cmp	r3, #0
 800756a:	da34      	bge.n	80075d6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800756c:	78fb      	ldrb	r3, [r7, #3]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	4413      	add	r3, r2
 8007574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	78fa      	ldrb	r2, [r7, #3]
 800757c:	0151      	lsls	r1, r2, #5
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	440a      	add	r2, r1
 8007582:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800758a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800758c:	e023      	b.n	80075d6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800758e:	78fb      	ldrb	r3, [r7, #3]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	4413      	add	r3, r2
 8007596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800759a:	461a      	mov	r2, r3
 800759c:	f240 2325 	movw	r3, #549	; 0x225
 80075a0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80075a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	da17      	bge.n	80075da <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80075aa:	78fb      	ldrb	r3, [r7, #3]
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	78fa      	ldrb	r2, [r7, #3]
 80075ba:	0151      	lsls	r1, r2, #5
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	440a      	add	r2, r1
 80075c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075c4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80075c8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80075ca:	e006      	b.n	80075da <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	77fb      	strb	r3, [r7, #31]
      break;
 80075d0:	e004      	b.n	80075dc <USB_HC_Init+0x14c>
      break;
 80075d2:	bf00      	nop
 80075d4:	e002      	b.n	80075dc <USB_HC_Init+0x14c>
      break;
 80075d6:	bf00      	nop
 80075d8:	e000      	b.n	80075dc <USB_HC_Init+0x14c>
      break;
 80075da:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80075dc:	78fb      	ldrb	r3, [r7, #3]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	78fa      	ldrb	r2, [r7, #3]
 80075ec:	0151      	lsls	r1, r2, #5
 80075ee:	693a      	ldr	r2, [r7, #16]
 80075f0:	440a      	add	r2, r1
 80075f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075f6:	f043 0302 	orr.w	r3, r3, #2
 80075fa:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007602:	699a      	ldr	r2, [r3, #24]
 8007604:	78fb      	ldrb	r3, [r7, #3]
 8007606:	f003 030f 	and.w	r3, r3, #15
 800760a:	2101      	movs	r1, #1
 800760c:	fa01 f303 	lsl.w	r3, r1, r3
 8007610:	6939      	ldr	r1, [r7, #16]
 8007612:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007616:	4313      	orrs	r3, r2
 8007618:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007626:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800762a:	2b00      	cmp	r3, #0
 800762c:	da03      	bge.n	8007636 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800762e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007632:	61bb      	str	r3, [r7, #24]
 8007634:	e001      	b.n	800763a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007636:	2300      	movs	r3, #0
 8007638:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff feff 	bl	800743e <USB_GetHostSpeed>
 8007640:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007642:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007646:	2b02      	cmp	r3, #2
 8007648:	d106      	bne.n	8007658 <USB_HC_Init+0x1c8>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2b02      	cmp	r3, #2
 800764e:	d003      	beq.n	8007658 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007654:	617b      	str	r3, [r7, #20]
 8007656:	e001      	b.n	800765c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007658:	2300      	movs	r3, #0
 800765a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800765c:	787b      	ldrb	r3, [r7, #1]
 800765e:	059b      	lsls	r3, r3, #22
 8007660:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007664:	78bb      	ldrb	r3, [r7, #2]
 8007666:	02db      	lsls	r3, r3, #11
 8007668:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800766c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800766e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007672:	049b      	lsls	r3, r3, #18
 8007674:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007678:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800767a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800767c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007680:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007686:	78fb      	ldrb	r3, [r7, #3]
 8007688:	0159      	lsls	r1, r3, #5
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	440b      	add	r3, r1
 800768e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007692:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007698:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800769a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d003      	beq.n	80076aa <USB_HC_Init+0x21a>
 80076a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d10f      	bne.n	80076ca <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80076aa:	78fb      	ldrb	r3, [r7, #3]
 80076ac:	015a      	lsls	r2, r3, #5
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	78fa      	ldrb	r2, [r7, #3]
 80076ba:	0151      	lsls	r1, r2, #5
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	440a      	add	r2, r1
 80076c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076c8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80076ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3720      	adds	r7, #32
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b08c      	sub	sp, #48	; 0x30
 80076d8:	af02      	add	r7, sp, #8
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	4613      	mov	r3, r2
 80076e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	785b      	ldrb	r3, [r3, #1]
 80076ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80076ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076f0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d02d      	beq.n	800775a <USB_HC_StartXfer+0x86>
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	791b      	ldrb	r3, [r3, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d129      	bne.n	800775a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007706:	79fb      	ldrb	r3, [r7, #7]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d117      	bne.n	800773c <USB_HC_StartXfer+0x68>
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	79db      	ldrb	r3, [r3, #7]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d003      	beq.n	800771c <USB_HC_StartXfer+0x48>
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	79db      	ldrb	r3, [r3, #7]
 8007718:	2b02      	cmp	r3, #2
 800771a:	d10f      	bne.n	800773c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	015a      	lsls	r2, r3, #5
 8007720:	6a3b      	ldr	r3, [r7, #32]
 8007722:	4413      	add	r3, r2
 8007724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	69fa      	ldr	r2, [r7, #28]
 800772c:	0151      	lsls	r1, r2, #5
 800772e:	6a3a      	ldr	r2, [r7, #32]
 8007730:	440a      	add	r2, r1
 8007732:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800773c:	79fb      	ldrb	r3, [r7, #7]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10b      	bne.n	800775a <USB_HC_StartXfer+0x86>
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	795b      	ldrb	r3, [r3, #5]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d107      	bne.n	800775a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	785b      	ldrb	r3, [r3, #1]
 800774e:	4619      	mov	r1, r3
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 fa0f 	bl	8007b74 <USB_DoPing>
      return HAL_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	e0f8      	b.n	800794c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d018      	beq.n	8007794 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	8912      	ldrh	r2, [r2, #8]
 800776a:	4413      	add	r3, r2
 800776c:	3b01      	subs	r3, #1
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	8912      	ldrh	r2, [r2, #8]
 8007772:	fbb3 f3f2 	udiv	r3, r3, r2
 8007776:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007778:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800777a:	8b7b      	ldrh	r3, [r7, #26]
 800777c:	429a      	cmp	r2, r3
 800777e:	d90b      	bls.n	8007798 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007780:	8b7b      	ldrh	r3, [r7, #26]
 8007782:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007784:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	8912      	ldrh	r2, [r2, #8]
 800778a:	fb03 f202 	mul.w	r2, r3, r2
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	611a      	str	r2, [r3, #16]
 8007792:	e001      	b.n	8007798 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007794:	2301      	movs	r3, #1
 8007796:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	78db      	ldrb	r3, [r3, #3]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d007      	beq.n	80077b0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80077a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	8912      	ldrh	r2, [r2, #8]
 80077a6:	fb03 f202 	mul.w	r2, r3, r2
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	611a      	str	r2, [r3, #16]
 80077ae:	e003      	b.n	80077b8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	695a      	ldr	r2, [r3, #20]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80077c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80077c2:	04d9      	lsls	r1, r3, #19
 80077c4:	4b63      	ldr	r3, [pc, #396]	; (8007954 <USB_HC_StartXfer+0x280>)
 80077c6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80077c8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	7a9b      	ldrb	r3, [r3, #10]
 80077ce:	075b      	lsls	r3, r3, #29
 80077d0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80077d4:	69f9      	ldr	r1, [r7, #28]
 80077d6:	0148      	lsls	r0, r1, #5
 80077d8:	6a39      	ldr	r1, [r7, #32]
 80077da:	4401      	add	r1, r0
 80077dc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80077e0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80077e2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80077e4:	79fb      	ldrb	r3, [r7, #7]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d009      	beq.n	80077fe <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	68d9      	ldr	r1, [r3, #12]
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077fa:	460a      	mov	r2, r1
 80077fc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	bf0c      	ite	eq
 800780e:	2301      	moveq	r3, #1
 8007810:	2300      	movne	r3, #0
 8007812:	b2db      	uxtb	r3, r3
 8007814:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	015a      	lsls	r2, r3, #5
 800781a:	6a3b      	ldr	r3, [r7, #32]
 800781c:	4413      	add	r3, r2
 800781e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	69fa      	ldr	r2, [r7, #28]
 8007826:	0151      	lsls	r1, r2, #5
 8007828:	6a3a      	ldr	r2, [r7, #32]
 800782a:	440a      	add	r2, r1
 800782c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007830:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007834:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	015a      	lsls	r2, r3, #5
 800783a:	6a3b      	ldr	r3, [r7, #32]
 800783c:	4413      	add	r3, r2
 800783e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	7e7b      	ldrb	r3, [r7, #25]
 8007846:	075b      	lsls	r3, r3, #29
 8007848:	69f9      	ldr	r1, [r7, #28]
 800784a:	0148      	lsls	r0, r1, #5
 800784c:	6a39      	ldr	r1, [r7, #32]
 800784e:	4401      	add	r1, r0
 8007850:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007854:	4313      	orrs	r3, r2
 8007856:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	4413      	add	r3, r2
 8007860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800786e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	78db      	ldrb	r3, [r3, #3]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d004      	beq.n	8007882 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800787e:	613b      	str	r3, [r7, #16]
 8007880:	e003      	b.n	800788a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007888:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007890:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	015a      	lsls	r2, r3, #5
 8007896:	6a3b      	ldr	r3, [r7, #32]
 8007898:	4413      	add	r3, r2
 800789a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800789e:	461a      	mov	r2, r3
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	e04e      	b.n	800794c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	78db      	ldrb	r3, [r3, #3]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d149      	bne.n	800794a <USB_HC_StartXfer+0x276>
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d045      	beq.n	800794a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	79db      	ldrb	r3, [r3, #7]
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d830      	bhi.n	8007928 <USB_HC_StartXfer+0x254>
 80078c6:	a201      	add	r2, pc, #4	; (adr r2, 80078cc <USB_HC_StartXfer+0x1f8>)
 80078c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078cc:	080078dd 	.word	0x080078dd
 80078d0:	08007901 	.word	0x08007901
 80078d4:	080078dd 	.word	0x080078dd
 80078d8:	08007901 	.word	0x08007901
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	3303      	adds	r3, #3
 80078e2:	089b      	lsrs	r3, r3, #2
 80078e4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80078e6:	8afa      	ldrh	r2, [r7, #22]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d91c      	bls.n	800792c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	f043 0220 	orr.w	r2, r3, #32
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	619a      	str	r2, [r3, #24]
        }
        break;
 80078fe:	e015      	b.n	800792c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	695b      	ldr	r3, [r3, #20]
 8007904:	3303      	adds	r3, #3
 8007906:	089b      	lsrs	r3, r3, #2
 8007908:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800790a:	8afa      	ldrh	r2, [r7, #22]
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	b29b      	uxth	r3, r3
 8007916:	429a      	cmp	r2, r3
 8007918:	d90a      	bls.n	8007930 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	619a      	str	r2, [r3, #24]
        }
        break;
 8007926:	e003      	b.n	8007930 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007928:	bf00      	nop
 800792a:	e002      	b.n	8007932 <USB_HC_StartXfer+0x25e>
        break;
 800792c:	bf00      	nop
 800792e:	e000      	b.n	8007932 <USB_HC_StartXfer+0x25e>
        break;
 8007930:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	68d9      	ldr	r1, [r3, #12]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	785a      	ldrb	r2, [r3, #1]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	b29b      	uxth	r3, r3
 8007940:	2000      	movs	r0, #0
 8007942:	9000      	str	r0, [sp, #0]
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f7ff fb5b 	bl	8007000 <USB_WritePacket>
  }

  return HAL_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3728      	adds	r7, #40	; 0x28
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	1ff80000 	.word	0x1ff80000

08007958 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800796a:	695b      	ldr	r3, [r3, #20]
 800796c:	b29b      	uxth	r3, r3
}
 800796e:	4618      	mov	r0, r3
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr

0800797a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800797a:	b480      	push	{r7}
 800797c:	b089      	sub	sp, #36	; 0x24
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	460b      	mov	r3, r1
 8007984:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800798a:	78fb      	ldrb	r3, [r7, #3]
 800798c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800798e:	2300      	movs	r3, #0
 8007990:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	015a      	lsls	r2, r3, #5
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	4413      	add	r3, r2
 800799a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	0c9b      	lsrs	r3, r3, #18
 80079a2:	f003 0303 	and.w	r3, r3, #3
 80079a6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	015a      	lsls	r2, r3, #5
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	4413      	add	r3, r2
 80079b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	0fdb      	lsrs	r3, r3, #31
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f003 0320 	and.w	r3, r3, #32
 80079c6:	2b20      	cmp	r3, #32
 80079c8:	d104      	bne.n	80079d4 <USB_HC_Halt+0x5a>
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80079d0:	2300      	movs	r3, #0
 80079d2:	e0c8      	b.n	8007b66 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d002      	beq.n	80079e0 <USB_HC_Halt+0x66>
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d163      	bne.n	8007aa8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	015a      	lsls	r2, r3, #5
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	4413      	add	r3, r2
 80079e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	69ba      	ldr	r2, [r7, #24]
 80079f0:	0151      	lsls	r1, r2, #5
 80079f2:	69fa      	ldr	r2, [r7, #28]
 80079f4:	440a      	add	r2, r1
 80079f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079fe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f003 0320 	and.w	r3, r3, #32
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f040 80ab 	bne.w	8007b64 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d133      	bne.n	8007a82 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	69ba      	ldr	r2, [r7, #24]
 8007a2a:	0151      	lsls	r1, r2, #5
 8007a2c:	69fa      	ldr	r2, [r7, #28]
 8007a2e:	440a      	add	r2, r1
 8007a30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a38:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	69ba      	ldr	r2, [r7, #24]
 8007a4a:	0151      	lsls	r1, r2, #5
 8007a4c:	69fa      	ldr	r2, [r7, #28]
 8007a4e:	440a      	add	r2, r1
 8007a50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a58:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a66:	d81d      	bhi.n	8007aa4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	015a      	lsls	r2, r3, #5
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a7e:	d0ec      	beq.n	8007a5a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a80:	e070      	b.n	8007b64 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	0151      	lsls	r1, r2, #5
 8007a94:	69fa      	ldr	r2, [r7, #28]
 8007a96:	440a      	add	r2, r1
 8007a98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007aa0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007aa2:	e05f      	b.n	8007b64 <USB_HC_Halt+0x1ea>
            break;
 8007aa4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007aa6:	e05d      	b.n	8007b64 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	69ba      	ldr	r2, [r7, #24]
 8007ab8:	0151      	lsls	r1, r2, #5
 8007aba:	69fa      	ldr	r2, [r7, #28]
 8007abc:	440a      	add	r2, r1
 8007abe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ac2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ac6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d133      	bne.n	8007b40 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	015a      	lsls	r2, r3, #5
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	4413      	add	r3, r2
 8007ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	0151      	lsls	r1, r2, #5
 8007aea:	69fa      	ldr	r2, [r7, #28]
 8007aec:	440a      	add	r2, r1
 8007aee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007af2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007af6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	0151      	lsls	r1, r2, #5
 8007b0a:	69fa      	ldr	r2, [r7, #28]
 8007b0c:	440a      	add	r2, r1
 8007b0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b16:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b24:	d81d      	bhi.n	8007b62 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b3c:	d0ec      	beq.n	8007b18 <USB_HC_Halt+0x19e>
 8007b3e:	e011      	b.n	8007b64 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	0151      	lsls	r1, r2, #5
 8007b52:	69fa      	ldr	r2, [r7, #28]
 8007b54:	440a      	add	r2, r1
 8007b56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	e000      	b.n	8007b64 <USB_HC_Halt+0x1ea>
          break;
 8007b62:	bf00      	nop
    }
  }

  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3724      	adds	r7, #36	; 0x24
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
	...

08007b74 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b087      	sub	sp, #28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007b84:	78fb      	ldrb	r3, [r7, #3]
 8007b86:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	04da      	lsls	r2, r3, #19
 8007b90:	4b15      	ldr	r3, [pc, #84]	; (8007be8 <USB_DoPing+0x74>)
 8007b92:	4013      	ands	r3, r2
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	0151      	lsls	r1, r2, #5
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	440a      	add	r2, r1
 8007b9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ba0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ba4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bbc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bc4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	015a      	lsls	r2, r3, #5
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	4413      	add	r3, r2
 8007bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	371c      	adds	r7, #28
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	1ff80000 	.word	0x1ff80000

08007bec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b088      	sub	sp, #32
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff f93c 	bl	8006e7e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c06:	2110      	movs	r1, #16
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7ff f995 	bl	8006f38 <USB_FlushTxFifo>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f7ff f9c1 	bl	8006fa0 <USB_FlushRxFifo>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007c28:	2300      	movs	r3, #0
 8007c2a:	61bb      	str	r3, [r7, #24]
 8007c2c:	e01f      	b.n	8007c6e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	015a      	lsls	r2, r3, #5
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	4413      	add	r3, r2
 8007c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c44:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c4c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c54:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	015a      	lsls	r2, r3, #5
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c62:	461a      	mov	r2, r3
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	61bb      	str	r3, [r7, #24]
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	2b0f      	cmp	r3, #15
 8007c72:	d9dc      	bls.n	8007c2e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007c74:	2300      	movs	r3, #0
 8007c76:	61bb      	str	r3, [r7, #24]
 8007c78:	e034      	b.n	8007ce4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	015a      	lsls	r2, r3, #5
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	4413      	add	r3, r2
 8007c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c90:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c98:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ca0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	015a      	lsls	r2, r3, #5
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	4413      	add	r3, r2
 8007caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cae:	461a      	mov	r2, r3
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cc0:	d80c      	bhi.n	8007cdc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	015a      	lsls	r2, r3, #5
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	4413      	add	r3, r2
 8007cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cd8:	d0ec      	beq.n	8007cb4 <USB_StopHost+0xc8>
 8007cda:	e000      	b.n	8007cde <USB_StopHost+0xf2>
        break;
 8007cdc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	61bb      	str	r3, [r7, #24]
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	2b0f      	cmp	r3, #15
 8007ce8:	d9c7      	bls.n	8007c7a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8007cfe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7ff f8ab 	bl	8006e5c <USB_EnableGlobalInt>

  return ret;
 8007d06:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3720      	adds	r7, #32
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007d10:	b590      	push	{r4, r7, lr}
 8007d12:	b089      	sub	sp, #36	; 0x24
 8007d14:	af04      	add	r7, sp, #16
 8007d16:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007d18:	2301      	movs	r3, #1
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	2102      	movs	r1, #2
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fc66 	bl	80085f0 <USBH_FindInterface>
 8007d24:	4603      	mov	r3, r0
 8007d26:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	2bff      	cmp	r3, #255	; 0xff
 8007d2c:	d002      	beq.n	8007d34 <USBH_CDC_InterfaceInit+0x24>
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d901      	bls.n	8007d38 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007d34:	2302      	movs	r3, #2
 8007d36:	e13d      	b.n	8007fb4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fc3b 	bl	80085b8 <USBH_SelectInterface>
 8007d42:	4603      	mov	r3, r0
 8007d44:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007d46:	7bbb      	ldrb	r3, [r7, #14]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	e131      	b.n	8007fb4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007d56:	2050      	movs	r0, #80	; 0x50
 8007d58:	f001 fb12 	bl	8009380 <malloc>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d66:	69db      	ldr	r3, [r3, #28]
 8007d68:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007d70:	2302      	movs	r3, #2
 8007d72:	e11f      	b.n	8007fb4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007d74:	2250      	movs	r2, #80	; 0x50
 8007d76:	2100      	movs	r1, #0
 8007d78:	68b8      	ldr	r0, [r7, #8]
 8007d7a:	f001 fb11 	bl	80093a0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007d7e:	7bfb      	ldrb	r3, [r7, #15]
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	211a      	movs	r1, #26
 8007d84:	fb01 f303 	mul.w	r3, r1, r3
 8007d88:	4413      	add	r3, r2
 8007d8a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	b25b      	sxtb	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	da15      	bge.n	8007dc2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	211a      	movs	r1, #26
 8007d9c:	fb01 f303 	mul.w	r3, r1, r3
 8007da0:	4413      	add	r3, r2
 8007da2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007da6:	781a      	ldrb	r2, [r3, #0]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	211a      	movs	r1, #26
 8007db2:	fb01 f303 	mul.w	r3, r1, r3
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007dbc:	881a      	ldrh	r2, [r3, #0]
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	785b      	ldrb	r3, [r3, #1]
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 ff9c 	bl	8008d06 <USBH_AllocPipe>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	7819      	ldrb	r1, [r3, #0]
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	7858      	ldrb	r0, [r3, #1]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	8952      	ldrh	r2, [r2, #10]
 8007dee:	9202      	str	r2, [sp, #8]
 8007df0:	2203      	movs	r2, #3
 8007df2:	9201      	str	r2, [sp, #4]
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	4623      	mov	r3, r4
 8007df8:	4602      	mov	r2, r0
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 ff54 	bl	8008ca8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	2200      	movs	r2, #0
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f001 fa17 	bl	800923c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007e0e:	2300      	movs	r3, #0
 8007e10:	2200      	movs	r2, #0
 8007e12:	210a      	movs	r1, #10
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fbeb 	bl	80085f0 <USBH_FindInterface>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007e1e:	7bfb      	ldrb	r3, [r7, #15]
 8007e20:	2bff      	cmp	r3, #255	; 0xff
 8007e22:	d002      	beq.n	8007e2a <USBH_CDC_InterfaceInit+0x11a>
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d901      	bls.n	8007e2e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	e0c2      	b.n	8007fb4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007e2e:	7bfb      	ldrb	r3, [r7, #15]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	211a      	movs	r1, #26
 8007e34:	fb01 f303 	mul.w	r3, r1, r3
 8007e38:	4413      	add	r3, r2
 8007e3a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	b25b      	sxtb	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	da16      	bge.n	8007e74 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	211a      	movs	r1, #26
 8007e4c:	fb01 f303 	mul.w	r3, r1, r3
 8007e50:	4413      	add	r3, r2
 8007e52:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e56:	781a      	ldrb	r2, [r3, #0]
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	211a      	movs	r1, #26
 8007e62:	fb01 f303 	mul.w	r3, r1, r3
 8007e66:	4413      	add	r3, r2
 8007e68:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e6c:	881a      	ldrh	r2, [r3, #0]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	835a      	strh	r2, [r3, #26]
 8007e72:	e015      	b.n	8007ea0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	211a      	movs	r1, #26
 8007e7a:	fb01 f303 	mul.w	r3, r1, r3
 8007e7e:	4413      	add	r3, r2
 8007e80:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e84:	781a      	ldrb	r2, [r3, #0]
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	211a      	movs	r1, #26
 8007e90:	fb01 f303 	mul.w	r3, r1, r3
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e9a:	881a      	ldrh	r2, [r3, #0]
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	211a      	movs	r1, #26
 8007ea6:	fb01 f303 	mul.w	r3, r1, r3
 8007eaa:	4413      	add	r3, r2
 8007eac:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	b25b      	sxtb	r3, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	da16      	bge.n	8007ee6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	211a      	movs	r1, #26
 8007ebe:	fb01 f303 	mul.w	r3, r1, r3
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007ec8:	781a      	ldrb	r2, [r3, #0]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007ece:	7bfb      	ldrb	r3, [r7, #15]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	211a      	movs	r1, #26
 8007ed4:	fb01 f303 	mul.w	r3, r1, r3
 8007ed8:	4413      	add	r3, r2
 8007eda:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007ede:	881a      	ldrh	r2, [r3, #0]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	835a      	strh	r2, [r3, #26]
 8007ee4:	e015      	b.n	8007f12 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	211a      	movs	r1, #26
 8007eec:	fb01 f303 	mul.w	r3, r1, r3
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007ef6:	781a      	ldrb	r2, [r3, #0]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007efc:	7bfb      	ldrb	r3, [r7, #15]
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	211a      	movs	r1, #26
 8007f02:	fb01 f303 	mul.w	r3, r1, r3
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007f0c:	881a      	ldrh	r2, [r3, #0]
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	7b9b      	ldrb	r3, [r3, #14]
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fef4 	bl	8008d06 <USBH_AllocPipe>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	461a      	mov	r2, r3
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	7bdb      	ldrb	r3, [r3, #15]
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 feea 	bl	8008d06 <USBH_AllocPipe>
 8007f32:	4603      	mov	r3, r0
 8007f34:	461a      	mov	r2, r3
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	7b59      	ldrb	r1, [r3, #13]
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	7b98      	ldrb	r0, [r3, #14]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	8b12      	ldrh	r2, [r2, #24]
 8007f52:	9202      	str	r2, [sp, #8]
 8007f54:	2202      	movs	r2, #2
 8007f56:	9201      	str	r2, [sp, #4]
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	4623      	mov	r3, r4
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fea2 	bl	8008ca8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	7b19      	ldrb	r1, [r3, #12]
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	7bd8      	ldrb	r0, [r3, #15]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	8b52      	ldrh	r2, [r2, #26]
 8007f7c:	9202      	str	r2, [sp, #8]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	9201      	str	r2, [sp, #4]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	4623      	mov	r3, r4
 8007f86:	4602      	mov	r2, r0
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fe8d 	bl	8008ca8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	7b5b      	ldrb	r3, [r3, #13]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 f94c 	bl	800923c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	7b1b      	ldrb	r3, [r3, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f001 f945 	bl	800923c <USBH_LL_SetToggle>

  return USBH_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd90      	pop	{r4, r7, pc}

08007fbc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fca:	69db      	ldr	r3, [r3, #28]
 8007fcc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00e      	beq.n	8007ff4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fe82 	bl	8008ce6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fead 	bl	8008d48 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	7b1b      	ldrb	r3, [r3, #12]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00e      	beq.n	800801a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	7b1b      	ldrb	r3, [r3, #12]
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fe6f 	bl	8008ce6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	7b1b      	ldrb	r3, [r3, #12]
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fe9a 	bl	8008d48 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	7b5b      	ldrb	r3, [r3, #13]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00e      	beq.n	8008040 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	7b5b      	ldrb	r3, [r3, #13]
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fe5c 	bl	8008ce6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	7b5b      	ldrb	r3, [r3, #13]
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fe87 	bl	8008d48 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008046:	69db      	ldr	r3, [r3, #28]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00b      	beq.n	8008064 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008052:	69db      	ldr	r3, [r3, #28]
 8008054:	4618      	mov	r0, r3
 8008056:	f001 f99b 	bl	8009390 <free>
    phost->pActiveClass->pData = 0U;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008060:	2200      	movs	r2, #0
 8008062:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b084      	sub	sp, #16
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	3340      	adds	r3, #64	; 0x40
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f8b1 	bl	80081ee <GetLineCoding>
 800808c:	4603      	mov	r3, r0
 800808e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008090:	7afb      	ldrb	r3, [r7, #11]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d105      	bne.n	80080a2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800809c:	2102      	movs	r1, #2
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80080a2:	7afb      	ldrb	r3, [r7, #11]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80080b4:	2301      	movs	r3, #1
 80080b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080c2:	69db      	ldr	r3, [r3, #28]
 80080c4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80080cc:	2b04      	cmp	r3, #4
 80080ce:	d877      	bhi.n	80081c0 <USBH_CDC_Process+0x114>
 80080d0:	a201      	add	r2, pc, #4	; (adr r2, 80080d8 <USBH_CDC_Process+0x2c>)
 80080d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d6:	bf00      	nop
 80080d8:	080080ed 	.word	0x080080ed
 80080dc:	080080f3 	.word	0x080080f3
 80080e0:	08008123 	.word	0x08008123
 80080e4:	08008197 	.word	0x08008197
 80080e8:	080081a5 	.word	0x080081a5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	73fb      	strb	r3, [r7, #15]
      break;
 80080f0:	e06d      	b.n	80081ce <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f897 	bl	800822c <SetLineCoding>
 80080fe:	4603      	mov	r3, r0
 8008100:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008102:	7bbb      	ldrb	r3, [r7, #14]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d104      	bne.n	8008112 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	2202      	movs	r2, #2
 800810c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008110:	e058      	b.n	80081c4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008112:	7bbb      	ldrb	r3, [r7, #14]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d055      	beq.n	80081c4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2204      	movs	r2, #4
 800811c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008120:	e050      	b.n	80081c4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	3340      	adds	r3, #64	; 0x40
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f860 	bl	80081ee <GetLineCoding>
 800812e:	4603      	mov	r3, r0
 8008130:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008132:	7bbb      	ldrb	r3, [r7, #14]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d126      	bne.n	8008186 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800814a:	791b      	ldrb	r3, [r3, #4]
 800814c:	429a      	cmp	r2, r3
 800814e:	d13b      	bne.n	80081c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800815a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800815c:	429a      	cmp	r2, r3
 800815e:	d133      	bne.n	80081c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800816a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800816c:	429a      	cmp	r2, r3
 800816e:	d12b      	bne.n	80081c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008178:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800817a:	429a      	cmp	r2, r3
 800817c:	d124      	bne.n	80081c8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f958 	bl	8008434 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008184:	e020      	b.n	80081c8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d01d      	beq.n	80081c8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	2204      	movs	r2, #4
 8008190:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008194:	e018      	b.n	80081c8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f867 	bl	800826a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f8da 	bl	8008356 <CDC_ProcessReception>
      break;
 80081a2:	e014      	b.n	80081ce <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80081a4:	2100      	movs	r1, #0
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fb08 	bl	80087bc <USBH_ClrFeature>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10a      	bne.n	80081cc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80081be:	e005      	b.n	80081cc <USBH_CDC_Process+0x120>

    default:
      break;
 80081c0:	bf00      	nop
 80081c2:	e004      	b.n	80081ce <USBH_CDC_Process+0x122>
      break;
 80081c4:	bf00      	nop
 80081c6:	e002      	b.n	80081ce <USBH_CDC_Process+0x122>
      break;
 80081c8:	bf00      	nop
 80081ca:	e000      	b.n	80081ce <USBH_CDC_Process+0x122>
      break;
 80081cc:	bf00      	nop

  }

  return status;
 80081ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b082      	sub	sp, #8
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	22a1      	movs	r2, #161	; 0xa1
 80081fc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2221      	movs	r2, #33	; 0x21
 8008202:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2207      	movs	r2, #7
 8008214:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	2207      	movs	r2, #7
 800821a:	4619      	mov	r1, r3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 faf1 	bl	8008804 <USBH_CtlReq>
 8008222:	4603      	mov	r3, r0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2221      	movs	r2, #33	; 0x21
 800823a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2220      	movs	r2, #32
 8008240:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2207      	movs	r2, #7
 8008252:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	2207      	movs	r2, #7
 8008258:	4619      	mov	r1, r3
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fad2 	bl	8008804 <USBH_CtlReq>
 8008260:	4603      	mov	r3, r0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b086      	sub	sp, #24
 800826e:	af02      	add	r7, sp, #8
 8008270:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800827c:	2300      	movs	r3, #0
 800827e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008286:	2b01      	cmp	r3, #1
 8008288:	d002      	beq.n	8008290 <CDC_ProcessTransmission+0x26>
 800828a:	2b02      	cmp	r3, #2
 800828c:	d023      	beq.n	80082d6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800828e:	e05e      	b.n	800834e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	8b12      	ldrh	r2, [r2, #24]
 8008298:	4293      	cmp	r3, r2
 800829a:	d90b      	bls.n	80082b4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	69d9      	ldr	r1, [r3, #28]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	8b1a      	ldrh	r2, [r3, #24]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	7b5b      	ldrb	r3, [r3, #13]
 80082a8:	2001      	movs	r0, #1
 80082aa:	9000      	str	r0, [sp, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fcb8 	bl	8008c22 <USBH_BulkSendData>
 80082b2:	e00b      	b.n	80082cc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80082bc:	b29a      	uxth	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	7b5b      	ldrb	r3, [r3, #13]
 80082c2:	2001      	movs	r0, #1
 80082c4:	9000      	str	r0, [sp, #0]
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fcab 	bl	8008c22 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2202      	movs	r2, #2
 80082d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80082d4:	e03b      	b.n	800834e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	7b5b      	ldrb	r3, [r3, #13]
 80082da:	4619      	mov	r1, r3
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 ff83 	bl	80091e8 <USBH_LL_GetURBState>
 80082e2:	4603      	mov	r3, r0
 80082e4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80082e6:	7afb      	ldrb	r3, [r7, #11]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d128      	bne.n	800833e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	8b12      	ldrh	r2, [r2, #24]
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d90e      	bls.n	8008316 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	8b12      	ldrh	r2, [r2, #24]
 8008300:	1a9a      	subs	r2, r3, r2
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	69db      	ldr	r3, [r3, #28]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	8b12      	ldrh	r2, [r2, #24]
 800830e:	441a      	add	r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	61da      	str	r2, [r3, #28]
 8008314:	e002      	b.n	800831c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	2b00      	cmp	r3, #0
 8008322:	d004      	beq.n	800832e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800832c:	e00e      	b.n	800834c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f868 	bl	800840c <USBH_CDC_TransmitCallback>
      break;
 800833c:	e006      	b.n	800834c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800833e:	7afb      	ldrb	r3, [r7, #11]
 8008340:	2b02      	cmp	r3, #2
 8008342:	d103      	bne.n	800834c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800834c:	bf00      	nop
  }
}
 800834e:	bf00      	nop
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b086      	sub	sp, #24
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008368:	2300      	movs	r3, #0
 800836a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008372:	2b03      	cmp	r3, #3
 8008374:	d002      	beq.n	800837c <CDC_ProcessReception+0x26>
 8008376:	2b04      	cmp	r3, #4
 8008378:	d00e      	beq.n	8008398 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800837a:	e043      	b.n	8008404 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	6a19      	ldr	r1, [r3, #32]
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	8b5a      	ldrh	r2, [r3, #26]
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	7b1b      	ldrb	r3, [r3, #12]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fc6f 	bl	8008c6c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	2204      	movs	r2, #4
 8008392:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008396:	e035      	b.n	8008404 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	7b1b      	ldrb	r3, [r3, #12]
 800839c:	4619      	mov	r1, r3
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 ff22 	bl	80091e8 <USBH_LL_GetURBState>
 80083a4:	4603      	mov	r3, r0
 80083a6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80083a8:	7cfb      	ldrb	r3, [r7, #19]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d129      	bne.n	8008402 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	7b1b      	ldrb	r3, [r3, #12]
 80083b2:	4619      	mov	r1, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fe85 	bl	80090c4 <USBH_LL_GetLastXferSize>
 80083ba:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d016      	beq.n	80083f4 <CDC_ProcessReception+0x9e>
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	8b5b      	ldrh	r3, [r3, #26]
 80083ca:	461a      	mov	r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d910      	bls.n	80083f4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	1ad2      	subs	r2, r2, r3
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	6a1a      	ldr	r2, [r3, #32]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	441a      	add	r2, r3
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	2203      	movs	r2, #3
 80083ee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80083f2:	e006      	b.n	8008402 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f80f 	bl	8008420 <USBH_CDC_ReceiveCallback>
      break;
 8008402:	bf00      	nop
  }
}
 8008404:	bf00      	nop
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	4613      	mov	r3, r2
 8008454:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d101      	bne.n	8008460 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800845c:	2302      	movs	r3, #2
 800845e:	e029      	b.n	80084b4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	79fa      	ldrb	r2, [r7, #7]
 8008464:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f000 f81f 	bl	80084bc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d003      	beq.n	80084ac <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	68ba      	ldr	r2, [r7, #8]
 80084a8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f000 fd97 	bl	8008fe0 <USBH_LL_Init>

  return USBH_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80084c8:	2300      	movs	r3, #0
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	e009      	b.n	80084e2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	33e0      	adds	r3, #224	; 0xe0
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	2200      	movs	r2, #0
 80084da:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	3301      	adds	r3, #1
 80084e0:	60fb      	str	r3, [r7, #12]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2b0f      	cmp	r3, #15
 80084e6:	d9f2      	bls.n	80084ce <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80084e8:	2300      	movs	r3, #0
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	e009      	b.n	8008502 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	4413      	add	r3, r2
 80084f4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80084f8:	2200      	movs	r2, #0
 80084fa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	3301      	adds	r3, #1
 8008500:	60fb      	str	r3, [r7, #12]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008508:	d3f1      	bcc.n	80084ee <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2201      	movs	r2, #1
 800851a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2240      	movs	r2, #64	; 0x40
 800852e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2201      	movs	r2, #1
 8008542:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800856e:	2300      	movs	r3, #0
 8008570:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d016      	beq.n	80085a6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10e      	bne.n	80085a0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008588:	1c59      	adds	r1, r3, #1
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	33de      	adds	r3, #222	; 0xde
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	73fb      	strb	r3, [r7, #15]
 800859e:	e004      	b.n	80085aa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80085a0:	2302      	movs	r3, #2
 80085a2:	73fb      	strb	r3, [r7, #15]
 80085a4:	e001      	b.n	80085aa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80085a6:	2302      	movs	r3, #2
 80085a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3714      	adds	r7, #20
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	460b      	mov	r3, r1
 80085c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80085ce:	78fa      	ldrb	r2, [r7, #3]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d204      	bcs.n	80085de <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	78fa      	ldrb	r2, [r7, #3]
 80085d8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80085dc:	e001      	b.n	80085e2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80085de:	2302      	movs	r3, #2
 80085e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b087      	sub	sp, #28
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	4608      	mov	r0, r1
 80085fa:	4611      	mov	r1, r2
 80085fc:	461a      	mov	r2, r3
 80085fe:	4603      	mov	r3, r0
 8008600:	70fb      	strb	r3, [r7, #3]
 8008602:	460b      	mov	r3, r1
 8008604:	70bb      	strb	r3, [r7, #2]
 8008606:	4613      	mov	r3, r2
 8008608:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800860a:	2300      	movs	r3, #0
 800860c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800860e:	2300      	movs	r3, #0
 8008610:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008618:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800861a:	e025      	b.n	8008668 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800861c:	7dfb      	ldrb	r3, [r7, #23]
 800861e:	221a      	movs	r2, #26
 8008620:	fb02 f303 	mul.w	r3, r2, r3
 8008624:	3308      	adds	r3, #8
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	4413      	add	r3, r2
 800862a:	3302      	adds	r3, #2
 800862c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	795b      	ldrb	r3, [r3, #5]
 8008632:	78fa      	ldrb	r2, [r7, #3]
 8008634:	429a      	cmp	r2, r3
 8008636:	d002      	beq.n	800863e <USBH_FindInterface+0x4e>
 8008638:	78fb      	ldrb	r3, [r7, #3]
 800863a:	2bff      	cmp	r3, #255	; 0xff
 800863c:	d111      	bne.n	8008662 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008642:	78ba      	ldrb	r2, [r7, #2]
 8008644:	429a      	cmp	r2, r3
 8008646:	d002      	beq.n	800864e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008648:	78bb      	ldrb	r3, [r7, #2]
 800864a:	2bff      	cmp	r3, #255	; 0xff
 800864c:	d109      	bne.n	8008662 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008652:	787a      	ldrb	r2, [r7, #1]
 8008654:	429a      	cmp	r2, r3
 8008656:	d002      	beq.n	800865e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008658:	787b      	ldrb	r3, [r7, #1]
 800865a:	2bff      	cmp	r3, #255	; 0xff
 800865c:	d101      	bne.n	8008662 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800865e:	7dfb      	ldrb	r3, [r7, #23]
 8008660:	e006      	b.n	8008670 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008662:	7dfb      	ldrb	r3, [r7, #23]
 8008664:	3301      	adds	r3, #1
 8008666:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008668:	7dfb      	ldrb	r3, [r7, #23]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d9d6      	bls.n	800861c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800866e:	23ff      	movs	r3, #255	; 0xff
}
 8008670:	4618      	mov	r0, r3
 8008672:	371c      	adds	r7, #28
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fce7 	bl	8009058 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800868a:	2101      	movs	r1, #1
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fdbe 	bl	800920e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80086ae:	bf00      	nop
 80086b0:	370c      	adds	r7, #12
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr

080086ba <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b082      	sub	sp, #8
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086c8:	1c5a      	adds	r2, r3, #1
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f804 	bl	80086de <USBH_HandleSof>
}
 80086d6:	bf00      	nop
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b082      	sub	sp, #8
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b0b      	cmp	r3, #11
 80086ee:	d10a      	bne.n	8008706 <USBH_HandleSof+0x28>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d005      	beq.n	8008706 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	4798      	blx	r3
  }
}
 8008706:	bf00      	nop
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800870e:	b480      	push	{r7}
 8008710:	b083      	sub	sp, #12
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800871e:	bf00      	nop
}
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr

0800872a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800872a:	b480      	push	{r7}
 800872c:	b083      	sub	sp, #12
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800873a:	bf00      	nop
}
 800873c:	370c      	adds	r7, #12
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008746:	b480      	push	{r7}
 8008748:	b083      	sub	sp, #12
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fc7a 	bl	800908e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	791b      	ldrb	r3, [r3, #4]
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fad1 	bl	8008d48 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	795b      	ldrb	r3, [r3, #5]
 80087aa:	4619      	mov	r1, r3
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 facb 	bl	8008d48 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	460b      	mov	r3, r1
 80087c6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	789b      	ldrb	r3, [r3, #2]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d10f      	bne.n	80087f0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2202      	movs	r2, #2
 80087d4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80087e2:	78fb      	ldrb	r3, [r7, #3]
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80087f0:	2200      	movs	r2, #0
 80087f2:	2100      	movs	r1, #0
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f805 	bl	8008804 <USBH_CtlReq>
 80087fa:	4603      	mov	r3, r0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	4613      	mov	r3, r2
 8008810:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008812:	2301      	movs	r3, #1
 8008814:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	789b      	ldrb	r3, [r3, #2]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d002      	beq.n	8008824 <USBH_CtlReq+0x20>
 800881e:	2b02      	cmp	r3, #2
 8008820:	d00f      	beq.n	8008842 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008822:	e027      	b.n	8008874 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	88fa      	ldrh	r2, [r7, #6]
 800882e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2201      	movs	r2, #1
 8008834:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2202      	movs	r2, #2
 800883a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800883c:	2301      	movs	r3, #1
 800883e:	75fb      	strb	r3, [r7, #23]
      break;
 8008840:	e018      	b.n	8008874 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f000 f81c 	bl	8008880 <USBH_HandleControl>
 8008848:	4603      	mov	r3, r0
 800884a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800884c:	7dfb      	ldrb	r3, [r7, #23]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d002      	beq.n	8008858 <USBH_CtlReq+0x54>
 8008852:	7dfb      	ldrb	r3, [r7, #23]
 8008854:	2b03      	cmp	r3, #3
 8008856:	d106      	bne.n	8008866 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2201      	movs	r2, #1
 800885c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	761a      	strb	r2, [r3, #24]
      break;
 8008864:	e005      	b.n	8008872 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008866:	7dfb      	ldrb	r3, [r7, #23]
 8008868:	2b02      	cmp	r3, #2
 800886a:	d102      	bne.n	8008872 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2201      	movs	r2, #1
 8008870:	709a      	strb	r2, [r3, #2]
      break;
 8008872:	bf00      	nop
  }
  return status;
 8008874:	7dfb      	ldrb	r3, [r7, #23]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
	...

08008880 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af02      	add	r7, sp, #8
 8008886:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008888:	2301      	movs	r3, #1
 800888a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800888c:	2300      	movs	r3, #0
 800888e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	7e1b      	ldrb	r3, [r3, #24]
 8008894:	3b01      	subs	r3, #1
 8008896:	2b0a      	cmp	r3, #10
 8008898:	f200 8156 	bhi.w	8008b48 <USBH_HandleControl+0x2c8>
 800889c:	a201      	add	r2, pc, #4	; (adr r2, 80088a4 <USBH_HandleControl+0x24>)
 800889e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a2:	bf00      	nop
 80088a4:	080088d1 	.word	0x080088d1
 80088a8:	080088eb 	.word	0x080088eb
 80088ac:	08008955 	.word	0x08008955
 80088b0:	0800897b 	.word	0x0800897b
 80088b4:	080089b3 	.word	0x080089b3
 80088b8:	080089dd 	.word	0x080089dd
 80088bc:	08008a2f 	.word	0x08008a2f
 80088c0:	08008a51 	.word	0x08008a51
 80088c4:	08008a8d 	.word	0x08008a8d
 80088c8:	08008ab3 	.word	0x08008ab3
 80088cc:	08008af1 	.word	0x08008af1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f103 0110 	add.w	r1, r3, #16
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	795b      	ldrb	r3, [r3, #5]
 80088da:	461a      	mov	r2, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f943 	bl	8008b68 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2202      	movs	r2, #2
 80088e6:	761a      	strb	r2, [r3, #24]
      break;
 80088e8:	e139      	b.n	8008b5e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	795b      	ldrb	r3, [r3, #5]
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 fc79 	bl	80091e8 <USBH_LL_GetURBState>
 80088f6:	4603      	mov	r3, r0
 80088f8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80088fa:	7bbb      	ldrb	r3, [r7, #14]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d11e      	bne.n	800893e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	7c1b      	ldrb	r3, [r3, #16]
 8008904:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008908:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	8adb      	ldrh	r3, [r3, #22]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00a      	beq.n	8008928 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008912:	7b7b      	ldrb	r3, [r7, #13]
 8008914:	2b80      	cmp	r3, #128	; 0x80
 8008916:	d103      	bne.n	8008920 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2203      	movs	r2, #3
 800891c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800891e:	e115      	b.n	8008b4c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2205      	movs	r2, #5
 8008924:	761a      	strb	r2, [r3, #24]
      break;
 8008926:	e111      	b.n	8008b4c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008928:	7b7b      	ldrb	r3, [r7, #13]
 800892a:	2b80      	cmp	r3, #128	; 0x80
 800892c:	d103      	bne.n	8008936 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2209      	movs	r2, #9
 8008932:	761a      	strb	r2, [r3, #24]
      break;
 8008934:	e10a      	b.n	8008b4c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2207      	movs	r2, #7
 800893a:	761a      	strb	r2, [r3, #24]
      break;
 800893c:	e106      	b.n	8008b4c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800893e:	7bbb      	ldrb	r3, [r7, #14]
 8008940:	2b04      	cmp	r3, #4
 8008942:	d003      	beq.n	800894c <USBH_HandleControl+0xcc>
 8008944:	7bbb      	ldrb	r3, [r7, #14]
 8008946:	2b02      	cmp	r3, #2
 8008948:	f040 8100 	bne.w	8008b4c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	220b      	movs	r2, #11
 8008950:	761a      	strb	r2, [r3, #24]
      break;
 8008952:	e0fb      	b.n	8008b4c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800895a:	b29a      	uxth	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6899      	ldr	r1, [r3, #8]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	899a      	ldrh	r2, [r3, #12]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	791b      	ldrb	r3, [r3, #4]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f93a 	bl	8008be6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2204      	movs	r2, #4
 8008976:	761a      	strb	r2, [r3, #24]
      break;
 8008978:	e0f1      	b.n	8008b5e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	791b      	ldrb	r3, [r3, #4]
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fc31 	bl	80091e8 <USBH_LL_GetURBState>
 8008986:	4603      	mov	r3, r0
 8008988:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800898a:	7bbb      	ldrb	r3, [r7, #14]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d102      	bne.n	8008996 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2209      	movs	r2, #9
 8008994:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008996:	7bbb      	ldrb	r3, [r7, #14]
 8008998:	2b05      	cmp	r3, #5
 800899a:	d102      	bne.n	80089a2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800899c:	2303      	movs	r3, #3
 800899e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089a0:	e0d6      	b.n	8008b50 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80089a2:	7bbb      	ldrb	r3, [r7, #14]
 80089a4:	2b04      	cmp	r3, #4
 80089a6:	f040 80d3 	bne.w	8008b50 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	220b      	movs	r2, #11
 80089ae:	761a      	strb	r2, [r3, #24]
      break;
 80089b0:	e0ce      	b.n	8008b50 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6899      	ldr	r1, [r3, #8]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	899a      	ldrh	r2, [r3, #12]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	795b      	ldrb	r3, [r3, #5]
 80089be:	2001      	movs	r0, #1
 80089c0:	9000      	str	r0, [sp, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f8ea 	bl	8008b9c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2206      	movs	r2, #6
 80089d8:	761a      	strb	r2, [r3, #24]
      break;
 80089da:	e0c0      	b.n	8008b5e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	795b      	ldrb	r3, [r3, #5]
 80089e0:	4619      	mov	r1, r3
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fc00 	bl	80091e8 <USBH_LL_GetURBState>
 80089e8:	4603      	mov	r3, r0
 80089ea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d103      	bne.n	80089fa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2207      	movs	r2, #7
 80089f6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089f8:	e0ac      	b.n	8008b54 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80089fa:	7bbb      	ldrb	r3, [r7, #14]
 80089fc:	2b05      	cmp	r3, #5
 80089fe:	d105      	bne.n	8008a0c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	220c      	movs	r2, #12
 8008a04:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008a06:	2303      	movs	r3, #3
 8008a08:	73fb      	strb	r3, [r7, #15]
      break;
 8008a0a:	e0a3      	b.n	8008b54 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d103      	bne.n	8008a1a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2205      	movs	r2, #5
 8008a16:	761a      	strb	r2, [r3, #24]
      break;
 8008a18:	e09c      	b.n	8008b54 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008a1a:	7bbb      	ldrb	r3, [r7, #14]
 8008a1c:	2b04      	cmp	r3, #4
 8008a1e:	f040 8099 	bne.w	8008b54 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	220b      	movs	r2, #11
 8008a26:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008a28:	2302      	movs	r3, #2
 8008a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a2c:	e092      	b.n	8008b54 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	791b      	ldrb	r3, [r3, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	2100      	movs	r1, #0
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f8d5 	bl	8008be6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2208      	movs	r2, #8
 8008a4c:	761a      	strb	r2, [r3, #24]

      break;
 8008a4e:	e086      	b.n	8008b5e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	791b      	ldrb	r3, [r3, #4]
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fbc6 	bl	80091e8 <USBH_LL_GetURBState>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a60:	7bbb      	ldrb	r3, [r7, #14]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d105      	bne.n	8008a72 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	220d      	movs	r2, #13
 8008a6a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a70:	e072      	b.n	8008b58 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008a72:	7bbb      	ldrb	r3, [r7, #14]
 8008a74:	2b04      	cmp	r3, #4
 8008a76:	d103      	bne.n	8008a80 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	220b      	movs	r2, #11
 8008a7c:	761a      	strb	r2, [r3, #24]
      break;
 8008a7e:	e06b      	b.n	8008b58 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008a80:	7bbb      	ldrb	r3, [r7, #14]
 8008a82:	2b05      	cmp	r3, #5
 8008a84:	d168      	bne.n	8008b58 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008a86:	2303      	movs	r3, #3
 8008a88:	73fb      	strb	r3, [r7, #15]
      break;
 8008a8a:	e065      	b.n	8008b58 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	795b      	ldrb	r3, [r3, #5]
 8008a90:	2201      	movs	r2, #1
 8008a92:	9200      	str	r2, [sp, #0]
 8008a94:	2200      	movs	r2, #0
 8008a96:	2100      	movs	r1, #0
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f87f 	bl	8008b9c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	220a      	movs	r2, #10
 8008aae:	761a      	strb	r2, [r3, #24]
      break;
 8008ab0:	e055      	b.n	8008b5e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	795b      	ldrb	r3, [r3, #5]
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fb95 	bl	80091e8 <USBH_LL_GetURBState>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008ac2:	7bbb      	ldrb	r3, [r7, #14]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d105      	bne.n	8008ad4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	220d      	movs	r2, #13
 8008ad0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ad2:	e043      	b.n	8008b5c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ad4:	7bbb      	ldrb	r3, [r7, #14]
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d103      	bne.n	8008ae2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2209      	movs	r2, #9
 8008ade:	761a      	strb	r2, [r3, #24]
      break;
 8008ae0:	e03c      	b.n	8008b5c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008ae2:	7bbb      	ldrb	r3, [r7, #14]
 8008ae4:	2b04      	cmp	r3, #4
 8008ae6:	d139      	bne.n	8008b5c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	220b      	movs	r2, #11
 8008aec:	761a      	strb	r2, [r3, #24]
      break;
 8008aee:	e035      	b.n	8008b5c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	7e5b      	ldrb	r3, [r3, #25]
 8008af4:	3301      	adds	r3, #1
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	765a      	strb	r2, [r3, #25]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	7e5b      	ldrb	r3, [r3, #25]
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d806      	bhi.n	8008b12 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008b10:	e025      	b.n	8008b5e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b18:	2106      	movs	r1, #6
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	795b      	ldrb	r3, [r3, #5]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 f90c 	bl	8008d48 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	791b      	ldrb	r3, [r3, #4]
 8008b34:	4619      	mov	r1, r3
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 f906 	bl	8008d48 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008b42:	2302      	movs	r3, #2
 8008b44:	73fb      	strb	r3, [r7, #15]
      break;
 8008b46:	e00a      	b.n	8008b5e <USBH_HandleControl+0x2de>

    default:
      break;
 8008b48:	bf00      	nop
 8008b4a:	e008      	b.n	8008b5e <USBH_HandleControl+0x2de>
      break;
 8008b4c:	bf00      	nop
 8008b4e:	e006      	b.n	8008b5e <USBH_HandleControl+0x2de>
      break;
 8008b50:	bf00      	nop
 8008b52:	e004      	b.n	8008b5e <USBH_HandleControl+0x2de>
      break;
 8008b54:	bf00      	nop
 8008b56:	e002      	b.n	8008b5e <USBH_HandleControl+0x2de>
      break;
 8008b58:	bf00      	nop
 8008b5a:	e000      	b.n	8008b5e <USBH_HandleControl+0x2de>
      break;
 8008b5c:	bf00      	nop
  }

  return status;
 8008b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b088      	sub	sp, #32
 8008b6c:	af04      	add	r7, sp, #16
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	4613      	mov	r3, r2
 8008b74:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b76:	79f9      	ldrb	r1, [r7, #7]
 8008b78:	2300      	movs	r3, #0
 8008b7a:	9303      	str	r3, [sp, #12]
 8008b7c:	2308      	movs	r3, #8
 8008b7e:	9302      	str	r3, [sp, #8]
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	9301      	str	r3, [sp, #4]
 8008b84:	2300      	movs	r3, #0
 8008b86:	9300      	str	r3, [sp, #0]
 8008b88:	2300      	movs	r3, #0
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f000 fafa 	bl	8009186 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b088      	sub	sp, #32
 8008ba0:	af04      	add	r7, sp, #16
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	4611      	mov	r1, r2
 8008ba8:	461a      	mov	r2, r3
 8008baa:	460b      	mov	r3, r1
 8008bac:	80fb      	strh	r3, [r7, #6]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008bc0:	7979      	ldrb	r1, [r7, #5]
 8008bc2:	7e3b      	ldrb	r3, [r7, #24]
 8008bc4:	9303      	str	r3, [sp, #12]
 8008bc6:	88fb      	ldrh	r3, [r7, #6]
 8008bc8:	9302      	str	r3, [sp, #8]
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	2301      	movs	r3, #1
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f000 fad5 	bl	8009186 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b088      	sub	sp, #32
 8008bea:	af04      	add	r7, sp, #16
 8008bec:	60f8      	str	r0, [r7, #12]
 8008bee:	60b9      	str	r1, [r7, #8]
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	80fb      	strh	r3, [r7, #6]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008bfc:	7979      	ldrb	r1, [r7, #5]
 8008bfe:	2300      	movs	r3, #0
 8008c00:	9303      	str	r3, [sp, #12]
 8008c02:	88fb      	ldrh	r3, [r7, #6]
 8008c04:	9302      	str	r3, [sp, #8]
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	9301      	str	r3, [sp, #4]
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	2300      	movs	r3, #0
 8008c10:	2201      	movs	r2, #1
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f000 fab7 	bl	8009186 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008c18:	2300      	movs	r3, #0

}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b088      	sub	sp, #32
 8008c26:	af04      	add	r7, sp, #16
 8008c28:	60f8      	str	r0, [r7, #12]
 8008c2a:	60b9      	str	r1, [r7, #8]
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	461a      	mov	r2, r3
 8008c30:	460b      	mov	r3, r1
 8008c32:	80fb      	strh	r3, [r7, #6]
 8008c34:	4613      	mov	r3, r2
 8008c36:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008c42:	2300      	movs	r3, #0
 8008c44:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c46:	7979      	ldrb	r1, [r7, #5]
 8008c48:	7e3b      	ldrb	r3, [r7, #24]
 8008c4a:	9303      	str	r3, [sp, #12]
 8008c4c:	88fb      	ldrh	r3, [r7, #6]
 8008c4e:	9302      	str	r3, [sp, #8]
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	9301      	str	r3, [sp, #4]
 8008c54:	2301      	movs	r3, #1
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	2302      	movs	r3, #2
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f000 fa92 	bl	8009186 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b088      	sub	sp, #32
 8008c70:	af04      	add	r7, sp, #16
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	4611      	mov	r1, r2
 8008c78:	461a      	mov	r2, r3
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	80fb      	strh	r3, [r7, #6]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c82:	7979      	ldrb	r1, [r7, #5]
 8008c84:	2300      	movs	r3, #0
 8008c86:	9303      	str	r3, [sp, #12]
 8008c88:	88fb      	ldrh	r3, [r7, #6]
 8008c8a:	9302      	str	r3, [sp, #8]
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	9301      	str	r3, [sp, #4]
 8008c90:	2301      	movs	r3, #1
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	2302      	movs	r3, #2
 8008c96:	2201      	movs	r2, #1
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f000 fa74 	bl	8009186 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af04      	add	r7, sp, #16
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	4608      	mov	r0, r1
 8008cb2:	4611      	mov	r1, r2
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	70fb      	strb	r3, [r7, #3]
 8008cba:	460b      	mov	r3, r1
 8008cbc:	70bb      	strb	r3, [r7, #2]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008cc2:	7878      	ldrb	r0, [r7, #1]
 8008cc4:	78ba      	ldrb	r2, [r7, #2]
 8008cc6:	78f9      	ldrb	r1, [r7, #3]
 8008cc8:	8b3b      	ldrh	r3, [r7, #24]
 8008cca:	9302      	str	r3, [sp, #8]
 8008ccc:	7d3b      	ldrb	r3, [r7, #20]
 8008cce:	9301      	str	r3, [sp, #4]
 8008cd0:	7c3b      	ldrb	r3, [r7, #16]
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fa07 	bl	80090ea <USBH_LL_OpenPipe>

  return USBH_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b082      	sub	sp, #8
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	460b      	mov	r3, r1
 8008cf0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008cf2:	78fb      	ldrb	r3, [r7, #3]
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fa26 	bl	8009148 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b084      	sub	sp, #16
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f836 	bl	8008d84 <USBH_GetFreePipe>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008d1c:	89fb      	ldrh	r3, [r7, #14]
 8008d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d00a      	beq.n	8008d3c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008d26:	78fa      	ldrb	r2, [r7, #3]
 8008d28:	89fb      	ldrh	r3, [r7, #14]
 8008d2a:	f003 030f 	and.w	r3, r3, #15
 8008d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d32:	6879      	ldr	r1, [r7, #4]
 8008d34:	33e0      	adds	r3, #224	; 0xe0
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	440b      	add	r3, r1
 8008d3a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008d3c:	89fb      	ldrh	r3, [r7, #14]
 8008d3e:	b2db      	uxtb	r3, r3
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008d54:	78fb      	ldrb	r3, [r7, #3]
 8008d56:	2b0f      	cmp	r3, #15
 8008d58:	d80d      	bhi.n	8008d76 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008d5a:	78fb      	ldrb	r3, [r7, #3]
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	33e0      	adds	r3, #224	; 0xe0
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4413      	add	r3, r2
 8008d64:	685a      	ldr	r2, [r3, #4]
 8008d66:	78fb      	ldrb	r3, [r7, #3]
 8008d68:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008d6c:	6879      	ldr	r1, [r7, #4]
 8008d6e:	33e0      	adds	r3, #224	; 0xe0
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	440b      	add	r3, r1
 8008d74:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008d90:	2300      	movs	r3, #0
 8008d92:	73fb      	strb	r3, [r7, #15]
 8008d94:	e00f      	b.n	8008db6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	33e0      	adds	r3, #224	; 0xe0
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d102      	bne.n	8008db0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	e007      	b.n	8008dc0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008db0:	7bfb      	ldrb	r3, [r7, #15]
 8008db2:	3301      	adds	r3, #1
 8008db4:	73fb      	strb	r3, [r7, #15]
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
 8008db8:	2b0f      	cmp	r3, #15
 8008dba:	d9ec      	bls.n	8008d96 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008dbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3714      	adds	r7, #20
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	490e      	ldr	r1, [pc, #56]	; (8008e0c <MX_USB_HOST_Init+0x40>)
 8008dd4:	480e      	ldr	r0, [pc, #56]	; (8008e10 <MX_USB_HOST_Init+0x44>)
 8008dd6:	f7ff fb37 	bl	8008448 <USBH_Init>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d001      	beq.n	8008de4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008de0:	f7fa f966 	bl	80030b0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008de4:	490b      	ldr	r1, [pc, #44]	; (8008e14 <MX_USB_HOST_Init+0x48>)
 8008de6:	480a      	ldr	r0, [pc, #40]	; (8008e10 <MX_USB_HOST_Init+0x44>)
 8008de8:	f7ff fbbc 	bl	8008564 <USBH_RegisterClass>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d001      	beq.n	8008df6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008df2:	f7fa f95d 	bl	80030b0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008df6:	4806      	ldr	r0, [pc, #24]	; (8008e10 <MX_USB_HOST_Init+0x44>)
 8008df8:	f7ff fc40 	bl	800867c <USBH_Start>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008e02:	f7fa f955 	bl	80030b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008e06:	bf00      	nop
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	08008e19 	.word	0x08008e19
 8008e10:	20000160 	.word	0x20000160
 8008e14:	2000000c 	.word	0x2000000c

08008e18 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	460b      	mov	r3, r1
 8008e22:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008e24:	78fb      	ldrb	r3, [r7, #3]
 8008e26:	3b01      	subs	r3, #1
 8008e28:	2b04      	cmp	r3, #4
 8008e2a:	d819      	bhi.n	8008e60 <USBH_UserProcess+0x48>
 8008e2c:	a201      	add	r2, pc, #4	; (adr r2, 8008e34 <USBH_UserProcess+0x1c>)
 8008e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e32:	bf00      	nop
 8008e34:	08008e61 	.word	0x08008e61
 8008e38:	08008e51 	.word	0x08008e51
 8008e3c:	08008e61 	.word	0x08008e61
 8008e40:	08008e59 	.word	0x08008e59
 8008e44:	08008e49 	.word	0x08008e49
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008e48:	4b09      	ldr	r3, [pc, #36]	; (8008e70 <USBH_UserProcess+0x58>)
 8008e4a:	2203      	movs	r2, #3
 8008e4c:	701a      	strb	r2, [r3, #0]
  break;
 8008e4e:	e008      	b.n	8008e62 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008e50:	4b07      	ldr	r3, [pc, #28]	; (8008e70 <USBH_UserProcess+0x58>)
 8008e52:	2202      	movs	r2, #2
 8008e54:	701a      	strb	r2, [r3, #0]
  break;
 8008e56:	e004      	b.n	8008e62 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008e58:	4b05      	ldr	r3, [pc, #20]	; (8008e70 <USBH_UserProcess+0x58>)
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	701a      	strb	r2, [r3, #0]
  break;
 8008e5e:	e000      	b.n	8008e62 <USBH_UserProcess+0x4a>

  default:
  break;
 8008e60:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008e62:	bf00      	nop
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	20000538 	.word	0x20000538

08008e74 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b08a      	sub	sp, #40	; 0x28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e7c:	f107 0314 	add.w	r3, r7, #20
 8008e80:	2200      	movs	r2, #0
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	605a      	str	r2, [r3, #4]
 8008e86:	609a      	str	r2, [r3, #8]
 8008e88:	60da      	str	r2, [r3, #12]
 8008e8a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e94:	d147      	bne.n	8008f26 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e96:	2300      	movs	r3, #0
 8008e98:	613b      	str	r3, [r7, #16]
 8008e9a:	4b25      	ldr	r3, [pc, #148]	; (8008f30 <HAL_HCD_MspInit+0xbc>)
 8008e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9e:	4a24      	ldr	r2, [pc, #144]	; (8008f30 <HAL_HCD_MspInit+0xbc>)
 8008ea0:	f043 0301 	orr.w	r3, r3, #1
 8008ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8008ea6:	4b22      	ldr	r3, [pc, #136]	; (8008f30 <HAL_HCD_MspInit+0xbc>)
 8008ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	613b      	str	r3, [r7, #16]
 8008eb0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008ec0:	f107 0314 	add.w	r3, r7, #20
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	481b      	ldr	r0, [pc, #108]	; (8008f34 <HAL_HCD_MspInit+0xc0>)
 8008ec8:	f7fa fd00 	bl	80038cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008ecc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008eda:	2300      	movs	r3, #0
 8008edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008ede:	230a      	movs	r3, #10
 8008ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ee2:	f107 0314 	add.w	r3, r7, #20
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	4812      	ldr	r0, [pc, #72]	; (8008f34 <HAL_HCD_MspInit+0xc0>)
 8008eea:	f7fa fcef 	bl	80038cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008eee:	4b10      	ldr	r3, [pc, #64]	; (8008f30 <HAL_HCD_MspInit+0xbc>)
 8008ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef2:	4a0f      	ldr	r2, [pc, #60]	; (8008f30 <HAL_HCD_MspInit+0xbc>)
 8008ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ef8:	6353      	str	r3, [r2, #52]	; 0x34
 8008efa:	2300      	movs	r3, #0
 8008efc:	60fb      	str	r3, [r7, #12]
 8008efe:	4b0c      	ldr	r3, [pc, #48]	; (8008f30 <HAL_HCD_MspInit+0xbc>)
 8008f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f02:	4a0b      	ldr	r2, [pc, #44]	; (8008f30 <HAL_HCD_MspInit+0xbc>)
 8008f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f08:	6453      	str	r3, [r2, #68]	; 0x44
 8008f0a:	4b09      	ldr	r3, [pc, #36]	; (8008f30 <HAL_HCD_MspInit+0xbc>)
 8008f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f12:	60fb      	str	r3, [r7, #12]
 8008f14:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f16:	2200      	movs	r2, #0
 8008f18:	2100      	movs	r1, #0
 8008f1a:	2043      	movs	r0, #67	; 0x43
 8008f1c:	f7fa fc9f 	bl	800385e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f20:	2043      	movs	r0, #67	; 0x43
 8008f22:	f7fa fcb8 	bl	8003896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f26:	bf00      	nop
 8008f28:	3728      	adds	r7, #40	; 0x28
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	40023800 	.word	0x40023800
 8008f34:	40020000 	.word	0x40020000

08008f38 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7ff fbb7 	bl	80086ba <USBH_LL_IncTimer>
}
 8008f4c:	bf00      	nop
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7ff fbef 	bl	8008746 <USBH_LL_Connect>
}
 8008f68:	bf00      	nop
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7ff fbf8 	bl	8008774 <USBH_LL_Disconnect>
}
 8008f84:	bf00      	nop
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	460b      	mov	r3, r1
 8008f96:	70fb      	strb	r3, [r7, #3]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008f9c:	bf00      	nop
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7ff fba9 	bl	800870e <USBH_LL_PortEnabled>
}
 8008fbc:	bf00      	nop
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7ff fba9 	bl	800872a <USBH_LL_PortDisabled>
}
 8008fd8:	bf00      	nop
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d12a      	bne.n	8009048 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008ff2:	4a18      	ldr	r2, [pc, #96]	; (8009054 <USBH_LL_Init+0x74>)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a15      	ldr	r2, [pc, #84]	; (8009054 <USBH_LL_Init+0x74>)
 8008ffe:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009002:	4b14      	ldr	r3, [pc, #80]	; (8009054 <USBH_LL_Init+0x74>)
 8009004:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009008:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800900a:	4b12      	ldr	r3, [pc, #72]	; (8009054 <USBH_LL_Init+0x74>)
 800900c:	2208      	movs	r2, #8
 800900e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009010:	4b10      	ldr	r3, [pc, #64]	; (8009054 <USBH_LL_Init+0x74>)
 8009012:	2201      	movs	r2, #1
 8009014:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009016:	4b0f      	ldr	r3, [pc, #60]	; (8009054 <USBH_LL_Init+0x74>)
 8009018:	2200      	movs	r2, #0
 800901a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800901c:	4b0d      	ldr	r3, [pc, #52]	; (8009054 <USBH_LL_Init+0x74>)
 800901e:	2202      	movs	r2, #2
 8009020:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009022:	4b0c      	ldr	r3, [pc, #48]	; (8009054 <USBH_LL_Init+0x74>)
 8009024:	2200      	movs	r2, #0
 8009026:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009028:	480a      	ldr	r0, [pc, #40]	; (8009054 <USBH_LL_Init+0x74>)
 800902a:	f7fa fe35 	bl	8003c98 <HAL_HCD_Init>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009034:	f7fa f83c 	bl	80030b0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009038:	4806      	ldr	r0, [pc, #24]	; (8009054 <USBH_LL_Init+0x74>)
 800903a:	f7fb fa0a 	bl	8004452 <HAL_HCD_GetCurrentFrame>
 800903e:	4603      	mov	r3, r0
 8009040:	4619      	mov	r1, r3
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7ff fb2a 	bl	800869c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	2000053c 	.word	0x2000053c

08009058 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009060:	2300      	movs	r3, #0
 8009062:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009064:	2300      	movs	r3, #0
 8009066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800906e:	4618      	mov	r0, r3
 8009070:	f7fb f987 	bl	8004382 <HAL_HCD_Start>
 8009074:	4603      	mov	r3, r0
 8009076:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009078:	7bfb      	ldrb	r3, [r7, #15]
 800907a:	4618      	mov	r0, r3
 800907c:	f000 f90e 	bl	800929c <USBH_Get_USB_Status>
 8009080:	4603      	mov	r3, r0
 8009082:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009084:	7bbb      	ldrb	r3, [r7, #14]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b084      	sub	sp, #16
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009096:	2300      	movs	r3, #0
 8009098:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800909a:	2300      	movs	r3, #0
 800909c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fb f98f 	bl	80043c8 <HAL_HCD_Stop>
 80090aa:	4603      	mov	r3, r0
 80090ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 f8f3 	bl	800929c <USBH_Get_USB_Status>
 80090b6:	4603      	mov	r3, r0
 80090b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090d6:	78fa      	ldrb	r2, [r7, #3]
 80090d8:	4611      	mov	r1, r2
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fb f9a5 	bl	800442a <HAL_HCD_HC_GetXferCount>
 80090e0:	4603      	mov	r3, r0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80090ea:	b590      	push	{r4, r7, lr}
 80090ec:	b089      	sub	sp, #36	; 0x24
 80090ee:	af04      	add	r7, sp, #16
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	4608      	mov	r0, r1
 80090f4:	4611      	mov	r1, r2
 80090f6:	461a      	mov	r2, r3
 80090f8:	4603      	mov	r3, r0
 80090fa:	70fb      	strb	r3, [r7, #3]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70bb      	strb	r3, [r7, #2]
 8009100:	4613      	mov	r3, r2
 8009102:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009112:	787c      	ldrb	r4, [r7, #1]
 8009114:	78ba      	ldrb	r2, [r7, #2]
 8009116:	78f9      	ldrb	r1, [r7, #3]
 8009118:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800911a:	9302      	str	r3, [sp, #8]
 800911c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009120:	9301      	str	r3, [sp, #4]
 8009122:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009126:	9300      	str	r3, [sp, #0]
 8009128:	4623      	mov	r3, r4
 800912a:	f7fa fe17 	bl	8003d5c <HAL_HCD_HC_Init>
 800912e:	4603      	mov	r3, r0
 8009130:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009132:	7bfb      	ldrb	r3, [r7, #15]
 8009134:	4618      	mov	r0, r3
 8009136:	f000 f8b1 	bl	800929c <USBH_Get_USB_Status>
 800913a:	4603      	mov	r3, r0
 800913c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800913e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009140:	4618      	mov	r0, r3
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	bd90      	pop	{r4, r7, pc}

08009148 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	460b      	mov	r3, r1
 8009152:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009162:	78fa      	ldrb	r2, [r7, #3]
 8009164:	4611      	mov	r1, r2
 8009166:	4618      	mov	r0, r3
 8009168:	f7fa fe87 	bl	8003e7a <HAL_HCD_HC_Halt>
 800916c:	4603      	mov	r3, r0
 800916e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009170:	7bfb      	ldrb	r3, [r7, #15]
 8009172:	4618      	mov	r0, r3
 8009174:	f000 f892 	bl	800929c <USBH_Get_USB_Status>
 8009178:	4603      	mov	r3, r0
 800917a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800917c:	7bbb      	ldrb	r3, [r7, #14]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009186:	b590      	push	{r4, r7, lr}
 8009188:	b089      	sub	sp, #36	; 0x24
 800918a:	af04      	add	r7, sp, #16
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	4608      	mov	r0, r1
 8009190:	4611      	mov	r1, r2
 8009192:	461a      	mov	r2, r3
 8009194:	4603      	mov	r3, r0
 8009196:	70fb      	strb	r3, [r7, #3]
 8009198:	460b      	mov	r3, r1
 800919a:	70bb      	strb	r3, [r7, #2]
 800919c:	4613      	mov	r3, r2
 800919e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a0:	2300      	movs	r3, #0
 80091a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80091ae:	787c      	ldrb	r4, [r7, #1]
 80091b0:	78ba      	ldrb	r2, [r7, #2]
 80091b2:	78f9      	ldrb	r1, [r7, #3]
 80091b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80091b8:	9303      	str	r3, [sp, #12]
 80091ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80091bc:	9302      	str	r3, [sp, #8]
 80091be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c0:	9301      	str	r3, [sp, #4]
 80091c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	4623      	mov	r3, r4
 80091ca:	f7fa fe79 	bl	8003ec0 <HAL_HCD_HC_SubmitRequest>
 80091ce:	4603      	mov	r3, r0
 80091d0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f000 f861 	bl	800929c <USBH_Get_USB_Status>
 80091da:	4603      	mov	r3, r0
 80091dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091de:	7bbb      	ldrb	r3, [r7, #14]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd90      	pop	{r4, r7, pc}

080091e8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	460b      	mov	r3, r1
 80091f2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091fa:	78fa      	ldrb	r2, [r7, #3]
 80091fc:	4611      	mov	r1, r2
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fb f8ff 	bl	8004402 <HAL_HCD_HC_GetURBState>
 8009204:	4603      	mov	r3, r0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b082      	sub	sp, #8
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
 8009216:	460b      	mov	r3, r1
 8009218:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009220:	2b01      	cmp	r3, #1
 8009222:	d103      	bne.n	800922c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009224:	78fb      	ldrb	r3, [r7, #3]
 8009226:	4618      	mov	r0, r3
 8009228:	f000 f864 	bl	80092f4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800922c:	20c8      	movs	r0, #200	; 0xc8
 800922e:	f7fa fa17 	bl	8003660 <HAL_Delay>
  return USBH_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3708      	adds	r7, #8
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	460b      	mov	r3, r1
 8009246:	70fb      	strb	r3, [r7, #3]
 8009248:	4613      	mov	r3, r2
 800924a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009252:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009254:	78fb      	ldrb	r3, [r7, #3]
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	212c      	movs	r1, #44	; 0x2c
 800925a:	fb01 f303 	mul.w	r3, r1, r3
 800925e:	4413      	add	r3, r2
 8009260:	333b      	adds	r3, #59	; 0x3b
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d009      	beq.n	800927c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009268:	78fb      	ldrb	r3, [r7, #3]
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	212c      	movs	r1, #44	; 0x2c
 800926e:	fb01 f303 	mul.w	r3, r1, r3
 8009272:	4413      	add	r3, r2
 8009274:	3354      	adds	r3, #84	; 0x54
 8009276:	78ba      	ldrb	r2, [r7, #2]
 8009278:	701a      	strb	r2, [r3, #0]
 800927a:	e008      	b.n	800928e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800927c:	78fb      	ldrb	r3, [r7, #3]
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	212c      	movs	r1, #44	; 0x2c
 8009282:	fb01 f303 	mul.w	r3, r1, r3
 8009286:	4413      	add	r3, r2
 8009288:	3355      	adds	r3, #85	; 0x55
 800928a:	78ba      	ldrb	r2, [r7, #2]
 800928c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	4603      	mov	r3, r0
 80092a4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092aa:	79fb      	ldrb	r3, [r7, #7]
 80092ac:	2b03      	cmp	r3, #3
 80092ae:	d817      	bhi.n	80092e0 <USBH_Get_USB_Status+0x44>
 80092b0:	a201      	add	r2, pc, #4	; (adr r2, 80092b8 <USBH_Get_USB_Status+0x1c>)
 80092b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b6:	bf00      	nop
 80092b8:	080092c9 	.word	0x080092c9
 80092bc:	080092cf 	.word	0x080092cf
 80092c0:	080092d5 	.word	0x080092d5
 80092c4:	080092db 	.word	0x080092db
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	73fb      	strb	r3, [r7, #15]
    break;
 80092cc:	e00b      	b.n	80092e6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80092ce:	2302      	movs	r3, #2
 80092d0:	73fb      	strb	r3, [r7, #15]
    break;
 80092d2:	e008      	b.n	80092e6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80092d4:	2301      	movs	r3, #1
 80092d6:	73fb      	strb	r3, [r7, #15]
    break;
 80092d8:	e005      	b.n	80092e6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80092da:	2302      	movs	r3, #2
 80092dc:	73fb      	strb	r3, [r7, #15]
    break;
 80092de:	e002      	b.n	80092e6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80092e0:	2302      	movs	r3, #2
 80092e2:	73fb      	strb	r3, [r7, #15]
    break;
 80092e4:	bf00      	nop
  }
  return usb_status;
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3714      	adds	r7, #20
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	4603      	mov	r3, r0
 80092fc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80092fe:	79fb      	ldrb	r3, [r7, #7]
 8009300:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009302:	79fb      	ldrb	r3, [r7, #7]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d102      	bne.n	800930e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009308:	2300      	movs	r3, #0
 800930a:	73fb      	strb	r3, [r7, #15]
 800930c:	e001      	b.n	8009312 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800930e:	2301      	movs	r3, #1
 8009310:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009312:	7bfb      	ldrb	r3, [r7, #15]
 8009314:	461a      	mov	r2, r3
 8009316:	2101      	movs	r1, #1
 8009318:	4803      	ldr	r0, [pc, #12]	; (8009328 <MX_DriverVbusFS+0x34>)
 800931a:	f7fa fc8b 	bl	8003c34 <HAL_GPIO_WritePin>
}
 800931e:	bf00      	nop
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	40020800 	.word	0x40020800

0800932c <__errno>:
 800932c:	4b01      	ldr	r3, [pc, #4]	; (8009334 <__errno+0x8>)
 800932e:	6818      	ldr	r0, [r3, #0]
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	2000002c 	.word	0x2000002c

08009338 <__libc_init_array>:
 8009338:	b570      	push	{r4, r5, r6, lr}
 800933a:	4d0d      	ldr	r5, [pc, #52]	; (8009370 <__libc_init_array+0x38>)
 800933c:	4c0d      	ldr	r4, [pc, #52]	; (8009374 <__libc_init_array+0x3c>)
 800933e:	1b64      	subs	r4, r4, r5
 8009340:	10a4      	asrs	r4, r4, #2
 8009342:	2600      	movs	r6, #0
 8009344:	42a6      	cmp	r6, r4
 8009346:	d109      	bne.n	800935c <__libc_init_array+0x24>
 8009348:	4d0b      	ldr	r5, [pc, #44]	; (8009378 <__libc_init_array+0x40>)
 800934a:	4c0c      	ldr	r4, [pc, #48]	; (800937c <__libc_init_array+0x44>)
 800934c:	f001 f88e 	bl	800a46c <_init>
 8009350:	1b64      	subs	r4, r4, r5
 8009352:	10a4      	asrs	r4, r4, #2
 8009354:	2600      	movs	r6, #0
 8009356:	42a6      	cmp	r6, r4
 8009358:	d105      	bne.n	8009366 <__libc_init_array+0x2e>
 800935a:	bd70      	pop	{r4, r5, r6, pc}
 800935c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009360:	4798      	blx	r3
 8009362:	3601      	adds	r6, #1
 8009364:	e7ee      	b.n	8009344 <__libc_init_array+0xc>
 8009366:	f855 3b04 	ldr.w	r3, [r5], #4
 800936a:	4798      	blx	r3
 800936c:	3601      	adds	r6, #1
 800936e:	e7f2      	b.n	8009356 <__libc_init_array+0x1e>
 8009370:	0800a5fc 	.word	0x0800a5fc
 8009374:	0800a5fc 	.word	0x0800a5fc
 8009378:	0800a5fc 	.word	0x0800a5fc
 800937c:	0800a600 	.word	0x0800a600

08009380 <malloc>:
 8009380:	4b02      	ldr	r3, [pc, #8]	; (800938c <malloc+0xc>)
 8009382:	4601      	mov	r1, r0
 8009384:	6818      	ldr	r0, [r3, #0]
 8009386:	f000 b87f 	b.w	8009488 <_malloc_r>
 800938a:	bf00      	nop
 800938c:	2000002c 	.word	0x2000002c

08009390 <free>:
 8009390:	4b02      	ldr	r3, [pc, #8]	; (800939c <free+0xc>)
 8009392:	4601      	mov	r1, r0
 8009394:	6818      	ldr	r0, [r3, #0]
 8009396:	f000 b80b 	b.w	80093b0 <_free_r>
 800939a:	bf00      	nop
 800939c:	2000002c 	.word	0x2000002c

080093a0 <memset>:
 80093a0:	4402      	add	r2, r0
 80093a2:	4603      	mov	r3, r0
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d100      	bne.n	80093aa <memset+0xa>
 80093a8:	4770      	bx	lr
 80093aa:	f803 1b01 	strb.w	r1, [r3], #1
 80093ae:	e7f9      	b.n	80093a4 <memset+0x4>

080093b0 <_free_r>:
 80093b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093b2:	2900      	cmp	r1, #0
 80093b4:	d044      	beq.n	8009440 <_free_r+0x90>
 80093b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093ba:	9001      	str	r0, [sp, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f1a1 0404 	sub.w	r4, r1, #4
 80093c2:	bfb8      	it	lt
 80093c4:	18e4      	addlt	r4, r4, r3
 80093c6:	f000 f97f 	bl	80096c8 <__malloc_lock>
 80093ca:	4a1e      	ldr	r2, [pc, #120]	; (8009444 <_free_r+0x94>)
 80093cc:	9801      	ldr	r0, [sp, #4]
 80093ce:	6813      	ldr	r3, [r2, #0]
 80093d0:	b933      	cbnz	r3, 80093e0 <_free_r+0x30>
 80093d2:	6063      	str	r3, [r4, #4]
 80093d4:	6014      	str	r4, [r2, #0]
 80093d6:	b003      	add	sp, #12
 80093d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093dc:	f000 b97a 	b.w	80096d4 <__malloc_unlock>
 80093e0:	42a3      	cmp	r3, r4
 80093e2:	d908      	bls.n	80093f6 <_free_r+0x46>
 80093e4:	6825      	ldr	r5, [r4, #0]
 80093e6:	1961      	adds	r1, r4, r5
 80093e8:	428b      	cmp	r3, r1
 80093ea:	bf01      	itttt	eq
 80093ec:	6819      	ldreq	r1, [r3, #0]
 80093ee:	685b      	ldreq	r3, [r3, #4]
 80093f0:	1949      	addeq	r1, r1, r5
 80093f2:	6021      	streq	r1, [r4, #0]
 80093f4:	e7ed      	b.n	80093d2 <_free_r+0x22>
 80093f6:	461a      	mov	r2, r3
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	b10b      	cbz	r3, 8009400 <_free_r+0x50>
 80093fc:	42a3      	cmp	r3, r4
 80093fe:	d9fa      	bls.n	80093f6 <_free_r+0x46>
 8009400:	6811      	ldr	r1, [r2, #0]
 8009402:	1855      	adds	r5, r2, r1
 8009404:	42a5      	cmp	r5, r4
 8009406:	d10b      	bne.n	8009420 <_free_r+0x70>
 8009408:	6824      	ldr	r4, [r4, #0]
 800940a:	4421      	add	r1, r4
 800940c:	1854      	adds	r4, r2, r1
 800940e:	42a3      	cmp	r3, r4
 8009410:	6011      	str	r1, [r2, #0]
 8009412:	d1e0      	bne.n	80093d6 <_free_r+0x26>
 8009414:	681c      	ldr	r4, [r3, #0]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	6053      	str	r3, [r2, #4]
 800941a:	4421      	add	r1, r4
 800941c:	6011      	str	r1, [r2, #0]
 800941e:	e7da      	b.n	80093d6 <_free_r+0x26>
 8009420:	d902      	bls.n	8009428 <_free_r+0x78>
 8009422:	230c      	movs	r3, #12
 8009424:	6003      	str	r3, [r0, #0]
 8009426:	e7d6      	b.n	80093d6 <_free_r+0x26>
 8009428:	6825      	ldr	r5, [r4, #0]
 800942a:	1961      	adds	r1, r4, r5
 800942c:	428b      	cmp	r3, r1
 800942e:	bf04      	itt	eq
 8009430:	6819      	ldreq	r1, [r3, #0]
 8009432:	685b      	ldreq	r3, [r3, #4]
 8009434:	6063      	str	r3, [r4, #4]
 8009436:	bf04      	itt	eq
 8009438:	1949      	addeq	r1, r1, r5
 800943a:	6021      	streq	r1, [r4, #0]
 800943c:	6054      	str	r4, [r2, #4]
 800943e:	e7ca      	b.n	80093d6 <_free_r+0x26>
 8009440:	b003      	add	sp, #12
 8009442:	bd30      	pop	{r4, r5, pc}
 8009444:	20000840 	.word	0x20000840

08009448 <sbrk_aligned>:
 8009448:	b570      	push	{r4, r5, r6, lr}
 800944a:	4e0e      	ldr	r6, [pc, #56]	; (8009484 <sbrk_aligned+0x3c>)
 800944c:	460c      	mov	r4, r1
 800944e:	6831      	ldr	r1, [r6, #0]
 8009450:	4605      	mov	r5, r0
 8009452:	b911      	cbnz	r1, 800945a <sbrk_aligned+0x12>
 8009454:	f000 f8f8 	bl	8009648 <_sbrk_r>
 8009458:	6030      	str	r0, [r6, #0]
 800945a:	4621      	mov	r1, r4
 800945c:	4628      	mov	r0, r5
 800945e:	f000 f8f3 	bl	8009648 <_sbrk_r>
 8009462:	1c43      	adds	r3, r0, #1
 8009464:	d00a      	beq.n	800947c <sbrk_aligned+0x34>
 8009466:	1cc4      	adds	r4, r0, #3
 8009468:	f024 0403 	bic.w	r4, r4, #3
 800946c:	42a0      	cmp	r0, r4
 800946e:	d007      	beq.n	8009480 <sbrk_aligned+0x38>
 8009470:	1a21      	subs	r1, r4, r0
 8009472:	4628      	mov	r0, r5
 8009474:	f000 f8e8 	bl	8009648 <_sbrk_r>
 8009478:	3001      	adds	r0, #1
 800947a:	d101      	bne.n	8009480 <sbrk_aligned+0x38>
 800947c:	f04f 34ff 	mov.w	r4, #4294967295
 8009480:	4620      	mov	r0, r4
 8009482:	bd70      	pop	{r4, r5, r6, pc}
 8009484:	20000844 	.word	0x20000844

08009488 <_malloc_r>:
 8009488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800948c:	1ccd      	adds	r5, r1, #3
 800948e:	f025 0503 	bic.w	r5, r5, #3
 8009492:	3508      	adds	r5, #8
 8009494:	2d0c      	cmp	r5, #12
 8009496:	bf38      	it	cc
 8009498:	250c      	movcc	r5, #12
 800949a:	2d00      	cmp	r5, #0
 800949c:	4607      	mov	r7, r0
 800949e:	db01      	blt.n	80094a4 <_malloc_r+0x1c>
 80094a0:	42a9      	cmp	r1, r5
 80094a2:	d905      	bls.n	80094b0 <_malloc_r+0x28>
 80094a4:	230c      	movs	r3, #12
 80094a6:	603b      	str	r3, [r7, #0]
 80094a8:	2600      	movs	r6, #0
 80094aa:	4630      	mov	r0, r6
 80094ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094b0:	4e2e      	ldr	r6, [pc, #184]	; (800956c <_malloc_r+0xe4>)
 80094b2:	f000 f909 	bl	80096c8 <__malloc_lock>
 80094b6:	6833      	ldr	r3, [r6, #0]
 80094b8:	461c      	mov	r4, r3
 80094ba:	bb34      	cbnz	r4, 800950a <_malloc_r+0x82>
 80094bc:	4629      	mov	r1, r5
 80094be:	4638      	mov	r0, r7
 80094c0:	f7ff ffc2 	bl	8009448 <sbrk_aligned>
 80094c4:	1c43      	adds	r3, r0, #1
 80094c6:	4604      	mov	r4, r0
 80094c8:	d14d      	bne.n	8009566 <_malloc_r+0xde>
 80094ca:	6834      	ldr	r4, [r6, #0]
 80094cc:	4626      	mov	r6, r4
 80094ce:	2e00      	cmp	r6, #0
 80094d0:	d140      	bne.n	8009554 <_malloc_r+0xcc>
 80094d2:	6823      	ldr	r3, [r4, #0]
 80094d4:	4631      	mov	r1, r6
 80094d6:	4638      	mov	r0, r7
 80094d8:	eb04 0803 	add.w	r8, r4, r3
 80094dc:	f000 f8b4 	bl	8009648 <_sbrk_r>
 80094e0:	4580      	cmp	r8, r0
 80094e2:	d13a      	bne.n	800955a <_malloc_r+0xd2>
 80094e4:	6821      	ldr	r1, [r4, #0]
 80094e6:	3503      	adds	r5, #3
 80094e8:	1a6d      	subs	r5, r5, r1
 80094ea:	f025 0503 	bic.w	r5, r5, #3
 80094ee:	3508      	adds	r5, #8
 80094f0:	2d0c      	cmp	r5, #12
 80094f2:	bf38      	it	cc
 80094f4:	250c      	movcc	r5, #12
 80094f6:	4629      	mov	r1, r5
 80094f8:	4638      	mov	r0, r7
 80094fa:	f7ff ffa5 	bl	8009448 <sbrk_aligned>
 80094fe:	3001      	adds	r0, #1
 8009500:	d02b      	beq.n	800955a <_malloc_r+0xd2>
 8009502:	6823      	ldr	r3, [r4, #0]
 8009504:	442b      	add	r3, r5
 8009506:	6023      	str	r3, [r4, #0]
 8009508:	e00e      	b.n	8009528 <_malloc_r+0xa0>
 800950a:	6822      	ldr	r2, [r4, #0]
 800950c:	1b52      	subs	r2, r2, r5
 800950e:	d41e      	bmi.n	800954e <_malloc_r+0xc6>
 8009510:	2a0b      	cmp	r2, #11
 8009512:	d916      	bls.n	8009542 <_malloc_r+0xba>
 8009514:	1961      	adds	r1, r4, r5
 8009516:	42a3      	cmp	r3, r4
 8009518:	6025      	str	r5, [r4, #0]
 800951a:	bf18      	it	ne
 800951c:	6059      	strne	r1, [r3, #4]
 800951e:	6863      	ldr	r3, [r4, #4]
 8009520:	bf08      	it	eq
 8009522:	6031      	streq	r1, [r6, #0]
 8009524:	5162      	str	r2, [r4, r5]
 8009526:	604b      	str	r3, [r1, #4]
 8009528:	4638      	mov	r0, r7
 800952a:	f104 060b 	add.w	r6, r4, #11
 800952e:	f000 f8d1 	bl	80096d4 <__malloc_unlock>
 8009532:	f026 0607 	bic.w	r6, r6, #7
 8009536:	1d23      	adds	r3, r4, #4
 8009538:	1af2      	subs	r2, r6, r3
 800953a:	d0b6      	beq.n	80094aa <_malloc_r+0x22>
 800953c:	1b9b      	subs	r3, r3, r6
 800953e:	50a3      	str	r3, [r4, r2]
 8009540:	e7b3      	b.n	80094aa <_malloc_r+0x22>
 8009542:	6862      	ldr	r2, [r4, #4]
 8009544:	42a3      	cmp	r3, r4
 8009546:	bf0c      	ite	eq
 8009548:	6032      	streq	r2, [r6, #0]
 800954a:	605a      	strne	r2, [r3, #4]
 800954c:	e7ec      	b.n	8009528 <_malloc_r+0xa0>
 800954e:	4623      	mov	r3, r4
 8009550:	6864      	ldr	r4, [r4, #4]
 8009552:	e7b2      	b.n	80094ba <_malloc_r+0x32>
 8009554:	4634      	mov	r4, r6
 8009556:	6876      	ldr	r6, [r6, #4]
 8009558:	e7b9      	b.n	80094ce <_malloc_r+0x46>
 800955a:	230c      	movs	r3, #12
 800955c:	603b      	str	r3, [r7, #0]
 800955e:	4638      	mov	r0, r7
 8009560:	f000 f8b8 	bl	80096d4 <__malloc_unlock>
 8009564:	e7a1      	b.n	80094aa <_malloc_r+0x22>
 8009566:	6025      	str	r5, [r4, #0]
 8009568:	e7de      	b.n	8009528 <_malloc_r+0xa0>
 800956a:	bf00      	nop
 800956c:	20000840 	.word	0x20000840

08009570 <srand>:
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	4b10      	ldr	r3, [pc, #64]	; (80095b4 <srand+0x44>)
 8009574:	681d      	ldr	r5, [r3, #0]
 8009576:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009578:	4604      	mov	r4, r0
 800957a:	b9b3      	cbnz	r3, 80095aa <srand+0x3a>
 800957c:	2018      	movs	r0, #24
 800957e:	f7ff feff 	bl	8009380 <malloc>
 8009582:	4602      	mov	r2, r0
 8009584:	63a8      	str	r0, [r5, #56]	; 0x38
 8009586:	b920      	cbnz	r0, 8009592 <srand+0x22>
 8009588:	4b0b      	ldr	r3, [pc, #44]	; (80095b8 <srand+0x48>)
 800958a:	480c      	ldr	r0, [pc, #48]	; (80095bc <srand+0x4c>)
 800958c:	2142      	movs	r1, #66	; 0x42
 800958e:	f000 f86b 	bl	8009668 <__assert_func>
 8009592:	490b      	ldr	r1, [pc, #44]	; (80095c0 <srand+0x50>)
 8009594:	4b0b      	ldr	r3, [pc, #44]	; (80095c4 <srand+0x54>)
 8009596:	e9c0 1300 	strd	r1, r3, [r0]
 800959a:	4b0b      	ldr	r3, [pc, #44]	; (80095c8 <srand+0x58>)
 800959c:	6083      	str	r3, [r0, #8]
 800959e:	230b      	movs	r3, #11
 80095a0:	8183      	strh	r3, [r0, #12]
 80095a2:	2100      	movs	r1, #0
 80095a4:	2001      	movs	r0, #1
 80095a6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80095aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80095ac:	2200      	movs	r2, #0
 80095ae:	611c      	str	r4, [r3, #16]
 80095b0:	615a      	str	r2, [r3, #20]
 80095b2:	bd38      	pop	{r3, r4, r5, pc}
 80095b4:	2000002c 	.word	0x2000002c
 80095b8:	0800a4b0 	.word	0x0800a4b0
 80095bc:	0800a4c7 	.word	0x0800a4c7
 80095c0:	abcd330e 	.word	0xabcd330e
 80095c4:	e66d1234 	.word	0xe66d1234
 80095c8:	0005deec 	.word	0x0005deec

080095cc <rand>:
 80095cc:	4b16      	ldr	r3, [pc, #88]	; (8009628 <rand+0x5c>)
 80095ce:	b510      	push	{r4, lr}
 80095d0:	681c      	ldr	r4, [r3, #0]
 80095d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80095d4:	b9b3      	cbnz	r3, 8009604 <rand+0x38>
 80095d6:	2018      	movs	r0, #24
 80095d8:	f7ff fed2 	bl	8009380 <malloc>
 80095dc:	63a0      	str	r0, [r4, #56]	; 0x38
 80095de:	b928      	cbnz	r0, 80095ec <rand+0x20>
 80095e0:	4602      	mov	r2, r0
 80095e2:	4b12      	ldr	r3, [pc, #72]	; (800962c <rand+0x60>)
 80095e4:	4812      	ldr	r0, [pc, #72]	; (8009630 <rand+0x64>)
 80095e6:	214e      	movs	r1, #78	; 0x4e
 80095e8:	f000 f83e 	bl	8009668 <__assert_func>
 80095ec:	4a11      	ldr	r2, [pc, #68]	; (8009634 <rand+0x68>)
 80095ee:	4b12      	ldr	r3, [pc, #72]	; (8009638 <rand+0x6c>)
 80095f0:	e9c0 2300 	strd	r2, r3, [r0]
 80095f4:	4b11      	ldr	r3, [pc, #68]	; (800963c <rand+0x70>)
 80095f6:	6083      	str	r3, [r0, #8]
 80095f8:	230b      	movs	r3, #11
 80095fa:	8183      	strh	r3, [r0, #12]
 80095fc:	2201      	movs	r2, #1
 80095fe:	2300      	movs	r3, #0
 8009600:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009604:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8009606:	4a0e      	ldr	r2, [pc, #56]	; (8009640 <rand+0x74>)
 8009608:	6920      	ldr	r0, [r4, #16]
 800960a:	6963      	ldr	r3, [r4, #20]
 800960c:	490d      	ldr	r1, [pc, #52]	; (8009644 <rand+0x78>)
 800960e:	4342      	muls	r2, r0
 8009610:	fb01 2203 	mla	r2, r1, r3, r2
 8009614:	fba0 0101 	umull	r0, r1, r0, r1
 8009618:	1c43      	adds	r3, r0, #1
 800961a:	eb42 0001 	adc.w	r0, r2, r1
 800961e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8009622:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009626:	bd10      	pop	{r4, pc}
 8009628:	2000002c 	.word	0x2000002c
 800962c:	0800a4b0 	.word	0x0800a4b0
 8009630:	0800a4c7 	.word	0x0800a4c7
 8009634:	abcd330e 	.word	0xabcd330e
 8009638:	e66d1234 	.word	0xe66d1234
 800963c:	0005deec 	.word	0x0005deec
 8009640:	5851f42d 	.word	0x5851f42d
 8009644:	4c957f2d 	.word	0x4c957f2d

08009648 <_sbrk_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	4d06      	ldr	r5, [pc, #24]	; (8009664 <_sbrk_r+0x1c>)
 800964c:	2300      	movs	r3, #0
 800964e:	4604      	mov	r4, r0
 8009650:	4608      	mov	r0, r1
 8009652:	602b      	str	r3, [r5, #0]
 8009654:	f7f9 ff20 	bl	8003498 <_sbrk>
 8009658:	1c43      	adds	r3, r0, #1
 800965a:	d102      	bne.n	8009662 <_sbrk_r+0x1a>
 800965c:	682b      	ldr	r3, [r5, #0]
 800965e:	b103      	cbz	r3, 8009662 <_sbrk_r+0x1a>
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	bd38      	pop	{r3, r4, r5, pc}
 8009664:	20000848 	.word	0x20000848

08009668 <__assert_func>:
 8009668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800966a:	4614      	mov	r4, r2
 800966c:	461a      	mov	r2, r3
 800966e:	4b09      	ldr	r3, [pc, #36]	; (8009694 <__assert_func+0x2c>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4605      	mov	r5, r0
 8009674:	68d8      	ldr	r0, [r3, #12]
 8009676:	b14c      	cbz	r4, 800968c <__assert_func+0x24>
 8009678:	4b07      	ldr	r3, [pc, #28]	; (8009698 <__assert_func+0x30>)
 800967a:	9100      	str	r1, [sp, #0]
 800967c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009680:	4906      	ldr	r1, [pc, #24]	; (800969c <__assert_func+0x34>)
 8009682:	462b      	mov	r3, r5
 8009684:	f000 f80e 	bl	80096a4 <fiprintf>
 8009688:	f000 fbd8 	bl	8009e3c <abort>
 800968c:	4b04      	ldr	r3, [pc, #16]	; (80096a0 <__assert_func+0x38>)
 800968e:	461c      	mov	r4, r3
 8009690:	e7f3      	b.n	800967a <__assert_func+0x12>
 8009692:	bf00      	nop
 8009694:	2000002c 	.word	0x2000002c
 8009698:	0800a522 	.word	0x0800a522
 800969c:	0800a52f 	.word	0x0800a52f
 80096a0:	0800a55d 	.word	0x0800a55d

080096a4 <fiprintf>:
 80096a4:	b40e      	push	{r1, r2, r3}
 80096a6:	b503      	push	{r0, r1, lr}
 80096a8:	4601      	mov	r1, r0
 80096aa:	ab03      	add	r3, sp, #12
 80096ac:	4805      	ldr	r0, [pc, #20]	; (80096c4 <fiprintf+0x20>)
 80096ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80096b2:	6800      	ldr	r0, [r0, #0]
 80096b4:	9301      	str	r3, [sp, #4]
 80096b6:	f000 f83d 	bl	8009734 <_vfiprintf_r>
 80096ba:	b002      	add	sp, #8
 80096bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80096c0:	b003      	add	sp, #12
 80096c2:	4770      	bx	lr
 80096c4:	2000002c 	.word	0x2000002c

080096c8 <__malloc_lock>:
 80096c8:	4801      	ldr	r0, [pc, #4]	; (80096d0 <__malloc_lock+0x8>)
 80096ca:	f000 bd77 	b.w	800a1bc <__retarget_lock_acquire_recursive>
 80096ce:	bf00      	nop
 80096d0:	2000084c 	.word	0x2000084c

080096d4 <__malloc_unlock>:
 80096d4:	4801      	ldr	r0, [pc, #4]	; (80096dc <__malloc_unlock+0x8>)
 80096d6:	f000 bd72 	b.w	800a1be <__retarget_lock_release_recursive>
 80096da:	bf00      	nop
 80096dc:	2000084c 	.word	0x2000084c

080096e0 <__sfputc_r>:
 80096e0:	6893      	ldr	r3, [r2, #8]
 80096e2:	3b01      	subs	r3, #1
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	b410      	push	{r4}
 80096e8:	6093      	str	r3, [r2, #8]
 80096ea:	da08      	bge.n	80096fe <__sfputc_r+0x1e>
 80096ec:	6994      	ldr	r4, [r2, #24]
 80096ee:	42a3      	cmp	r3, r4
 80096f0:	db01      	blt.n	80096f6 <__sfputc_r+0x16>
 80096f2:	290a      	cmp	r1, #10
 80096f4:	d103      	bne.n	80096fe <__sfputc_r+0x1e>
 80096f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096fa:	f000 badf 	b.w	8009cbc <__swbuf_r>
 80096fe:	6813      	ldr	r3, [r2, #0]
 8009700:	1c58      	adds	r0, r3, #1
 8009702:	6010      	str	r0, [r2, #0]
 8009704:	7019      	strb	r1, [r3, #0]
 8009706:	4608      	mov	r0, r1
 8009708:	f85d 4b04 	ldr.w	r4, [sp], #4
 800970c:	4770      	bx	lr

0800970e <__sfputs_r>:
 800970e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009710:	4606      	mov	r6, r0
 8009712:	460f      	mov	r7, r1
 8009714:	4614      	mov	r4, r2
 8009716:	18d5      	adds	r5, r2, r3
 8009718:	42ac      	cmp	r4, r5
 800971a:	d101      	bne.n	8009720 <__sfputs_r+0x12>
 800971c:	2000      	movs	r0, #0
 800971e:	e007      	b.n	8009730 <__sfputs_r+0x22>
 8009720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009724:	463a      	mov	r2, r7
 8009726:	4630      	mov	r0, r6
 8009728:	f7ff ffda 	bl	80096e0 <__sfputc_r>
 800972c:	1c43      	adds	r3, r0, #1
 800972e:	d1f3      	bne.n	8009718 <__sfputs_r+0xa>
 8009730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009734 <_vfiprintf_r>:
 8009734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009738:	460d      	mov	r5, r1
 800973a:	b09d      	sub	sp, #116	; 0x74
 800973c:	4614      	mov	r4, r2
 800973e:	4698      	mov	r8, r3
 8009740:	4606      	mov	r6, r0
 8009742:	b118      	cbz	r0, 800974c <_vfiprintf_r+0x18>
 8009744:	6983      	ldr	r3, [r0, #24]
 8009746:	b90b      	cbnz	r3, 800974c <_vfiprintf_r+0x18>
 8009748:	f000 fc9a 	bl	800a080 <__sinit>
 800974c:	4b89      	ldr	r3, [pc, #548]	; (8009974 <_vfiprintf_r+0x240>)
 800974e:	429d      	cmp	r5, r3
 8009750:	d11b      	bne.n	800978a <_vfiprintf_r+0x56>
 8009752:	6875      	ldr	r5, [r6, #4]
 8009754:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009756:	07d9      	lsls	r1, r3, #31
 8009758:	d405      	bmi.n	8009766 <_vfiprintf_r+0x32>
 800975a:	89ab      	ldrh	r3, [r5, #12]
 800975c:	059a      	lsls	r2, r3, #22
 800975e:	d402      	bmi.n	8009766 <_vfiprintf_r+0x32>
 8009760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009762:	f000 fd2b 	bl	800a1bc <__retarget_lock_acquire_recursive>
 8009766:	89ab      	ldrh	r3, [r5, #12]
 8009768:	071b      	lsls	r3, r3, #28
 800976a:	d501      	bpl.n	8009770 <_vfiprintf_r+0x3c>
 800976c:	692b      	ldr	r3, [r5, #16]
 800976e:	b9eb      	cbnz	r3, 80097ac <_vfiprintf_r+0x78>
 8009770:	4629      	mov	r1, r5
 8009772:	4630      	mov	r0, r6
 8009774:	f000 faf4 	bl	8009d60 <__swsetup_r>
 8009778:	b1c0      	cbz	r0, 80097ac <_vfiprintf_r+0x78>
 800977a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800977c:	07dc      	lsls	r4, r3, #31
 800977e:	d50e      	bpl.n	800979e <_vfiprintf_r+0x6a>
 8009780:	f04f 30ff 	mov.w	r0, #4294967295
 8009784:	b01d      	add	sp, #116	; 0x74
 8009786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800978a:	4b7b      	ldr	r3, [pc, #492]	; (8009978 <_vfiprintf_r+0x244>)
 800978c:	429d      	cmp	r5, r3
 800978e:	d101      	bne.n	8009794 <_vfiprintf_r+0x60>
 8009790:	68b5      	ldr	r5, [r6, #8]
 8009792:	e7df      	b.n	8009754 <_vfiprintf_r+0x20>
 8009794:	4b79      	ldr	r3, [pc, #484]	; (800997c <_vfiprintf_r+0x248>)
 8009796:	429d      	cmp	r5, r3
 8009798:	bf08      	it	eq
 800979a:	68f5      	ldreq	r5, [r6, #12]
 800979c:	e7da      	b.n	8009754 <_vfiprintf_r+0x20>
 800979e:	89ab      	ldrh	r3, [r5, #12]
 80097a0:	0598      	lsls	r0, r3, #22
 80097a2:	d4ed      	bmi.n	8009780 <_vfiprintf_r+0x4c>
 80097a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097a6:	f000 fd0a 	bl	800a1be <__retarget_lock_release_recursive>
 80097aa:	e7e9      	b.n	8009780 <_vfiprintf_r+0x4c>
 80097ac:	2300      	movs	r3, #0
 80097ae:	9309      	str	r3, [sp, #36]	; 0x24
 80097b0:	2320      	movs	r3, #32
 80097b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80097ba:	2330      	movs	r3, #48	; 0x30
 80097bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009980 <_vfiprintf_r+0x24c>
 80097c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097c4:	f04f 0901 	mov.w	r9, #1
 80097c8:	4623      	mov	r3, r4
 80097ca:	469a      	mov	sl, r3
 80097cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097d0:	b10a      	cbz	r2, 80097d6 <_vfiprintf_r+0xa2>
 80097d2:	2a25      	cmp	r2, #37	; 0x25
 80097d4:	d1f9      	bne.n	80097ca <_vfiprintf_r+0x96>
 80097d6:	ebba 0b04 	subs.w	fp, sl, r4
 80097da:	d00b      	beq.n	80097f4 <_vfiprintf_r+0xc0>
 80097dc:	465b      	mov	r3, fp
 80097de:	4622      	mov	r2, r4
 80097e0:	4629      	mov	r1, r5
 80097e2:	4630      	mov	r0, r6
 80097e4:	f7ff ff93 	bl	800970e <__sfputs_r>
 80097e8:	3001      	adds	r0, #1
 80097ea:	f000 80aa 	beq.w	8009942 <_vfiprintf_r+0x20e>
 80097ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097f0:	445a      	add	r2, fp
 80097f2:	9209      	str	r2, [sp, #36]	; 0x24
 80097f4:	f89a 3000 	ldrb.w	r3, [sl]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 80a2 	beq.w	8009942 <_vfiprintf_r+0x20e>
 80097fe:	2300      	movs	r3, #0
 8009800:	f04f 32ff 	mov.w	r2, #4294967295
 8009804:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009808:	f10a 0a01 	add.w	sl, sl, #1
 800980c:	9304      	str	r3, [sp, #16]
 800980e:	9307      	str	r3, [sp, #28]
 8009810:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009814:	931a      	str	r3, [sp, #104]	; 0x68
 8009816:	4654      	mov	r4, sl
 8009818:	2205      	movs	r2, #5
 800981a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800981e:	4858      	ldr	r0, [pc, #352]	; (8009980 <_vfiprintf_r+0x24c>)
 8009820:	f7f6 fcd6 	bl	80001d0 <memchr>
 8009824:	9a04      	ldr	r2, [sp, #16]
 8009826:	b9d8      	cbnz	r0, 8009860 <_vfiprintf_r+0x12c>
 8009828:	06d1      	lsls	r1, r2, #27
 800982a:	bf44      	itt	mi
 800982c:	2320      	movmi	r3, #32
 800982e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009832:	0713      	lsls	r3, r2, #28
 8009834:	bf44      	itt	mi
 8009836:	232b      	movmi	r3, #43	; 0x2b
 8009838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800983c:	f89a 3000 	ldrb.w	r3, [sl]
 8009840:	2b2a      	cmp	r3, #42	; 0x2a
 8009842:	d015      	beq.n	8009870 <_vfiprintf_r+0x13c>
 8009844:	9a07      	ldr	r2, [sp, #28]
 8009846:	4654      	mov	r4, sl
 8009848:	2000      	movs	r0, #0
 800984a:	f04f 0c0a 	mov.w	ip, #10
 800984e:	4621      	mov	r1, r4
 8009850:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009854:	3b30      	subs	r3, #48	; 0x30
 8009856:	2b09      	cmp	r3, #9
 8009858:	d94e      	bls.n	80098f8 <_vfiprintf_r+0x1c4>
 800985a:	b1b0      	cbz	r0, 800988a <_vfiprintf_r+0x156>
 800985c:	9207      	str	r2, [sp, #28]
 800985e:	e014      	b.n	800988a <_vfiprintf_r+0x156>
 8009860:	eba0 0308 	sub.w	r3, r0, r8
 8009864:	fa09 f303 	lsl.w	r3, r9, r3
 8009868:	4313      	orrs	r3, r2
 800986a:	9304      	str	r3, [sp, #16]
 800986c:	46a2      	mov	sl, r4
 800986e:	e7d2      	b.n	8009816 <_vfiprintf_r+0xe2>
 8009870:	9b03      	ldr	r3, [sp, #12]
 8009872:	1d19      	adds	r1, r3, #4
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	9103      	str	r1, [sp, #12]
 8009878:	2b00      	cmp	r3, #0
 800987a:	bfbb      	ittet	lt
 800987c:	425b      	neglt	r3, r3
 800987e:	f042 0202 	orrlt.w	r2, r2, #2
 8009882:	9307      	strge	r3, [sp, #28]
 8009884:	9307      	strlt	r3, [sp, #28]
 8009886:	bfb8      	it	lt
 8009888:	9204      	strlt	r2, [sp, #16]
 800988a:	7823      	ldrb	r3, [r4, #0]
 800988c:	2b2e      	cmp	r3, #46	; 0x2e
 800988e:	d10c      	bne.n	80098aa <_vfiprintf_r+0x176>
 8009890:	7863      	ldrb	r3, [r4, #1]
 8009892:	2b2a      	cmp	r3, #42	; 0x2a
 8009894:	d135      	bne.n	8009902 <_vfiprintf_r+0x1ce>
 8009896:	9b03      	ldr	r3, [sp, #12]
 8009898:	1d1a      	adds	r2, r3, #4
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	9203      	str	r2, [sp, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	bfb8      	it	lt
 80098a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80098a6:	3402      	adds	r4, #2
 80098a8:	9305      	str	r3, [sp, #20]
 80098aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009990 <_vfiprintf_r+0x25c>
 80098ae:	7821      	ldrb	r1, [r4, #0]
 80098b0:	2203      	movs	r2, #3
 80098b2:	4650      	mov	r0, sl
 80098b4:	f7f6 fc8c 	bl	80001d0 <memchr>
 80098b8:	b140      	cbz	r0, 80098cc <_vfiprintf_r+0x198>
 80098ba:	2340      	movs	r3, #64	; 0x40
 80098bc:	eba0 000a 	sub.w	r0, r0, sl
 80098c0:	fa03 f000 	lsl.w	r0, r3, r0
 80098c4:	9b04      	ldr	r3, [sp, #16]
 80098c6:	4303      	orrs	r3, r0
 80098c8:	3401      	adds	r4, #1
 80098ca:	9304      	str	r3, [sp, #16]
 80098cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098d0:	482c      	ldr	r0, [pc, #176]	; (8009984 <_vfiprintf_r+0x250>)
 80098d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098d6:	2206      	movs	r2, #6
 80098d8:	f7f6 fc7a 	bl	80001d0 <memchr>
 80098dc:	2800      	cmp	r0, #0
 80098de:	d03f      	beq.n	8009960 <_vfiprintf_r+0x22c>
 80098e0:	4b29      	ldr	r3, [pc, #164]	; (8009988 <_vfiprintf_r+0x254>)
 80098e2:	bb1b      	cbnz	r3, 800992c <_vfiprintf_r+0x1f8>
 80098e4:	9b03      	ldr	r3, [sp, #12]
 80098e6:	3307      	adds	r3, #7
 80098e8:	f023 0307 	bic.w	r3, r3, #7
 80098ec:	3308      	adds	r3, #8
 80098ee:	9303      	str	r3, [sp, #12]
 80098f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f2:	443b      	add	r3, r7
 80098f4:	9309      	str	r3, [sp, #36]	; 0x24
 80098f6:	e767      	b.n	80097c8 <_vfiprintf_r+0x94>
 80098f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80098fc:	460c      	mov	r4, r1
 80098fe:	2001      	movs	r0, #1
 8009900:	e7a5      	b.n	800984e <_vfiprintf_r+0x11a>
 8009902:	2300      	movs	r3, #0
 8009904:	3401      	adds	r4, #1
 8009906:	9305      	str	r3, [sp, #20]
 8009908:	4619      	mov	r1, r3
 800990a:	f04f 0c0a 	mov.w	ip, #10
 800990e:	4620      	mov	r0, r4
 8009910:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009914:	3a30      	subs	r2, #48	; 0x30
 8009916:	2a09      	cmp	r2, #9
 8009918:	d903      	bls.n	8009922 <_vfiprintf_r+0x1ee>
 800991a:	2b00      	cmp	r3, #0
 800991c:	d0c5      	beq.n	80098aa <_vfiprintf_r+0x176>
 800991e:	9105      	str	r1, [sp, #20]
 8009920:	e7c3      	b.n	80098aa <_vfiprintf_r+0x176>
 8009922:	fb0c 2101 	mla	r1, ip, r1, r2
 8009926:	4604      	mov	r4, r0
 8009928:	2301      	movs	r3, #1
 800992a:	e7f0      	b.n	800990e <_vfiprintf_r+0x1da>
 800992c:	ab03      	add	r3, sp, #12
 800992e:	9300      	str	r3, [sp, #0]
 8009930:	462a      	mov	r2, r5
 8009932:	4b16      	ldr	r3, [pc, #88]	; (800998c <_vfiprintf_r+0x258>)
 8009934:	a904      	add	r1, sp, #16
 8009936:	4630      	mov	r0, r6
 8009938:	f3af 8000 	nop.w
 800993c:	4607      	mov	r7, r0
 800993e:	1c78      	adds	r0, r7, #1
 8009940:	d1d6      	bne.n	80098f0 <_vfiprintf_r+0x1bc>
 8009942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009944:	07d9      	lsls	r1, r3, #31
 8009946:	d405      	bmi.n	8009954 <_vfiprintf_r+0x220>
 8009948:	89ab      	ldrh	r3, [r5, #12]
 800994a:	059a      	lsls	r2, r3, #22
 800994c:	d402      	bmi.n	8009954 <_vfiprintf_r+0x220>
 800994e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009950:	f000 fc35 	bl	800a1be <__retarget_lock_release_recursive>
 8009954:	89ab      	ldrh	r3, [r5, #12]
 8009956:	065b      	lsls	r3, r3, #25
 8009958:	f53f af12 	bmi.w	8009780 <_vfiprintf_r+0x4c>
 800995c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800995e:	e711      	b.n	8009784 <_vfiprintf_r+0x50>
 8009960:	ab03      	add	r3, sp, #12
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	462a      	mov	r2, r5
 8009966:	4b09      	ldr	r3, [pc, #36]	; (800998c <_vfiprintf_r+0x258>)
 8009968:	a904      	add	r1, sp, #16
 800996a:	4630      	mov	r0, r6
 800996c:	f000 f880 	bl	8009a70 <_printf_i>
 8009970:	e7e4      	b.n	800993c <_vfiprintf_r+0x208>
 8009972:	bf00      	nop
 8009974:	0800a5b4 	.word	0x0800a5b4
 8009978:	0800a5d4 	.word	0x0800a5d4
 800997c:	0800a594 	.word	0x0800a594
 8009980:	0800a55e 	.word	0x0800a55e
 8009984:	0800a568 	.word	0x0800a568
 8009988:	00000000 	.word	0x00000000
 800998c:	0800970f 	.word	0x0800970f
 8009990:	0800a564 	.word	0x0800a564

08009994 <_printf_common>:
 8009994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009998:	4616      	mov	r6, r2
 800999a:	4699      	mov	r9, r3
 800999c:	688a      	ldr	r2, [r1, #8]
 800999e:	690b      	ldr	r3, [r1, #16]
 80099a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099a4:	4293      	cmp	r3, r2
 80099a6:	bfb8      	it	lt
 80099a8:	4613      	movlt	r3, r2
 80099aa:	6033      	str	r3, [r6, #0]
 80099ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099b0:	4607      	mov	r7, r0
 80099b2:	460c      	mov	r4, r1
 80099b4:	b10a      	cbz	r2, 80099ba <_printf_common+0x26>
 80099b6:	3301      	adds	r3, #1
 80099b8:	6033      	str	r3, [r6, #0]
 80099ba:	6823      	ldr	r3, [r4, #0]
 80099bc:	0699      	lsls	r1, r3, #26
 80099be:	bf42      	ittt	mi
 80099c0:	6833      	ldrmi	r3, [r6, #0]
 80099c2:	3302      	addmi	r3, #2
 80099c4:	6033      	strmi	r3, [r6, #0]
 80099c6:	6825      	ldr	r5, [r4, #0]
 80099c8:	f015 0506 	ands.w	r5, r5, #6
 80099cc:	d106      	bne.n	80099dc <_printf_common+0x48>
 80099ce:	f104 0a19 	add.w	sl, r4, #25
 80099d2:	68e3      	ldr	r3, [r4, #12]
 80099d4:	6832      	ldr	r2, [r6, #0]
 80099d6:	1a9b      	subs	r3, r3, r2
 80099d8:	42ab      	cmp	r3, r5
 80099da:	dc26      	bgt.n	8009a2a <_printf_common+0x96>
 80099dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099e0:	1e13      	subs	r3, r2, #0
 80099e2:	6822      	ldr	r2, [r4, #0]
 80099e4:	bf18      	it	ne
 80099e6:	2301      	movne	r3, #1
 80099e8:	0692      	lsls	r2, r2, #26
 80099ea:	d42b      	bmi.n	8009a44 <_printf_common+0xb0>
 80099ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099f0:	4649      	mov	r1, r9
 80099f2:	4638      	mov	r0, r7
 80099f4:	47c0      	blx	r8
 80099f6:	3001      	adds	r0, #1
 80099f8:	d01e      	beq.n	8009a38 <_printf_common+0xa4>
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	68e5      	ldr	r5, [r4, #12]
 80099fe:	6832      	ldr	r2, [r6, #0]
 8009a00:	f003 0306 	and.w	r3, r3, #6
 8009a04:	2b04      	cmp	r3, #4
 8009a06:	bf08      	it	eq
 8009a08:	1aad      	subeq	r5, r5, r2
 8009a0a:	68a3      	ldr	r3, [r4, #8]
 8009a0c:	6922      	ldr	r2, [r4, #16]
 8009a0e:	bf0c      	ite	eq
 8009a10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a14:	2500      	movne	r5, #0
 8009a16:	4293      	cmp	r3, r2
 8009a18:	bfc4      	itt	gt
 8009a1a:	1a9b      	subgt	r3, r3, r2
 8009a1c:	18ed      	addgt	r5, r5, r3
 8009a1e:	2600      	movs	r6, #0
 8009a20:	341a      	adds	r4, #26
 8009a22:	42b5      	cmp	r5, r6
 8009a24:	d11a      	bne.n	8009a5c <_printf_common+0xc8>
 8009a26:	2000      	movs	r0, #0
 8009a28:	e008      	b.n	8009a3c <_printf_common+0xa8>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	4652      	mov	r2, sl
 8009a2e:	4649      	mov	r1, r9
 8009a30:	4638      	mov	r0, r7
 8009a32:	47c0      	blx	r8
 8009a34:	3001      	adds	r0, #1
 8009a36:	d103      	bne.n	8009a40 <_printf_common+0xac>
 8009a38:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a40:	3501      	adds	r5, #1
 8009a42:	e7c6      	b.n	80099d2 <_printf_common+0x3e>
 8009a44:	18e1      	adds	r1, r4, r3
 8009a46:	1c5a      	adds	r2, r3, #1
 8009a48:	2030      	movs	r0, #48	; 0x30
 8009a4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a4e:	4422      	add	r2, r4
 8009a50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a58:	3302      	adds	r3, #2
 8009a5a:	e7c7      	b.n	80099ec <_printf_common+0x58>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	4622      	mov	r2, r4
 8009a60:	4649      	mov	r1, r9
 8009a62:	4638      	mov	r0, r7
 8009a64:	47c0      	blx	r8
 8009a66:	3001      	adds	r0, #1
 8009a68:	d0e6      	beq.n	8009a38 <_printf_common+0xa4>
 8009a6a:	3601      	adds	r6, #1
 8009a6c:	e7d9      	b.n	8009a22 <_printf_common+0x8e>
	...

08009a70 <_printf_i>:
 8009a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a74:	7e0f      	ldrb	r7, [r1, #24]
 8009a76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a78:	2f78      	cmp	r7, #120	; 0x78
 8009a7a:	4691      	mov	r9, r2
 8009a7c:	4680      	mov	r8, r0
 8009a7e:	460c      	mov	r4, r1
 8009a80:	469a      	mov	sl, r3
 8009a82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a86:	d807      	bhi.n	8009a98 <_printf_i+0x28>
 8009a88:	2f62      	cmp	r7, #98	; 0x62
 8009a8a:	d80a      	bhi.n	8009aa2 <_printf_i+0x32>
 8009a8c:	2f00      	cmp	r7, #0
 8009a8e:	f000 80d8 	beq.w	8009c42 <_printf_i+0x1d2>
 8009a92:	2f58      	cmp	r7, #88	; 0x58
 8009a94:	f000 80a3 	beq.w	8009bde <_printf_i+0x16e>
 8009a98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009aa0:	e03a      	b.n	8009b18 <_printf_i+0xa8>
 8009aa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009aa6:	2b15      	cmp	r3, #21
 8009aa8:	d8f6      	bhi.n	8009a98 <_printf_i+0x28>
 8009aaa:	a101      	add	r1, pc, #4	; (adr r1, 8009ab0 <_printf_i+0x40>)
 8009aac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ab0:	08009b09 	.word	0x08009b09
 8009ab4:	08009b1d 	.word	0x08009b1d
 8009ab8:	08009a99 	.word	0x08009a99
 8009abc:	08009a99 	.word	0x08009a99
 8009ac0:	08009a99 	.word	0x08009a99
 8009ac4:	08009a99 	.word	0x08009a99
 8009ac8:	08009b1d 	.word	0x08009b1d
 8009acc:	08009a99 	.word	0x08009a99
 8009ad0:	08009a99 	.word	0x08009a99
 8009ad4:	08009a99 	.word	0x08009a99
 8009ad8:	08009a99 	.word	0x08009a99
 8009adc:	08009c29 	.word	0x08009c29
 8009ae0:	08009b4d 	.word	0x08009b4d
 8009ae4:	08009c0b 	.word	0x08009c0b
 8009ae8:	08009a99 	.word	0x08009a99
 8009aec:	08009a99 	.word	0x08009a99
 8009af0:	08009c4b 	.word	0x08009c4b
 8009af4:	08009a99 	.word	0x08009a99
 8009af8:	08009b4d 	.word	0x08009b4d
 8009afc:	08009a99 	.word	0x08009a99
 8009b00:	08009a99 	.word	0x08009a99
 8009b04:	08009c13 	.word	0x08009c13
 8009b08:	682b      	ldr	r3, [r5, #0]
 8009b0a:	1d1a      	adds	r2, r3, #4
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	602a      	str	r2, [r5, #0]
 8009b10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e0a3      	b.n	8009c64 <_printf_i+0x1f4>
 8009b1c:	6820      	ldr	r0, [r4, #0]
 8009b1e:	6829      	ldr	r1, [r5, #0]
 8009b20:	0606      	lsls	r6, r0, #24
 8009b22:	f101 0304 	add.w	r3, r1, #4
 8009b26:	d50a      	bpl.n	8009b3e <_printf_i+0xce>
 8009b28:	680e      	ldr	r6, [r1, #0]
 8009b2a:	602b      	str	r3, [r5, #0]
 8009b2c:	2e00      	cmp	r6, #0
 8009b2e:	da03      	bge.n	8009b38 <_printf_i+0xc8>
 8009b30:	232d      	movs	r3, #45	; 0x2d
 8009b32:	4276      	negs	r6, r6
 8009b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b38:	485e      	ldr	r0, [pc, #376]	; (8009cb4 <_printf_i+0x244>)
 8009b3a:	230a      	movs	r3, #10
 8009b3c:	e019      	b.n	8009b72 <_printf_i+0x102>
 8009b3e:	680e      	ldr	r6, [r1, #0]
 8009b40:	602b      	str	r3, [r5, #0]
 8009b42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b46:	bf18      	it	ne
 8009b48:	b236      	sxthne	r6, r6
 8009b4a:	e7ef      	b.n	8009b2c <_printf_i+0xbc>
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	6820      	ldr	r0, [r4, #0]
 8009b50:	1d19      	adds	r1, r3, #4
 8009b52:	6029      	str	r1, [r5, #0]
 8009b54:	0601      	lsls	r1, r0, #24
 8009b56:	d501      	bpl.n	8009b5c <_printf_i+0xec>
 8009b58:	681e      	ldr	r6, [r3, #0]
 8009b5a:	e002      	b.n	8009b62 <_printf_i+0xf2>
 8009b5c:	0646      	lsls	r6, r0, #25
 8009b5e:	d5fb      	bpl.n	8009b58 <_printf_i+0xe8>
 8009b60:	881e      	ldrh	r6, [r3, #0]
 8009b62:	4854      	ldr	r0, [pc, #336]	; (8009cb4 <_printf_i+0x244>)
 8009b64:	2f6f      	cmp	r7, #111	; 0x6f
 8009b66:	bf0c      	ite	eq
 8009b68:	2308      	moveq	r3, #8
 8009b6a:	230a      	movne	r3, #10
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b72:	6865      	ldr	r5, [r4, #4]
 8009b74:	60a5      	str	r5, [r4, #8]
 8009b76:	2d00      	cmp	r5, #0
 8009b78:	bfa2      	ittt	ge
 8009b7a:	6821      	ldrge	r1, [r4, #0]
 8009b7c:	f021 0104 	bicge.w	r1, r1, #4
 8009b80:	6021      	strge	r1, [r4, #0]
 8009b82:	b90e      	cbnz	r6, 8009b88 <_printf_i+0x118>
 8009b84:	2d00      	cmp	r5, #0
 8009b86:	d04d      	beq.n	8009c24 <_printf_i+0x1b4>
 8009b88:	4615      	mov	r5, r2
 8009b8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b8e:	fb03 6711 	mls	r7, r3, r1, r6
 8009b92:	5dc7      	ldrb	r7, [r0, r7]
 8009b94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b98:	4637      	mov	r7, r6
 8009b9a:	42bb      	cmp	r3, r7
 8009b9c:	460e      	mov	r6, r1
 8009b9e:	d9f4      	bls.n	8009b8a <_printf_i+0x11a>
 8009ba0:	2b08      	cmp	r3, #8
 8009ba2:	d10b      	bne.n	8009bbc <_printf_i+0x14c>
 8009ba4:	6823      	ldr	r3, [r4, #0]
 8009ba6:	07de      	lsls	r6, r3, #31
 8009ba8:	d508      	bpl.n	8009bbc <_printf_i+0x14c>
 8009baa:	6923      	ldr	r3, [r4, #16]
 8009bac:	6861      	ldr	r1, [r4, #4]
 8009bae:	4299      	cmp	r1, r3
 8009bb0:	bfde      	ittt	le
 8009bb2:	2330      	movle	r3, #48	; 0x30
 8009bb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009bbc:	1b52      	subs	r2, r2, r5
 8009bbe:	6122      	str	r2, [r4, #16]
 8009bc0:	f8cd a000 	str.w	sl, [sp]
 8009bc4:	464b      	mov	r3, r9
 8009bc6:	aa03      	add	r2, sp, #12
 8009bc8:	4621      	mov	r1, r4
 8009bca:	4640      	mov	r0, r8
 8009bcc:	f7ff fee2 	bl	8009994 <_printf_common>
 8009bd0:	3001      	adds	r0, #1
 8009bd2:	d14c      	bne.n	8009c6e <_printf_i+0x1fe>
 8009bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd8:	b004      	add	sp, #16
 8009bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bde:	4835      	ldr	r0, [pc, #212]	; (8009cb4 <_printf_i+0x244>)
 8009be0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009be4:	6829      	ldr	r1, [r5, #0]
 8009be6:	6823      	ldr	r3, [r4, #0]
 8009be8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009bec:	6029      	str	r1, [r5, #0]
 8009bee:	061d      	lsls	r5, r3, #24
 8009bf0:	d514      	bpl.n	8009c1c <_printf_i+0x1ac>
 8009bf2:	07df      	lsls	r7, r3, #31
 8009bf4:	bf44      	itt	mi
 8009bf6:	f043 0320 	orrmi.w	r3, r3, #32
 8009bfa:	6023      	strmi	r3, [r4, #0]
 8009bfc:	b91e      	cbnz	r6, 8009c06 <_printf_i+0x196>
 8009bfe:	6823      	ldr	r3, [r4, #0]
 8009c00:	f023 0320 	bic.w	r3, r3, #32
 8009c04:	6023      	str	r3, [r4, #0]
 8009c06:	2310      	movs	r3, #16
 8009c08:	e7b0      	b.n	8009b6c <_printf_i+0xfc>
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	f043 0320 	orr.w	r3, r3, #32
 8009c10:	6023      	str	r3, [r4, #0]
 8009c12:	2378      	movs	r3, #120	; 0x78
 8009c14:	4828      	ldr	r0, [pc, #160]	; (8009cb8 <_printf_i+0x248>)
 8009c16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c1a:	e7e3      	b.n	8009be4 <_printf_i+0x174>
 8009c1c:	0659      	lsls	r1, r3, #25
 8009c1e:	bf48      	it	mi
 8009c20:	b2b6      	uxthmi	r6, r6
 8009c22:	e7e6      	b.n	8009bf2 <_printf_i+0x182>
 8009c24:	4615      	mov	r5, r2
 8009c26:	e7bb      	b.n	8009ba0 <_printf_i+0x130>
 8009c28:	682b      	ldr	r3, [r5, #0]
 8009c2a:	6826      	ldr	r6, [r4, #0]
 8009c2c:	6961      	ldr	r1, [r4, #20]
 8009c2e:	1d18      	adds	r0, r3, #4
 8009c30:	6028      	str	r0, [r5, #0]
 8009c32:	0635      	lsls	r5, r6, #24
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	d501      	bpl.n	8009c3c <_printf_i+0x1cc>
 8009c38:	6019      	str	r1, [r3, #0]
 8009c3a:	e002      	b.n	8009c42 <_printf_i+0x1d2>
 8009c3c:	0670      	lsls	r0, r6, #25
 8009c3e:	d5fb      	bpl.n	8009c38 <_printf_i+0x1c8>
 8009c40:	8019      	strh	r1, [r3, #0]
 8009c42:	2300      	movs	r3, #0
 8009c44:	6123      	str	r3, [r4, #16]
 8009c46:	4615      	mov	r5, r2
 8009c48:	e7ba      	b.n	8009bc0 <_printf_i+0x150>
 8009c4a:	682b      	ldr	r3, [r5, #0]
 8009c4c:	1d1a      	adds	r2, r3, #4
 8009c4e:	602a      	str	r2, [r5, #0]
 8009c50:	681d      	ldr	r5, [r3, #0]
 8009c52:	6862      	ldr	r2, [r4, #4]
 8009c54:	2100      	movs	r1, #0
 8009c56:	4628      	mov	r0, r5
 8009c58:	f7f6 faba 	bl	80001d0 <memchr>
 8009c5c:	b108      	cbz	r0, 8009c62 <_printf_i+0x1f2>
 8009c5e:	1b40      	subs	r0, r0, r5
 8009c60:	6060      	str	r0, [r4, #4]
 8009c62:	6863      	ldr	r3, [r4, #4]
 8009c64:	6123      	str	r3, [r4, #16]
 8009c66:	2300      	movs	r3, #0
 8009c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c6c:	e7a8      	b.n	8009bc0 <_printf_i+0x150>
 8009c6e:	6923      	ldr	r3, [r4, #16]
 8009c70:	462a      	mov	r2, r5
 8009c72:	4649      	mov	r1, r9
 8009c74:	4640      	mov	r0, r8
 8009c76:	47d0      	blx	sl
 8009c78:	3001      	adds	r0, #1
 8009c7a:	d0ab      	beq.n	8009bd4 <_printf_i+0x164>
 8009c7c:	6823      	ldr	r3, [r4, #0]
 8009c7e:	079b      	lsls	r3, r3, #30
 8009c80:	d413      	bmi.n	8009caa <_printf_i+0x23a>
 8009c82:	68e0      	ldr	r0, [r4, #12]
 8009c84:	9b03      	ldr	r3, [sp, #12]
 8009c86:	4298      	cmp	r0, r3
 8009c88:	bfb8      	it	lt
 8009c8a:	4618      	movlt	r0, r3
 8009c8c:	e7a4      	b.n	8009bd8 <_printf_i+0x168>
 8009c8e:	2301      	movs	r3, #1
 8009c90:	4632      	mov	r2, r6
 8009c92:	4649      	mov	r1, r9
 8009c94:	4640      	mov	r0, r8
 8009c96:	47d0      	blx	sl
 8009c98:	3001      	adds	r0, #1
 8009c9a:	d09b      	beq.n	8009bd4 <_printf_i+0x164>
 8009c9c:	3501      	adds	r5, #1
 8009c9e:	68e3      	ldr	r3, [r4, #12]
 8009ca0:	9903      	ldr	r1, [sp, #12]
 8009ca2:	1a5b      	subs	r3, r3, r1
 8009ca4:	42ab      	cmp	r3, r5
 8009ca6:	dcf2      	bgt.n	8009c8e <_printf_i+0x21e>
 8009ca8:	e7eb      	b.n	8009c82 <_printf_i+0x212>
 8009caa:	2500      	movs	r5, #0
 8009cac:	f104 0619 	add.w	r6, r4, #25
 8009cb0:	e7f5      	b.n	8009c9e <_printf_i+0x22e>
 8009cb2:	bf00      	nop
 8009cb4:	0800a56f 	.word	0x0800a56f
 8009cb8:	0800a580 	.word	0x0800a580

08009cbc <__swbuf_r>:
 8009cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cbe:	460e      	mov	r6, r1
 8009cc0:	4614      	mov	r4, r2
 8009cc2:	4605      	mov	r5, r0
 8009cc4:	b118      	cbz	r0, 8009cce <__swbuf_r+0x12>
 8009cc6:	6983      	ldr	r3, [r0, #24]
 8009cc8:	b90b      	cbnz	r3, 8009cce <__swbuf_r+0x12>
 8009cca:	f000 f9d9 	bl	800a080 <__sinit>
 8009cce:	4b21      	ldr	r3, [pc, #132]	; (8009d54 <__swbuf_r+0x98>)
 8009cd0:	429c      	cmp	r4, r3
 8009cd2:	d12b      	bne.n	8009d2c <__swbuf_r+0x70>
 8009cd4:	686c      	ldr	r4, [r5, #4]
 8009cd6:	69a3      	ldr	r3, [r4, #24]
 8009cd8:	60a3      	str	r3, [r4, #8]
 8009cda:	89a3      	ldrh	r3, [r4, #12]
 8009cdc:	071a      	lsls	r2, r3, #28
 8009cde:	d52f      	bpl.n	8009d40 <__swbuf_r+0x84>
 8009ce0:	6923      	ldr	r3, [r4, #16]
 8009ce2:	b36b      	cbz	r3, 8009d40 <__swbuf_r+0x84>
 8009ce4:	6923      	ldr	r3, [r4, #16]
 8009ce6:	6820      	ldr	r0, [r4, #0]
 8009ce8:	1ac0      	subs	r0, r0, r3
 8009cea:	6963      	ldr	r3, [r4, #20]
 8009cec:	b2f6      	uxtb	r6, r6
 8009cee:	4283      	cmp	r3, r0
 8009cf0:	4637      	mov	r7, r6
 8009cf2:	dc04      	bgt.n	8009cfe <__swbuf_r+0x42>
 8009cf4:	4621      	mov	r1, r4
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	f000 f92e 	bl	8009f58 <_fflush_r>
 8009cfc:	bb30      	cbnz	r0, 8009d4c <__swbuf_r+0x90>
 8009cfe:	68a3      	ldr	r3, [r4, #8]
 8009d00:	3b01      	subs	r3, #1
 8009d02:	60a3      	str	r3, [r4, #8]
 8009d04:	6823      	ldr	r3, [r4, #0]
 8009d06:	1c5a      	adds	r2, r3, #1
 8009d08:	6022      	str	r2, [r4, #0]
 8009d0a:	701e      	strb	r6, [r3, #0]
 8009d0c:	6963      	ldr	r3, [r4, #20]
 8009d0e:	3001      	adds	r0, #1
 8009d10:	4283      	cmp	r3, r0
 8009d12:	d004      	beq.n	8009d1e <__swbuf_r+0x62>
 8009d14:	89a3      	ldrh	r3, [r4, #12]
 8009d16:	07db      	lsls	r3, r3, #31
 8009d18:	d506      	bpl.n	8009d28 <__swbuf_r+0x6c>
 8009d1a:	2e0a      	cmp	r6, #10
 8009d1c:	d104      	bne.n	8009d28 <__swbuf_r+0x6c>
 8009d1e:	4621      	mov	r1, r4
 8009d20:	4628      	mov	r0, r5
 8009d22:	f000 f919 	bl	8009f58 <_fflush_r>
 8009d26:	b988      	cbnz	r0, 8009d4c <__swbuf_r+0x90>
 8009d28:	4638      	mov	r0, r7
 8009d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d2c:	4b0a      	ldr	r3, [pc, #40]	; (8009d58 <__swbuf_r+0x9c>)
 8009d2e:	429c      	cmp	r4, r3
 8009d30:	d101      	bne.n	8009d36 <__swbuf_r+0x7a>
 8009d32:	68ac      	ldr	r4, [r5, #8]
 8009d34:	e7cf      	b.n	8009cd6 <__swbuf_r+0x1a>
 8009d36:	4b09      	ldr	r3, [pc, #36]	; (8009d5c <__swbuf_r+0xa0>)
 8009d38:	429c      	cmp	r4, r3
 8009d3a:	bf08      	it	eq
 8009d3c:	68ec      	ldreq	r4, [r5, #12]
 8009d3e:	e7ca      	b.n	8009cd6 <__swbuf_r+0x1a>
 8009d40:	4621      	mov	r1, r4
 8009d42:	4628      	mov	r0, r5
 8009d44:	f000 f80c 	bl	8009d60 <__swsetup_r>
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	d0cb      	beq.n	8009ce4 <__swbuf_r+0x28>
 8009d4c:	f04f 37ff 	mov.w	r7, #4294967295
 8009d50:	e7ea      	b.n	8009d28 <__swbuf_r+0x6c>
 8009d52:	bf00      	nop
 8009d54:	0800a5b4 	.word	0x0800a5b4
 8009d58:	0800a5d4 	.word	0x0800a5d4
 8009d5c:	0800a594 	.word	0x0800a594

08009d60 <__swsetup_r>:
 8009d60:	4b32      	ldr	r3, [pc, #200]	; (8009e2c <__swsetup_r+0xcc>)
 8009d62:	b570      	push	{r4, r5, r6, lr}
 8009d64:	681d      	ldr	r5, [r3, #0]
 8009d66:	4606      	mov	r6, r0
 8009d68:	460c      	mov	r4, r1
 8009d6a:	b125      	cbz	r5, 8009d76 <__swsetup_r+0x16>
 8009d6c:	69ab      	ldr	r3, [r5, #24]
 8009d6e:	b913      	cbnz	r3, 8009d76 <__swsetup_r+0x16>
 8009d70:	4628      	mov	r0, r5
 8009d72:	f000 f985 	bl	800a080 <__sinit>
 8009d76:	4b2e      	ldr	r3, [pc, #184]	; (8009e30 <__swsetup_r+0xd0>)
 8009d78:	429c      	cmp	r4, r3
 8009d7a:	d10f      	bne.n	8009d9c <__swsetup_r+0x3c>
 8009d7c:	686c      	ldr	r4, [r5, #4]
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d84:	0719      	lsls	r1, r3, #28
 8009d86:	d42c      	bmi.n	8009de2 <__swsetup_r+0x82>
 8009d88:	06dd      	lsls	r5, r3, #27
 8009d8a:	d411      	bmi.n	8009db0 <__swsetup_r+0x50>
 8009d8c:	2309      	movs	r3, #9
 8009d8e:	6033      	str	r3, [r6, #0]
 8009d90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d94:	81a3      	strh	r3, [r4, #12]
 8009d96:	f04f 30ff 	mov.w	r0, #4294967295
 8009d9a:	e03e      	b.n	8009e1a <__swsetup_r+0xba>
 8009d9c:	4b25      	ldr	r3, [pc, #148]	; (8009e34 <__swsetup_r+0xd4>)
 8009d9e:	429c      	cmp	r4, r3
 8009da0:	d101      	bne.n	8009da6 <__swsetup_r+0x46>
 8009da2:	68ac      	ldr	r4, [r5, #8]
 8009da4:	e7eb      	b.n	8009d7e <__swsetup_r+0x1e>
 8009da6:	4b24      	ldr	r3, [pc, #144]	; (8009e38 <__swsetup_r+0xd8>)
 8009da8:	429c      	cmp	r4, r3
 8009daa:	bf08      	it	eq
 8009dac:	68ec      	ldreq	r4, [r5, #12]
 8009dae:	e7e6      	b.n	8009d7e <__swsetup_r+0x1e>
 8009db0:	0758      	lsls	r0, r3, #29
 8009db2:	d512      	bpl.n	8009dda <__swsetup_r+0x7a>
 8009db4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009db6:	b141      	cbz	r1, 8009dca <__swsetup_r+0x6a>
 8009db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dbc:	4299      	cmp	r1, r3
 8009dbe:	d002      	beq.n	8009dc6 <__swsetup_r+0x66>
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	f7ff faf5 	bl	80093b0 <_free_r>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	6363      	str	r3, [r4, #52]	; 0x34
 8009dca:	89a3      	ldrh	r3, [r4, #12]
 8009dcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dd0:	81a3      	strh	r3, [r4, #12]
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	6063      	str	r3, [r4, #4]
 8009dd6:	6923      	ldr	r3, [r4, #16]
 8009dd8:	6023      	str	r3, [r4, #0]
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	f043 0308 	orr.w	r3, r3, #8
 8009de0:	81a3      	strh	r3, [r4, #12]
 8009de2:	6923      	ldr	r3, [r4, #16]
 8009de4:	b94b      	cbnz	r3, 8009dfa <__swsetup_r+0x9a>
 8009de6:	89a3      	ldrh	r3, [r4, #12]
 8009de8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009df0:	d003      	beq.n	8009dfa <__swsetup_r+0x9a>
 8009df2:	4621      	mov	r1, r4
 8009df4:	4630      	mov	r0, r6
 8009df6:	f000 fa09 	bl	800a20c <__smakebuf_r>
 8009dfa:	89a0      	ldrh	r0, [r4, #12]
 8009dfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e00:	f010 0301 	ands.w	r3, r0, #1
 8009e04:	d00a      	beq.n	8009e1c <__swsetup_r+0xbc>
 8009e06:	2300      	movs	r3, #0
 8009e08:	60a3      	str	r3, [r4, #8]
 8009e0a:	6963      	ldr	r3, [r4, #20]
 8009e0c:	425b      	negs	r3, r3
 8009e0e:	61a3      	str	r3, [r4, #24]
 8009e10:	6923      	ldr	r3, [r4, #16]
 8009e12:	b943      	cbnz	r3, 8009e26 <__swsetup_r+0xc6>
 8009e14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e18:	d1ba      	bne.n	8009d90 <__swsetup_r+0x30>
 8009e1a:	bd70      	pop	{r4, r5, r6, pc}
 8009e1c:	0781      	lsls	r1, r0, #30
 8009e1e:	bf58      	it	pl
 8009e20:	6963      	ldrpl	r3, [r4, #20]
 8009e22:	60a3      	str	r3, [r4, #8]
 8009e24:	e7f4      	b.n	8009e10 <__swsetup_r+0xb0>
 8009e26:	2000      	movs	r0, #0
 8009e28:	e7f7      	b.n	8009e1a <__swsetup_r+0xba>
 8009e2a:	bf00      	nop
 8009e2c:	2000002c 	.word	0x2000002c
 8009e30:	0800a5b4 	.word	0x0800a5b4
 8009e34:	0800a5d4 	.word	0x0800a5d4
 8009e38:	0800a594 	.word	0x0800a594

08009e3c <abort>:
 8009e3c:	b508      	push	{r3, lr}
 8009e3e:	2006      	movs	r0, #6
 8009e40:	f000 fa4c 	bl	800a2dc <raise>
 8009e44:	2001      	movs	r0, #1
 8009e46:	f7f9 faaf 	bl	80033a8 <_exit>
	...

08009e4c <__sflush_r>:
 8009e4c:	898a      	ldrh	r2, [r1, #12]
 8009e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e52:	4605      	mov	r5, r0
 8009e54:	0710      	lsls	r0, r2, #28
 8009e56:	460c      	mov	r4, r1
 8009e58:	d458      	bmi.n	8009f0c <__sflush_r+0xc0>
 8009e5a:	684b      	ldr	r3, [r1, #4]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	dc05      	bgt.n	8009e6c <__sflush_r+0x20>
 8009e60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	dc02      	bgt.n	8009e6c <__sflush_r+0x20>
 8009e66:	2000      	movs	r0, #0
 8009e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e6e:	2e00      	cmp	r6, #0
 8009e70:	d0f9      	beq.n	8009e66 <__sflush_r+0x1a>
 8009e72:	2300      	movs	r3, #0
 8009e74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e78:	682f      	ldr	r7, [r5, #0]
 8009e7a:	602b      	str	r3, [r5, #0]
 8009e7c:	d032      	beq.n	8009ee4 <__sflush_r+0x98>
 8009e7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e80:	89a3      	ldrh	r3, [r4, #12]
 8009e82:	075a      	lsls	r2, r3, #29
 8009e84:	d505      	bpl.n	8009e92 <__sflush_r+0x46>
 8009e86:	6863      	ldr	r3, [r4, #4]
 8009e88:	1ac0      	subs	r0, r0, r3
 8009e8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e8c:	b10b      	cbz	r3, 8009e92 <__sflush_r+0x46>
 8009e8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e90:	1ac0      	subs	r0, r0, r3
 8009e92:	2300      	movs	r3, #0
 8009e94:	4602      	mov	r2, r0
 8009e96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e98:	6a21      	ldr	r1, [r4, #32]
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	47b0      	blx	r6
 8009e9e:	1c43      	adds	r3, r0, #1
 8009ea0:	89a3      	ldrh	r3, [r4, #12]
 8009ea2:	d106      	bne.n	8009eb2 <__sflush_r+0x66>
 8009ea4:	6829      	ldr	r1, [r5, #0]
 8009ea6:	291d      	cmp	r1, #29
 8009ea8:	d82c      	bhi.n	8009f04 <__sflush_r+0xb8>
 8009eaa:	4a2a      	ldr	r2, [pc, #168]	; (8009f54 <__sflush_r+0x108>)
 8009eac:	40ca      	lsrs	r2, r1
 8009eae:	07d6      	lsls	r6, r2, #31
 8009eb0:	d528      	bpl.n	8009f04 <__sflush_r+0xb8>
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	6062      	str	r2, [r4, #4]
 8009eb6:	04d9      	lsls	r1, r3, #19
 8009eb8:	6922      	ldr	r2, [r4, #16]
 8009eba:	6022      	str	r2, [r4, #0]
 8009ebc:	d504      	bpl.n	8009ec8 <__sflush_r+0x7c>
 8009ebe:	1c42      	adds	r2, r0, #1
 8009ec0:	d101      	bne.n	8009ec6 <__sflush_r+0x7a>
 8009ec2:	682b      	ldr	r3, [r5, #0]
 8009ec4:	b903      	cbnz	r3, 8009ec8 <__sflush_r+0x7c>
 8009ec6:	6560      	str	r0, [r4, #84]	; 0x54
 8009ec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009eca:	602f      	str	r7, [r5, #0]
 8009ecc:	2900      	cmp	r1, #0
 8009ece:	d0ca      	beq.n	8009e66 <__sflush_r+0x1a>
 8009ed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ed4:	4299      	cmp	r1, r3
 8009ed6:	d002      	beq.n	8009ede <__sflush_r+0x92>
 8009ed8:	4628      	mov	r0, r5
 8009eda:	f7ff fa69 	bl	80093b0 <_free_r>
 8009ede:	2000      	movs	r0, #0
 8009ee0:	6360      	str	r0, [r4, #52]	; 0x34
 8009ee2:	e7c1      	b.n	8009e68 <__sflush_r+0x1c>
 8009ee4:	6a21      	ldr	r1, [r4, #32]
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	4628      	mov	r0, r5
 8009eea:	47b0      	blx	r6
 8009eec:	1c41      	adds	r1, r0, #1
 8009eee:	d1c7      	bne.n	8009e80 <__sflush_r+0x34>
 8009ef0:	682b      	ldr	r3, [r5, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d0c4      	beq.n	8009e80 <__sflush_r+0x34>
 8009ef6:	2b1d      	cmp	r3, #29
 8009ef8:	d001      	beq.n	8009efe <__sflush_r+0xb2>
 8009efa:	2b16      	cmp	r3, #22
 8009efc:	d101      	bne.n	8009f02 <__sflush_r+0xb6>
 8009efe:	602f      	str	r7, [r5, #0]
 8009f00:	e7b1      	b.n	8009e66 <__sflush_r+0x1a>
 8009f02:	89a3      	ldrh	r3, [r4, #12]
 8009f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f08:	81a3      	strh	r3, [r4, #12]
 8009f0a:	e7ad      	b.n	8009e68 <__sflush_r+0x1c>
 8009f0c:	690f      	ldr	r7, [r1, #16]
 8009f0e:	2f00      	cmp	r7, #0
 8009f10:	d0a9      	beq.n	8009e66 <__sflush_r+0x1a>
 8009f12:	0793      	lsls	r3, r2, #30
 8009f14:	680e      	ldr	r6, [r1, #0]
 8009f16:	bf08      	it	eq
 8009f18:	694b      	ldreq	r3, [r1, #20]
 8009f1a:	600f      	str	r7, [r1, #0]
 8009f1c:	bf18      	it	ne
 8009f1e:	2300      	movne	r3, #0
 8009f20:	eba6 0807 	sub.w	r8, r6, r7
 8009f24:	608b      	str	r3, [r1, #8]
 8009f26:	f1b8 0f00 	cmp.w	r8, #0
 8009f2a:	dd9c      	ble.n	8009e66 <__sflush_r+0x1a>
 8009f2c:	6a21      	ldr	r1, [r4, #32]
 8009f2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f30:	4643      	mov	r3, r8
 8009f32:	463a      	mov	r2, r7
 8009f34:	4628      	mov	r0, r5
 8009f36:	47b0      	blx	r6
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	dc06      	bgt.n	8009f4a <__sflush_r+0xfe>
 8009f3c:	89a3      	ldrh	r3, [r4, #12]
 8009f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f42:	81a3      	strh	r3, [r4, #12]
 8009f44:	f04f 30ff 	mov.w	r0, #4294967295
 8009f48:	e78e      	b.n	8009e68 <__sflush_r+0x1c>
 8009f4a:	4407      	add	r7, r0
 8009f4c:	eba8 0800 	sub.w	r8, r8, r0
 8009f50:	e7e9      	b.n	8009f26 <__sflush_r+0xda>
 8009f52:	bf00      	nop
 8009f54:	20400001 	.word	0x20400001

08009f58 <_fflush_r>:
 8009f58:	b538      	push	{r3, r4, r5, lr}
 8009f5a:	690b      	ldr	r3, [r1, #16]
 8009f5c:	4605      	mov	r5, r0
 8009f5e:	460c      	mov	r4, r1
 8009f60:	b913      	cbnz	r3, 8009f68 <_fflush_r+0x10>
 8009f62:	2500      	movs	r5, #0
 8009f64:	4628      	mov	r0, r5
 8009f66:	bd38      	pop	{r3, r4, r5, pc}
 8009f68:	b118      	cbz	r0, 8009f72 <_fflush_r+0x1a>
 8009f6a:	6983      	ldr	r3, [r0, #24]
 8009f6c:	b90b      	cbnz	r3, 8009f72 <_fflush_r+0x1a>
 8009f6e:	f000 f887 	bl	800a080 <__sinit>
 8009f72:	4b14      	ldr	r3, [pc, #80]	; (8009fc4 <_fflush_r+0x6c>)
 8009f74:	429c      	cmp	r4, r3
 8009f76:	d11b      	bne.n	8009fb0 <_fflush_r+0x58>
 8009f78:	686c      	ldr	r4, [r5, #4]
 8009f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d0ef      	beq.n	8009f62 <_fflush_r+0xa>
 8009f82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f84:	07d0      	lsls	r0, r2, #31
 8009f86:	d404      	bmi.n	8009f92 <_fflush_r+0x3a>
 8009f88:	0599      	lsls	r1, r3, #22
 8009f8a:	d402      	bmi.n	8009f92 <_fflush_r+0x3a>
 8009f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f8e:	f000 f915 	bl	800a1bc <__retarget_lock_acquire_recursive>
 8009f92:	4628      	mov	r0, r5
 8009f94:	4621      	mov	r1, r4
 8009f96:	f7ff ff59 	bl	8009e4c <__sflush_r>
 8009f9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f9c:	07da      	lsls	r2, r3, #31
 8009f9e:	4605      	mov	r5, r0
 8009fa0:	d4e0      	bmi.n	8009f64 <_fflush_r+0xc>
 8009fa2:	89a3      	ldrh	r3, [r4, #12]
 8009fa4:	059b      	lsls	r3, r3, #22
 8009fa6:	d4dd      	bmi.n	8009f64 <_fflush_r+0xc>
 8009fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009faa:	f000 f908 	bl	800a1be <__retarget_lock_release_recursive>
 8009fae:	e7d9      	b.n	8009f64 <_fflush_r+0xc>
 8009fb0:	4b05      	ldr	r3, [pc, #20]	; (8009fc8 <_fflush_r+0x70>)
 8009fb2:	429c      	cmp	r4, r3
 8009fb4:	d101      	bne.n	8009fba <_fflush_r+0x62>
 8009fb6:	68ac      	ldr	r4, [r5, #8]
 8009fb8:	e7df      	b.n	8009f7a <_fflush_r+0x22>
 8009fba:	4b04      	ldr	r3, [pc, #16]	; (8009fcc <_fflush_r+0x74>)
 8009fbc:	429c      	cmp	r4, r3
 8009fbe:	bf08      	it	eq
 8009fc0:	68ec      	ldreq	r4, [r5, #12]
 8009fc2:	e7da      	b.n	8009f7a <_fflush_r+0x22>
 8009fc4:	0800a5b4 	.word	0x0800a5b4
 8009fc8:	0800a5d4 	.word	0x0800a5d4
 8009fcc:	0800a594 	.word	0x0800a594

08009fd0 <std>:
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	b510      	push	{r4, lr}
 8009fd4:	4604      	mov	r4, r0
 8009fd6:	e9c0 3300 	strd	r3, r3, [r0]
 8009fda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fde:	6083      	str	r3, [r0, #8]
 8009fe0:	8181      	strh	r1, [r0, #12]
 8009fe2:	6643      	str	r3, [r0, #100]	; 0x64
 8009fe4:	81c2      	strh	r2, [r0, #14]
 8009fe6:	6183      	str	r3, [r0, #24]
 8009fe8:	4619      	mov	r1, r3
 8009fea:	2208      	movs	r2, #8
 8009fec:	305c      	adds	r0, #92	; 0x5c
 8009fee:	f7ff f9d7 	bl	80093a0 <memset>
 8009ff2:	4b05      	ldr	r3, [pc, #20]	; (800a008 <std+0x38>)
 8009ff4:	6263      	str	r3, [r4, #36]	; 0x24
 8009ff6:	4b05      	ldr	r3, [pc, #20]	; (800a00c <std+0x3c>)
 8009ff8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ffa:	4b05      	ldr	r3, [pc, #20]	; (800a010 <std+0x40>)
 8009ffc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ffe:	4b05      	ldr	r3, [pc, #20]	; (800a014 <std+0x44>)
 800a000:	6224      	str	r4, [r4, #32]
 800a002:	6323      	str	r3, [r4, #48]	; 0x30
 800a004:	bd10      	pop	{r4, pc}
 800a006:	bf00      	nop
 800a008:	0800a315 	.word	0x0800a315
 800a00c:	0800a337 	.word	0x0800a337
 800a010:	0800a36f 	.word	0x0800a36f
 800a014:	0800a393 	.word	0x0800a393

0800a018 <_cleanup_r>:
 800a018:	4901      	ldr	r1, [pc, #4]	; (800a020 <_cleanup_r+0x8>)
 800a01a:	f000 b8af 	b.w	800a17c <_fwalk_reent>
 800a01e:	bf00      	nop
 800a020:	08009f59 	.word	0x08009f59

0800a024 <__sfmoreglue>:
 800a024:	b570      	push	{r4, r5, r6, lr}
 800a026:	2268      	movs	r2, #104	; 0x68
 800a028:	1e4d      	subs	r5, r1, #1
 800a02a:	4355      	muls	r5, r2
 800a02c:	460e      	mov	r6, r1
 800a02e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a032:	f7ff fa29 	bl	8009488 <_malloc_r>
 800a036:	4604      	mov	r4, r0
 800a038:	b140      	cbz	r0, 800a04c <__sfmoreglue+0x28>
 800a03a:	2100      	movs	r1, #0
 800a03c:	e9c0 1600 	strd	r1, r6, [r0]
 800a040:	300c      	adds	r0, #12
 800a042:	60a0      	str	r0, [r4, #8]
 800a044:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a048:	f7ff f9aa 	bl	80093a0 <memset>
 800a04c:	4620      	mov	r0, r4
 800a04e:	bd70      	pop	{r4, r5, r6, pc}

0800a050 <__sfp_lock_acquire>:
 800a050:	4801      	ldr	r0, [pc, #4]	; (800a058 <__sfp_lock_acquire+0x8>)
 800a052:	f000 b8b3 	b.w	800a1bc <__retarget_lock_acquire_recursive>
 800a056:	bf00      	nop
 800a058:	2000084d 	.word	0x2000084d

0800a05c <__sfp_lock_release>:
 800a05c:	4801      	ldr	r0, [pc, #4]	; (800a064 <__sfp_lock_release+0x8>)
 800a05e:	f000 b8ae 	b.w	800a1be <__retarget_lock_release_recursive>
 800a062:	bf00      	nop
 800a064:	2000084d 	.word	0x2000084d

0800a068 <__sinit_lock_acquire>:
 800a068:	4801      	ldr	r0, [pc, #4]	; (800a070 <__sinit_lock_acquire+0x8>)
 800a06a:	f000 b8a7 	b.w	800a1bc <__retarget_lock_acquire_recursive>
 800a06e:	bf00      	nop
 800a070:	2000084e 	.word	0x2000084e

0800a074 <__sinit_lock_release>:
 800a074:	4801      	ldr	r0, [pc, #4]	; (800a07c <__sinit_lock_release+0x8>)
 800a076:	f000 b8a2 	b.w	800a1be <__retarget_lock_release_recursive>
 800a07a:	bf00      	nop
 800a07c:	2000084e 	.word	0x2000084e

0800a080 <__sinit>:
 800a080:	b510      	push	{r4, lr}
 800a082:	4604      	mov	r4, r0
 800a084:	f7ff fff0 	bl	800a068 <__sinit_lock_acquire>
 800a088:	69a3      	ldr	r3, [r4, #24]
 800a08a:	b11b      	cbz	r3, 800a094 <__sinit+0x14>
 800a08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a090:	f7ff bff0 	b.w	800a074 <__sinit_lock_release>
 800a094:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a098:	6523      	str	r3, [r4, #80]	; 0x50
 800a09a:	4b13      	ldr	r3, [pc, #76]	; (800a0e8 <__sinit+0x68>)
 800a09c:	4a13      	ldr	r2, [pc, #76]	; (800a0ec <__sinit+0x6c>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a0a2:	42a3      	cmp	r3, r4
 800a0a4:	bf04      	itt	eq
 800a0a6:	2301      	moveq	r3, #1
 800a0a8:	61a3      	streq	r3, [r4, #24]
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f000 f820 	bl	800a0f0 <__sfp>
 800a0b0:	6060      	str	r0, [r4, #4]
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f000 f81c 	bl	800a0f0 <__sfp>
 800a0b8:	60a0      	str	r0, [r4, #8]
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f000 f818 	bl	800a0f0 <__sfp>
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	60e0      	str	r0, [r4, #12]
 800a0c4:	2104      	movs	r1, #4
 800a0c6:	6860      	ldr	r0, [r4, #4]
 800a0c8:	f7ff ff82 	bl	8009fd0 <std>
 800a0cc:	68a0      	ldr	r0, [r4, #8]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	2109      	movs	r1, #9
 800a0d2:	f7ff ff7d 	bl	8009fd0 <std>
 800a0d6:	68e0      	ldr	r0, [r4, #12]
 800a0d8:	2202      	movs	r2, #2
 800a0da:	2112      	movs	r1, #18
 800a0dc:	f7ff ff78 	bl	8009fd0 <std>
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	61a3      	str	r3, [r4, #24]
 800a0e4:	e7d2      	b.n	800a08c <__sinit+0xc>
 800a0e6:	bf00      	nop
 800a0e8:	0800a4ac 	.word	0x0800a4ac
 800a0ec:	0800a019 	.word	0x0800a019

0800a0f0 <__sfp>:
 800a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f2:	4607      	mov	r7, r0
 800a0f4:	f7ff ffac 	bl	800a050 <__sfp_lock_acquire>
 800a0f8:	4b1e      	ldr	r3, [pc, #120]	; (800a174 <__sfp+0x84>)
 800a0fa:	681e      	ldr	r6, [r3, #0]
 800a0fc:	69b3      	ldr	r3, [r6, #24]
 800a0fe:	b913      	cbnz	r3, 800a106 <__sfp+0x16>
 800a100:	4630      	mov	r0, r6
 800a102:	f7ff ffbd 	bl	800a080 <__sinit>
 800a106:	3648      	adds	r6, #72	; 0x48
 800a108:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a10c:	3b01      	subs	r3, #1
 800a10e:	d503      	bpl.n	800a118 <__sfp+0x28>
 800a110:	6833      	ldr	r3, [r6, #0]
 800a112:	b30b      	cbz	r3, 800a158 <__sfp+0x68>
 800a114:	6836      	ldr	r6, [r6, #0]
 800a116:	e7f7      	b.n	800a108 <__sfp+0x18>
 800a118:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a11c:	b9d5      	cbnz	r5, 800a154 <__sfp+0x64>
 800a11e:	4b16      	ldr	r3, [pc, #88]	; (800a178 <__sfp+0x88>)
 800a120:	60e3      	str	r3, [r4, #12]
 800a122:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a126:	6665      	str	r5, [r4, #100]	; 0x64
 800a128:	f000 f847 	bl	800a1ba <__retarget_lock_init_recursive>
 800a12c:	f7ff ff96 	bl	800a05c <__sfp_lock_release>
 800a130:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a134:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a138:	6025      	str	r5, [r4, #0]
 800a13a:	61a5      	str	r5, [r4, #24]
 800a13c:	2208      	movs	r2, #8
 800a13e:	4629      	mov	r1, r5
 800a140:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a144:	f7ff f92c 	bl	80093a0 <memset>
 800a148:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a14c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a150:	4620      	mov	r0, r4
 800a152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a154:	3468      	adds	r4, #104	; 0x68
 800a156:	e7d9      	b.n	800a10c <__sfp+0x1c>
 800a158:	2104      	movs	r1, #4
 800a15a:	4638      	mov	r0, r7
 800a15c:	f7ff ff62 	bl	800a024 <__sfmoreglue>
 800a160:	4604      	mov	r4, r0
 800a162:	6030      	str	r0, [r6, #0]
 800a164:	2800      	cmp	r0, #0
 800a166:	d1d5      	bne.n	800a114 <__sfp+0x24>
 800a168:	f7ff ff78 	bl	800a05c <__sfp_lock_release>
 800a16c:	230c      	movs	r3, #12
 800a16e:	603b      	str	r3, [r7, #0]
 800a170:	e7ee      	b.n	800a150 <__sfp+0x60>
 800a172:	bf00      	nop
 800a174:	0800a4ac 	.word	0x0800a4ac
 800a178:	ffff0001 	.word	0xffff0001

0800a17c <_fwalk_reent>:
 800a17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a180:	4606      	mov	r6, r0
 800a182:	4688      	mov	r8, r1
 800a184:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a188:	2700      	movs	r7, #0
 800a18a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a18e:	f1b9 0901 	subs.w	r9, r9, #1
 800a192:	d505      	bpl.n	800a1a0 <_fwalk_reent+0x24>
 800a194:	6824      	ldr	r4, [r4, #0]
 800a196:	2c00      	cmp	r4, #0
 800a198:	d1f7      	bne.n	800a18a <_fwalk_reent+0xe>
 800a19a:	4638      	mov	r0, r7
 800a19c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1a0:	89ab      	ldrh	r3, [r5, #12]
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d907      	bls.n	800a1b6 <_fwalk_reent+0x3a>
 800a1a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	d003      	beq.n	800a1b6 <_fwalk_reent+0x3a>
 800a1ae:	4629      	mov	r1, r5
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	47c0      	blx	r8
 800a1b4:	4307      	orrs	r7, r0
 800a1b6:	3568      	adds	r5, #104	; 0x68
 800a1b8:	e7e9      	b.n	800a18e <_fwalk_reent+0x12>

0800a1ba <__retarget_lock_init_recursive>:
 800a1ba:	4770      	bx	lr

0800a1bc <__retarget_lock_acquire_recursive>:
 800a1bc:	4770      	bx	lr

0800a1be <__retarget_lock_release_recursive>:
 800a1be:	4770      	bx	lr

0800a1c0 <__swhatbuf_r>:
 800a1c0:	b570      	push	{r4, r5, r6, lr}
 800a1c2:	460e      	mov	r6, r1
 800a1c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c8:	2900      	cmp	r1, #0
 800a1ca:	b096      	sub	sp, #88	; 0x58
 800a1cc:	4614      	mov	r4, r2
 800a1ce:	461d      	mov	r5, r3
 800a1d0:	da08      	bge.n	800a1e4 <__swhatbuf_r+0x24>
 800a1d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	602a      	str	r2, [r5, #0]
 800a1da:	061a      	lsls	r2, r3, #24
 800a1dc:	d410      	bmi.n	800a200 <__swhatbuf_r+0x40>
 800a1de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1e2:	e00e      	b.n	800a202 <__swhatbuf_r+0x42>
 800a1e4:	466a      	mov	r2, sp
 800a1e6:	f000 f8fb 	bl	800a3e0 <_fstat_r>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	dbf1      	blt.n	800a1d2 <__swhatbuf_r+0x12>
 800a1ee:	9a01      	ldr	r2, [sp, #4]
 800a1f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1f8:	425a      	negs	r2, r3
 800a1fa:	415a      	adcs	r2, r3
 800a1fc:	602a      	str	r2, [r5, #0]
 800a1fe:	e7ee      	b.n	800a1de <__swhatbuf_r+0x1e>
 800a200:	2340      	movs	r3, #64	; 0x40
 800a202:	2000      	movs	r0, #0
 800a204:	6023      	str	r3, [r4, #0]
 800a206:	b016      	add	sp, #88	; 0x58
 800a208:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a20c <__smakebuf_r>:
 800a20c:	898b      	ldrh	r3, [r1, #12]
 800a20e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a210:	079d      	lsls	r5, r3, #30
 800a212:	4606      	mov	r6, r0
 800a214:	460c      	mov	r4, r1
 800a216:	d507      	bpl.n	800a228 <__smakebuf_r+0x1c>
 800a218:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	6123      	str	r3, [r4, #16]
 800a220:	2301      	movs	r3, #1
 800a222:	6163      	str	r3, [r4, #20]
 800a224:	b002      	add	sp, #8
 800a226:	bd70      	pop	{r4, r5, r6, pc}
 800a228:	ab01      	add	r3, sp, #4
 800a22a:	466a      	mov	r2, sp
 800a22c:	f7ff ffc8 	bl	800a1c0 <__swhatbuf_r>
 800a230:	9900      	ldr	r1, [sp, #0]
 800a232:	4605      	mov	r5, r0
 800a234:	4630      	mov	r0, r6
 800a236:	f7ff f927 	bl	8009488 <_malloc_r>
 800a23a:	b948      	cbnz	r0, 800a250 <__smakebuf_r+0x44>
 800a23c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a240:	059a      	lsls	r2, r3, #22
 800a242:	d4ef      	bmi.n	800a224 <__smakebuf_r+0x18>
 800a244:	f023 0303 	bic.w	r3, r3, #3
 800a248:	f043 0302 	orr.w	r3, r3, #2
 800a24c:	81a3      	strh	r3, [r4, #12]
 800a24e:	e7e3      	b.n	800a218 <__smakebuf_r+0xc>
 800a250:	4b0d      	ldr	r3, [pc, #52]	; (800a288 <__smakebuf_r+0x7c>)
 800a252:	62b3      	str	r3, [r6, #40]	; 0x28
 800a254:	89a3      	ldrh	r3, [r4, #12]
 800a256:	6020      	str	r0, [r4, #0]
 800a258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a25c:	81a3      	strh	r3, [r4, #12]
 800a25e:	9b00      	ldr	r3, [sp, #0]
 800a260:	6163      	str	r3, [r4, #20]
 800a262:	9b01      	ldr	r3, [sp, #4]
 800a264:	6120      	str	r0, [r4, #16]
 800a266:	b15b      	cbz	r3, 800a280 <__smakebuf_r+0x74>
 800a268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a26c:	4630      	mov	r0, r6
 800a26e:	f000 f8c9 	bl	800a404 <_isatty_r>
 800a272:	b128      	cbz	r0, 800a280 <__smakebuf_r+0x74>
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	f023 0303 	bic.w	r3, r3, #3
 800a27a:	f043 0301 	orr.w	r3, r3, #1
 800a27e:	81a3      	strh	r3, [r4, #12]
 800a280:	89a0      	ldrh	r0, [r4, #12]
 800a282:	4305      	orrs	r5, r0
 800a284:	81a5      	strh	r5, [r4, #12]
 800a286:	e7cd      	b.n	800a224 <__smakebuf_r+0x18>
 800a288:	0800a019 	.word	0x0800a019

0800a28c <_raise_r>:
 800a28c:	291f      	cmp	r1, #31
 800a28e:	b538      	push	{r3, r4, r5, lr}
 800a290:	4604      	mov	r4, r0
 800a292:	460d      	mov	r5, r1
 800a294:	d904      	bls.n	800a2a0 <_raise_r+0x14>
 800a296:	2316      	movs	r3, #22
 800a298:	6003      	str	r3, [r0, #0]
 800a29a:	f04f 30ff 	mov.w	r0, #4294967295
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a2a2:	b112      	cbz	r2, 800a2aa <_raise_r+0x1e>
 800a2a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2a8:	b94b      	cbnz	r3, 800a2be <_raise_r+0x32>
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f000 f830 	bl	800a310 <_getpid_r>
 800a2b0:	462a      	mov	r2, r5
 800a2b2:	4601      	mov	r1, r0
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2ba:	f000 b817 	b.w	800a2ec <_kill_r>
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d00a      	beq.n	800a2d8 <_raise_r+0x4c>
 800a2c2:	1c59      	adds	r1, r3, #1
 800a2c4:	d103      	bne.n	800a2ce <_raise_r+0x42>
 800a2c6:	2316      	movs	r3, #22
 800a2c8:	6003      	str	r3, [r0, #0]
 800a2ca:	2001      	movs	r0, #1
 800a2cc:	e7e7      	b.n	800a29e <_raise_r+0x12>
 800a2ce:	2400      	movs	r4, #0
 800a2d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	4798      	blx	r3
 800a2d8:	2000      	movs	r0, #0
 800a2da:	e7e0      	b.n	800a29e <_raise_r+0x12>

0800a2dc <raise>:
 800a2dc:	4b02      	ldr	r3, [pc, #8]	; (800a2e8 <raise+0xc>)
 800a2de:	4601      	mov	r1, r0
 800a2e0:	6818      	ldr	r0, [r3, #0]
 800a2e2:	f7ff bfd3 	b.w	800a28c <_raise_r>
 800a2e6:	bf00      	nop
 800a2e8:	2000002c 	.word	0x2000002c

0800a2ec <_kill_r>:
 800a2ec:	b538      	push	{r3, r4, r5, lr}
 800a2ee:	4d07      	ldr	r5, [pc, #28]	; (800a30c <_kill_r+0x20>)
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	4608      	mov	r0, r1
 800a2f6:	4611      	mov	r1, r2
 800a2f8:	602b      	str	r3, [r5, #0]
 800a2fa:	f7f9 f845 	bl	8003388 <_kill>
 800a2fe:	1c43      	adds	r3, r0, #1
 800a300:	d102      	bne.n	800a308 <_kill_r+0x1c>
 800a302:	682b      	ldr	r3, [r5, #0]
 800a304:	b103      	cbz	r3, 800a308 <_kill_r+0x1c>
 800a306:	6023      	str	r3, [r4, #0]
 800a308:	bd38      	pop	{r3, r4, r5, pc}
 800a30a:	bf00      	nop
 800a30c:	20000848 	.word	0x20000848

0800a310 <_getpid_r>:
 800a310:	f7f9 b832 	b.w	8003378 <_getpid>

0800a314 <__sread>:
 800a314:	b510      	push	{r4, lr}
 800a316:	460c      	mov	r4, r1
 800a318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a31c:	f000 f894 	bl	800a448 <_read_r>
 800a320:	2800      	cmp	r0, #0
 800a322:	bfab      	itete	ge
 800a324:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a326:	89a3      	ldrhlt	r3, [r4, #12]
 800a328:	181b      	addge	r3, r3, r0
 800a32a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a32e:	bfac      	ite	ge
 800a330:	6563      	strge	r3, [r4, #84]	; 0x54
 800a332:	81a3      	strhlt	r3, [r4, #12]
 800a334:	bd10      	pop	{r4, pc}

0800a336 <__swrite>:
 800a336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a33a:	461f      	mov	r7, r3
 800a33c:	898b      	ldrh	r3, [r1, #12]
 800a33e:	05db      	lsls	r3, r3, #23
 800a340:	4605      	mov	r5, r0
 800a342:	460c      	mov	r4, r1
 800a344:	4616      	mov	r6, r2
 800a346:	d505      	bpl.n	800a354 <__swrite+0x1e>
 800a348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a34c:	2302      	movs	r3, #2
 800a34e:	2200      	movs	r2, #0
 800a350:	f000 f868 	bl	800a424 <_lseek_r>
 800a354:	89a3      	ldrh	r3, [r4, #12]
 800a356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a35a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a35e:	81a3      	strh	r3, [r4, #12]
 800a360:	4632      	mov	r2, r6
 800a362:	463b      	mov	r3, r7
 800a364:	4628      	mov	r0, r5
 800a366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a36a:	f000 b817 	b.w	800a39c <_write_r>

0800a36e <__sseek>:
 800a36e:	b510      	push	{r4, lr}
 800a370:	460c      	mov	r4, r1
 800a372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a376:	f000 f855 	bl	800a424 <_lseek_r>
 800a37a:	1c43      	adds	r3, r0, #1
 800a37c:	89a3      	ldrh	r3, [r4, #12]
 800a37e:	bf15      	itete	ne
 800a380:	6560      	strne	r0, [r4, #84]	; 0x54
 800a382:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a386:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a38a:	81a3      	strheq	r3, [r4, #12]
 800a38c:	bf18      	it	ne
 800a38e:	81a3      	strhne	r3, [r4, #12]
 800a390:	bd10      	pop	{r4, pc}

0800a392 <__sclose>:
 800a392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a396:	f000 b813 	b.w	800a3c0 <_close_r>
	...

0800a39c <_write_r>:
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	4d07      	ldr	r5, [pc, #28]	; (800a3bc <_write_r+0x20>)
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	4608      	mov	r0, r1
 800a3a4:	4611      	mov	r1, r2
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	602a      	str	r2, [r5, #0]
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	f7f9 f823 	bl	80033f6 <_write>
 800a3b0:	1c43      	adds	r3, r0, #1
 800a3b2:	d102      	bne.n	800a3ba <_write_r+0x1e>
 800a3b4:	682b      	ldr	r3, [r5, #0]
 800a3b6:	b103      	cbz	r3, 800a3ba <_write_r+0x1e>
 800a3b8:	6023      	str	r3, [r4, #0]
 800a3ba:	bd38      	pop	{r3, r4, r5, pc}
 800a3bc:	20000848 	.word	0x20000848

0800a3c0 <_close_r>:
 800a3c0:	b538      	push	{r3, r4, r5, lr}
 800a3c2:	4d06      	ldr	r5, [pc, #24]	; (800a3dc <_close_r+0x1c>)
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	4604      	mov	r4, r0
 800a3c8:	4608      	mov	r0, r1
 800a3ca:	602b      	str	r3, [r5, #0]
 800a3cc:	f7f9 f82f 	bl	800342e <_close>
 800a3d0:	1c43      	adds	r3, r0, #1
 800a3d2:	d102      	bne.n	800a3da <_close_r+0x1a>
 800a3d4:	682b      	ldr	r3, [r5, #0]
 800a3d6:	b103      	cbz	r3, 800a3da <_close_r+0x1a>
 800a3d8:	6023      	str	r3, [r4, #0]
 800a3da:	bd38      	pop	{r3, r4, r5, pc}
 800a3dc:	20000848 	.word	0x20000848

0800a3e0 <_fstat_r>:
 800a3e0:	b538      	push	{r3, r4, r5, lr}
 800a3e2:	4d07      	ldr	r5, [pc, #28]	; (800a400 <_fstat_r+0x20>)
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	4608      	mov	r0, r1
 800a3ea:	4611      	mov	r1, r2
 800a3ec:	602b      	str	r3, [r5, #0]
 800a3ee:	f7f9 f82a 	bl	8003446 <_fstat>
 800a3f2:	1c43      	adds	r3, r0, #1
 800a3f4:	d102      	bne.n	800a3fc <_fstat_r+0x1c>
 800a3f6:	682b      	ldr	r3, [r5, #0]
 800a3f8:	b103      	cbz	r3, 800a3fc <_fstat_r+0x1c>
 800a3fa:	6023      	str	r3, [r4, #0]
 800a3fc:	bd38      	pop	{r3, r4, r5, pc}
 800a3fe:	bf00      	nop
 800a400:	20000848 	.word	0x20000848

0800a404 <_isatty_r>:
 800a404:	b538      	push	{r3, r4, r5, lr}
 800a406:	4d06      	ldr	r5, [pc, #24]	; (800a420 <_isatty_r+0x1c>)
 800a408:	2300      	movs	r3, #0
 800a40a:	4604      	mov	r4, r0
 800a40c:	4608      	mov	r0, r1
 800a40e:	602b      	str	r3, [r5, #0]
 800a410:	f7f9 f829 	bl	8003466 <_isatty>
 800a414:	1c43      	adds	r3, r0, #1
 800a416:	d102      	bne.n	800a41e <_isatty_r+0x1a>
 800a418:	682b      	ldr	r3, [r5, #0]
 800a41a:	b103      	cbz	r3, 800a41e <_isatty_r+0x1a>
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	bd38      	pop	{r3, r4, r5, pc}
 800a420:	20000848 	.word	0x20000848

0800a424 <_lseek_r>:
 800a424:	b538      	push	{r3, r4, r5, lr}
 800a426:	4d07      	ldr	r5, [pc, #28]	; (800a444 <_lseek_r+0x20>)
 800a428:	4604      	mov	r4, r0
 800a42a:	4608      	mov	r0, r1
 800a42c:	4611      	mov	r1, r2
 800a42e:	2200      	movs	r2, #0
 800a430:	602a      	str	r2, [r5, #0]
 800a432:	461a      	mov	r2, r3
 800a434:	f7f9 f822 	bl	800347c <_lseek>
 800a438:	1c43      	adds	r3, r0, #1
 800a43a:	d102      	bne.n	800a442 <_lseek_r+0x1e>
 800a43c:	682b      	ldr	r3, [r5, #0]
 800a43e:	b103      	cbz	r3, 800a442 <_lseek_r+0x1e>
 800a440:	6023      	str	r3, [r4, #0]
 800a442:	bd38      	pop	{r3, r4, r5, pc}
 800a444:	20000848 	.word	0x20000848

0800a448 <_read_r>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	4d07      	ldr	r5, [pc, #28]	; (800a468 <_read_r+0x20>)
 800a44c:	4604      	mov	r4, r0
 800a44e:	4608      	mov	r0, r1
 800a450:	4611      	mov	r1, r2
 800a452:	2200      	movs	r2, #0
 800a454:	602a      	str	r2, [r5, #0]
 800a456:	461a      	mov	r2, r3
 800a458:	f7f8 ffb0 	bl	80033bc <_read>
 800a45c:	1c43      	adds	r3, r0, #1
 800a45e:	d102      	bne.n	800a466 <_read_r+0x1e>
 800a460:	682b      	ldr	r3, [r5, #0]
 800a462:	b103      	cbz	r3, 800a466 <_read_r+0x1e>
 800a464:	6023      	str	r3, [r4, #0]
 800a466:	bd38      	pop	{r3, r4, r5, pc}
 800a468:	20000848 	.word	0x20000848

0800a46c <_init>:
 800a46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46e:	bf00      	nop
 800a470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a472:	bc08      	pop	{r3}
 800a474:	469e      	mov	lr, r3
 800a476:	4770      	bx	lr

0800a478 <_fini>:
 800a478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47a:	bf00      	nop
 800a47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a47e:	bc08      	pop	{r3}
 800a480:	469e      	mov	lr, r3
 800a482:	4770      	bx	lr
