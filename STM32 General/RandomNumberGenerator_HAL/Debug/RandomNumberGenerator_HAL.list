
RandomNumberGenerator_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08007e68  08007e68  00017e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fcc  08007fcc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007fcc  08007fcc  00017fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fd4  08007fd4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fd4  08007fd4  00017fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fd8  08007fd8  00017fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000007c0  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000850  20000850  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000150d7  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000384c  00000000  00000000  00035197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001088  00000000  00000000  000389e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f08  00000000  00000000  00039a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024aa8  00000000  00000000  0003a978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016a2d  00000000  00000000  0005f420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb1dc  00000000  00000000  00075e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141029  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d4c  00000000  00000000  0014107c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e50 	.word	0x08007e50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08007e50 	.word	0x08007e50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:


	}

	  int main(void)
	  {
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
		  HAL_Init();
 800057a:	f000 fcfd 	bl	8000f78 <HAL_Init>
		  /* USER CODE BEGIN Init */

		  /* USER CODE END Init */

		  /* Configure the system clock */
		  SystemClock_Config();
 800057e:	f000 f837 	bl	80005f0 <SystemClock_Config>
		  /* USER CODE BEGIN SysInit */

		  /* USER CODE END SysInit */

		  /* Initialize all configured peripherals */
		  MX_GPIO_Init();
 8000582:	f000 f911 	bl	80007a8 <MX_GPIO_Init>
		  MX_I2C1_Init();
 8000586:	f000 f89d 	bl	80006c4 <MX_I2C1_Init>
		  MX_I2S3_Init();
 800058a:	f000 f8c9 	bl	8000720 <MX_I2S3_Init>
		  MX_USB_HOST_Init();
 800058e:	f006 f90f 	bl	80067b0 <MX_USB_HOST_Init>
		  MX_RNG_Init();
 8000592:	f000 f8f5 	bl	8000780 <MX_RNG_Init>

	    /* USER CODE END 2 */
		 while (1) {

			uint32_t num_rand;
			HAL_RNG_GenerateRandomNumber(&hrng, &num_rand);
 8000596:	f107 0310 	add.w	r3, r7, #16
 800059a:	4619      	mov	r1, r3
 800059c:	4812      	ldr	r0, [pc, #72]	; (80005e8 <main+0x74>)
 800059e:	f004 f82d 	bl	80045fc <HAL_RNG_GenerateRandomNumber>

			srand(num_rand);
 80005a2:	693b      	ldr	r3, [r7, #16]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f006 fcd5 	bl	8006f54 <srand>
			int random_num[4];
			for (uint32_t i = 0; i < 4; i++) {
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	e016      	b.n	80005de <main+0x6a>
				random_num[i] = (rand() % 10);
 80005b0:	f006 fcfe 	bl	8006fb0 <rand>
 80005b4:	4601      	mov	r1, r0
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <main+0x78>)
 80005b8:	fb83 2301 	smull	r2, r3, r3, r1
 80005bc:	109a      	asrs	r2, r3, #2
 80005be:	17cb      	asrs	r3, r1, #31
 80005c0:	1ad2      	subs	r2, r2, r3
 80005c2:	4613      	mov	r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	4413      	add	r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	1aca      	subs	r2, r1, r3
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	3318      	adds	r3, #24
 80005d2:	443b      	add	r3, r7
 80005d4:	f843 2c18 	str.w	r2, [r3, #-24]
			for (uint32_t i = 0; i < 4; i++) {
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	3301      	adds	r3, #1
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	2b03      	cmp	r3, #3
 80005e2:	d9e5      	bls.n	80005b0 <main+0x3c>
		 while (1) {
 80005e4:	e7d7      	b.n	8000596 <main+0x22>
 80005e6:	bf00      	nop
 80005e8:	20000148 	.word	0x20000148
 80005ec:	66666667 	.word	0x66666667

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f006 fbc0 	bl	8006d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a27      	ldr	r2, [pc, #156]	; (80006bc <SystemClock_Config+0xcc>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <SystemClock_Config+0xd0>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064c:	2301      	movs	r3, #1
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000660:	2308      	movs	r3, #8
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000664:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000668:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800066e:	2307      	movs	r3, #7
 8000670:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	4618      	mov	r0, r3
 8000678:	f003 f9d2 	bl	8003a20 <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000682:	f000 fa13 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2302      	movs	r3, #2
 800068c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000692:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000696:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2105      	movs	r1, #5
 80006a4:	4618      	mov	r0, r3
 80006a6:	f003 fc33 	bl	8003f10 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006b0:	f000 f9fc 	bl	8000aac <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3750      	adds	r7, #80	; 0x50
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_I2C1_Init+0x50>)
 80006ca:	4a13      	ldr	r2, [pc, #76]	; (8000718 <MX_I2C1_Init+0x54>)
 80006cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_I2C1_Init+0x50>)
 80006d0:	4a12      	ldr	r2, [pc, #72]	; (800071c <MX_I2C1_Init+0x58>)
 80006d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_I2C1_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_I2C1_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_I2C1_Init+0x50>)
 80006e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_I2C1_Init+0x50>)
 8000702:	f002 fba9 	bl	8002e58 <HAL_I2C_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800070c:	f000 f9ce 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200000ac 	.word	0x200000ac
 8000718:	40005400 	.word	0x40005400
 800071c:	000186a0 	.word	0x000186a0

08000720 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_I2S3_Init+0x54>)
 8000726:	4a14      	ldr	r2, [pc, #80]	; (8000778 <MX_I2S3_Init+0x58>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_I2S3_Init+0x54>)
 800072c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000730:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_I2S3_Init+0x54>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000738:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_I2S3_Init+0x54>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <MX_I2S3_Init+0x54>)
 8000740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000744:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_I2S3_Init+0x54>)
 8000748:	4a0c      	ldr	r2, [pc, #48]	; (800077c <MX_I2S3_Init+0x5c>)
 800074a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_I2S3_Init+0x54>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_I2S3_Init+0x54>)
 8000754:	2200      	movs	r2, #0
 8000756:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_I2S3_Init+0x54>)
 800075a:	2200      	movs	r2, #0
 800075c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_I2S3_Init+0x54>)
 8000760:	f002 fcbe 	bl	80030e0 <HAL_I2S_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800076a:	f000 f99f 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000100 	.word	0x20000100
 8000778:	40003c00 	.word	0x40003c00
 800077c:	00017700 	.word	0x00017700

08000780 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_RNG_Init+0x20>)
 8000786:	4a07      	ldr	r2, [pc, #28]	; (80007a4 <MX_RNG_Init+0x24>)
 8000788:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_RNG_Init+0x20>)
 800078c:	f003 ff0c 	bl	80045a8 <HAL_RNG_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000796:	f000 f989 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000148 	.word	0x20000148
 80007a4:	50060800 	.word	0x50060800

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08c      	sub	sp, #48	; 0x30
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	61bb      	str	r3, [r7, #24]
 80007c2:	4bb4      	ldr	r3, [pc, #720]	; (8000a94 <MX_GPIO_Init+0x2ec>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4ab3      	ldr	r2, [pc, #716]	; (8000a94 <MX_GPIO_Init+0x2ec>)
 80007c8:	f043 0310 	orr.w	r3, r3, #16
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4bb1      	ldr	r3, [pc, #708]	; (8000a94 <MX_GPIO_Init+0x2ec>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0310 	and.w	r3, r3, #16
 80007d6:	61bb      	str	r3, [r7, #24]
 80007d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	4bad      	ldr	r3, [pc, #692]	; (8000a94 <MX_GPIO_Init+0x2ec>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4aac      	ldr	r2, [pc, #688]	; (8000a94 <MX_GPIO_Init+0x2ec>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4baa      	ldr	r3, [pc, #680]	; (8000a94 <MX_GPIO_Init+0x2ec>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	4ba6      	ldr	r3, [pc, #664]	; (8000a94 <MX_GPIO_Init+0x2ec>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4aa5      	ldr	r2, [pc, #660]	; (8000a94 <MX_GPIO_Init+0x2ec>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4ba3      	ldr	r3, [pc, #652]	; (8000a94 <MX_GPIO_Init+0x2ec>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b9f      	ldr	r3, [pc, #636]	; (8000a94 <MX_GPIO_Init+0x2ec>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a9e      	ldr	r2, [pc, #632]	; (8000a94 <MX_GPIO_Init+0x2ec>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b9c      	ldr	r3, [pc, #624]	; (8000a94 <MX_GPIO_Init+0x2ec>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	4b98      	ldr	r3, [pc, #608]	; (8000a94 <MX_GPIO_Init+0x2ec>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a97      	ldr	r2, [pc, #604]	; (8000a94 <MX_GPIO_Init+0x2ec>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b95      	ldr	r3, [pc, #596]	; (8000a94 <MX_GPIO_Init+0x2ec>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b91      	ldr	r3, [pc, #580]	; (8000a94 <MX_GPIO_Init+0x2ec>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a90      	ldr	r2, [pc, #576]	; (8000a94 <MX_GPIO_Init+0x2ec>)
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b8e      	ldr	r3, [pc, #568]	; (8000a94 <MX_GPIO_Init+0x2ec>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0308 	and.w	r3, r3, #8
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000866:	2200      	movs	r2, #0
 8000868:	f647 71f8 	movw	r1, #32760	; 0x7ff8
 800086c:	488a      	ldr	r0, [pc, #552]	; (8000a98 <MX_GPIO_Init+0x2f0>)
 800086e:	f000 fec7 	bl	8001600 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000872:	2201      	movs	r2, #1
 8000874:	2101      	movs	r1, #1
 8000876:	4889      	ldr	r0, [pc, #548]	; (8000a9c <MX_GPIO_Init+0x2f4>)
 8000878:	f000 fec2 	bl	8001600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	21a0      	movs	r1, #160	; 0xa0
 8000880:	4887      	ldr	r0, [pc, #540]	; (8000aa0 <MX_GPIO_Init+0x2f8>)
 8000882:	f000 febd 	bl	8001600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2120      	movs	r1, #32
 800088a:	4884      	ldr	r0, [pc, #528]	; (8000a9c <MX_GPIO_Init+0x2f4>)
 800088c:	f000 feb8 	bl	8001600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000890:	2200      	movs	r2, #0
 8000892:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000896:	4883      	ldr	r0, [pc, #524]	; (8000aa4 <MX_GPIO_Init+0x2fc>)
 8000898:	f000 feb2 	bl	8001600 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2130      	movs	r1, #48	; 0x30
 80008a0:	4881      	ldr	r0, [pc, #516]	; (8000aa8 <MX_GPIO_Init+0x300>)
 80008a2:	f000 fead 	bl	8001600 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80008a6:	2378      	movs	r3, #120	; 0x78
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4876      	ldr	r0, [pc, #472]	; (8000a98 <MX_GPIO_Init+0x2f0>)
 80008be:	f000 fd03 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC5 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_5;
 80008c2:	2321      	movs	r3, #33	; 0x21
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4870      	ldr	r0, [pc, #448]	; (8000a9c <MX_GPIO_Init+0x2f4>)
 80008da:	f000 fcf5 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80008de:	230a      	movs	r3, #10
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	486a      	ldr	r0, [pc, #424]	; (8000a9c <MX_GPIO_Init+0x2f4>)
 80008f2:	f000 fce9 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4865      	ldr	r0, [pc, #404]	; (8000aa0 <MX_GPIO_Init+0x2f8>)
 800090c:	f000 fcdc 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000910:	230a      	movs	r3, #10
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	485f      	ldr	r0, [pc, #380]	; (8000aa0 <MX_GPIO_Init+0x2f8>)
 8000924:	f000 fcd0 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000928:	23a0      	movs	r3, #160	; 0xa0
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4858      	ldr	r0, [pc, #352]	; (8000aa0 <MX_GPIO_Init+0x2f8>)
 8000940:	f000 fcc2 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8000944:	2340      	movs	r3, #64	; 0x40
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000954:	2305      	movs	r3, #5
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4850      	ldr	r0, [pc, #320]	; (8000aa0 <MX_GPIO_Init+0x2f8>)
 8000960:	f000 fcb2 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000964:	2304      	movs	r3, #4
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	484c      	ldr	r0, [pc, #304]	; (8000aa8 <MX_GPIO_Init+0x300>)
 8000978:	f000 fca6 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000984:	2301      	movs	r3, #1
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000988:	2302      	movs	r3, #2
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4841      	ldr	r0, [pc, #260]	; (8000a98 <MX_GPIO_Init+0x2f0>)
 8000994:	f000 fc98 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 PE10 PE11
                           PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000998:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 800099c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009a2:	2302      	movs	r3, #2
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4839      	ldr	r0, [pc, #228]	; (8000a98 <MX_GPIO_Init+0x2f0>)
 80009b2:	f000 fc89 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80009b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c4:	2302      	movs	r3, #2
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4832      	ldr	r0, [pc, #200]	; (8000a98 <MX_GPIO_Init+0x2f0>)
 80009d0:	f000 fc7a 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e6:	2305      	movs	r3, #5
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	482d      	ldr	r0, [pc, #180]	; (8000aa8 <MX_GPIO_Init+0x300>)
 80009f2:	f000 fc69 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80009f6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009fa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4825      	ldr	r0, [pc, #148]	; (8000aa4 <MX_GPIO_Init+0x2fc>)
 8000a10:	f000 fc5a 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000a14:	230f      	movs	r3, #15
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	481f      	ldr	r0, [pc, #124]	; (8000aa4 <MX_GPIO_Init+0x2fc>)
 8000a28:	f000 fc4e 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a2c:	2320      	movs	r3, #32
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4819      	ldr	r0, [pc, #100]	; (8000aa4 <MX_GPIO_Init+0x2fc>)
 8000a40:	f000 fc42 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a44:	2330      	movs	r3, #48	; 0x30
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4813      	ldr	r0, [pc, #76]	; (8000aa8 <MX_GPIO_Init+0x300>)
 8000a5c:	f000 fc34 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a64:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4808      	ldr	r0, [pc, #32]	; (8000a98 <MX_GPIO_Init+0x2f0>)
 8000a76:	f000 fc27 	bl	80012c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2006      	movs	r0, #6
 8000a80:	f000 fbeb 	bl	800125a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a84:	2006      	movs	r0, #6
 8000a86:	f000 fc04 	bl	8001292 <HAL_NVIC_EnableIRQ>

}
 8000a8a:	bf00      	nop
 8000a8c:	3730      	adds	r7, #48	; 0x30
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40020800 	.word	0x40020800
 8000aa0:	40020000 	.word	0x40020000
 8000aa4:	40020c00 	.word	0x40020c00
 8000aa8:	40020400 	.word	0x40020400

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000acc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000af6:	2007      	movs	r0, #7
 8000af8:	f000 fba4 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40023800 	.word	0x40023800

08000b08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a19      	ldr	r2, [pc, #100]	; (8000b8c <HAL_I2C_MspInit+0x84>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d12c      	bne.n	8000b84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b46:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b4c:	2312      	movs	r3, #18
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	480c      	ldr	r0, [pc, #48]	; (8000b94 <HAL_I2C_MspInit+0x8c>)
 8000b64:	f000 fbb0 	bl	80012c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b76:	6413      	str	r3, [r2, #64]	; 0x40
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b84:	bf00      	nop
 8000b86:	3728      	adds	r7, #40	; 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40005400 	.word	0x40005400
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020400 	.word	0x40020400

08000b98 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08e      	sub	sp, #56	; 0x38
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a31      	ldr	r2, [pc, #196]	; (8000c88 <HAL_I2S_MspInit+0xf0>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d15a      	bne.n	8000c7e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000bcc:	23c0      	movs	r3, #192	; 0xc0
 8000bce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 fba5 	bl	8004328 <HAL_RCCEx_PeriphCLKConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000be4:	f7ff ff62 	bl	8000aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <HAL_I2S_MspInit+0xf4>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	4a26      	ldr	r2, [pc, #152]	; (8000c8c <HAL_I2S_MspInit+0xf4>)
 8000bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf8:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <HAL_I2S_MspInit+0xf4>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <HAL_I2S_MspInit+0xf4>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	4a1f      	ldr	r2, [pc, #124]	; (8000c8c <HAL_I2S_MspInit+0xf4>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	6313      	str	r3, [r2, #48]	; 0x30
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <HAL_I2S_MspInit+0xf4>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <HAL_I2S_MspInit+0xf4>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	4a18      	ldr	r2, [pc, #96]	; (8000c8c <HAL_I2S_MspInit+0xf4>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c30:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <HAL_I2S_MspInit+0xf4>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c3c:	2310      	movs	r3, #16
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c4c:	2306      	movs	r3, #6
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	480e      	ldr	r0, [pc, #56]	; (8000c90 <HAL_I2S_MspInit+0xf8>)
 8000c58:	f000 fb36 	bl	80012c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c5c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c6e:	2306      	movs	r3, #6
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	4806      	ldr	r0, [pc, #24]	; (8000c94 <HAL_I2S_MspInit+0xfc>)
 8000c7a:	f000 fb25 	bl	80012c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c7e:	bf00      	nop
 8000c80:	3738      	adds	r7, #56	; 0x38
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40003c00 	.word	0x40003c00
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020000 	.word	0x40020000
 8000c94:	40020800 	.word	0x40020800

08000c98 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_RNG_MspInit+0x48>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d115      	bne.n	8000cd6 <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <HAL_RNG_MspInit+0x4c>)
 8000cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb2:	4a0c      	ldr	r2, [pc, #48]	; (8000ce4 <HAL_RNG_MspInit+0x4c>)
 8000cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb8:	6353      	str	r3, [r2, #52]	; 0x34
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <HAL_RNG_MspInit+0x4c>)
 8000cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2050      	movs	r0, #80	; 0x50
 8000ccc:	f000 fac5 	bl	800125a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8000cd0:	2050      	movs	r0, #80	; 0x50
 8000cd2:	f000 fade 	bl	8001292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	50060800 	.word	0x50060800
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f972 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d40:	2001      	movs	r0, #1
 8000d42:	f000 fc77 	bl	8001634 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <OTG_FS_IRQHandler+0x10>)
 8000d52:	f000 fefd 	bl	8001b50 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000053c 	.word	0x2000053c

08000d60 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <HASH_RNG_IRQHandler+0x10>)
 8000d66:	f003 fc9f 	bl	80046a8 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000148 	.word	0x20000148

08000d74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return 1;
 8000d78:	2301      	movs	r3, #1
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <_kill>:

int _kill(int pid, int sig)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d8e:	f005 ffbf 	bl	8006d10 <__errno>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2216      	movs	r2, #22
 8000d96:	601a      	str	r2, [r3, #0]
  return -1;
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <_exit>:

void _exit (int status)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ffe7 	bl	8000d84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000db6:	e7fe      	b.n	8000db6 <_exit+0x12>

08000db8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	e00a      	b.n	8000de0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dca:	f3af 8000 	nop.w
 8000dce:	4601      	mov	r1, r0
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	60ba      	str	r2, [r7, #8]
 8000dd6:	b2ca      	uxtb	r2, r1
 8000dd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dbf0      	blt.n	8000dca <_read+0x12>
  }

  return len;
 8000de8:	687b      	ldr	r3, [r7, #4]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	60f8      	str	r0, [r7, #12]
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	e009      	b.n	8000e18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	1c5a      	adds	r2, r3, #1
 8000e08:	60ba      	str	r2, [r7, #8]
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3301      	adds	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	dbf1      	blt.n	8000e04 <_write+0x12>
  }
  return len;
 8000e20:	687b      	ldr	r3, [r7, #4]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <_close>:

int _close(int file)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e52:	605a      	str	r2, [r3, #4]
  return 0;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <_isatty>:

int _isatty(int file)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e9c:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <_sbrk+0x5c>)
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <_sbrk+0x60>)
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <_sbrk+0x64>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	; (8000efc <_sbrk+0x68>)
 8000eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d207      	bcs.n	8000ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec4:	f005 ff24 	bl	8006d10 <__errno>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	220c      	movs	r2, #12
 8000ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	e009      	b.n	8000ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <_sbrk+0x64>)
 8000ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20020000 	.word	0x20020000
 8000ef4:	00000400 	.word	0x00000400
 8000ef8:	20000158 	.word	0x20000158
 8000efc:	20000850 	.word	0x20000850

08000f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <SystemInit+0x20>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <SystemInit+0x20>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8000f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f28:	480d      	ldr	r0, [pc, #52]	; (8000f60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f2a:	490e      	ldr	r1, [pc, #56]	; (8000f64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f2c:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f40:	4c0b      	ldr	r4, [pc, #44]	; (8000f70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f4e:	f7ff ffd7 	bl	8000f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f52:	f005 fee3 	bl	8006d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f56:	f7ff fb0d 	bl	8000574 <main>
  bx  lr    
 8000f5a:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8000f5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000f68:	08007fdc 	.word	0x08007fdc
  ldr r2, =_sbss
 8000f6c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000f70:	20000850 	.word	0x20000850

08000f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC_IRQHandler>
	...

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <HAL_Init+0x40>)
 8000f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_Init+0x40>)
 8000f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <HAL_Init+0x40>)
 8000f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 f94f 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 f808 	bl	8000fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fac:	f7ff fd84 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023c00 	.word	0x40023c00

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_InitTick+0x54>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x58>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f967 	bl	80012ae <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00e      	b.n	8001008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d80a      	bhi.n	8001006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f000 f92f 	bl	800125a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	; (8001018 <HAL_InitTick+0x5c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000000 	.word	0x20000000
 8001014:	20000008 	.word	0x20000008
 8001018:	20000004 	.word	0x20000004

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008
 8001040:	2000015c 	.word	0x2000015c

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	2000015c 	.word	0x2000015c

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff ffee 	bl	8001044 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffde 	bl	8001044 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	db0b      	blt.n	8001132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	4907      	ldr	r1, [pc, #28]	; (8001140 <__NVIC_EnableIRQ+0x38>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	; (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	; (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff8e 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff29 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff3e 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff8e 	bl	8001198 <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5d 	bl	8001144 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff31 	bl	8001108 <__NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffa2 	bl	8001200 <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
 80012e2:	e16b      	b.n	80015bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012e4:	2201      	movs	r2, #1
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f040 815a 	bne.w	80015b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	2b01      	cmp	r3, #1
 800130c:	d005      	beq.n	800131a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001316:	2b02      	cmp	r3, #2
 8001318:	d130      	bne.n	800137c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001350:	2201      	movs	r2, #1
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 0201 	and.w	r2, r3, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b03      	cmp	r3, #3
 8001386:	d017      	beq.n	80013b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	2203      	movs	r2, #3
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d123      	bne.n	800140c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	08da      	lsrs	r2, r3, #3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3208      	adds	r2, #8
 80013cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	220f      	movs	r2, #15
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	691a      	ldr	r2, [r3, #16]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	08da      	lsrs	r2, r3, #3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3208      	adds	r2, #8
 8001406:	69b9      	ldr	r1, [r7, #24]
 8001408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	2203      	movs	r2, #3
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0203 	and.w	r2, r3, #3
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 80b4 	beq.w	80015b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b60      	ldr	r3, [pc, #384]	; (80015d4 <HAL_GPIO_Init+0x30c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	4a5f      	ldr	r2, [pc, #380]	; (80015d4 <HAL_GPIO_Init+0x30c>)
 8001458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	4b5d      	ldr	r3, [pc, #372]	; (80015d4 <HAL_GPIO_Init+0x30c>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800146a:	4a5b      	ldr	r2, [pc, #364]	; (80015d8 <HAL_GPIO_Init+0x310>)
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	3302      	adds	r3, #2
 8001472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	220f      	movs	r2, #15
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a52      	ldr	r2, [pc, #328]	; (80015dc <HAL_GPIO_Init+0x314>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d02b      	beq.n	80014ee <HAL_GPIO_Init+0x226>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a51      	ldr	r2, [pc, #324]	; (80015e0 <HAL_GPIO_Init+0x318>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d025      	beq.n	80014ea <HAL_GPIO_Init+0x222>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a50      	ldr	r2, [pc, #320]	; (80015e4 <HAL_GPIO_Init+0x31c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d01f      	beq.n	80014e6 <HAL_GPIO_Init+0x21e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4f      	ldr	r2, [pc, #316]	; (80015e8 <HAL_GPIO_Init+0x320>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d019      	beq.n	80014e2 <HAL_GPIO_Init+0x21a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4e      	ldr	r2, [pc, #312]	; (80015ec <HAL_GPIO_Init+0x324>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d013      	beq.n	80014de <HAL_GPIO_Init+0x216>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4d      	ldr	r2, [pc, #308]	; (80015f0 <HAL_GPIO_Init+0x328>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d00d      	beq.n	80014da <HAL_GPIO_Init+0x212>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4c      	ldr	r2, [pc, #304]	; (80015f4 <HAL_GPIO_Init+0x32c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d007      	beq.n	80014d6 <HAL_GPIO_Init+0x20e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4b      	ldr	r2, [pc, #300]	; (80015f8 <HAL_GPIO_Init+0x330>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d101      	bne.n	80014d2 <HAL_GPIO_Init+0x20a>
 80014ce:	2307      	movs	r3, #7
 80014d0:	e00e      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014d2:	2308      	movs	r3, #8
 80014d4:	e00c      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014d6:	2306      	movs	r3, #6
 80014d8:	e00a      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014da:	2305      	movs	r3, #5
 80014dc:	e008      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014de:	2304      	movs	r3, #4
 80014e0:	e006      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014e2:	2303      	movs	r3, #3
 80014e4:	e004      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e002      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014ee:	2300      	movs	r3, #0
 80014f0:	69fa      	ldr	r2, [r7, #28]
 80014f2:	f002 0203 	and.w	r2, r2, #3
 80014f6:	0092      	lsls	r2, r2, #2
 80014f8:	4093      	lsls	r3, r2
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001500:	4935      	ldr	r1, [pc, #212]	; (80015d8 <HAL_GPIO_Init+0x310>)
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	089b      	lsrs	r3, r3, #2
 8001506:	3302      	adds	r3, #2
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800150e:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <HAL_GPIO_Init+0x334>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001532:	4a32      	ldr	r2, [pc, #200]	; (80015fc <HAL_GPIO_Init+0x334>)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001538:	4b30      	ldr	r3, [pc, #192]	; (80015fc <HAL_GPIO_Init+0x334>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800155c:	4a27      	ldr	r2, [pc, #156]	; (80015fc <HAL_GPIO_Init+0x334>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001562:	4b26      	ldr	r3, [pc, #152]	; (80015fc <HAL_GPIO_Init+0x334>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001586:	4a1d      	ldr	r2, [pc, #116]	; (80015fc <HAL_GPIO_Init+0x334>)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_GPIO_Init+0x334>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015b0:	4a12      	ldr	r2, [pc, #72]	; (80015fc <HAL_GPIO_Init+0x334>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3301      	adds	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	2b0f      	cmp	r3, #15
 80015c0:	f67f ae90 	bls.w	80012e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40013800 	.word	0x40013800
 80015dc:	40020000 	.word	0x40020000
 80015e0:	40020400 	.word	0x40020400
 80015e4:	40020800 	.word	0x40020800
 80015e8:	40020c00 	.word	0x40020c00
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40021400 	.word	0x40021400
 80015f4:	40021800 	.word	0x40021800
 80015f8:	40021c00 	.word	0x40021c00
 80015fc:	40013c00 	.word	0x40013c00

08001600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	807b      	strh	r3, [r7, #2]
 800160c:	4613      	mov	r3, r2
 800160e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001610:	787b      	ldrb	r3, [r7, #1]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001616:	887a      	ldrh	r2, [r7, #2]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800161c:	e003      	b.n	8001626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800161e:	887b      	ldrh	r3, [r7, #2]
 8001620:	041a      	lsls	r2, r3, #16
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	619a      	str	r2, [r3, #24]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001640:	695a      	ldr	r2, [r3, #20]
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	4013      	ands	r3, r2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d006      	beq.n	8001658 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001650:	88fb      	ldrh	r3, [r7, #6]
 8001652:	4618      	mov	r0, r3
 8001654:	f000 f806 	bl	8001664 <HAL_GPIO_EXTI_Callback>
  }
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40013c00 	.word	0x40013c00

08001664 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800167a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800167c:	b08f      	sub	sp, #60	; 0x3c
 800167e:	af0a      	add	r7, sp, #40	; 0x28
 8001680:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e054      	b.n	8001736 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d106      	bne.n	80016ac <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f005 f8d6 	bl	8006858 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2203      	movs	r2, #3
 80016b0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d102      	bne.n	80016c6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f003 f8c9 	bl	8004862 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	687e      	ldr	r6, [r7, #4]
 80016d8:	466d      	mov	r5, sp
 80016da:	f106 0410 	add.w	r4, r6, #16
 80016de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80016ee:	1d33      	adds	r3, r6, #4
 80016f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f2:	6838      	ldr	r0, [r7, #0]
 80016f4:	f003 f843 	bl	800477e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2101      	movs	r1, #1
 80016fe:	4618      	mov	r0, r3
 8001700:	f003 f8c0 	bl	8004884 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	603b      	str	r3, [r7, #0]
 800170a:	687e      	ldr	r6, [r7, #4]
 800170c:	466d      	mov	r5, sp
 800170e:	f106 0410 	add.w	r4, r6, #16
 8001712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800171a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800171e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001722:	1d33      	adds	r3, r6, #4
 8001724:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001726:	6838      	ldr	r0, [r7, #0]
 8001728:	f003 fa48 	bl	8004bbc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800173e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800173e:	b590      	push	{r4, r7, lr}
 8001740:	b089      	sub	sp, #36	; 0x24
 8001742:	af04      	add	r7, sp, #16
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	4608      	mov	r0, r1
 8001748:	4611      	mov	r1, r2
 800174a:	461a      	mov	r2, r3
 800174c:	4603      	mov	r3, r0
 800174e:	70fb      	strb	r3, [r7, #3]
 8001750:	460b      	mov	r3, r1
 8001752:	70bb      	strb	r3, [r7, #2]
 8001754:	4613      	mov	r3, r2
 8001756:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_HCD_HC_Init+0x28>
 8001762:	2302      	movs	r3, #2
 8001764:	e076      	b.n	8001854 <HAL_HCD_HC_Init+0x116>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	212c      	movs	r1, #44	; 0x2c
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	4413      	add	r3, r2
 800177a:	333d      	adds	r3, #61	; 0x3d
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	212c      	movs	r1, #44	; 0x2c
 8001786:	fb01 f303 	mul.w	r3, r1, r3
 800178a:	4413      	add	r3, r2
 800178c:	3338      	adds	r3, #56	; 0x38
 800178e:	787a      	ldrb	r2, [r7, #1]
 8001790:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	212c      	movs	r1, #44	; 0x2c
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	3340      	adds	r3, #64	; 0x40
 80017a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80017a2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	212c      	movs	r1, #44	; 0x2c
 80017aa:	fb01 f303 	mul.w	r3, r1, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	3339      	adds	r3, #57	; 0x39
 80017b2:	78fa      	ldrb	r2, [r7, #3]
 80017b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	212c      	movs	r1, #44	; 0x2c
 80017bc:	fb01 f303 	mul.w	r3, r1, r3
 80017c0:	4413      	add	r3, r2
 80017c2:	333f      	adds	r3, #63	; 0x3f
 80017c4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	78ba      	ldrb	r2, [r7, #2]
 80017ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017d2:	b2d0      	uxtb	r0, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	212c      	movs	r1, #44	; 0x2c
 80017d8:	fb01 f303 	mul.w	r3, r1, r3
 80017dc:	4413      	add	r3, r2
 80017de:	333a      	adds	r3, #58	; 0x3a
 80017e0:	4602      	mov	r2, r0
 80017e2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80017e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	da09      	bge.n	8001800 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	212c      	movs	r1, #44	; 0x2c
 80017f2:	fb01 f303 	mul.w	r3, r1, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	333b      	adds	r3, #59	; 0x3b
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
 80017fe:	e008      	b.n	8001812 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	212c      	movs	r1, #44	; 0x2c
 8001806:	fb01 f303 	mul.w	r3, r1, r3
 800180a:	4413      	add	r3, r2
 800180c:	333b      	adds	r3, #59	; 0x3b
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001812:	78fb      	ldrb	r3, [r7, #3]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	212c      	movs	r1, #44	; 0x2c
 8001818:	fb01 f303 	mul.w	r3, r1, r3
 800181c:	4413      	add	r3, r2
 800181e:	333c      	adds	r3, #60	; 0x3c
 8001820:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001824:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	787c      	ldrb	r4, [r7, #1]
 800182c:	78ba      	ldrb	r2, [r7, #2]
 800182e:	78f9      	ldrb	r1, [r7, #3]
 8001830:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001832:	9302      	str	r3, [sp, #8]
 8001834:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	4623      	mov	r3, r4
 8001842:	f003 fb17 	bl	8004e74 <USB_HC_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001852:	7bfb      	ldrb	r3, [r7, #15]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	bd90      	pop	{r4, r7, pc}

0800185c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001872:	2b01      	cmp	r3, #1
 8001874:	d101      	bne.n	800187a <HAL_HCD_HC_Halt+0x1e>
 8001876:	2302      	movs	r3, #2
 8001878:	e00f      	b.n	800189a <HAL_HCD_HC_Halt+0x3e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	78fa      	ldrb	r2, [r7, #3]
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f003 fd67 	bl	800535e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	4608      	mov	r0, r1
 80018ae:	4611      	mov	r1, r2
 80018b0:	461a      	mov	r2, r3
 80018b2:	4603      	mov	r3, r0
 80018b4:	70fb      	strb	r3, [r7, #3]
 80018b6:	460b      	mov	r3, r1
 80018b8:	70bb      	strb	r3, [r7, #2]
 80018ba:	4613      	mov	r3, r2
 80018bc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	212c      	movs	r1, #44	; 0x2c
 80018c4:	fb01 f303 	mul.w	r3, r1, r3
 80018c8:	4413      	add	r3, r2
 80018ca:	333b      	adds	r3, #59	; 0x3b
 80018cc:	78ba      	ldrb	r2, [r7, #2]
 80018ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80018d0:	78fb      	ldrb	r3, [r7, #3]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	212c      	movs	r1, #44	; 0x2c
 80018d6:	fb01 f303 	mul.w	r3, r1, r3
 80018da:	4413      	add	r3, r2
 80018dc:	333f      	adds	r3, #63	; 0x3f
 80018de:	787a      	ldrb	r2, [r7, #1]
 80018e0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80018e2:	7c3b      	ldrb	r3, [r7, #16]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d112      	bne.n	800190e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	212c      	movs	r1, #44	; 0x2c
 80018ee:	fb01 f303 	mul.w	r3, r1, r3
 80018f2:	4413      	add	r3, r2
 80018f4:	3342      	adds	r3, #66	; 0x42
 80018f6:	2203      	movs	r2, #3
 80018f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	212c      	movs	r1, #44	; 0x2c
 8001900:	fb01 f303 	mul.w	r3, r1, r3
 8001904:	4413      	add	r3, r2
 8001906:	333d      	adds	r3, #61	; 0x3d
 8001908:	7f3a      	ldrb	r2, [r7, #28]
 800190a:	701a      	strb	r2, [r3, #0]
 800190c:	e008      	b.n	8001920 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	212c      	movs	r1, #44	; 0x2c
 8001914:	fb01 f303 	mul.w	r3, r1, r3
 8001918:	4413      	add	r3, r2
 800191a:	3342      	adds	r3, #66	; 0x42
 800191c:	2202      	movs	r2, #2
 800191e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001920:	787b      	ldrb	r3, [r7, #1]
 8001922:	2b03      	cmp	r3, #3
 8001924:	f200 80c6 	bhi.w	8001ab4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001928:	a201      	add	r2, pc, #4	; (adr r2, 8001930 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800192a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192e:	bf00      	nop
 8001930:	08001941 	.word	0x08001941
 8001934:	08001aa1 	.word	0x08001aa1
 8001938:	080019a5 	.word	0x080019a5
 800193c:	08001a23 	.word	0x08001a23
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001940:	7c3b      	ldrb	r3, [r7, #16]
 8001942:	2b01      	cmp	r3, #1
 8001944:	f040 80b8 	bne.w	8001ab8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001948:	78bb      	ldrb	r3, [r7, #2]
 800194a:	2b00      	cmp	r3, #0
 800194c:	f040 80b4 	bne.w	8001ab8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001950:	8b3b      	ldrh	r3, [r7, #24]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d108      	bne.n	8001968 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	212c      	movs	r1, #44	; 0x2c
 800195c:	fb01 f303 	mul.w	r3, r1, r3
 8001960:	4413      	add	r3, r2
 8001962:	3355      	adds	r3, #85	; 0x55
 8001964:	2201      	movs	r2, #1
 8001966:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	212c      	movs	r1, #44	; 0x2c
 800196e:	fb01 f303 	mul.w	r3, r1, r3
 8001972:	4413      	add	r3, r2
 8001974:	3355      	adds	r3, #85	; 0x55
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d109      	bne.n	8001990 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	212c      	movs	r1, #44	; 0x2c
 8001982:	fb01 f303 	mul.w	r3, r1, r3
 8001986:	4413      	add	r3, r2
 8001988:	3342      	adds	r3, #66	; 0x42
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800198e:	e093      	b.n	8001ab8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	212c      	movs	r1, #44	; 0x2c
 8001996:	fb01 f303 	mul.w	r3, r1, r3
 800199a:	4413      	add	r3, r2
 800199c:	3342      	adds	r3, #66	; 0x42
 800199e:	2202      	movs	r2, #2
 80019a0:	701a      	strb	r2, [r3, #0]
      break;
 80019a2:	e089      	b.n	8001ab8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80019a4:	78bb      	ldrb	r3, [r7, #2]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d11d      	bne.n	80019e6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	212c      	movs	r1, #44	; 0x2c
 80019b0:	fb01 f303 	mul.w	r3, r1, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	3355      	adds	r3, #85	; 0x55
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d109      	bne.n	80019d2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	212c      	movs	r1, #44	; 0x2c
 80019c4:	fb01 f303 	mul.w	r3, r1, r3
 80019c8:	4413      	add	r3, r2
 80019ca:	3342      	adds	r3, #66	; 0x42
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80019d0:	e073      	b.n	8001aba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	212c      	movs	r1, #44	; 0x2c
 80019d8:	fb01 f303 	mul.w	r3, r1, r3
 80019dc:	4413      	add	r3, r2
 80019de:	3342      	adds	r3, #66	; 0x42
 80019e0:	2202      	movs	r2, #2
 80019e2:	701a      	strb	r2, [r3, #0]
      break;
 80019e4:	e069      	b.n	8001aba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	212c      	movs	r1, #44	; 0x2c
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	3354      	adds	r3, #84	; 0x54
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d109      	bne.n	8001a0e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	212c      	movs	r1, #44	; 0x2c
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	3342      	adds	r3, #66	; 0x42
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
      break;
 8001a0c:	e055      	b.n	8001aba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	212c      	movs	r1, #44	; 0x2c
 8001a14:	fb01 f303 	mul.w	r3, r1, r3
 8001a18:	4413      	add	r3, r2
 8001a1a:	3342      	adds	r3, #66	; 0x42
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	701a      	strb	r2, [r3, #0]
      break;
 8001a20:	e04b      	b.n	8001aba <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a22:	78bb      	ldrb	r3, [r7, #2]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d11d      	bne.n	8001a64 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	212c      	movs	r1, #44	; 0x2c
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	3355      	adds	r3, #85	; 0x55
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d109      	bne.n	8001a50 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	212c      	movs	r1, #44	; 0x2c
 8001a42:	fb01 f303 	mul.w	r3, r1, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	3342      	adds	r3, #66	; 0x42
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a4e:	e034      	b.n	8001aba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	212c      	movs	r1, #44	; 0x2c
 8001a56:	fb01 f303 	mul.w	r3, r1, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3342      	adds	r3, #66	; 0x42
 8001a5e:	2202      	movs	r2, #2
 8001a60:	701a      	strb	r2, [r3, #0]
      break;
 8001a62:	e02a      	b.n	8001aba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	212c      	movs	r1, #44	; 0x2c
 8001a6a:	fb01 f303 	mul.w	r3, r1, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	3354      	adds	r3, #84	; 0x54
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d109      	bne.n	8001a8c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	212c      	movs	r1, #44	; 0x2c
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	3342      	adds	r3, #66	; 0x42
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
      break;
 8001a8a:	e016      	b.n	8001aba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	212c      	movs	r1, #44	; 0x2c
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	3342      	adds	r3, #66	; 0x42
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	701a      	strb	r2, [r3, #0]
      break;
 8001a9e:	e00c      	b.n	8001aba <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	212c      	movs	r1, #44	; 0x2c
 8001aa6:	fb01 f303 	mul.w	r3, r1, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	3342      	adds	r3, #66	; 0x42
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
      break;
 8001ab2:	e002      	b.n	8001aba <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001ab4:	bf00      	nop
 8001ab6:	e000      	b.n	8001aba <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001ab8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	212c      	movs	r1, #44	; 0x2c
 8001ac0:	fb01 f303 	mul.w	r3, r1, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3344      	adds	r3, #68	; 0x44
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001acc:	78fb      	ldrb	r3, [r7, #3]
 8001ace:	8b3a      	ldrh	r2, [r7, #24]
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	202c      	movs	r0, #44	; 0x2c
 8001ad4:	fb00 f303 	mul.w	r3, r0, r3
 8001ad8:	440b      	add	r3, r1
 8001ada:	334c      	adds	r3, #76	; 0x4c
 8001adc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001ade:	78fb      	ldrb	r3, [r7, #3]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	212c      	movs	r1, #44	; 0x2c
 8001ae4:	fb01 f303 	mul.w	r3, r1, r3
 8001ae8:	4413      	add	r3, r2
 8001aea:	3360      	adds	r3, #96	; 0x60
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	212c      	movs	r1, #44	; 0x2c
 8001af6:	fb01 f303 	mul.w	r3, r1, r3
 8001afa:	4413      	add	r3, r2
 8001afc:	3350      	adds	r3, #80	; 0x50
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b02:	78fb      	ldrb	r3, [r7, #3]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	212c      	movs	r1, #44	; 0x2c
 8001b08:	fb01 f303 	mul.w	r3, r1, r3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3339      	adds	r3, #57	; 0x39
 8001b10:	78fa      	ldrb	r2, [r7, #3]
 8001b12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	212c      	movs	r1, #44	; 0x2c
 8001b1a:	fb01 f303 	mul.w	r3, r1, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	3361      	adds	r3, #97	; 0x61
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	222c      	movs	r2, #44	; 0x2c
 8001b2e:	fb02 f303 	mul.w	r3, r2, r3
 8001b32:	3338      	adds	r3, #56	; 0x38
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	18d1      	adds	r1, r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	461a      	mov	r2, r3
 8001b40:	f003 faba 	bl	80050b8 <USB_HC_StartXfer>
 8001b44:	4603      	mov	r3, r0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop

08001b50 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f002 ffe5 	bl	8004b36 <USB_GetMode>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	f040 80f6 	bne.w	8001d60 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f002 ffc9 	bl	8004b10 <USB_ReadInterrupts>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 80ec 	beq.w	8001d5e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 ffc0 	bl	8004b10 <USB_ReadInterrupts>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b9a:	d104      	bne.n	8001ba6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ba4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f002 ffb0 	bl	8004b10 <USB_ReadInterrupts>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bba:	d104      	bne.n	8001bc6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bc4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f002 ffa0 	bl	8004b10 <USB_ReadInterrupts>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001bda:	d104      	bne.n	8001be6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001be4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 ff90 	bl	8004b10 <USB_ReadInterrupts>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d103      	bne.n	8001c02 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 ff82 	bl	8004b10 <USB_ReadInterrupts>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c16:	d11c      	bne.n	8001c52 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c20:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10f      	bne.n	8001c52 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c32:	2110      	movs	r1, #16
 8001c34:	6938      	ldr	r0, [r7, #16]
 8001c36:	f002 fe71 	bl	800491c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001c3a:	6938      	ldr	r0, [r7, #16]
 8001c3c:	f002 fea2 	bl	8004984 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2101      	movs	r1, #1
 8001c46:	4618      	mov	r0, r3
 8001c48:	f003 f878 	bl	8004d3c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f004 fe81 	bl	8006954 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f002 ff5a 	bl	8004b10 <USB_ReadInterrupts>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c66:	d102      	bne.n	8001c6e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f001 f882 	bl	8002d72 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f002 ff4c 	bl	8004b10 <USB_ReadInterrupts>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d106      	bne.n	8001c90 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f004 fe4a 	bl	800691c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2208      	movs	r2, #8
 8001c8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f002 ff3b 	bl	8004b10 <USB_ReadInterrupts>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b10      	cmp	r3, #16
 8001ca2:	d101      	bne.n	8001ca8 <HAL_HCD_IRQHandler+0x158>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <HAL_HCD_IRQHandler+0x15a>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d012      	beq.n	8001cd4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	699a      	ldr	r2, [r3, #24]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0210 	bic.w	r2, r2, #16
 8001cbc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 ff85 	bl	8002bce <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699a      	ldr	r2, [r3, #24]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0210 	orr.w	r2, r2, #16
 8001cd2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f002 ff19 	bl	8004b10 <USB_ReadInterrupts>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ce8:	d13a      	bne.n	8001d60 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f003 fb24 	bl	800533c <USB_HC_ReadInterrupt>
 8001cf4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	e025      	b.n	8001d48 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d018      	beq.n	8001d42 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	015a      	lsls	r2, r3, #5
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4413      	add	r3, r2
 8001d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d26:	d106      	bne.n	8001d36 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f88f 	bl	8001e52 <HCD_HC_IN_IRQHandler>
 8001d34:	e005      	b.n	8001d42 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 fbdd 	bl	80024fc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	3301      	adds	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d3d4      	bcc.n	8001cfc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d5a:	615a      	str	r2, [r3, #20]
 8001d5c:	e000      	b.n	8001d60 <HAL_HCD_IRQHandler+0x210>
      return;
 8001d5e:	bf00      	nop
    }
  }
}
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_HCD_Start+0x16>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e013      	b.n	8001da4 <HAL_HCD_Start+0x3e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2101      	movs	r1, #1
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f003 f810 	bl	8004db0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f002 fd53 	bl	8004840 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_HCD_Stop+0x16>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e00d      	b.n	8001dde <HAL_HCD_Stop+0x32>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f003 fbfe 	bl	80055d0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	460b      	mov	r3, r1
 8001df0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	212c      	movs	r1, #44	; 0x2c
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3360      	adds	r3, #96	; 0x60
 8001e00:	781b      	ldrb	r3, [r3, #0]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	460b      	mov	r3, r1
 8001e18:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e1a:	78fb      	ldrb	r3, [r7, #3]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	212c      	movs	r1, #44	; 0x2c
 8001e20:	fb01 f303 	mul.w	r3, r1, r3
 8001e24:	4413      	add	r3, r2
 8001e26:	3350      	adds	r3, #80	; 0x50
 8001e28:	681b      	ldr	r3, [r3, #0]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 f804 	bl	8004e50 <USB_GetCurrentFrame>
 8001e48:	4603      	mov	r3, r0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	015a      	lsls	r2, r3, #5
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d11a      	bne.n	8001eb8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	015a      	lsls	r2, r3, #5
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4413      	add	r3, r2
 8001e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2304      	movs	r3, #4
 8001e92:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	212c      	movs	r1, #44	; 0x2c
 8001e9a:	fb01 f303 	mul.w	r3, r1, r3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3361      	adds	r3, #97	; 0x61
 8001ea2:	2206      	movs	r2, #6
 8001ea4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f003 fa54 	bl	800535e <USB_HC_Halt>
 8001eb6:	e0af      	b.n	8002018 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ece:	d11b      	bne.n	8001f08 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	015a      	lsls	r2, r3, #5
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001edc:	461a      	mov	r2, r3
 8001ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	212c      	movs	r1, #44	; 0x2c
 8001eea:	fb01 f303 	mul.w	r3, r1, r3
 8001eee:	4413      	add	r3, r2
 8001ef0:	3361      	adds	r3, #97	; 0x61
 8001ef2:	2207      	movs	r2, #7
 8001ef4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f003 fa2c 	bl	800535e <USB_HC_Halt>
 8001f06:	e087      	b.n	8002018 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	015a      	lsls	r2, r3, #5
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4413      	add	r3, r2
 8001f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 0320 	and.w	r3, r3, #32
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	d109      	bne.n	8001f32 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	015a      	lsls	r2, r3, #5
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	2320      	movs	r3, #32
 8001f2e:	6093      	str	r3, [r2, #8]
 8001f30:	e072      	b.n	8002018 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d11a      	bne.n	8001f7e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f54:	461a      	mov	r2, r3
 8001f56:	2308      	movs	r3, #8
 8001f58:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	212c      	movs	r1, #44	; 0x2c
 8001f60:	fb01 f303 	mul.w	r3, r1, r3
 8001f64:	4413      	add	r3, r2
 8001f66:	3361      	adds	r3, #97	; 0x61
 8001f68:	2205      	movs	r2, #5
 8001f6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f003 f9f1 	bl	800535e <USB_HC_Halt>
 8001f7c:	e04c      	b.n	8002018 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f94:	d11b      	bne.n	8001fce <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fa8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	212c      	movs	r1, #44	; 0x2c
 8001fb0:	fb01 f303 	mul.w	r3, r1, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3361      	adds	r3, #97	; 0x61
 8001fb8:	2208      	movs	r2, #8
 8001fba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f003 f9c9 	bl	800535e <USB_HC_Halt>
 8001fcc:	e024      	b.n	8002018 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe0:	2b80      	cmp	r3, #128	; 0x80
 8001fe2:	d119      	bne.n	8002018 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	212c      	movs	r1, #44	; 0x2c
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	4413      	add	r3, r2
 8002002:	3361      	adds	r3, #97	; 0x61
 8002004:	2206      	movs	r2, #6
 8002006:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	4611      	mov	r1, r2
 8002012:	4618      	mov	r0, r3
 8002014:	f003 f9a3 	bl	800535e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	015a      	lsls	r2, r3, #5
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4413      	add	r3, r2
 8002020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800202a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800202e:	d112      	bne.n	8002056 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f003 f98f 	bl	800535e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4413      	add	r3, r2
 8002048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204c:	461a      	mov	r2, r3
 800204e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002052:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002054:	e24e      	b.n	80024f4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4413      	add	r3, r2
 800205e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	f040 80df 	bne.w	800222c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d019      	beq.n	80020aa <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	212c      	movs	r1, #44	; 0x2c
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	4413      	add	r3, r2
 8002082:	3348      	adds	r3, #72	; 0x48
 8002084:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	0159      	lsls	r1, r3, #5
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	440b      	add	r3, r1
 800208e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002098:	1ad2      	subs	r2, r2, r3
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	202c      	movs	r0, #44	; 0x2c
 80020a0:	fb00 f303 	mul.w	r3, r0, r3
 80020a4:	440b      	add	r3, r1
 80020a6:	3350      	adds	r3, #80	; 0x50
 80020a8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	212c      	movs	r1, #44	; 0x2c
 80020b0:	fb01 f303 	mul.w	r3, r1, r3
 80020b4:	4413      	add	r3, r2
 80020b6:	3361      	adds	r3, #97	; 0x61
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	212c      	movs	r1, #44	; 0x2c
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	4413      	add	r3, r2
 80020c8:	335c      	adds	r3, #92	; 0x5c
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	015a      	lsls	r2, r3, #5
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4413      	add	r3, r2
 80020d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020da:	461a      	mov	r2, r3
 80020dc:	2301      	movs	r3, #1
 80020de:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	212c      	movs	r1, #44	; 0x2c
 80020e6:	fb01 f303 	mul.w	r3, r1, r3
 80020ea:	4413      	add	r3, r2
 80020ec:	333f      	adds	r3, #63	; 0x3f
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d009      	beq.n	8002108 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	212c      	movs	r1, #44	; 0x2c
 80020fa:	fb01 f303 	mul.w	r3, r1, r3
 80020fe:	4413      	add	r3, r2
 8002100:	333f      	adds	r3, #63	; 0x3f
 8002102:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002104:	2b02      	cmp	r3, #2
 8002106:	d111      	bne.n	800212c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	4611      	mov	r1, r2
 8002112:	4618      	mov	r0, r3
 8002114:	f003 f923 	bl	800535e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	015a      	lsls	r2, r3, #5
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4413      	add	r3, r2
 8002120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002124:	461a      	mov	r2, r3
 8002126:	2310      	movs	r3, #16
 8002128:	6093      	str	r3, [r2, #8]
 800212a:	e03a      	b.n	80021a2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	212c      	movs	r1, #44	; 0x2c
 8002132:	fb01 f303 	mul.w	r3, r1, r3
 8002136:	4413      	add	r3, r2
 8002138:	333f      	adds	r3, #63	; 0x3f
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b03      	cmp	r3, #3
 800213e:	d009      	beq.n	8002154 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	212c      	movs	r1, #44	; 0x2c
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	4413      	add	r3, r2
 800214c:	333f      	adds	r3, #63	; 0x3f
 800214e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002150:	2b01      	cmp	r3, #1
 8002152:	d126      	bne.n	80021a2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	015a      	lsls	r2, r3, #5
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4413      	add	r3, r2
 800215c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	0151      	lsls	r1, r2, #5
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	440a      	add	r2, r1
 800216a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800216e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002172:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	212c      	movs	r1, #44	; 0x2c
 800217a:	fb01 f303 	mul.w	r3, r1, r3
 800217e:	4413      	add	r3, r2
 8002180:	3360      	adds	r3, #96	; 0x60
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	b2d9      	uxtb	r1, r3
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	202c      	movs	r0, #44	; 0x2c
 8002190:	fb00 f303 	mul.w	r3, r0, r3
 8002194:	4413      	add	r3, r2
 8002196:	3360      	adds	r3, #96	; 0x60
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f004 fbe7 	bl	8006970 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d12b      	bne.n	8002202 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	212c      	movs	r1, #44	; 0x2c
 80021b0:	fb01 f303 	mul.w	r3, r1, r3
 80021b4:	4413      	add	r3, r2
 80021b6:	3348      	adds	r3, #72	; 0x48
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	202c      	movs	r0, #44	; 0x2c
 80021c0:	fb00 f202 	mul.w	r2, r0, r2
 80021c4:	440a      	add	r2, r1
 80021c6:	3240      	adds	r2, #64	; 0x40
 80021c8:	8812      	ldrh	r2, [r2, #0]
 80021ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 818e 	beq.w	80024f4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	212c      	movs	r1, #44	; 0x2c
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	3354      	adds	r3, #84	; 0x54
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	f083 0301 	eor.w	r3, r3, #1
 80021ec:	b2d8      	uxtb	r0, r3
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	212c      	movs	r1, #44	; 0x2c
 80021f4:	fb01 f303 	mul.w	r3, r1, r3
 80021f8:	4413      	add	r3, r2
 80021fa:	3354      	adds	r3, #84	; 0x54
 80021fc:	4602      	mov	r2, r0
 80021fe:	701a      	strb	r2, [r3, #0]
}
 8002200:	e178      	b.n	80024f4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	212c      	movs	r1, #44	; 0x2c
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	4413      	add	r3, r2
 800220e:	3354      	adds	r3, #84	; 0x54
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	f083 0301 	eor.w	r3, r3, #1
 8002216:	b2d8      	uxtb	r0, r3
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	212c      	movs	r1, #44	; 0x2c
 800221e:	fb01 f303 	mul.w	r3, r1, r3
 8002222:	4413      	add	r3, r2
 8002224:	3354      	adds	r3, #84	; 0x54
 8002226:	4602      	mov	r2, r0
 8002228:	701a      	strb	r2, [r3, #0]
}
 800222a:	e163      	b.n	80024f4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4413      	add	r3, r2
 8002234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b02      	cmp	r3, #2
 8002240:	f040 80f6 	bne.w	8002430 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	212c      	movs	r1, #44	; 0x2c
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	4413      	add	r3, r2
 8002250:	3361      	adds	r3, #97	; 0x61
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d109      	bne.n	800226c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	212c      	movs	r1, #44	; 0x2c
 800225e:	fb01 f303 	mul.w	r3, r1, r3
 8002262:	4413      	add	r3, r2
 8002264:	3360      	adds	r3, #96	; 0x60
 8002266:	2201      	movs	r2, #1
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	e0c9      	b.n	8002400 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	212c      	movs	r1, #44	; 0x2c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	3361      	adds	r3, #97	; 0x61
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b05      	cmp	r3, #5
 800227e:	d109      	bne.n	8002294 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	212c      	movs	r1, #44	; 0x2c
 8002286:	fb01 f303 	mul.w	r3, r1, r3
 800228a:	4413      	add	r3, r2
 800228c:	3360      	adds	r3, #96	; 0x60
 800228e:	2205      	movs	r2, #5
 8002290:	701a      	strb	r2, [r3, #0]
 8002292:	e0b5      	b.n	8002400 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	212c      	movs	r1, #44	; 0x2c
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	4413      	add	r3, r2
 80022a0:	3361      	adds	r3, #97	; 0x61
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b06      	cmp	r3, #6
 80022a6:	d009      	beq.n	80022bc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	212c      	movs	r1, #44	; 0x2c
 80022ae:	fb01 f303 	mul.w	r3, r1, r3
 80022b2:	4413      	add	r3, r2
 80022b4:	3361      	adds	r3, #97	; 0x61
 80022b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d150      	bne.n	800235e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	212c      	movs	r1, #44	; 0x2c
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	335c      	adds	r3, #92	; 0x5c
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	202c      	movs	r0, #44	; 0x2c
 80022d4:	fb00 f303 	mul.w	r3, r0, r3
 80022d8:	440b      	add	r3, r1
 80022da:	335c      	adds	r3, #92	; 0x5c
 80022dc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	212c      	movs	r1, #44	; 0x2c
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	335c      	adds	r3, #92	; 0x5c
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d912      	bls.n	8002318 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	212c      	movs	r1, #44	; 0x2c
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	335c      	adds	r3, #92	; 0x5c
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	212c      	movs	r1, #44	; 0x2c
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	4413      	add	r3, r2
 8002310:	3360      	adds	r3, #96	; 0x60
 8002312:	2204      	movs	r2, #4
 8002314:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002316:	e073      	b.n	8002400 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	212c      	movs	r1, #44	; 0x2c
 800231e:	fb01 f303 	mul.w	r3, r1, r3
 8002322:	4413      	add	r3, r2
 8002324:	3360      	adds	r3, #96	; 0x60
 8002326:	2202      	movs	r2, #2
 8002328:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4413      	add	r3, r2
 8002332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002340:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002348:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4413      	add	r3, r2
 8002352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002356:	461a      	mov	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800235c:	e050      	b.n	8002400 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	212c      	movs	r1, #44	; 0x2c
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	4413      	add	r3, r2
 800236a:	3361      	adds	r3, #97	; 0x61
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d122      	bne.n	80023b8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	212c      	movs	r1, #44	; 0x2c
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	4413      	add	r3, r2
 800237e:	3360      	adds	r3, #96	; 0x60
 8002380:	2202      	movs	r2, #2
 8002382:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	015a      	lsls	r2, r3, #5
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4413      	add	r3, r2
 800238c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800239a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023a2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b0:	461a      	mov	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	e023      	b.n	8002400 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	3361      	adds	r3, #97	; 0x61
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b07      	cmp	r3, #7
 80023ca:	d119      	bne.n	8002400 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	212c      	movs	r1, #44	; 0x2c
 80023d2:	fb01 f303 	mul.w	r3, r1, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	335c      	adds	r3, #92	; 0x5c
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	202c      	movs	r0, #44	; 0x2c
 80023e4:	fb00 f303 	mul.w	r3, r0, r3
 80023e8:	440b      	add	r3, r1
 80023ea:	335c      	adds	r3, #92	; 0x5c
 80023ec:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	212c      	movs	r1, #44	; 0x2c
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	4413      	add	r3, r2
 80023fa:	3360      	adds	r3, #96	; 0x60
 80023fc:	2204      	movs	r2, #4
 80023fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4413      	add	r3, r2
 8002408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240c:	461a      	mov	r2, r3
 800240e:	2302      	movs	r3, #2
 8002410:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	b2d9      	uxtb	r1, r3
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	202c      	movs	r0, #44	; 0x2c
 800241c:	fb00 f303 	mul.w	r3, r0, r3
 8002420:	4413      	add	r3, r2
 8002422:	3360      	adds	r3, #96	; 0x60
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f004 faa1 	bl	8006970 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800242e:	e061      	b.n	80024f4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4413      	add	r3, r2
 8002438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	2b10      	cmp	r3, #16
 8002444:	d156      	bne.n	80024f4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	212c      	movs	r1, #44	; 0x2c
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	4413      	add	r3, r2
 8002452:	333f      	adds	r3, #63	; 0x3f
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b03      	cmp	r3, #3
 8002458:	d111      	bne.n	800247e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	212c      	movs	r1, #44	; 0x2c
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	4413      	add	r3, r2
 8002466:	335c      	adds	r3, #92	; 0x5c
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f002 ff71 	bl	800535e <USB_HC_Halt>
 800247c:	e031      	b.n	80024e2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	212c      	movs	r1, #44	; 0x2c
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	4413      	add	r3, r2
 800248a:	333f      	adds	r3, #63	; 0x3f
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d009      	beq.n	80024a6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	333f      	adds	r3, #63	; 0x3f
 80024a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d11d      	bne.n	80024e2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	212c      	movs	r1, #44	; 0x2c
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	335c      	adds	r3, #92	; 0x5c
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d110      	bne.n	80024e2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	212c      	movs	r1, #44	; 0x2c
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	4413      	add	r3, r2
 80024cc:	3361      	adds	r3, #97	; 0x61
 80024ce:	2203      	movs	r2, #3
 80024d0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	4611      	mov	r1, r2
 80024dc:	4618      	mov	r0, r3
 80024de:	f002 ff3e 	bl	800535e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ee:	461a      	mov	r2, r3
 80024f0:	2310      	movs	r3, #16
 80024f2:	6093      	str	r3, [r2, #8]
}
 80024f4:	bf00      	nop
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002512:	78fb      	ldrb	r3, [r7, #3]
 8002514:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	015a      	lsls	r2, r3, #5
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	4413      	add	r3, r2
 800251e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b04      	cmp	r3, #4
 800252a:	d11a      	bne.n	8002562 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	4413      	add	r3, r2
 8002534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002538:	461a      	mov	r2, r3
 800253a:	2304      	movs	r3, #4
 800253c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	212c      	movs	r1, #44	; 0x2c
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	4413      	add	r3, r2
 800254a:	3361      	adds	r3, #97	; 0x61
 800254c:	2206      	movs	r2, #6
 800254e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f002 feff 	bl	800535e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002560:	e331      	b.n	8002bc6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	4413      	add	r3, r2
 800256a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 0320 	and.w	r3, r3, #32
 8002574:	2b20      	cmp	r3, #32
 8002576:	d12e      	bne.n	80025d6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	4413      	add	r3, r2
 8002580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002584:	461a      	mov	r2, r3
 8002586:	2320      	movs	r3, #32
 8002588:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	212c      	movs	r1, #44	; 0x2c
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	4413      	add	r3, r2
 8002596:	333d      	adds	r3, #61	; 0x3d
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b01      	cmp	r3, #1
 800259c:	f040 8313 	bne.w	8002bc6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	212c      	movs	r1, #44	; 0x2c
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	333d      	adds	r3, #61	; 0x3d
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	212c      	movs	r1, #44	; 0x2c
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	4413      	add	r3, r2
 80025be:	3360      	adds	r3, #96	; 0x60
 80025c0:	2202      	movs	r2, #2
 80025c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	4611      	mov	r1, r2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f002 fec5 	bl	800535e <USB_HC_Halt>
}
 80025d4:	e2f7      	b.n	8002bc6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ec:	d112      	bne.n	8002614 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fa:	461a      	mov	r2, r3
 80025fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002600:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f002 fea6 	bl	800535e <USB_HC_Halt>
}
 8002612:	e2d8      	b.n	8002bc6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	4413      	add	r3, r2
 800261c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b01      	cmp	r3, #1
 8002628:	d140      	bne.n	80026ac <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	335c      	adds	r3, #92	; 0x5c
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	4413      	add	r3, r2
 8002644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264e:	2b40      	cmp	r3, #64	; 0x40
 8002650:	d111      	bne.n	8002676 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	212c      	movs	r1, #44	; 0x2c
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	4413      	add	r3, r2
 800265e:	333d      	adds	r3, #61	; 0x3d
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	461a      	mov	r2, r3
 8002672:	2340      	movs	r3, #64	; 0x40
 8002674:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002682:	461a      	mov	r2, r3
 8002684:	2301      	movs	r3, #1
 8002686:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	212c      	movs	r1, #44	; 0x2c
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4413      	add	r3, r2
 8002694:	3361      	adds	r3, #97	; 0x61
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f002 fe5a 	bl	800535e <USB_HC_Halt>
}
 80026aa:	e28c      	b.n	8002bc6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026be:	2b40      	cmp	r3, #64	; 0x40
 80026c0:	d12c      	bne.n	800271c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	212c      	movs	r1, #44	; 0x2c
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	3361      	adds	r3, #97	; 0x61
 80026d0:	2204      	movs	r2, #4
 80026d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	212c      	movs	r1, #44	; 0x2c
 80026da:	fb01 f303 	mul.w	r3, r1, r3
 80026de:	4413      	add	r3, r2
 80026e0:	333d      	adds	r3, #61	; 0x3d
 80026e2:	2201      	movs	r2, #1
 80026e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	335c      	adds	r3, #92	; 0x5c
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	4611      	mov	r1, r2
 8002702:	4618      	mov	r0, r3
 8002704:	f002 fe2b 	bl	800535e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	4413      	add	r3, r2
 8002710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002714:	461a      	mov	r2, r3
 8002716:	2340      	movs	r3, #64	; 0x40
 8002718:	6093      	str	r3, [r2, #8]
}
 800271a:	e254      	b.n	8002bc6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b08      	cmp	r3, #8
 8002730:	d11a      	bne.n	8002768 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	4413      	add	r3, r2
 800273a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273e:	461a      	mov	r2, r3
 8002740:	2308      	movs	r3, #8
 8002742:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	212c      	movs	r1, #44	; 0x2c
 800274a:	fb01 f303 	mul.w	r3, r1, r3
 800274e:	4413      	add	r3, r2
 8002750:	3361      	adds	r3, #97	; 0x61
 8002752:	2205      	movs	r2, #5
 8002754:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f002 fdfc 	bl	800535e <USB_HC_Halt>
}
 8002766:	e22e      	b.n	8002bc6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	4413      	add	r3, r2
 8002770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b10      	cmp	r3, #16
 800277c:	d140      	bne.n	8002800 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	212c      	movs	r1, #44	; 0x2c
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	4413      	add	r3, r2
 800278a:	335c      	adds	r3, #92	; 0x5c
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	212c      	movs	r1, #44	; 0x2c
 8002796:	fb01 f303 	mul.w	r3, r1, r3
 800279a:	4413      	add	r3, r2
 800279c:	3361      	adds	r3, #97	; 0x61
 800279e:	2203      	movs	r2, #3
 80027a0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	333d      	adds	r3, #61	; 0x3d
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d112      	bne.n	80027dc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	212c      	movs	r1, #44	; 0x2c
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	333c      	adds	r3, #60	; 0x3c
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d108      	bne.n	80027dc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	212c      	movs	r1, #44	; 0x2c
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	333d      	adds	r3, #61	; 0x3d
 80027d8:	2201      	movs	r2, #1
 80027da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	4611      	mov	r1, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f002 fdb9 	bl	800535e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f8:	461a      	mov	r2, r3
 80027fa:	2310      	movs	r3, #16
 80027fc:	6093      	str	r3, [r2, #8]
}
 80027fe:	e1e2      	b.n	8002bc6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	4413      	add	r3, r2
 8002808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002812:	2b80      	cmp	r3, #128	; 0x80
 8002814:	d164      	bne.n	80028e0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d111      	bne.n	8002842 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	212c      	movs	r1, #44	; 0x2c
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	4413      	add	r3, r2
 800282a:	3361      	adds	r3, #97	; 0x61
 800282c:	2206      	movs	r2, #6
 800282e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f002 fd8f 	bl	800535e <USB_HC_Halt>
 8002840:	e044      	b.n	80028cc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	212c      	movs	r1, #44	; 0x2c
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	335c      	adds	r3, #92	; 0x5c
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	202c      	movs	r0, #44	; 0x2c
 800285a:	fb00 f303 	mul.w	r3, r0, r3
 800285e:	440b      	add	r3, r1
 8002860:	335c      	adds	r3, #92	; 0x5c
 8002862:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	212c      	movs	r1, #44	; 0x2c
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	4413      	add	r3, r2
 8002870:	335c      	adds	r3, #92	; 0x5c
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d920      	bls.n	80028ba <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	212c      	movs	r1, #44	; 0x2c
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	4413      	add	r3, r2
 8002884:	335c      	adds	r3, #92	; 0x5c
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	3360      	adds	r3, #96	; 0x60
 8002898:	2204      	movs	r2, #4
 800289a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	b2d9      	uxtb	r1, r3
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	202c      	movs	r0, #44	; 0x2c
 80028a6:	fb00 f303 	mul.w	r3, r0, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	3360      	adds	r3, #96	; 0x60
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f004 f85c 	bl	8006970 <HAL_HCD_HC_NotifyURBChange_Callback>
 80028b8:	e008      	b.n	80028cc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	3360      	adds	r3, #96	; 0x60
 80028c8:	2202      	movs	r2, #2
 80028ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d8:	461a      	mov	r2, r3
 80028da:	2380      	movs	r3, #128	; 0x80
 80028dc:	6093      	str	r3, [r2, #8]
}
 80028de:	e172      	b.n	8002bc6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f6:	d11b      	bne.n	8002930 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	3361      	adds	r3, #97	; 0x61
 8002906:	2208      	movs	r2, #8
 8002908:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	4611      	mov	r1, r2
 8002914:	4618      	mov	r0, r3
 8002916:	f002 fd22 	bl	800535e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	4413      	add	r3, r2
 8002922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002926:	461a      	mov	r2, r3
 8002928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800292c:	6093      	str	r3, [r2, #8]
}
 800292e:	e14a      	b.n	8002bc6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	4413      	add	r3, r2
 8002938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b02      	cmp	r3, #2
 8002944:	f040 813f 	bne.w	8002bc6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	212c      	movs	r1, #44	; 0x2c
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	4413      	add	r3, r2
 8002954:	3361      	adds	r3, #97	; 0x61
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d17d      	bne.n	8002a58 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	212c      	movs	r1, #44	; 0x2c
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	4413      	add	r3, r2
 8002968:	3360      	adds	r3, #96	; 0x60
 800296a:	2201      	movs	r2, #1
 800296c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	212c      	movs	r1, #44	; 0x2c
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	333f      	adds	r3, #63	; 0x3f
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d00a      	beq.n	8002998 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	212c      	movs	r1, #44	; 0x2c
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	333f      	adds	r3, #63	; 0x3f
 8002990:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002992:	2b03      	cmp	r3, #3
 8002994:	f040 8100 	bne.w	8002b98 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d113      	bne.n	80029c8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	212c      	movs	r1, #44	; 0x2c
 80029a6:	fb01 f303 	mul.w	r3, r1, r3
 80029aa:	4413      	add	r3, r2
 80029ac:	3355      	adds	r3, #85	; 0x55
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	f083 0301 	eor.w	r3, r3, #1
 80029b4:	b2d8      	uxtb	r0, r3
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	212c      	movs	r1, #44	; 0x2c
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	4413      	add	r3, r2
 80029c2:	3355      	adds	r3, #85	; 0x55
 80029c4:	4602      	mov	r2, r0
 80029c6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	f040 80e3 	bne.w	8002b98 <HCD_HC_OUT_IRQHandler+0x69c>
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	212c      	movs	r1, #44	; 0x2c
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	4413      	add	r3, r2
 80029de:	334c      	adds	r3, #76	; 0x4c
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80d8 	beq.w	8002b98 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	334c      	adds	r3, #76	; 0x4c
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	202c      	movs	r0, #44	; 0x2c
 80029fe:	fb00 f202 	mul.w	r2, r0, r2
 8002a02:	440a      	add	r2, r1
 8002a04:	3240      	adds	r2, #64	; 0x40
 8002a06:	8812      	ldrh	r2, [r2, #0]
 8002a08:	4413      	add	r3, r2
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	202c      	movs	r0, #44	; 0x2c
 8002a12:	fb00 f202 	mul.w	r2, r0, r2
 8002a16:	440a      	add	r2, r1
 8002a18:	3240      	adds	r2, #64	; 0x40
 8002a1a:	8812      	ldrh	r2, [r2, #0]
 8002a1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 80b5 	beq.w	8002b98 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	212c      	movs	r1, #44	; 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3355      	adds	r3, #85	; 0x55
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	f083 0301 	eor.w	r3, r3, #1
 8002a42:	b2d8      	uxtb	r0, r3
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	212c      	movs	r1, #44	; 0x2c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	3355      	adds	r3, #85	; 0x55
 8002a52:	4602      	mov	r2, r0
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	e09f      	b.n	8002b98 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3361      	adds	r3, #97	; 0x61
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d109      	bne.n	8002a80 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	3360      	adds	r3, #96	; 0x60
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	701a      	strb	r2, [r3, #0]
 8002a7e:	e08b      	b.n	8002b98 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	212c      	movs	r1, #44	; 0x2c
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3361      	adds	r3, #97	; 0x61
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d109      	bne.n	8002aa8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3360      	adds	r3, #96	; 0x60
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	e077      	b.n	8002b98 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	212c      	movs	r1, #44	; 0x2c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3361      	adds	r3, #97	; 0x61
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	d109      	bne.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	212c      	movs	r1, #44	; 0x2c
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3360      	adds	r3, #96	; 0x60
 8002aca:	2205      	movs	r2, #5
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	e063      	b.n	8002b98 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	212c      	movs	r1, #44	; 0x2c
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	3361      	adds	r3, #97	; 0x61
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b06      	cmp	r3, #6
 8002ae2:	d009      	beq.n	8002af8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	212c      	movs	r1, #44	; 0x2c
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	3361      	adds	r3, #97	; 0x61
 8002af2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d14f      	bne.n	8002b98 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	212c      	movs	r1, #44	; 0x2c
 8002afe:	fb01 f303 	mul.w	r3, r1, r3
 8002b02:	4413      	add	r3, r2
 8002b04:	335c      	adds	r3, #92	; 0x5c
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	202c      	movs	r0, #44	; 0x2c
 8002b10:	fb00 f303 	mul.w	r3, r0, r3
 8002b14:	440b      	add	r3, r1
 8002b16:	335c      	adds	r3, #92	; 0x5c
 8002b18:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	335c      	adds	r3, #92	; 0x5c
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d912      	bls.n	8002b54 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	335c      	adds	r3, #92	; 0x5c
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	212c      	movs	r1, #44	; 0x2c
 8002b46:	fb01 f303 	mul.w	r3, r1, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3360      	adds	r3, #96	; 0x60
 8002b4e:	2204      	movs	r2, #4
 8002b50:	701a      	strb	r2, [r3, #0]
 8002b52:	e021      	b.n	8002b98 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	212c      	movs	r1, #44	; 0x2c
 8002b5a:	fb01 f303 	mul.w	r3, r1, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	3360      	adds	r3, #96	; 0x60
 8002b62:	2202      	movs	r2, #2
 8002b64:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b7c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b84:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b92:	461a      	mov	r2, r3
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	b2d9      	uxtb	r1, r3
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	202c      	movs	r0, #44	; 0x2c
 8002bb4:	fb00 f303 	mul.w	r3, r0, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	3360      	adds	r3, #96	; 0x60
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f003 fed5 	bl	8006970 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bc6:	bf00      	nop
 8002bc8:	3720      	adds	r7, #32
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b08a      	sub	sp, #40	; 0x28
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	0c5b      	lsrs	r3, r3, #17
 8002bf4:	f003 030f 	and.w	r3, r3, #15
 8002bf8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c02:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d004      	beq.n	8002c14 <HCD_RXQLVL_IRQHandler+0x46>
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2b05      	cmp	r3, #5
 8002c0e:	f000 80a9 	beq.w	8002d64 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c12:	e0aa      	b.n	8002d6a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 80a6 	beq.w	8002d68 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	212c      	movs	r1, #44	; 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	3344      	adds	r3, #68	; 0x44
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 809b 	beq.w	8002d68 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	212c      	movs	r1, #44	; 0x2c
 8002c38:	fb01 f303 	mul.w	r3, r1, r3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3350      	adds	r3, #80	; 0x50
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	441a      	add	r2, r3
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	202c      	movs	r0, #44	; 0x2c
 8002c4c:	fb00 f303 	mul.w	r3, r0, r3
 8002c50:	440b      	add	r3, r1
 8002c52:	334c      	adds	r3, #76	; 0x4c
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d87a      	bhi.n	8002d50 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	212c      	movs	r1, #44	; 0x2c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	3344      	adds	r3, #68	; 0x44
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	b292      	uxth	r2, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	f001 fef4 	bl	8004a60 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	3344      	adds	r3, #68	; 0x44
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	441a      	add	r2, r3
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	202c      	movs	r0, #44	; 0x2c
 8002c92:	fb00 f303 	mul.w	r3, r0, r3
 8002c96:	440b      	add	r3, r1
 8002c98:	3344      	adds	r3, #68	; 0x44
 8002c9a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3350      	adds	r3, #80	; 0x50
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	441a      	add	r2, r3
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	202c      	movs	r0, #44	; 0x2c
 8002cb6:	fb00 f303 	mul.w	r3, r0, r3
 8002cba:	440b      	add	r3, r1
 8002cbc:	3350      	adds	r3, #80	; 0x50
 8002cbe:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	015a      	lsls	r2, r3, #5
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	0cdb      	lsrs	r3, r3, #19
 8002cd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cd4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	212c      	movs	r1, #44	; 0x2c
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3340      	adds	r3, #64	; 0x40
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d13c      	bne.n	8002d68 <HCD_RXQLVL_IRQHandler+0x19a>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d039      	beq.n	8002d68 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	015a      	lsls	r2, r3, #5
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d0a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d12:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d20:	461a      	mov	r2, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	212c      	movs	r1, #44	; 0x2c
 8002d2c:	fb01 f303 	mul.w	r3, r1, r3
 8002d30:	4413      	add	r3, r2
 8002d32:	3354      	adds	r3, #84	; 0x54
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	f083 0301 	eor.w	r3, r3, #1
 8002d3a:	b2d8      	uxtb	r0, r3
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	212c      	movs	r1, #44	; 0x2c
 8002d42:	fb01 f303 	mul.w	r3, r1, r3
 8002d46:	4413      	add	r3, r2
 8002d48:	3354      	adds	r3, #84	; 0x54
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	701a      	strb	r2, [r3, #0]
      break;
 8002d4e:	e00b      	b.n	8002d68 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	212c      	movs	r1, #44	; 0x2c
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3360      	adds	r3, #96	; 0x60
 8002d5e:	2204      	movs	r2, #4
 8002d60:	701a      	strb	r2, [r3, #0]
      break;
 8002d62:	e001      	b.n	8002d68 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d64:	bf00      	nop
 8002d66:	e000      	b.n	8002d6a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d68:	bf00      	nop
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	3728      	adds	r7, #40	; 0x28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b086      	sub	sp, #24
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d9e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d10b      	bne.n	8002dc2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d102      	bne.n	8002dba <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f003 fdbf 	bl	8006938 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f043 0302 	orr.w	r3, r3, #2
 8002dc0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d132      	bne.n	8002e32 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f043 0308 	orr.w	r3, r3, #8
 8002dd2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d126      	bne.n	8002e2c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d113      	bne.n	8002e0e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002dec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002df0:	d106      	bne.n	8002e00 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2102      	movs	r1, #2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f001 ff9f 	bl	8004d3c <USB_InitFSLSPClkSel>
 8002dfe:	e011      	b.n	8002e24 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2101      	movs	r1, #1
 8002e06:	4618      	mov	r0, r3
 8002e08:	f001 ff98 	bl	8004d3c <USB_InitFSLSPClkSel>
 8002e0c:	e00a      	b.n	8002e24 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d106      	bne.n	8002e24 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e22:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f003 fdb1 	bl	800698c <HAL_HCD_PortEnabled_Callback>
 8002e2a:	e002      	b.n	8002e32 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f003 fdbb 	bl	80069a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d103      	bne.n	8002e44 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f043 0320 	orr.w	r3, r3, #32
 8002e42:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	6013      	str	r3, [r2, #0]
}
 8002e50:	bf00      	nop
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e12b      	b.n	80030c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fd fe42 	bl	8000b08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2224      	movs	r2, #36	; 0x24
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eaa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ebc:	f001 fa20 	bl	8004300 <HAL_RCC_GetPCLK1Freq>
 8002ec0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	4a81      	ldr	r2, [pc, #516]	; (80030cc <HAL_I2C_Init+0x274>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d807      	bhi.n	8002edc <HAL_I2C_Init+0x84>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a80      	ldr	r2, [pc, #512]	; (80030d0 <HAL_I2C_Init+0x278>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	bf94      	ite	ls
 8002ed4:	2301      	movls	r3, #1
 8002ed6:	2300      	movhi	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	e006      	b.n	8002eea <HAL_I2C_Init+0x92>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4a7d      	ldr	r2, [pc, #500]	; (80030d4 <HAL_I2C_Init+0x27c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	bf94      	ite	ls
 8002ee4:	2301      	movls	r3, #1
 8002ee6:	2300      	movhi	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e0e7      	b.n	80030c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a78      	ldr	r2, [pc, #480]	; (80030d8 <HAL_I2C_Init+0x280>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	0c9b      	lsrs	r3, r3, #18
 8002efc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4a6a      	ldr	r2, [pc, #424]	; (80030cc <HAL_I2C_Init+0x274>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d802      	bhi.n	8002f2c <HAL_I2C_Init+0xd4>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	e009      	b.n	8002f40 <HAL_I2C_Init+0xe8>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f32:	fb02 f303 	mul.w	r3, r2, r3
 8002f36:	4a69      	ldr	r2, [pc, #420]	; (80030dc <HAL_I2C_Init+0x284>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	099b      	lsrs	r3, r3, #6
 8002f3e:	3301      	adds	r3, #1
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	430b      	orrs	r3, r1
 8002f46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	495c      	ldr	r1, [pc, #368]	; (80030cc <HAL_I2C_Init+0x274>)
 8002f5c:	428b      	cmp	r3, r1
 8002f5e:	d819      	bhi.n	8002f94 <HAL_I2C_Init+0x13c>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	1e59      	subs	r1, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f6e:	1c59      	adds	r1, r3, #1
 8002f70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f74:	400b      	ands	r3, r1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <HAL_I2C_Init+0x138>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1e59      	subs	r1, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8e:	e051      	b.n	8003034 <HAL_I2C_Init+0x1dc>
 8002f90:	2304      	movs	r3, #4
 8002f92:	e04f      	b.n	8003034 <HAL_I2C_Init+0x1dc>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d111      	bne.n	8002fc0 <HAL_I2C_Init+0x168>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1e58      	subs	r0, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6859      	ldr	r1, [r3, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	440b      	add	r3, r1
 8002faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	bf0c      	ite	eq
 8002fb8:	2301      	moveq	r3, #1
 8002fba:	2300      	movne	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	e012      	b.n	8002fe6 <HAL_I2C_Init+0x18e>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	1e58      	subs	r0, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6859      	ldr	r1, [r3, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	0099      	lsls	r1, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_I2C_Init+0x196>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e022      	b.n	8003034 <HAL_I2C_Init+0x1dc>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10e      	bne.n	8003014 <HAL_I2C_Init+0x1bc>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1e58      	subs	r0, r3, #1
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6859      	ldr	r1, [r3, #4]
 8002ffe:	460b      	mov	r3, r1
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	440b      	add	r3, r1
 8003004:	fbb0 f3f3 	udiv	r3, r0, r3
 8003008:	3301      	adds	r3, #1
 800300a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003012:	e00f      	b.n	8003034 <HAL_I2C_Init+0x1dc>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1e58      	subs	r0, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	0099      	lsls	r1, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	fbb0 f3f3 	udiv	r3, r0, r3
 800302a:	3301      	adds	r3, #1
 800302c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003030:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	6809      	ldr	r1, [r1, #0]
 8003038:	4313      	orrs	r3, r2
 800303a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003062:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6911      	ldr	r1, [r2, #16]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	68d2      	ldr	r2, [r2, #12]
 800306e:	4311      	orrs	r1, r2
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	430b      	orrs	r3, r1
 8003076:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	000186a0 	.word	0x000186a0
 80030d0:	001e847f 	.word	0x001e847f
 80030d4:	003d08ff 	.word	0x003d08ff
 80030d8:	431bde83 	.word	0x431bde83
 80030dc:	10624dd3 	.word	0x10624dd3

080030e0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e128      	b.n	8003344 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a90      	ldr	r2, [pc, #576]	; (800334c <HAL_I2S_Init+0x26c>)
 800310a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7fd fd43 	bl	8000b98 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2202      	movs	r2, #2
 8003116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003128:	f023 030f 	bic.w	r3, r3, #15
 800312c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2202      	movs	r2, #2
 8003134:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d060      	beq.n	8003200 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d102      	bne.n	800314c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003146:	2310      	movs	r3, #16
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	e001      	b.n	8003150 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800314c:	2320      	movs	r3, #32
 800314e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b20      	cmp	r3, #32
 8003156:	d802      	bhi.n	800315e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800315e:	2001      	movs	r0, #1
 8003160:	f001 f9c4 	bl	80044ec <HAL_RCCEx_GetPeriphCLKFreq>
 8003164:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800316e:	d125      	bne.n	80031bc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d010      	beq.n	800319a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	461a      	mov	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	fbb2 f3f3 	udiv	r3, r2, r3
 8003194:	3305      	adds	r3, #5
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	e01f      	b.n	80031da <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	461a      	mov	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b6:	3305      	adds	r3, #5
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	e00e      	b.n	80031da <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	461a      	mov	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d6:	3305      	adds	r3, #5
 80031d8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4a5c      	ldr	r2, [pc, #368]	; (8003350 <HAL_I2S_Init+0x270>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	08db      	lsrs	r3, r3, #3
 80031e4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	085b      	lsrs	r3, r3, #1
 80031f6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	021b      	lsls	r3, r3, #8
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	e003      	b.n	8003208 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003200:	2302      	movs	r3, #2
 8003202:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d902      	bls.n	8003214 <HAL_I2S_Init+0x134>
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	2bff      	cmp	r3, #255	; 0xff
 8003212:	d907      	bls.n	8003224 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003218:	f043 0210 	orr.w	r2, r3, #16
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e08f      	b.n	8003344 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	ea42 0103 	orr.w	r1, r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69fa      	ldr	r2, [r7, #28]
 8003234:	430a      	orrs	r2, r1
 8003236:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003242:	f023 030f 	bic.w	r3, r3, #15
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6851      	ldr	r1, [r2, #4]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6892      	ldr	r2, [r2, #8]
 800324e:	4311      	orrs	r1, r2
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	68d2      	ldr	r2, [r2, #12]
 8003254:	4311      	orrs	r1, r2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6992      	ldr	r2, [r2, #24]
 800325a:	430a      	orrs	r2, r1
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003266:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d161      	bne.n	8003334 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a38      	ldr	r2, [pc, #224]	; (8003354 <HAL_I2S_Init+0x274>)
 8003274:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a37      	ldr	r2, [pc, #220]	; (8003358 <HAL_I2S_Init+0x278>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d101      	bne.n	8003284 <HAL_I2S_Init+0x1a4>
 8003280:	4b36      	ldr	r3, [pc, #216]	; (800335c <HAL_I2S_Init+0x27c>)
 8003282:	e001      	b.n	8003288 <HAL_I2S_Init+0x1a8>
 8003284:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6812      	ldr	r2, [r2, #0]
 800328e:	4932      	ldr	r1, [pc, #200]	; (8003358 <HAL_I2S_Init+0x278>)
 8003290:	428a      	cmp	r2, r1
 8003292:	d101      	bne.n	8003298 <HAL_I2S_Init+0x1b8>
 8003294:	4a31      	ldr	r2, [pc, #196]	; (800335c <HAL_I2S_Init+0x27c>)
 8003296:	e001      	b.n	800329c <HAL_I2S_Init+0x1bc>
 8003298:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800329c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032a0:	f023 030f 	bic.w	r3, r3, #15
 80032a4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a2b      	ldr	r2, [pc, #172]	; (8003358 <HAL_I2S_Init+0x278>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d101      	bne.n	80032b4 <HAL_I2S_Init+0x1d4>
 80032b0:	4b2a      	ldr	r3, [pc, #168]	; (800335c <HAL_I2S_Init+0x27c>)
 80032b2:	e001      	b.n	80032b8 <HAL_I2S_Init+0x1d8>
 80032b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032b8:	2202      	movs	r2, #2
 80032ba:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a25      	ldr	r2, [pc, #148]	; (8003358 <HAL_I2S_Init+0x278>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d101      	bne.n	80032ca <HAL_I2S_Init+0x1ea>
 80032c6:	4b25      	ldr	r3, [pc, #148]	; (800335c <HAL_I2S_Init+0x27c>)
 80032c8:	e001      	b.n	80032ce <HAL_I2S_Init+0x1ee>
 80032ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032da:	d003      	beq.n	80032e4 <HAL_I2S_Init+0x204>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d103      	bne.n	80032ec <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80032e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	e001      	b.n	80032f0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80032ec:	2300      	movs	r3, #0
 80032ee:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032fa:	4313      	orrs	r3, r2
 80032fc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003304:	4313      	orrs	r3, r2
 8003306:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800330e:	4313      	orrs	r3, r2
 8003310:	b29a      	uxth	r2, r3
 8003312:	897b      	ldrh	r3, [r7, #10]
 8003314:	4313      	orrs	r3, r2
 8003316:	b29b      	uxth	r3, r3
 8003318:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800331c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a0d      	ldr	r2, [pc, #52]	; (8003358 <HAL_I2S_Init+0x278>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d101      	bne.n	800332c <HAL_I2S_Init+0x24c>
 8003328:	4b0c      	ldr	r3, [pc, #48]	; (800335c <HAL_I2S_Init+0x27c>)
 800332a:	e001      	b.n	8003330 <HAL_I2S_Init+0x250>
 800332c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003330:	897a      	ldrh	r2, [r7, #10]
 8003332:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3720      	adds	r7, #32
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	08003457 	.word	0x08003457
 8003350:	cccccccd 	.word	0xcccccccd
 8003354:	0800356d 	.word	0x0800356d
 8003358:	40003800 	.word	0x40003800
 800335c:	40003400 	.word	0x40003400

08003360 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	881a      	ldrh	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	1c9a      	adds	r2, r3, #2
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10e      	bne.n	80033f0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033e0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff ffb8 	bl	8003360 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	b292      	uxth	r2, r2
 800340c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	1c9a      	adds	r2, r3, #2
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800342a:	b29b      	uxth	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10e      	bne.n	800344e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800343e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7ff ff93 	bl	8003374 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b086      	sub	sp, #24
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b04      	cmp	r3, #4
 8003470:	d13a      	bne.n	80034e8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b01      	cmp	r3, #1
 800347a:	d109      	bne.n	8003490 <I2S_IRQHandler+0x3a>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003486:	2b40      	cmp	r3, #64	; 0x40
 8003488:	d102      	bne.n	8003490 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff ffb4 	bl	80033f8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003496:	2b40      	cmp	r3, #64	; 0x40
 8003498:	d126      	bne.n	80034e8 <I2S_IRQHandler+0x92>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d11f      	bne.n	80034e8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034b8:	2300      	movs	r3, #0
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	f043 0202 	orr.w	r2, r3, #2
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff ff50 	bl	8003388 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d136      	bne.n	8003562 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d109      	bne.n	8003512 <I2S_IRQHandler+0xbc>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003508:	2b80      	cmp	r3, #128	; 0x80
 800350a:	d102      	bne.n	8003512 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff ff45 	bl	800339c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b08      	cmp	r3, #8
 800351a:	d122      	bne.n	8003562 <I2S_IRQHandler+0x10c>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b20      	cmp	r3, #32
 8003528:	d11b      	bne.n	8003562 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003538:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003554:	f043 0204 	orr.w	r2, r3, #4
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff ff13 	bl	8003388 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003562:	bf00      	nop
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a92      	ldr	r2, [pc, #584]	; (80037cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d101      	bne.n	800358a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003586:	4b92      	ldr	r3, [pc, #584]	; (80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003588:	e001      	b.n	800358e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800358a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a8b      	ldr	r2, [pc, #556]	; (80037cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d101      	bne.n	80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80035a4:	4b8a      	ldr	r3, [pc, #552]	; (80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035a6:	e001      	b.n	80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80035a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b8:	d004      	beq.n	80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f040 8099 	bne.w	80036f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d107      	bne.n	80035de <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f925 	bl	8003828 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d107      	bne.n	80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f9c8 	bl	8003988 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	2b40      	cmp	r3, #64	; 0x40
 8003600:	d13a      	bne.n	8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b00      	cmp	r3, #0
 800360a:	d035      	beq.n	8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a6e      	ldr	r2, [pc, #440]	; (80037cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d101      	bne.n	800361a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003616:	4b6e      	ldr	r3, [pc, #440]	; (80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003618:	e001      	b.n	800361e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800361a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4969      	ldr	r1, [pc, #420]	; (80037cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003626:	428b      	cmp	r3, r1
 8003628:	d101      	bne.n	800362e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800362a:	4b69      	ldr	r3, [pc, #420]	; (80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800362c:	e001      	b.n	8003632 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800362e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003632:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003636:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003646:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	f043 0202 	orr.w	r2, r3, #2
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff fe88 	bl	8003388 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b08      	cmp	r3, #8
 8003680:	f040 80c3 	bne.w	800380a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 80bd 	beq.w	800380a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800369e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a49      	ldr	r2, [pc, #292]	; (80037cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d101      	bne.n	80036ae <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80036aa:	4b49      	ldr	r3, [pc, #292]	; (80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036ac:	e001      	b.n	80036b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80036ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4944      	ldr	r1, [pc, #272]	; (80037cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ba:	428b      	cmp	r3, r1
 80036bc:	d101      	bne.n	80036c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80036be:	4b44      	ldr	r3, [pc, #272]	; (80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036c0:	e001      	b.n	80036c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80036c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036ca:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036cc:	2300      	movs	r3, #0
 80036ce:	60bb      	str	r3, [r7, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	f043 0204 	orr.w	r2, r3, #4
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff fe4a 	bl	8003388 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036f4:	e089      	b.n	800380a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d107      	bne.n	8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f8be 	bl	800388c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b01      	cmp	r3, #1
 8003718:	d107      	bne.n	800372a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f8fd 	bl	8003924 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003730:	2b40      	cmp	r3, #64	; 0x40
 8003732:	d12f      	bne.n	8003794 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d02a      	beq.n	8003794 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800374c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a1e      	ldr	r2, [pc, #120]	; (80037cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d101      	bne.n	800375c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003758:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800375a:	e001      	b.n	8003760 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800375c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4919      	ldr	r1, [pc, #100]	; (80037cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003768:	428b      	cmp	r3, r1
 800376a:	d101      	bne.n	8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800376c:	4b18      	ldr	r3, [pc, #96]	; (80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800376e:	e001      	b.n	8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003770:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003774:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003778:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	f043 0202 	orr.w	r2, r3, #2
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff fdfa 	bl	8003388 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b08      	cmp	r3, #8
 800379c:	d136      	bne.n	800380c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d031      	beq.n	800380c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a07      	ldr	r2, [pc, #28]	; (80037cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d101      	bne.n	80037b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80037b2:	4b07      	ldr	r3, [pc, #28]	; (80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037b4:	e001      	b.n	80037ba <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80037b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4902      	ldr	r1, [pc, #8]	; (80037cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037c2:	428b      	cmp	r3, r1
 80037c4:	d106      	bne.n	80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80037c6:	4b02      	ldr	r3, [pc, #8]	; (80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037c8:	e006      	b.n	80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80037ca:	bf00      	nop
 80037cc:	40003800 	.word	0x40003800
 80037d0:	40003400 	.word	0x40003400
 80037d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037dc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	f043 0204 	orr.w	r2, r3, #4
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff fdc0 	bl	8003388 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003808:	e000      	b.n	800380c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800380a:	bf00      	nop
}
 800380c:	bf00      	nop
 800380e:	3720      	adds	r7, #32
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	1c99      	adds	r1, r3, #2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6251      	str	r1, [r2, #36]	; 0x24
 800383a:	881a      	ldrh	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003854:	b29b      	uxth	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d113      	bne.n	8003882 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003868:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d106      	bne.n	8003882 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff ffc9 	bl	8003814 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003882:	bf00      	nop
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	1c99      	adds	r1, r3, #2
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6251      	str	r1, [r2, #36]	; 0x24
 800389e:	8819      	ldrh	r1, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a1d      	ldr	r2, [pc, #116]	; (800391c <I2SEx_TxISR_I2SExt+0x90>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d101      	bne.n	80038ae <I2SEx_TxISR_I2SExt+0x22>
 80038aa:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <I2SEx_TxISR_I2SExt+0x94>)
 80038ac:	e001      	b.n	80038b2 <I2SEx_TxISR_I2SExt+0x26>
 80038ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038b2:	460a      	mov	r2, r1
 80038b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d121      	bne.n	8003912 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a12      	ldr	r2, [pc, #72]	; (800391c <I2SEx_TxISR_I2SExt+0x90>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d101      	bne.n	80038dc <I2SEx_TxISR_I2SExt+0x50>
 80038d8:	4b11      	ldr	r3, [pc, #68]	; (8003920 <I2SEx_TxISR_I2SExt+0x94>)
 80038da:	e001      	b.n	80038e0 <I2SEx_TxISR_I2SExt+0x54>
 80038dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	490d      	ldr	r1, [pc, #52]	; (800391c <I2SEx_TxISR_I2SExt+0x90>)
 80038e8:	428b      	cmp	r3, r1
 80038ea:	d101      	bne.n	80038f0 <I2SEx_TxISR_I2SExt+0x64>
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <I2SEx_TxISR_I2SExt+0x94>)
 80038ee:	e001      	b.n	80038f4 <I2SEx_TxISR_I2SExt+0x68>
 80038f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d106      	bne.n	8003912 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff ff81 	bl	8003814 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40003800 	.word	0x40003800
 8003920:	40003400 	.word	0x40003400

08003924 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68d8      	ldr	r0, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	1c99      	adds	r1, r3, #2
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800393c:	b282      	uxth	r2, r0
 800393e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003944:	b29b      	uxth	r3, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d113      	bne.n	8003980 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003966:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff ff4a 	bl	8003814 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003980:	bf00      	nop
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a20      	ldr	r2, [pc, #128]	; (8003a18 <I2SEx_RxISR_I2SExt+0x90>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d101      	bne.n	800399e <I2SEx_RxISR_I2SExt+0x16>
 800399a:	4b20      	ldr	r3, [pc, #128]	; (8003a1c <I2SEx_RxISR_I2SExt+0x94>)
 800399c:	e001      	b.n	80039a2 <I2SEx_RxISR_I2SExt+0x1a>
 800399e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039a2:	68d8      	ldr	r0, [r3, #12]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	1c99      	adds	r1, r3, #2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039ae:	b282      	uxth	r2, r0
 80039b0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d121      	bne.n	8003a0e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a12      	ldr	r2, [pc, #72]	; (8003a18 <I2SEx_RxISR_I2SExt+0x90>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d101      	bne.n	80039d8 <I2SEx_RxISR_I2SExt+0x50>
 80039d4:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <I2SEx_RxISR_I2SExt+0x94>)
 80039d6:	e001      	b.n	80039dc <I2SEx_RxISR_I2SExt+0x54>
 80039d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	490d      	ldr	r1, [pc, #52]	; (8003a18 <I2SEx_RxISR_I2SExt+0x90>)
 80039e4:	428b      	cmp	r3, r1
 80039e6:	d101      	bne.n	80039ec <I2SEx_RxISR_I2SExt+0x64>
 80039e8:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <I2SEx_RxISR_I2SExt+0x94>)
 80039ea:	e001      	b.n	80039f0 <I2SEx_RxISR_I2SExt+0x68>
 80039ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039f4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d106      	bne.n	8003a0e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff ff03 	bl	8003814 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40003800 	.word	0x40003800
 8003a1c:	40003400 	.word	0x40003400

08003a20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e267      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d075      	beq.n	8003b2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a3e:	4b88      	ldr	r3, [pc, #544]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d00c      	beq.n	8003a64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a4a:	4b85      	ldr	r3, [pc, #532]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d112      	bne.n	8003a7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a56:	4b82      	ldr	r3, [pc, #520]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a62:	d10b      	bne.n	8003a7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a64:	4b7e      	ldr	r3, [pc, #504]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d05b      	beq.n	8003b28 <HAL_RCC_OscConfig+0x108>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d157      	bne.n	8003b28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e242      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a84:	d106      	bne.n	8003a94 <HAL_RCC_OscConfig+0x74>
 8003a86:	4b76      	ldr	r3, [pc, #472]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a75      	ldr	r2, [pc, #468]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	e01d      	b.n	8003ad0 <HAL_RCC_OscConfig+0xb0>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x98>
 8003a9e:	4b70      	ldr	r3, [pc, #448]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a6f      	ldr	r2, [pc, #444]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	4b6d      	ldr	r3, [pc, #436]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a6c      	ldr	r2, [pc, #432]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e00b      	b.n	8003ad0 <HAL_RCC_OscConfig+0xb0>
 8003ab8:	4b69      	ldr	r3, [pc, #420]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a68      	ldr	r2, [pc, #416]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	4b66      	ldr	r3, [pc, #408]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a65      	ldr	r2, [pc, #404]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d013      	beq.n	8003b00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad8:	f7fd fab4 	bl	8001044 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ae0:	f7fd fab0 	bl	8001044 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b64      	cmp	r3, #100	; 0x64
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e207      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af2:	4b5b      	ldr	r3, [pc, #364]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0f0      	beq.n	8003ae0 <HAL_RCC_OscConfig+0xc0>
 8003afe:	e014      	b.n	8003b2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b00:	f7fd faa0 	bl	8001044 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b08:	f7fd fa9c 	bl	8001044 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	; 0x64
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e1f3      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b1a:	4b51      	ldr	r3, [pc, #324]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0xe8>
 8003b26:	e000      	b.n	8003b2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d063      	beq.n	8003bfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b36:	4b4a      	ldr	r3, [pc, #296]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 030c 	and.w	r3, r3, #12
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00b      	beq.n	8003b5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b42:	4b47      	ldr	r3, [pc, #284]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d11c      	bne.n	8003b88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b4e:	4b44      	ldr	r3, [pc, #272]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d116      	bne.n	8003b88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b5a:	4b41      	ldr	r3, [pc, #260]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d005      	beq.n	8003b72 <HAL_RCC_OscConfig+0x152>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d001      	beq.n	8003b72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e1c7      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b72:	4b3b      	ldr	r3, [pc, #236]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	4937      	ldr	r1, [pc, #220]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b86:	e03a      	b.n	8003bfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d020      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b90:	4b34      	ldr	r3, [pc, #208]	; (8003c64 <HAL_RCC_OscConfig+0x244>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b96:	f7fd fa55 	bl	8001044 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b9e:	f7fd fa51 	bl	8001044 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e1a8      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb0:	4b2b      	ldr	r3, [pc, #172]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0f0      	beq.n	8003b9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bbc:	4b28      	ldr	r3, [pc, #160]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4925      	ldr	r1, [pc, #148]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	600b      	str	r3, [r1, #0]
 8003bd0:	e015      	b.n	8003bfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bd2:	4b24      	ldr	r3, [pc, #144]	; (8003c64 <HAL_RCC_OscConfig+0x244>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd8:	f7fd fa34 	bl	8001044 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003be0:	f7fd fa30 	bl	8001044 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e187      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bf2:	4b1b      	ldr	r3, [pc, #108]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d036      	beq.n	8003c78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d016      	beq.n	8003c40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c12:	4b15      	ldr	r3, [pc, #84]	; (8003c68 <HAL_RCC_OscConfig+0x248>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c18:	f7fd fa14 	bl	8001044 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c20:	f7fd fa10 	bl	8001044 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e167      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c32:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_RCC_OscConfig+0x240>)
 8003c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCC_OscConfig+0x200>
 8003c3e:	e01b      	b.n	8003c78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c40:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <HAL_RCC_OscConfig+0x248>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c46:	f7fd f9fd 	bl	8001044 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c4c:	e00e      	b.n	8003c6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c4e:	f7fd f9f9 	bl	8001044 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d907      	bls.n	8003c6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e150      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
 8003c60:	40023800 	.word	0x40023800
 8003c64:	42470000 	.word	0x42470000
 8003c68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c6c:	4b88      	ldr	r3, [pc, #544]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1ea      	bne.n	8003c4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 8097 	beq.w	8003db4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c86:	2300      	movs	r3, #0
 8003c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c8a:	4b81      	ldr	r3, [pc, #516]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10f      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	4b7d      	ldr	r3, [pc, #500]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	4a7c      	ldr	r2, [pc, #496]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ca6:	4b7a      	ldr	r3, [pc, #488]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb6:	4b77      	ldr	r3, [pc, #476]	; (8003e94 <HAL_RCC_OscConfig+0x474>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d118      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cc2:	4b74      	ldr	r3, [pc, #464]	; (8003e94 <HAL_RCC_OscConfig+0x474>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a73      	ldr	r2, [pc, #460]	; (8003e94 <HAL_RCC_OscConfig+0x474>)
 8003cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cce:	f7fd f9b9 	bl	8001044 <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd6:	f7fd f9b5 	bl	8001044 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e10c      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce8:	4b6a      	ldr	r3, [pc, #424]	; (8003e94 <HAL_RCC_OscConfig+0x474>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0f0      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d106      	bne.n	8003d0a <HAL_RCC_OscConfig+0x2ea>
 8003cfc:	4b64      	ldr	r3, [pc, #400]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d00:	4a63      	ldr	r2, [pc, #396]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	6713      	str	r3, [r2, #112]	; 0x70
 8003d08:	e01c      	b.n	8003d44 <HAL_RCC_OscConfig+0x324>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2b05      	cmp	r3, #5
 8003d10:	d10c      	bne.n	8003d2c <HAL_RCC_OscConfig+0x30c>
 8003d12:	4b5f      	ldr	r3, [pc, #380]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d16:	4a5e      	ldr	r2, [pc, #376]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003d18:	f043 0304 	orr.w	r3, r3, #4
 8003d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1e:	4b5c      	ldr	r3, [pc, #368]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	4a5b      	ldr	r2, [pc, #364]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003d24:	f043 0301 	orr.w	r3, r3, #1
 8003d28:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2a:	e00b      	b.n	8003d44 <HAL_RCC_OscConfig+0x324>
 8003d2c:	4b58      	ldr	r3, [pc, #352]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d30:	4a57      	ldr	r2, [pc, #348]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003d32:	f023 0301 	bic.w	r3, r3, #1
 8003d36:	6713      	str	r3, [r2, #112]	; 0x70
 8003d38:	4b55      	ldr	r3, [pc, #340]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3c:	4a54      	ldr	r2, [pc, #336]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003d3e:	f023 0304 	bic.w	r3, r3, #4
 8003d42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d015      	beq.n	8003d78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4c:	f7fd f97a 	bl	8001044 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d52:	e00a      	b.n	8003d6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d54:	f7fd f976 	bl	8001044 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e0cb      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6a:	4b49      	ldr	r3, [pc, #292]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0ee      	beq.n	8003d54 <HAL_RCC_OscConfig+0x334>
 8003d76:	e014      	b.n	8003da2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d78:	f7fd f964 	bl	8001044 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d7e:	e00a      	b.n	8003d96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d80:	f7fd f960 	bl	8001044 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e0b5      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d96:	4b3e      	ldr	r3, [pc, #248]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1ee      	bne.n	8003d80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003da2:	7dfb      	ldrb	r3, [r7, #23]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d105      	bne.n	8003db4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da8:	4b39      	ldr	r3, [pc, #228]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	4a38      	ldr	r2, [pc, #224]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003db2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 80a1 	beq.w	8003f00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dbe:	4b34      	ldr	r3, [pc, #208]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d05c      	beq.n	8003e84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d141      	bne.n	8003e56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd2:	4b31      	ldr	r3, [pc, #196]	; (8003e98 <HAL_RCC_OscConfig+0x478>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd8:	f7fd f934 	bl	8001044 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de0:	f7fd f930 	bl	8001044 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e087      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df2:	4b27      	ldr	r3, [pc, #156]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f0      	bne.n	8003de0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69da      	ldr	r2, [r3, #28]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	019b      	lsls	r3, r3, #6
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e14:	085b      	lsrs	r3, r3, #1
 8003e16:	3b01      	subs	r3, #1
 8003e18:	041b      	lsls	r3, r3, #16
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	061b      	lsls	r3, r3, #24
 8003e22:	491b      	ldr	r1, [pc, #108]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e28:	4b1b      	ldr	r3, [pc, #108]	; (8003e98 <HAL_RCC_OscConfig+0x478>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2e:	f7fd f909 	bl	8001044 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e36:	f7fd f905 	bl	8001044 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e05c      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e48:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <HAL_RCC_OscConfig+0x416>
 8003e54:	e054      	b.n	8003f00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e56:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <HAL_RCC_OscConfig+0x478>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5c:	f7fd f8f2 	bl	8001044 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e64:	f7fd f8ee 	bl	8001044 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e045      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e76:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <HAL_RCC_OscConfig+0x470>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x444>
 8003e82:	e03d      	b.n	8003f00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d107      	bne.n	8003e9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e038      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
 8003e90:	40023800 	.word	0x40023800
 8003e94:	40007000 	.word	0x40007000
 8003e98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e9c:	4b1b      	ldr	r3, [pc, #108]	; (8003f0c <HAL_RCC_OscConfig+0x4ec>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d028      	beq.n	8003efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d121      	bne.n	8003efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d11a      	bne.n	8003efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ecc:	4013      	ands	r3, r2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ed2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d111      	bne.n	8003efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee2:	085b      	lsrs	r3, r3, #1
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d107      	bne.n	8003efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40023800 	.word	0x40023800

08003f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0cc      	b.n	80040be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f24:	4b68      	ldr	r3, [pc, #416]	; (80040c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d90c      	bls.n	8003f4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f32:	4b65      	ldr	r3, [pc, #404]	; (80040c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3a:	4b63      	ldr	r3, [pc, #396]	; (80040c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d001      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e0b8      	b.n	80040be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d020      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f64:	4b59      	ldr	r3, [pc, #356]	; (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	4a58      	ldr	r2, [pc, #352]	; (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f7c:	4b53      	ldr	r3, [pc, #332]	; (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	4a52      	ldr	r2, [pc, #328]	; (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f88:	4b50      	ldr	r3, [pc, #320]	; (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	494d      	ldr	r1, [pc, #308]	; (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d044      	beq.n	8004030 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d107      	bne.n	8003fbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fae:	4b47      	ldr	r3, [pc, #284]	; (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d119      	bne.n	8003fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e07f      	b.n	80040be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d003      	beq.n	8003fce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d107      	bne.n	8003fde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fce:	4b3f      	ldr	r3, [pc, #252]	; (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e06f      	b.n	80040be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fde:	4b3b      	ldr	r3, [pc, #236]	; (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e067      	b.n	80040be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fee:	4b37      	ldr	r3, [pc, #220]	; (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f023 0203 	bic.w	r2, r3, #3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	4934      	ldr	r1, [pc, #208]	; (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004000:	f7fd f820 	bl	8001044 <HAL_GetTick>
 8004004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004006:	e00a      	b.n	800401e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004008:	f7fd f81c 	bl	8001044 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f241 3288 	movw	r2, #5000	; 0x1388
 8004016:	4293      	cmp	r3, r2
 8004018:	d901      	bls.n	800401e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e04f      	b.n	80040be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401e:	4b2b      	ldr	r3, [pc, #172]	; (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 020c 	and.w	r2, r3, #12
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	429a      	cmp	r2, r3
 800402e:	d1eb      	bne.n	8004008 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004030:	4b25      	ldr	r3, [pc, #148]	; (80040c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d20c      	bcs.n	8004058 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403e:	4b22      	ldr	r3, [pc, #136]	; (80040c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004046:	4b20      	ldr	r3, [pc, #128]	; (80040c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d001      	beq.n	8004058 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e032      	b.n	80040be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004064:	4b19      	ldr	r3, [pc, #100]	; (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	4916      	ldr	r1, [pc, #88]	; (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004082:	4b12      	ldr	r3, [pc, #72]	; (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	490e      	ldr	r1, [pc, #56]	; (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004096:	f000 f821 	bl	80040dc <HAL_RCC_GetSysClockFreq>
 800409a:	4602      	mov	r2, r0
 800409c:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	091b      	lsrs	r3, r3, #4
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	490a      	ldr	r1, [pc, #40]	; (80040d0 <HAL_RCC_ClockConfig+0x1c0>)
 80040a8:	5ccb      	ldrb	r3, [r1, r3]
 80040aa:	fa22 f303 	lsr.w	r3, r2, r3
 80040ae:	4a09      	ldr	r2, [pc, #36]	; (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 80040b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040b2:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <HAL_RCC_ClockConfig+0x1c8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fc ff80 	bl	8000fbc <HAL_InitTick>

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40023c00 	.word	0x40023c00
 80040cc:	40023800 	.word	0x40023800
 80040d0:	08007e6c 	.word	0x08007e6c
 80040d4:	20000000 	.word	0x20000000
 80040d8:	20000004 	.word	0x20000004

080040dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040e0:	b094      	sub	sp, #80	; 0x50
 80040e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	647b      	str	r3, [r7, #68]	; 0x44
 80040e8:	2300      	movs	r3, #0
 80040ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040ec:	2300      	movs	r3, #0
 80040ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040f4:	4b79      	ldr	r3, [pc, #484]	; (80042dc <HAL_RCC_GetSysClockFreq+0x200>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 030c 	and.w	r3, r3, #12
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d00d      	beq.n	800411c <HAL_RCC_GetSysClockFreq+0x40>
 8004100:	2b08      	cmp	r3, #8
 8004102:	f200 80e1 	bhi.w	80042c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_RCC_GetSysClockFreq+0x34>
 800410a:	2b04      	cmp	r3, #4
 800410c:	d003      	beq.n	8004116 <HAL_RCC_GetSysClockFreq+0x3a>
 800410e:	e0db      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004110:	4b73      	ldr	r3, [pc, #460]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004112:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004114:	e0db      	b.n	80042ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004116:	4b73      	ldr	r3, [pc, #460]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004118:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800411a:	e0d8      	b.n	80042ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800411c:	4b6f      	ldr	r3, [pc, #444]	; (80042dc <HAL_RCC_GetSysClockFreq+0x200>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004124:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004126:	4b6d      	ldr	r3, [pc, #436]	; (80042dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d063      	beq.n	80041fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004132:	4b6a      	ldr	r3, [pc, #424]	; (80042dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	099b      	lsrs	r3, r3, #6
 8004138:	2200      	movs	r2, #0
 800413a:	63bb      	str	r3, [r7, #56]	; 0x38
 800413c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800413e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004144:	633b      	str	r3, [r7, #48]	; 0x30
 8004146:	2300      	movs	r3, #0
 8004148:	637b      	str	r3, [r7, #52]	; 0x34
 800414a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800414e:	4622      	mov	r2, r4
 8004150:	462b      	mov	r3, r5
 8004152:	f04f 0000 	mov.w	r0, #0
 8004156:	f04f 0100 	mov.w	r1, #0
 800415a:	0159      	lsls	r1, r3, #5
 800415c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004160:	0150      	lsls	r0, r2, #5
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4621      	mov	r1, r4
 8004168:	1a51      	subs	r1, r2, r1
 800416a:	6139      	str	r1, [r7, #16]
 800416c:	4629      	mov	r1, r5
 800416e:	eb63 0301 	sbc.w	r3, r3, r1
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004180:	4659      	mov	r1, fp
 8004182:	018b      	lsls	r3, r1, #6
 8004184:	4651      	mov	r1, sl
 8004186:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800418a:	4651      	mov	r1, sl
 800418c:	018a      	lsls	r2, r1, #6
 800418e:	4651      	mov	r1, sl
 8004190:	ebb2 0801 	subs.w	r8, r2, r1
 8004194:	4659      	mov	r1, fp
 8004196:	eb63 0901 	sbc.w	r9, r3, r1
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	f04f 0300 	mov.w	r3, #0
 80041a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ae:	4690      	mov	r8, r2
 80041b0:	4699      	mov	r9, r3
 80041b2:	4623      	mov	r3, r4
 80041b4:	eb18 0303 	adds.w	r3, r8, r3
 80041b8:	60bb      	str	r3, [r7, #8]
 80041ba:	462b      	mov	r3, r5
 80041bc:	eb49 0303 	adc.w	r3, r9, r3
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	f04f 0300 	mov.w	r3, #0
 80041ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041ce:	4629      	mov	r1, r5
 80041d0:	024b      	lsls	r3, r1, #9
 80041d2:	4621      	mov	r1, r4
 80041d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041d8:	4621      	mov	r1, r4
 80041da:	024a      	lsls	r2, r1, #9
 80041dc:	4610      	mov	r0, r2
 80041de:	4619      	mov	r1, r3
 80041e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041e2:	2200      	movs	r2, #0
 80041e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80041e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041ec:	f7fc f840 	bl	8000270 <__aeabi_uldivmod>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4613      	mov	r3, r2
 80041f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041f8:	e058      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041fa:	4b38      	ldr	r3, [pc, #224]	; (80042dc <HAL_RCC_GetSysClockFreq+0x200>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	099b      	lsrs	r3, r3, #6
 8004200:	2200      	movs	r2, #0
 8004202:	4618      	mov	r0, r3
 8004204:	4611      	mov	r1, r2
 8004206:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800420a:	623b      	str	r3, [r7, #32]
 800420c:	2300      	movs	r3, #0
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
 8004210:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004214:	4642      	mov	r2, r8
 8004216:	464b      	mov	r3, r9
 8004218:	f04f 0000 	mov.w	r0, #0
 800421c:	f04f 0100 	mov.w	r1, #0
 8004220:	0159      	lsls	r1, r3, #5
 8004222:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004226:	0150      	lsls	r0, r2, #5
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4641      	mov	r1, r8
 800422e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004232:	4649      	mov	r1, r9
 8004234:	eb63 0b01 	sbc.w	fp, r3, r1
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004244:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004248:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800424c:	ebb2 040a 	subs.w	r4, r2, sl
 8004250:	eb63 050b 	sbc.w	r5, r3, fp
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	00eb      	lsls	r3, r5, #3
 800425e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004262:	00e2      	lsls	r2, r4, #3
 8004264:	4614      	mov	r4, r2
 8004266:	461d      	mov	r5, r3
 8004268:	4643      	mov	r3, r8
 800426a:	18e3      	adds	r3, r4, r3
 800426c:	603b      	str	r3, [r7, #0]
 800426e:	464b      	mov	r3, r9
 8004270:	eb45 0303 	adc.w	r3, r5, r3
 8004274:	607b      	str	r3, [r7, #4]
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004282:	4629      	mov	r1, r5
 8004284:	028b      	lsls	r3, r1, #10
 8004286:	4621      	mov	r1, r4
 8004288:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800428c:	4621      	mov	r1, r4
 800428e:	028a      	lsls	r2, r1, #10
 8004290:	4610      	mov	r0, r2
 8004292:	4619      	mov	r1, r3
 8004294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004296:	2200      	movs	r2, #0
 8004298:	61bb      	str	r3, [r7, #24]
 800429a:	61fa      	str	r2, [r7, #28]
 800429c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042a0:	f7fb ffe6 	bl	8000270 <__aeabi_uldivmod>
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	4613      	mov	r3, r2
 80042aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042ac:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <HAL_RCC_GetSysClockFreq+0x200>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	0c1b      	lsrs	r3, r3, #16
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	3301      	adds	r3, #1
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80042bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042c6:	e002      	b.n	80042ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80042ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3750      	adds	r7, #80	; 0x50
 80042d4:	46bd      	mov	sp, r7
 80042d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042da:	bf00      	nop
 80042dc:	40023800 	.word	0x40023800
 80042e0:	00f42400 	.word	0x00f42400
 80042e4:	007a1200 	.word	0x007a1200

080042e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042ec:	4b03      	ldr	r3, [pc, #12]	; (80042fc <HAL_RCC_GetHCLKFreq+0x14>)
 80042ee:	681b      	ldr	r3, [r3, #0]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	20000000 	.word	0x20000000

08004300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004304:	f7ff fff0 	bl	80042e8 <HAL_RCC_GetHCLKFreq>
 8004308:	4602      	mov	r2, r0
 800430a:	4b05      	ldr	r3, [pc, #20]	; (8004320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	0a9b      	lsrs	r3, r3, #10
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	4903      	ldr	r1, [pc, #12]	; (8004324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004316:	5ccb      	ldrb	r3, [r1, r3]
 8004318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800431c:	4618      	mov	r0, r3
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40023800 	.word	0x40023800
 8004324:	08007e7c 	.word	0x08007e7c

08004328 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d105      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800434c:	2b00      	cmp	r3, #0
 800434e:	d035      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004350:	4b62      	ldr	r3, [pc, #392]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004356:	f7fc fe75 	bl	8001044 <HAL_GetTick>
 800435a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800435c:	e008      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800435e:	f7fc fe71 	bl	8001044 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e0b0      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004370:	4b5b      	ldr	r3, [pc, #364]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f0      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	019a      	lsls	r2, r3, #6
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	071b      	lsls	r3, r3, #28
 8004388:	4955      	ldr	r1, [pc, #340]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004390:	4b52      	ldr	r3, [pc, #328]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004392:	2201      	movs	r2, #1
 8004394:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004396:	f7fc fe55 	bl	8001044 <HAL_GetTick>
 800439a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800439c:	e008      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800439e:	f7fc fe51 	bl	8001044 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e090      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043b0:	4b4b      	ldr	r3, [pc, #300]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0f0      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8083 	beq.w	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	4b44      	ldr	r3, [pc, #272]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	4a43      	ldr	r2, [pc, #268]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d8:	6413      	str	r3, [r2, #64]	; 0x40
 80043da:	4b41      	ldr	r3, [pc, #260]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043e6:	4b3f      	ldr	r3, [pc, #252]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a3e      	ldr	r2, [pc, #248]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043f2:	f7fc fe27 	bl	8001044 <HAL_GetTick>
 80043f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043f8:	e008      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043fa:	f7fc fe23 	bl	8001044 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e062      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800440c:	4b35      	ldr	r3, [pc, #212]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f0      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004418:	4b31      	ldr	r3, [pc, #196]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800441a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004420:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d02f      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	429a      	cmp	r2, r3
 8004434:	d028      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004436:	4b2a      	ldr	r3, [pc, #168]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800443e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004440:	4b29      	ldr	r3, [pc, #164]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004442:	2201      	movs	r2, #1
 8004444:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004446:	4b28      	ldr	r3, [pc, #160]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800444c:	4a24      	ldr	r2, [pc, #144]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004452:	4b23      	ldr	r3, [pc, #140]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b01      	cmp	r3, #1
 800445c:	d114      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800445e:	f7fc fdf1 	bl	8001044 <HAL_GetTick>
 8004462:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004464:	e00a      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004466:	f7fc fded 	bl	8001044 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	f241 3288 	movw	r2, #5000	; 0x1388
 8004474:	4293      	cmp	r3, r2
 8004476:	d901      	bls.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e02a      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800447c:	4b18      	ldr	r3, [pc, #96]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0ee      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004490:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004494:	d10d      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004496:	4b12      	ldr	r3, [pc, #72]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044aa:	490d      	ldr	r1, [pc, #52]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	608b      	str	r3, [r1, #8]
 80044b0:	e005      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x196>
 80044b2:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	4a0a      	ldr	r2, [pc, #40]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044bc:	6093      	str	r3, [r2, #8]
 80044be:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ca:	4905      	ldr	r1, [pc, #20]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	42470068 	.word	0x42470068
 80044e0:	40023800 	.word	0x40023800
 80044e4:	40007000 	.word	0x40007000
 80044e8:	42470e40 	.word	0x42470e40

080044ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d13e      	bne.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800450a:	4b23      	ldr	r3, [pc, #140]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d12f      	bne.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004520:	4b1e      	ldr	r3, [pc, #120]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004522:	617b      	str	r3, [r7, #20]
          break;
 8004524:	e02f      	b.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004526:	4b1c      	ldr	r3, [pc, #112]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004532:	d108      	bne.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004534:	4b18      	ldr	r3, [pc, #96]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800453c:	4a18      	ldr	r2, [pc, #96]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800453e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	e007      	b.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004546:	4b14      	ldr	r3, [pc, #80]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800454e:	4a15      	ldr	r2, [pc, #84]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004550:	fbb2 f3f3 	udiv	r3, r2, r3
 8004554:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004556:	4b10      	ldr	r3, [pc, #64]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800455c:	099b      	lsrs	r3, r3, #6
 800455e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	fb02 f303 	mul.w	r3, r2, r3
 8004568:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800456a:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800456c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004570:	0f1b      	lsrs	r3, r3, #28
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	fbb2 f3f3 	udiv	r3, r2, r3
 800457c:	617b      	str	r3, [r7, #20]
          break;
 800457e:	e002      	b.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]
          break;
 8004584:	bf00      	nop
        }
      }
      break;
 8004586:	bf00      	nop
    }
  }
  return frequency;
 8004588:	697b      	ldr	r3, [r7, #20]
}
 800458a:	4618      	mov	r0, r3
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40023800 	.word	0x40023800
 800459c:	00bb8000 	.word	0x00bb8000
 80045a0:	007a1200 	.word	0x007a1200
 80045a4:	00f42400 	.word	0x00f42400

080045a8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e01c      	b.n	80045f4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	795b      	ldrb	r3, [r3, #5]
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d105      	bne.n	80045d0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fc fb64 	bl	8000c98 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f042 0204 	orr.w	r2, r2, #4
 80045e4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	791b      	ldrb	r3, [r3, #4]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_RNG_GenerateRandomNumber+0x1a>
 8004612:	2302      	movs	r3, #2
 8004614:	e044      	b.n	80046a0 <HAL_RNG_GenerateRandomNumber+0xa4>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	795b      	ldrb	r3, [r3, #5]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b01      	cmp	r3, #1
 8004624:	d133      	bne.n	800468e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2202      	movs	r2, #2
 800462a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800462c:	f7fc fd0a 	bl	8001044 <HAL_GetTick>
 8004630:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004632:	e018      	b.n	8004666 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004634:	f7fc fd06 	bl	8001044 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d911      	bls.n	8004666 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b01      	cmp	r3, #1
 800464e:	d00a      	beq.n	8004666 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2202      	movs	r2, #2
 800465a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e01c      	b.n	80046a0 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b01      	cmp	r3, #1
 8004672:	d1df      	bne.n	8004634 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	715a      	strb	r2, [r3, #5]
 800468c:	e004      	b.n	8004698 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2204      	movs	r2, #4
 8004692:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	711a      	strb	r2, [r3, #4]

  return status;
 800469e:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d105      	bne.n	80046ce <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2210      	movs	r2, #16
 80046c6:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80046c8:	2301      	movs	r3, #1
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	e00b      	b.n	80046e6 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d8:	2b40      	cmp	r3, #64	; 0x40
 80046da:	d104      	bne.n	80046e6 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2208      	movs	r2, #8
 80046e0:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80046e2:	2301      	movs	r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d10b      	bne.n	8004704 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2204      	movs	r2, #4
 80046f0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f839 	bl	800476a <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8004700:	605a      	str	r2, [r3, #4]

    return;
 8004702:	e024      	b.n	800474e <HAL_RNG_IRQHandler+0xa6>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b01      	cmp	r3, #1
 8004710:	d11d      	bne.n	800474e <HAL_RNG_IRQHandler+0xa6>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0208 	bic.w	r2, r2, #8
 8004720:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	795b      	ldrb	r3, [r3, #5]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b04      	cmp	r3, #4
 8004734:	d00b      	beq.n	800474e <HAL_RNG_IRQHandler+0xa6>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	4619      	mov	r1, r3
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f803 	bl	8004754 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800477e:	b084      	sub	sp, #16
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	f107 001c 	add.w	r0, r7, #28
 800478c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004792:	2b01      	cmp	r3, #1
 8004794:	d122      	bne.n	80047dc <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80047aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d105      	bne.n	80047d0 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f9bf 	bl	8004b54 <USB_CoreReset>
 80047d6:	4603      	mov	r3, r0
 80047d8:	73fb      	strb	r3, [r7, #15]
 80047da:	e01a      	b.n	8004812 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f9b3 	bl	8004b54 <USB_CoreReset>
 80047ee:	4603      	mov	r3, r0
 80047f0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d106      	bne.n	8004806 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	639a      	str	r2, [r3, #56]	; 0x38
 8004804:	e005      	b.n	8004812 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004814:	2b01      	cmp	r3, #1
 8004816:	d10b      	bne.n	8004830 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f043 0206 	orr.w	r2, r3, #6
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f043 0220 	orr.w	r2, r3, #32
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004830:	7bfb      	ldrb	r3, [r7, #15]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800483c:	b004      	add	sp, #16
 800483e:	4770      	bx	lr

08004840 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f043 0201 	orr.w	r2, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f023 0201 	bic.w	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	460b      	mov	r3, r1
 800488e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048a0:	78fb      	ldrb	r3, [r7, #3]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d115      	bne.n	80048d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048b2:	2001      	movs	r0, #1
 80048b4:	f7fc fbd2 	bl	800105c <HAL_Delay>
      ms++;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3301      	adds	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f939 	bl	8004b36 <USB_GetMode>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d01e      	beq.n	8004908 <USB_SetCurrentMode+0x84>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b31      	cmp	r3, #49	; 0x31
 80048ce:	d9f0      	bls.n	80048b2 <USB_SetCurrentMode+0x2e>
 80048d0:	e01a      	b.n	8004908 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048d2:	78fb      	ldrb	r3, [r7, #3]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d115      	bne.n	8004904 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048e4:	2001      	movs	r0, #1
 80048e6:	f7fc fbb9 	bl	800105c <HAL_Delay>
      ms++;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3301      	adds	r3, #1
 80048ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f920 	bl	8004b36 <USB_GetMode>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <USB_SetCurrentMode+0x84>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b31      	cmp	r3, #49	; 0x31
 8004900:	d9f0      	bls.n	80048e4 <USB_SetCurrentMode+0x60>
 8004902:	e001      	b.n	8004908 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e005      	b.n	8004914 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b32      	cmp	r3, #50	; 0x32
 800490c:	d101      	bne.n	8004912 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3301      	adds	r3, #1
 800492e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4a13      	ldr	r2, [pc, #76]	; (8004980 <USB_FlushTxFifo+0x64>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d901      	bls.n	800493c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e01b      	b.n	8004974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	daf2      	bge.n	800492a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	019b      	lsls	r3, r3, #6
 800494c:	f043 0220 	orr.w	r2, r3, #32
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3301      	adds	r3, #1
 8004958:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4a08      	ldr	r2, [pc, #32]	; (8004980 <USB_FlushTxFifo+0x64>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d901      	bls.n	8004966 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e006      	b.n	8004974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b20      	cmp	r3, #32
 8004970:	d0f0      	beq.n	8004954 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	00030d40 	.word	0x00030d40

08004984 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3301      	adds	r3, #1
 8004994:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a11      	ldr	r2, [pc, #68]	; (80049e0 <USB_FlushRxFifo+0x5c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e018      	b.n	80049d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	daf2      	bge.n	8004990 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2210      	movs	r2, #16
 80049b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3301      	adds	r3, #1
 80049b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4a08      	ldr	r2, [pc, #32]	; (80049e0 <USB_FlushRxFifo+0x5c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d901      	bls.n	80049c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e006      	b.n	80049d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b10      	cmp	r3, #16
 80049d0:	d0f0      	beq.n	80049b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	00030d40 	.word	0x00030d40

080049e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b089      	sub	sp, #36	; 0x24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	4611      	mov	r1, r2
 80049f0:	461a      	mov	r2, r3
 80049f2:	460b      	mov	r3, r1
 80049f4:	71fb      	strb	r3, [r7, #7]
 80049f6:	4613      	mov	r3, r2
 80049f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004a02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d123      	bne.n	8004a52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004a0a:	88bb      	ldrh	r3, [r7, #4]
 8004a0c:	3303      	adds	r3, #3
 8004a0e:	089b      	lsrs	r3, r3, #2
 8004a10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004a12:	2300      	movs	r3, #0
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	e018      	b.n	8004a4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	031a      	lsls	r2, r3, #12
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a24:	461a      	mov	r2, r3
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	3301      	adds	r3, #1
 8004a36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	3301      	adds	r3, #1
 8004a42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	3301      	adds	r3, #1
 8004a48:	61bb      	str	r3, [r7, #24]
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d3e2      	bcc.n	8004a18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3724      	adds	r7, #36	; 0x24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b08b      	sub	sp, #44	; 0x2c
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a76:	88fb      	ldrh	r3, [r7, #6]
 8004a78:	089b      	lsrs	r3, r3, #2
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004a7e:	88fb      	ldrh	r3, [r7, #6]
 8004a80:	f003 0303 	and.w	r3, r3, #3
 8004a84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a86:	2300      	movs	r3, #0
 8004a88:	623b      	str	r3, [r7, #32]
 8004a8a:	e014      	b.n	8004ab6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	3301      	adds	r3, #1
 8004aae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	623b      	str	r3, [r7, #32]
 8004ab6:	6a3a      	ldr	r2, [r7, #32]
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d3e6      	bcc.n	8004a8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004abe:	8bfb      	ldrh	r3, [r7, #30]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01e      	beq.n	8004b02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f107 0310 	add.w	r3, r7, #16
 8004ad4:	6812      	ldr	r2, [r2, #0]
 8004ad6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	701a      	strb	r2, [r3, #0]
      i++;
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	3301      	adds	r3, #1
 8004aee:	623b      	str	r3, [r7, #32]
      pDest++;
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	3301      	adds	r3, #1
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004af6:	8bfb      	ldrh	r3, [r7, #30]
 8004af8:	3b01      	subs	r3, #1
 8004afa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004afc:	8bfb      	ldrh	r3, [r7, #30]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1ea      	bne.n	8004ad8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	372c      	adds	r7, #44	; 0x2c
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4013      	ands	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b28:	68fb      	ldr	r3, [r7, #12]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	f003 0301 	and.w	r3, r3, #1
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
	...

08004b54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	3301      	adds	r3, #1
 8004b64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4a13      	ldr	r2, [pc, #76]	; (8004bb8 <USB_CoreReset+0x64>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d901      	bls.n	8004b72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e01b      	b.n	8004baa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	daf2      	bge.n	8004b60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f043 0201 	orr.w	r2, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4a09      	ldr	r2, [pc, #36]	; (8004bb8 <USB_CoreReset+0x64>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d901      	bls.n	8004b9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e006      	b.n	8004baa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d0f0      	beq.n	8004b8a <USB_CoreReset+0x36>

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	00030d40 	.word	0x00030d40

08004bbc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b086      	sub	sp, #24
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
 8004bc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004bca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bdc:	461a      	mov	r2, r3
 8004bde:	2300      	movs	r3, #0
 8004be0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d018      	beq.n	8004c44 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d10a      	bne.n	8004c2e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c26:	f043 0304 	orr.w	r3, r3, #4
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	e014      	b.n	8004c58 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c3c:	f023 0304 	bic.w	r3, r3, #4
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	e009      	b.n	8004c58 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c52:	f023 0304 	bic.w	r3, r3, #4
 8004c56:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c58:	2110      	movs	r1, #16
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff fe5e 	bl	800491c <USB_FlushTxFifo>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff fe8a 	bl	8004984 <USB_FlushRxFifo>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	613b      	str	r3, [r7, #16]
 8004c7e:	e015      	b.n	8004cac <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c92:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	613b      	str	r3, [r7, #16]
 8004cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d3e5      	bcc.n	8004c80 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00b      	beq.n	8004ce6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cd4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a13      	ldr	r2, [pc, #76]	; (8004d28 <USB_HostInit+0x16c>)
 8004cda:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a13      	ldr	r2, [pc, #76]	; (8004d2c <USB_HostInit+0x170>)
 8004ce0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004ce4:	e009      	b.n	8004cfa <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2280      	movs	r2, #128	; 0x80
 8004cea:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a10      	ldr	r2, [pc, #64]	; (8004d30 <USB_HostInit+0x174>)
 8004cf0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a0f      	ldr	r2, [pc, #60]	; (8004d34 <USB_HostInit+0x178>)
 8004cf6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d105      	bne.n	8004d0c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f043 0210 	orr.w	r2, r3, #16
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699a      	ldr	r2, [r3, #24]
 8004d10:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <USB_HostInit+0x17c>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d24:	b004      	add	sp, #16
 8004d26:	4770      	bx	lr
 8004d28:	01000200 	.word	0x01000200
 8004d2c:	00e00300 	.word	0x00e00300
 8004d30:	00600080 	.word	0x00600080
 8004d34:	004000e0 	.word	0x004000e0
 8004d38:	a3200008 	.word	0xa3200008

08004d3c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d5a:	f023 0303 	bic.w	r3, r3, #3
 8004d5e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	78fb      	ldrb	r3, [r7, #3]
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	68f9      	ldr	r1, [r7, #12]
 8004d70:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d74:	4313      	orrs	r3, r2
 8004d76:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004d78:	78fb      	ldrb	r3, [r7, #3]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d107      	bne.n	8004d8e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d84:	461a      	mov	r2, r3
 8004d86:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004d8a:	6053      	str	r3, [r2, #4]
 8004d8c:	e009      	b.n	8004da2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d106      	bne.n	8004da2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004da0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	460b      	mov	r3, r1
 8004dba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004dd4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d109      	bne.n	8004df4 <USB_DriveVbus+0x44>
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d106      	bne.n	8004df4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004dee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004df2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfe:	d109      	bne.n	8004e14 <USB_DriveVbus+0x64>
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d106      	bne.n	8004e14 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004e0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e12:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b085      	sub	sp, #20
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	0c5b      	lsrs	r3, r3, #17
 8004e40:	f003 0303 	and.w	r3, r3, #3
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	b29b      	uxth	r3, r3
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
	...

08004e74 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b088      	sub	sp, #32
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	4608      	mov	r0, r1
 8004e7e:	4611      	mov	r1, r2
 8004e80:	461a      	mov	r2, r3
 8004e82:	4603      	mov	r3, r0
 8004e84:	70fb      	strb	r3, [r7, #3]
 8004e86:	460b      	mov	r3, r1
 8004e88:	70bb      	strb	r3, [r7, #2]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004e96:	78fb      	ldrb	r3, [r7, #3]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004eaa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d87e      	bhi.n	8004fb0 <USB_HC_Init+0x13c>
 8004eb2:	a201      	add	r2, pc, #4	; (adr r2, 8004eb8 <USB_HC_Init+0x44>)
 8004eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb8:	08004ec9 	.word	0x08004ec9
 8004ebc:	08004f73 	.word	0x08004f73
 8004ec0:	08004ec9 	.word	0x08004ec9
 8004ec4:	08004f35 	.word	0x08004f35
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ec8:	78fb      	ldrb	r3, [r7, #3]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	f240 439d 	movw	r3, #1181	; 0x49d
 8004eda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004edc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	da10      	bge.n	8004f06 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ee4:	78fb      	ldrb	r3, [r7, #3]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	78fa      	ldrb	r2, [r7, #3]
 8004ef4:	0151      	lsls	r1, r2, #5
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	440a      	add	r2, r1
 8004efa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f02:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004f04:	e057      	b.n	8004fb6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d051      	beq.n	8004fb6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004f12:	78fb      	ldrb	r3, [r7, #3]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	78fa      	ldrb	r2, [r7, #3]
 8004f22:	0151      	lsls	r1, r2, #5
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	440a      	add	r2, r1
 8004f28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f30:	60d3      	str	r3, [r2, #12]
      break;
 8004f32:	e040      	b.n	8004fb6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f34:	78fb      	ldrb	r3, [r7, #3]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f40:	461a      	mov	r2, r3
 8004f42:	f240 639d 	movw	r3, #1693	; 0x69d
 8004f46:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004f48:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	da34      	bge.n	8004fba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	78fa      	ldrb	r2, [r7, #3]
 8004f60:	0151      	lsls	r1, r2, #5
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	440a      	add	r2, r1
 8004f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f6e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004f70:	e023      	b.n	8004fba <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f72:	78fb      	ldrb	r3, [r7, #3]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f240 2325 	movw	r3, #549	; 0x225
 8004f84:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004f86:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	da17      	bge.n	8004fbe <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004f8e:	78fb      	ldrb	r3, [r7, #3]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	78fa      	ldrb	r2, [r7, #3]
 8004f9e:	0151      	lsls	r1, r2, #5
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	440a      	add	r2, r1
 8004fa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fa8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004fac:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004fae:	e006      	b.n	8004fbe <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	77fb      	strb	r3, [r7, #31]
      break;
 8004fb4:	e004      	b.n	8004fc0 <USB_HC_Init+0x14c>
      break;
 8004fb6:	bf00      	nop
 8004fb8:	e002      	b.n	8004fc0 <USB_HC_Init+0x14c>
      break;
 8004fba:	bf00      	nop
 8004fbc:	e000      	b.n	8004fc0 <USB_HC_Init+0x14c>
      break;
 8004fbe:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	78fa      	ldrb	r2, [r7, #3]
 8004fd0:	0151      	lsls	r1, r2, #5
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	440a      	add	r2, r1
 8004fd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fda:	f043 0302 	orr.w	r3, r3, #2
 8004fde:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fe6:	699a      	ldr	r2, [r3, #24]
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	2101      	movs	r1, #1
 8004ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff4:	6939      	ldr	r1, [r7, #16]
 8004ff6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800500a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800500e:	2b00      	cmp	r3, #0
 8005010:	da03      	bge.n	800501a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005016:	61bb      	str	r3, [r7, #24]
 8005018:	e001      	b.n	800501e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7ff feff 	bl	8004e22 <USB_GetHostSpeed>
 8005024:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005026:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800502a:	2b02      	cmp	r3, #2
 800502c:	d106      	bne.n	800503c <USB_HC_Init+0x1c8>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d003      	beq.n	800503c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005034:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	e001      	b.n	8005040 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005040:	787b      	ldrb	r3, [r7, #1]
 8005042:	059b      	lsls	r3, r3, #22
 8005044:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005048:	78bb      	ldrb	r3, [r7, #2]
 800504a:	02db      	lsls	r3, r3, #11
 800504c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005050:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005052:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005056:	049b      	lsls	r3, r3, #18
 8005058:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800505c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800505e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005060:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005064:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800506a:	78fb      	ldrb	r3, [r7, #3]
 800506c:	0159      	lsls	r1, r3, #5
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	440b      	add	r3, r1
 8005072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005076:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800507c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800507e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005082:	2b03      	cmp	r3, #3
 8005084:	d003      	beq.n	800508e <USB_HC_Init+0x21a>
 8005086:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800508a:	2b01      	cmp	r3, #1
 800508c:	d10f      	bne.n	80050ae <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4413      	add	r3, r2
 8005096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	78fa      	ldrb	r2, [r7, #3]
 800509e:	0151      	lsls	r1, r2, #5
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	440a      	add	r2, r1
 80050a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050ac:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80050ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3720      	adds	r7, #32
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08c      	sub	sp, #48	; 0x30
 80050bc:	af02      	add	r7, sp, #8
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	4613      	mov	r3, r2
 80050c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	785b      	ldrb	r3, [r3, #1]
 80050ce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80050d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050d4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d02d      	beq.n	800513e <USB_HC_StartXfer+0x86>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	791b      	ldrb	r3, [r3, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d129      	bne.n	800513e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80050ea:	79fb      	ldrb	r3, [r7, #7]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d117      	bne.n	8005120 <USB_HC_StartXfer+0x68>
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	79db      	ldrb	r3, [r3, #7]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <USB_HC_StartXfer+0x48>
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	79db      	ldrb	r3, [r3, #7]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d10f      	bne.n	8005120 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	4413      	add	r3, r2
 8005108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	69fa      	ldr	r2, [r7, #28]
 8005110:	0151      	lsls	r1, r2, #5
 8005112:	6a3a      	ldr	r2, [r7, #32]
 8005114:	440a      	add	r2, r1
 8005116:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800511a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005120:	79fb      	ldrb	r3, [r7, #7]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10b      	bne.n	800513e <USB_HC_StartXfer+0x86>
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	795b      	ldrb	r3, [r3, #5]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d107      	bne.n	800513e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	785b      	ldrb	r3, [r3, #1]
 8005132:	4619      	mov	r1, r3
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 fa0f 	bl	8005558 <USB_DoPing>
      return HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	e0f8      	b.n	8005330 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d018      	beq.n	8005178 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	8912      	ldrh	r2, [r2, #8]
 800514e:	4413      	add	r3, r2
 8005150:	3b01      	subs	r3, #1
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	8912      	ldrh	r2, [r2, #8]
 8005156:	fbb3 f3f2 	udiv	r3, r3, r2
 800515a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800515c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800515e:	8b7b      	ldrh	r3, [r7, #26]
 8005160:	429a      	cmp	r2, r3
 8005162:	d90b      	bls.n	800517c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005164:	8b7b      	ldrh	r3, [r7, #26]
 8005166:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005168:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	8912      	ldrh	r2, [r2, #8]
 800516e:	fb03 f202 	mul.w	r2, r3, r2
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	611a      	str	r2, [r3, #16]
 8005176:	e001      	b.n	800517c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005178:	2301      	movs	r3, #1
 800517a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	78db      	ldrb	r3, [r3, #3]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d007      	beq.n	8005194 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005184:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	8912      	ldrh	r2, [r2, #8]
 800518a:	fb03 f202 	mul.w	r2, r3, r2
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	611a      	str	r2, [r3, #16]
 8005192:	e003      	b.n	800519c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	695a      	ldr	r2, [r3, #20]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80051a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051a6:	04d9      	lsls	r1, r3, #19
 80051a8:	4b63      	ldr	r3, [pc, #396]	; (8005338 <USB_HC_StartXfer+0x280>)
 80051aa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80051ac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	7a9b      	ldrb	r3, [r3, #10]
 80051b2:	075b      	lsls	r3, r3, #29
 80051b4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80051b8:	69f9      	ldr	r1, [r7, #28]
 80051ba:	0148      	lsls	r0, r1, #5
 80051bc:	6a39      	ldr	r1, [r7, #32]
 80051be:	4401      	add	r1, r0
 80051c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80051c4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80051c6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80051c8:	79fb      	ldrb	r3, [r7, #7]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d009      	beq.n	80051e2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	68d9      	ldr	r1, [r3, #12]
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051de:	460a      	mov	r2, r1
 80051e0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	bf0c      	ite	eq
 80051f2:	2301      	moveq	r3, #1
 80051f4:	2300      	movne	r3, #0
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	4413      	add	r3, r2
 8005202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	6a3a      	ldr	r2, [r7, #32]
 800520e:	440a      	add	r2, r1
 8005210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005214:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005218:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	4413      	add	r3, r2
 8005222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	7e7b      	ldrb	r3, [r7, #25]
 800522a:	075b      	lsls	r3, r3, #29
 800522c:	69f9      	ldr	r1, [r7, #28]
 800522e:	0148      	lsls	r0, r1, #5
 8005230:	6a39      	ldr	r1, [r7, #32]
 8005232:	4401      	add	r1, r0
 8005234:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005238:	4313      	orrs	r3, r2
 800523a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	4413      	add	r3, r2
 8005244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005252:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	78db      	ldrb	r3, [r3, #3]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d004      	beq.n	8005266 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005262:	613b      	str	r3, [r7, #16]
 8005264:	e003      	b.n	800526e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800526c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005274:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	4413      	add	r3, r2
 800527e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005282:	461a      	mov	r2, r3
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005288:	79fb      	ldrb	r3, [r7, #7]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	e04e      	b.n	8005330 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	78db      	ldrb	r3, [r3, #3]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d149      	bne.n	800532e <USB_HC_StartXfer+0x276>
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d045      	beq.n	800532e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	79db      	ldrb	r3, [r3, #7]
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d830      	bhi.n	800530c <USB_HC_StartXfer+0x254>
 80052aa:	a201      	add	r2, pc, #4	; (adr r2, 80052b0 <USB_HC_StartXfer+0x1f8>)
 80052ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b0:	080052c1 	.word	0x080052c1
 80052b4:	080052e5 	.word	0x080052e5
 80052b8:	080052c1 	.word	0x080052c1
 80052bc:	080052e5 	.word	0x080052e5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	3303      	adds	r3, #3
 80052c6:	089b      	lsrs	r3, r3, #2
 80052c8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80052ca:	8afa      	ldrh	r2, [r7, #22]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d91c      	bls.n	8005310 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	f043 0220 	orr.w	r2, r3, #32
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80052e2:	e015      	b.n	8005310 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	3303      	adds	r3, #3
 80052ea:	089b      	lsrs	r3, r3, #2
 80052ec:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80052ee:	8afa      	ldrh	r2, [r7, #22]
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d90a      	bls.n	8005314 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	619a      	str	r2, [r3, #24]
        }
        break;
 800530a:	e003      	b.n	8005314 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800530c:	bf00      	nop
 800530e:	e002      	b.n	8005316 <USB_HC_StartXfer+0x25e>
        break;
 8005310:	bf00      	nop
 8005312:	e000      	b.n	8005316 <USB_HC_StartXfer+0x25e>
        break;
 8005314:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	68d9      	ldr	r1, [r3, #12]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	785a      	ldrb	r2, [r3, #1]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	b29b      	uxth	r3, r3
 8005324:	2000      	movs	r0, #0
 8005326:	9000      	str	r0, [sp, #0]
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f7ff fb5b 	bl	80049e4 <USB_WritePacket>
  }

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3728      	adds	r7, #40	; 0x28
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	1ff80000 	.word	0x1ff80000

0800533c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	b29b      	uxth	r3, r3
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800535e:	b480      	push	{r7}
 8005360:	b089      	sub	sp, #36	; 0x24
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	460b      	mov	r3, r1
 8005368:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800536e:	78fb      	ldrb	r3, [r7, #3]
 8005370:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	0c9b      	lsrs	r3, r3, #18
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	4413      	add	r3, r2
 8005394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	0fdb      	lsrs	r3, r3, #31
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d104      	bne.n	80053b8 <USB_HC_Halt+0x5a>
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80053b4:	2300      	movs	r3, #0
 80053b6:	e0c8      	b.n	800554a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <USB_HC_Halt+0x66>
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d163      	bne.n	800548c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	0151      	lsls	r1, r2, #5
 80053d6:	69fa      	ldr	r2, [r7, #28]
 80053d8:	440a      	add	r2, r1
 80053da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053e2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 0320 	and.w	r3, r3, #32
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f040 80ab 	bne.w	8005548 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d133      	bne.n	8005466 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	4413      	add	r3, r2
 8005406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	0151      	lsls	r1, r2, #5
 8005410:	69fa      	ldr	r2, [r7, #28]
 8005412:	440a      	add	r2, r1
 8005414:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005418:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800541c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	4413      	add	r3, r2
 8005426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	0151      	lsls	r1, r2, #5
 8005430:	69fa      	ldr	r2, [r7, #28]
 8005432:	440a      	add	r2, r1
 8005434:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005438:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800543c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3301      	adds	r3, #1
 8005442:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800544a:	d81d      	bhi.n	8005488 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	4413      	add	r3, r2
 8005454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800545e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005462:	d0ec      	beq.n	800543e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005464:	e070      	b.n	8005548 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	4413      	add	r3, r2
 800546e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	0151      	lsls	r1, r2, #5
 8005478:	69fa      	ldr	r2, [r7, #28]
 800547a:	440a      	add	r2, r1
 800547c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005480:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005484:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005486:	e05f      	b.n	8005548 <USB_HC_Halt+0x1ea>
            break;
 8005488:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800548a:	e05d      	b.n	8005548 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	4413      	add	r3, r2
 8005494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	0151      	lsls	r1, r2, #5
 800549e:	69fa      	ldr	r2, [r7, #28]
 80054a0:	440a      	add	r2, r1
 80054a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054aa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d133      	bne.n	8005524 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	0151      	lsls	r1, r2, #5
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	440a      	add	r2, r1
 80054d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	0151      	lsls	r1, r2, #5
 80054ee:	69fa      	ldr	r2, [r7, #28]
 80054f0:	440a      	add	r2, r1
 80054f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054fa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	3301      	adds	r3, #1
 8005500:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005508:	d81d      	bhi.n	8005546 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	4413      	add	r3, r2
 8005512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800551c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005520:	d0ec      	beq.n	80054fc <USB_HC_Halt+0x19e>
 8005522:	e011      	b.n	8005548 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	4413      	add	r3, r2
 800552c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	69fa      	ldr	r2, [r7, #28]
 8005538:	440a      	add	r2, r1
 800553a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800553e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	e000      	b.n	8005548 <USB_HC_Halt+0x1ea>
          break;
 8005546:	bf00      	nop
    }
  }

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3724      	adds	r7, #36	; 0x24
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
	...

08005558 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005558:	b480      	push	{r7}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800556c:	2301      	movs	r3, #1
 800556e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	04da      	lsls	r2, r3, #19
 8005574:	4b15      	ldr	r3, [pc, #84]	; (80055cc <USB_DoPing+0x74>)
 8005576:	4013      	ands	r3, r2
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	0151      	lsls	r1, r2, #5
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	440a      	add	r2, r1
 8005580:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005584:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005588:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	4413      	add	r3, r2
 8005592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055a0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055a8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b6:	461a      	mov	r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	1ff80000 	.word	0x1ff80000

080055d0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b088      	sub	sp, #32
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff f93c 	bl	8004862 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055ea:	2110      	movs	r1, #16
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7ff f995 	bl	800491c <USB_FlushTxFifo>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7ff f9c1 	bl	8004984 <USB_FlushRxFifo>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800560c:	2300      	movs	r3, #0
 800560e:	61bb      	str	r3, [r7, #24]
 8005610:	e01f      	b.n	8005652 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	4413      	add	r3, r2
 800561a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005628:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005630:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005638:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	4413      	add	r3, r2
 8005642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005646:	461a      	mov	r2, r3
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	3301      	adds	r3, #1
 8005650:	61bb      	str	r3, [r7, #24]
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	2b0f      	cmp	r3, #15
 8005656:	d9dc      	bls.n	8005612 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005658:	2300      	movs	r3, #0
 800565a:	61bb      	str	r3, [r7, #24]
 800565c:	e034      	b.n	80056c8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	4413      	add	r3, r2
 8005666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005674:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800567c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005684:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	4413      	add	r3, r2
 800568e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005692:	461a      	mov	r2, r3
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	3301      	adds	r3, #1
 800569c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056a4:	d80c      	bhi.n	80056c0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056bc:	d0ec      	beq.n	8005698 <USB_StopHost+0xc8>
 80056be:	e000      	b.n	80056c2 <USB_StopHost+0xf2>
        break;
 80056c0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	3301      	adds	r3, #1
 80056c6:	61bb      	str	r3, [r7, #24]
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	2b0f      	cmp	r3, #15
 80056cc:	d9c7      	bls.n	800565e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056d4:	461a      	mov	r2, r3
 80056d6:	f04f 33ff 	mov.w	r3, #4294967295
 80056da:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f04f 32ff 	mov.w	r2, #4294967295
 80056e2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff f8ab 	bl	8004840 <USB_EnableGlobalInt>

  return ret;
 80056ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3720      	adds	r7, #32
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80056f4:	b590      	push	{r4, r7, lr}
 80056f6:	b089      	sub	sp, #36	; 0x24
 80056f8:	af04      	add	r7, sp, #16
 80056fa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80056fc:	2301      	movs	r3, #1
 80056fe:	2202      	movs	r2, #2
 8005700:	2102      	movs	r1, #2
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fc66 	bl	8005fd4 <USBH_FindInterface>
 8005708:	4603      	mov	r3, r0
 800570a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800570c:	7bfb      	ldrb	r3, [r7, #15]
 800570e:	2bff      	cmp	r3, #255	; 0xff
 8005710:	d002      	beq.n	8005718 <USBH_CDC_InterfaceInit+0x24>
 8005712:	7bfb      	ldrb	r3, [r7, #15]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d901      	bls.n	800571c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005718:	2302      	movs	r3, #2
 800571a:	e13d      	b.n	8005998 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800571c:	7bfb      	ldrb	r3, [r7, #15]
 800571e:	4619      	mov	r1, r3
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fc3b 	bl	8005f9c <USBH_SelectInterface>
 8005726:	4603      	mov	r3, r0
 8005728:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800572a:	7bbb      	ldrb	r3, [r7, #14]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005730:	2302      	movs	r3, #2
 8005732:	e131      	b.n	8005998 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800573a:	2050      	movs	r0, #80	; 0x50
 800573c:	f001 fb12 	bl	8006d64 <malloc>
 8005740:	4603      	mov	r3, r0
 8005742:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005754:	2302      	movs	r3, #2
 8005756:	e11f      	b.n	8005998 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005758:	2250      	movs	r2, #80	; 0x50
 800575a:	2100      	movs	r1, #0
 800575c:	68b8      	ldr	r0, [r7, #8]
 800575e:	f001 fb11 	bl	8006d84 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005762:	7bfb      	ldrb	r3, [r7, #15]
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	211a      	movs	r1, #26
 8005768:	fb01 f303 	mul.w	r3, r1, r3
 800576c:	4413      	add	r3, r2
 800576e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	b25b      	sxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	da15      	bge.n	80057a6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800577a:	7bfb      	ldrb	r3, [r7, #15]
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	211a      	movs	r1, #26
 8005780:	fb01 f303 	mul.w	r3, r1, r3
 8005784:	4413      	add	r3, r2
 8005786:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800578a:	781a      	ldrb	r2, [r3, #0]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005790:	7bfb      	ldrb	r3, [r7, #15]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	211a      	movs	r1, #26
 8005796:	fb01 f303 	mul.w	r3, r1, r3
 800579a:	4413      	add	r3, r2
 800579c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80057a0:	881a      	ldrh	r2, [r3, #0]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	785b      	ldrb	r3, [r3, #1]
 80057aa:	4619      	mov	r1, r3
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 ff9c 	bl	80066ea <USBH_AllocPipe>
 80057b2:	4603      	mov	r3, r0
 80057b4:	461a      	mov	r2, r3
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	7819      	ldrb	r1, [r3, #0]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	7858      	ldrb	r0, [r3, #1]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	8952      	ldrh	r2, [r2, #10]
 80057d2:	9202      	str	r2, [sp, #8]
 80057d4:	2203      	movs	r2, #3
 80057d6:	9201      	str	r2, [sp, #4]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	4623      	mov	r3, r4
 80057dc:	4602      	mov	r2, r0
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 ff54 	bl	800668c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2200      	movs	r2, #0
 80057ea:	4619      	mov	r1, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f001 fa17 	bl	8006c20 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80057f2:	2300      	movs	r3, #0
 80057f4:	2200      	movs	r2, #0
 80057f6:	210a      	movs	r1, #10
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 fbeb 	bl	8005fd4 <USBH_FindInterface>
 80057fe:	4603      	mov	r3, r0
 8005800:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005802:	7bfb      	ldrb	r3, [r7, #15]
 8005804:	2bff      	cmp	r3, #255	; 0xff
 8005806:	d002      	beq.n	800580e <USBH_CDC_InterfaceInit+0x11a>
 8005808:	7bfb      	ldrb	r3, [r7, #15]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d901      	bls.n	8005812 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800580e:	2302      	movs	r3, #2
 8005810:	e0c2      	b.n	8005998 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005812:	7bfb      	ldrb	r3, [r7, #15]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	211a      	movs	r1, #26
 8005818:	fb01 f303 	mul.w	r3, r1, r3
 800581c:	4413      	add	r3, r2
 800581e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	b25b      	sxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	da16      	bge.n	8005858 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	211a      	movs	r1, #26
 8005830:	fb01 f303 	mul.w	r3, r1, r3
 8005834:	4413      	add	r3, r2
 8005836:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800583a:	781a      	ldrb	r2, [r3, #0]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	211a      	movs	r1, #26
 8005846:	fb01 f303 	mul.w	r3, r1, r3
 800584a:	4413      	add	r3, r2
 800584c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005850:	881a      	ldrh	r2, [r3, #0]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	835a      	strh	r2, [r3, #26]
 8005856:	e015      	b.n	8005884 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	211a      	movs	r1, #26
 800585e:	fb01 f303 	mul.w	r3, r1, r3
 8005862:	4413      	add	r3, r2
 8005864:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005868:	781a      	ldrb	r2, [r3, #0]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800586e:	7bfb      	ldrb	r3, [r7, #15]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	211a      	movs	r1, #26
 8005874:	fb01 f303 	mul.w	r3, r1, r3
 8005878:	4413      	add	r3, r2
 800587a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800587e:	881a      	ldrh	r2, [r3, #0]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	211a      	movs	r1, #26
 800588a:	fb01 f303 	mul.w	r3, r1, r3
 800588e:	4413      	add	r3, r2
 8005890:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	b25b      	sxtb	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	da16      	bge.n	80058ca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	211a      	movs	r1, #26
 80058a2:	fb01 f303 	mul.w	r3, r1, r3
 80058a6:	4413      	add	r3, r2
 80058a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80058ac:	781a      	ldrb	r2, [r3, #0]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	211a      	movs	r1, #26
 80058b8:	fb01 f303 	mul.w	r3, r1, r3
 80058bc:	4413      	add	r3, r2
 80058be:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80058c2:	881a      	ldrh	r2, [r3, #0]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	835a      	strh	r2, [r3, #26]
 80058c8:	e015      	b.n	80058f6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	211a      	movs	r1, #26
 80058d0:	fb01 f303 	mul.w	r3, r1, r3
 80058d4:	4413      	add	r3, r2
 80058d6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80058da:	781a      	ldrb	r2, [r3, #0]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	211a      	movs	r1, #26
 80058e6:	fb01 f303 	mul.w	r3, r1, r3
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80058f0:	881a      	ldrh	r2, [r3, #0]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	7b9b      	ldrb	r3, [r3, #14]
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fef4 	bl	80066ea <USBH_AllocPipe>
 8005902:	4603      	mov	r3, r0
 8005904:	461a      	mov	r2, r3
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	7bdb      	ldrb	r3, [r3, #15]
 800590e:	4619      	mov	r1, r3
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 feea 	bl	80066ea <USBH_AllocPipe>
 8005916:	4603      	mov	r3, r0
 8005918:	461a      	mov	r2, r3
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	7b59      	ldrb	r1, [r3, #13]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	7b98      	ldrb	r0, [r3, #14]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	8b12      	ldrh	r2, [r2, #24]
 8005936:	9202      	str	r2, [sp, #8]
 8005938:	2202      	movs	r2, #2
 800593a:	9201      	str	r2, [sp, #4]
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	4623      	mov	r3, r4
 8005940:	4602      	mov	r2, r0
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fea2 	bl	800668c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	7b19      	ldrb	r1, [r3, #12]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	7bd8      	ldrb	r0, [r3, #15]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	8b52      	ldrh	r2, [r2, #26]
 8005960:	9202      	str	r2, [sp, #8]
 8005962:	2202      	movs	r2, #2
 8005964:	9201      	str	r2, [sp, #4]
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	4623      	mov	r3, r4
 800596a:	4602      	mov	r2, r0
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fe8d 	bl	800668c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	7b5b      	ldrb	r3, [r3, #13]
 800597e:	2200      	movs	r2, #0
 8005980:	4619      	mov	r1, r3
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f001 f94c 	bl	8006c20 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	7b1b      	ldrb	r3, [r3, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f001 f945 	bl	8006c20 <USBH_LL_SetToggle>

  return USBH_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	bd90      	pop	{r4, r7, pc}

080059a0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00e      	beq.n	80059d8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	4619      	mov	r1, r3
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fe82 	bl	80066ca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fead 	bl	800672c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	7b1b      	ldrb	r3, [r3, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00e      	beq.n	80059fe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	7b1b      	ldrb	r3, [r3, #12]
 80059e4:	4619      	mov	r1, r3
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fe6f 	bl	80066ca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	7b1b      	ldrb	r3, [r3, #12]
 80059f0:	4619      	mov	r1, r3
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fe9a 	bl	800672c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	7b5b      	ldrb	r3, [r3, #13]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00e      	beq.n	8005a24 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	7b5b      	ldrb	r3, [r3, #13]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fe5c 	bl	80066ca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	7b5b      	ldrb	r3, [r3, #13]
 8005a16:	4619      	mov	r1, r3
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fe87 	bl	800672c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00b      	beq.n	8005a48 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f001 f99b 	bl	8006d74 <free>
    phost->pActiveClass->pData = 0U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a44:	2200      	movs	r2, #0
 8005a46:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	3340      	adds	r3, #64	; 0x40
 8005a68:	4619      	mov	r1, r3
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f8b1 	bl	8005bd2 <GetLineCoding>
 8005a70:	4603      	mov	r3, r0
 8005a72:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005a74:	7afb      	ldrb	r3, [r7, #11]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d105      	bne.n	8005a86 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005a80:	2102      	movs	r1, #2
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005a86:	7afb      	ldrb	r3, [r7, #11]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005ab0:	2b04      	cmp	r3, #4
 8005ab2:	d877      	bhi.n	8005ba4 <USBH_CDC_Process+0x114>
 8005ab4:	a201      	add	r2, pc, #4	; (adr r2, 8005abc <USBH_CDC_Process+0x2c>)
 8005ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aba:	bf00      	nop
 8005abc:	08005ad1 	.word	0x08005ad1
 8005ac0:	08005ad7 	.word	0x08005ad7
 8005ac4:	08005b07 	.word	0x08005b07
 8005ac8:	08005b7b 	.word	0x08005b7b
 8005acc:	08005b89 	.word	0x08005b89
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad4:	e06d      	b.n	8005bb2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ada:	4619      	mov	r1, r3
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f897 	bl	8005c10 <SetLineCoding>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005ae6:	7bbb      	ldrb	r3, [r7, #14]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d104      	bne.n	8005af6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005af4:	e058      	b.n	8005ba8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005af6:	7bbb      	ldrb	r3, [r7, #14]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d055      	beq.n	8005ba8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2204      	movs	r2, #4
 8005b00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005b04:	e050      	b.n	8005ba8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	3340      	adds	r3, #64	; 0x40
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f860 	bl	8005bd2 <GetLineCoding>
 8005b12:	4603      	mov	r3, r0
 8005b14:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005b16:	7bbb      	ldrb	r3, [r7, #14]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d126      	bne.n	8005b6a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b2e:	791b      	ldrb	r3, [r3, #4]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d13b      	bne.n	8005bac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b3e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d133      	bne.n	8005bac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b4e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d12b      	bne.n	8005bac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b5c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d124      	bne.n	8005bac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f958 	bl	8005e18 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005b68:	e020      	b.n	8005bac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005b6a:	7bbb      	ldrb	r3, [r7, #14]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d01d      	beq.n	8005bac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2204      	movs	r2, #4
 8005b74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005b78:	e018      	b.n	8005bac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f867 	bl	8005c4e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f8da 	bl	8005d3a <CDC_ProcessReception>
      break;
 8005b86:	e014      	b.n	8005bb2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005b88:	2100      	movs	r1, #0
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fb08 	bl	80061a0 <USBH_ClrFeature>
 8005b90:	4603      	mov	r3, r0
 8005b92:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005b94:	7bbb      	ldrb	r3, [r7, #14]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10a      	bne.n	8005bb0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005ba2:	e005      	b.n	8005bb0 <USBH_CDC_Process+0x120>

    default:
      break;
 8005ba4:	bf00      	nop
 8005ba6:	e004      	b.n	8005bb2 <USBH_CDC_Process+0x122>
      break;
 8005ba8:	bf00      	nop
 8005baa:	e002      	b.n	8005bb2 <USBH_CDC_Process+0x122>
      break;
 8005bac:	bf00      	nop
 8005bae:	e000      	b.n	8005bb2 <USBH_CDC_Process+0x122>
      break;
 8005bb0:	bf00      	nop

  }

  return status;
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b082      	sub	sp, #8
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	22a1      	movs	r2, #161	; 0xa1
 8005be0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2221      	movs	r2, #33	; 0x21
 8005be6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2207      	movs	r2, #7
 8005bf8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2207      	movs	r2, #7
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 faf1 	bl	80061e8 <USBH_CtlReq>
 8005c06:	4603      	mov	r3, r0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2221      	movs	r2, #33	; 0x21
 8005c1e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2220      	movs	r2, #32
 8005c24:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2207      	movs	r2, #7
 8005c36:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2207      	movs	r2, #7
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fad2 	bl	80061e8 <USBH_CtlReq>
 8005c44:	4603      	mov	r3, r0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b086      	sub	sp, #24
 8005c52:	af02      	add	r7, sp, #8
 8005c54:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005c60:	2300      	movs	r3, #0
 8005c62:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d002      	beq.n	8005c74 <CDC_ProcessTransmission+0x26>
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d023      	beq.n	8005cba <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005c72:	e05e      	b.n	8005d32 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	8b12      	ldrh	r2, [r2, #24]
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d90b      	bls.n	8005c98 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	69d9      	ldr	r1, [r3, #28]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8b1a      	ldrh	r2, [r3, #24]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	7b5b      	ldrb	r3, [r3, #13]
 8005c8c:	2001      	movs	r0, #1
 8005c8e:	9000      	str	r0, [sp, #0]
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fcb8 	bl	8006606 <USBH_BulkSendData>
 8005c96:	e00b      	b.n	8005cb0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	7b5b      	ldrb	r3, [r3, #13]
 8005ca6:	2001      	movs	r0, #1
 8005ca8:	9000      	str	r0, [sp, #0]
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fcab 	bl	8006606 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005cb8:	e03b      	b.n	8005d32 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	7b5b      	ldrb	r3, [r3, #13]
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 ff83 	bl	8006bcc <USBH_LL_GetURBState>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005cca:	7afb      	ldrb	r3, [r7, #11]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d128      	bne.n	8005d22 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	8b12      	ldrh	r2, [r2, #24]
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d90e      	bls.n	8005cfa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	8b12      	ldrh	r2, [r2, #24]
 8005ce4:	1a9a      	subs	r2, r3, r2
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	8b12      	ldrh	r2, [r2, #24]
 8005cf2:	441a      	add	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	61da      	str	r2, [r3, #28]
 8005cf8:	e002      	b.n	8005d00 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d004      	beq.n	8005d12 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005d10:	e00e      	b.n	8005d30 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f868 	bl	8005df0 <USBH_CDC_TransmitCallback>
      break;
 8005d20:	e006      	b.n	8005d30 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005d22:	7afb      	ldrb	r3, [r7, #11]
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d103      	bne.n	8005d30 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005d30:	bf00      	nop
  }
}
 8005d32:	bf00      	nop
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b086      	sub	sp, #24
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005d56:	2b03      	cmp	r3, #3
 8005d58:	d002      	beq.n	8005d60 <CDC_ProcessReception+0x26>
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d00e      	beq.n	8005d7c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005d5e:	e043      	b.n	8005de8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	6a19      	ldr	r1, [r3, #32]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	8b5a      	ldrh	r2, [r3, #26]
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	7b1b      	ldrb	r3, [r3, #12]
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fc6f 	bl	8006650 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2204      	movs	r2, #4
 8005d76:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005d7a:	e035      	b.n	8005de8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	7b1b      	ldrb	r3, [r3, #12]
 8005d80:	4619      	mov	r1, r3
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 ff22 	bl	8006bcc <USBH_LL_GetURBState>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005d8c:	7cfb      	ldrb	r3, [r7, #19]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d129      	bne.n	8005de6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	7b1b      	ldrb	r3, [r3, #12]
 8005d96:	4619      	mov	r1, r3
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fe85 	bl	8006aa8 <USBH_LL_GetLastXferSize>
 8005d9e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d016      	beq.n	8005dd8 <CDC_ProcessReception+0x9e>
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	8b5b      	ldrh	r3, [r3, #26]
 8005dae:	461a      	mov	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d910      	bls.n	8005dd8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	1ad2      	subs	r2, r2, r3
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	6a1a      	ldr	r2, [r3, #32]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	441a      	add	r2, r3
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2203      	movs	r2, #3
 8005dd2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005dd6:	e006      	b.n	8005de6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f80f 	bl	8005e04 <USBH_CDC_ReceiveCallback>
      break;
 8005de6:	bf00      	nop
  }
}
 8005de8:	bf00      	nop
 8005dea:	3718      	adds	r7, #24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	4613      	mov	r3, r2
 8005e38:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005e40:	2302      	movs	r3, #2
 8005e42:	e029      	b.n	8005e98 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	79fa      	ldrb	r2, [r7, #7]
 8005e48:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 f81f 	bl	8005ea0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 fd97 	bl	80069c4 <USBH_LL_Init>

  return USBH_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005eac:	2300      	movs	r3, #0
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	e009      	b.n	8005ec6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	33e0      	adds	r3, #224	; 0xe0
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b0f      	cmp	r3, #15
 8005eca:	d9f2      	bls.n	8005eb2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	e009      	b.n	8005ee6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005edc:	2200      	movs	r2, #0
 8005ede:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eec:	d3f1      	bcc.n	8005ed2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2240      	movs	r2, #64	; 0x40
 8005f12:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d016      	beq.n	8005f8a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10e      	bne.n	8005f84 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005f6c:	1c59      	adds	r1, r3, #1
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	33de      	adds	r3, #222	; 0xde
 8005f78:	6839      	ldr	r1, [r7, #0]
 8005f7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	73fb      	strb	r3, [r7, #15]
 8005f82:	e004      	b.n	8005f8e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005f84:	2302      	movs	r3, #2
 8005f86:	73fb      	strb	r3, [r7, #15]
 8005f88:	e001      	b.n	8005f8e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005fb2:	78fa      	ldrb	r2, [r7, #3]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d204      	bcs.n	8005fc2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	78fa      	ldrb	r2, [r7, #3]
 8005fbc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005fc0:	e001      	b.n	8005fc6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	4608      	mov	r0, r1
 8005fde:	4611      	mov	r1, r2
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	70fb      	strb	r3, [r7, #3]
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	70bb      	strb	r3, [r7, #2]
 8005fea:	4613      	mov	r3, r2
 8005fec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005ffc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005ffe:	e025      	b.n	800604c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006000:	7dfb      	ldrb	r3, [r7, #23]
 8006002:	221a      	movs	r2, #26
 8006004:	fb02 f303 	mul.w	r3, r2, r3
 8006008:	3308      	adds	r3, #8
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	4413      	add	r3, r2
 800600e:	3302      	adds	r3, #2
 8006010:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	795b      	ldrb	r3, [r3, #5]
 8006016:	78fa      	ldrb	r2, [r7, #3]
 8006018:	429a      	cmp	r2, r3
 800601a:	d002      	beq.n	8006022 <USBH_FindInterface+0x4e>
 800601c:	78fb      	ldrb	r3, [r7, #3]
 800601e:	2bff      	cmp	r3, #255	; 0xff
 8006020:	d111      	bne.n	8006046 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006026:	78ba      	ldrb	r2, [r7, #2]
 8006028:	429a      	cmp	r2, r3
 800602a:	d002      	beq.n	8006032 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800602c:	78bb      	ldrb	r3, [r7, #2]
 800602e:	2bff      	cmp	r3, #255	; 0xff
 8006030:	d109      	bne.n	8006046 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006036:	787a      	ldrb	r2, [r7, #1]
 8006038:	429a      	cmp	r2, r3
 800603a:	d002      	beq.n	8006042 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800603c:	787b      	ldrb	r3, [r7, #1]
 800603e:	2bff      	cmp	r3, #255	; 0xff
 8006040:	d101      	bne.n	8006046 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006042:	7dfb      	ldrb	r3, [r7, #23]
 8006044:	e006      	b.n	8006054 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006046:	7dfb      	ldrb	r3, [r7, #23]
 8006048:	3301      	adds	r3, #1
 800604a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800604c:	7dfb      	ldrb	r3, [r7, #23]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d9d6      	bls.n	8006000 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006052:	23ff      	movs	r3, #255	; 0xff
}
 8006054:	4618      	mov	r0, r3
 8006056:	371c      	adds	r7, #28
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fce7 	bl	8006a3c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800606e:	2101      	movs	r1, #1
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fdbe 	bl	8006bf2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f804 	bl	80060c2 <USBH_HandleSof>
}
 80060ba:	bf00      	nop
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b082      	sub	sp, #8
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b0b      	cmp	r3, #11
 80060d2:	d10a      	bne.n	80060ea <USBH_HandleSof+0x28>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d005      	beq.n	80060ea <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	4798      	blx	r3
  }
}
 80060ea:	bf00      	nop
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006102:	bf00      	nop
}
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800611e:	bf00      	nop
}
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 fc7a 	bl	8006a72 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	791b      	ldrb	r3, [r3, #4]
 8006182:	4619      	mov	r1, r3
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fad1 	bl	800672c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	795b      	ldrb	r3, [r3, #5]
 800618e:	4619      	mov	r1, r3
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 facb 	bl	800672c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	789b      	ldrb	r3, [r3, #2]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d10f      	bne.n	80061d4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80061c6:	78fb      	ldrb	r3, [r7, #3]
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80061d4:	2200      	movs	r2, #0
 80061d6:	2100      	movs	r1, #0
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f805 	bl	80061e8 <USBH_CtlReq>
 80061de:	4603      	mov	r3, r0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	4613      	mov	r3, r2
 80061f4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80061f6:	2301      	movs	r3, #1
 80061f8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	789b      	ldrb	r3, [r3, #2]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d002      	beq.n	8006208 <USBH_CtlReq+0x20>
 8006202:	2b02      	cmp	r3, #2
 8006204:	d00f      	beq.n	8006226 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006206:	e027      	b.n	8006258 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	88fa      	ldrh	r2, [r7, #6]
 8006212:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2201      	movs	r2, #1
 8006218:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2202      	movs	r2, #2
 800621e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006220:	2301      	movs	r3, #1
 8006222:	75fb      	strb	r3, [r7, #23]
      break;
 8006224:	e018      	b.n	8006258 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 f81c 	bl	8006264 <USBH_HandleControl>
 800622c:	4603      	mov	r3, r0
 800622e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006230:	7dfb      	ldrb	r3, [r7, #23]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <USBH_CtlReq+0x54>
 8006236:	7dfb      	ldrb	r3, [r7, #23]
 8006238:	2b03      	cmp	r3, #3
 800623a:	d106      	bne.n	800624a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2201      	movs	r2, #1
 8006240:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	761a      	strb	r2, [r3, #24]
      break;
 8006248:	e005      	b.n	8006256 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800624a:	7dfb      	ldrb	r3, [r7, #23]
 800624c:	2b02      	cmp	r3, #2
 800624e:	d102      	bne.n	8006256 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2201      	movs	r2, #1
 8006254:	709a      	strb	r2, [r3, #2]
      break;
 8006256:	bf00      	nop
  }
  return status;
 8006258:	7dfb      	ldrb	r3, [r7, #23]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
	...

08006264 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af02      	add	r7, sp, #8
 800626a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800626c:	2301      	movs	r3, #1
 800626e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006270:	2300      	movs	r3, #0
 8006272:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	7e1b      	ldrb	r3, [r3, #24]
 8006278:	3b01      	subs	r3, #1
 800627a:	2b0a      	cmp	r3, #10
 800627c:	f200 8156 	bhi.w	800652c <USBH_HandleControl+0x2c8>
 8006280:	a201      	add	r2, pc, #4	; (adr r2, 8006288 <USBH_HandleControl+0x24>)
 8006282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006286:	bf00      	nop
 8006288:	080062b5 	.word	0x080062b5
 800628c:	080062cf 	.word	0x080062cf
 8006290:	08006339 	.word	0x08006339
 8006294:	0800635f 	.word	0x0800635f
 8006298:	08006397 	.word	0x08006397
 800629c:	080063c1 	.word	0x080063c1
 80062a0:	08006413 	.word	0x08006413
 80062a4:	08006435 	.word	0x08006435
 80062a8:	08006471 	.word	0x08006471
 80062ac:	08006497 	.word	0x08006497
 80062b0:	080064d5 	.word	0x080064d5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f103 0110 	add.w	r1, r3, #16
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	795b      	ldrb	r3, [r3, #5]
 80062be:	461a      	mov	r2, r3
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f943 	bl	800654c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2202      	movs	r2, #2
 80062ca:	761a      	strb	r2, [r3, #24]
      break;
 80062cc:	e139      	b.n	8006542 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	795b      	ldrb	r3, [r3, #5]
 80062d2:	4619      	mov	r1, r3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fc79 	bl	8006bcc <USBH_LL_GetURBState>
 80062da:	4603      	mov	r3, r0
 80062dc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80062de:	7bbb      	ldrb	r3, [r7, #14]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d11e      	bne.n	8006322 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	7c1b      	ldrb	r3, [r3, #16]
 80062e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80062ec:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	8adb      	ldrh	r3, [r3, #22]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00a      	beq.n	800630c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80062f6:	7b7b      	ldrb	r3, [r7, #13]
 80062f8:	2b80      	cmp	r3, #128	; 0x80
 80062fa:	d103      	bne.n	8006304 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2203      	movs	r2, #3
 8006300:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006302:	e115      	b.n	8006530 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2205      	movs	r2, #5
 8006308:	761a      	strb	r2, [r3, #24]
      break;
 800630a:	e111      	b.n	8006530 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800630c:	7b7b      	ldrb	r3, [r7, #13]
 800630e:	2b80      	cmp	r3, #128	; 0x80
 8006310:	d103      	bne.n	800631a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2209      	movs	r2, #9
 8006316:	761a      	strb	r2, [r3, #24]
      break;
 8006318:	e10a      	b.n	8006530 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2207      	movs	r2, #7
 800631e:	761a      	strb	r2, [r3, #24]
      break;
 8006320:	e106      	b.n	8006530 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006322:	7bbb      	ldrb	r3, [r7, #14]
 8006324:	2b04      	cmp	r3, #4
 8006326:	d003      	beq.n	8006330 <USBH_HandleControl+0xcc>
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	2b02      	cmp	r3, #2
 800632c:	f040 8100 	bne.w	8006530 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	220b      	movs	r2, #11
 8006334:	761a      	strb	r2, [r3, #24]
      break;
 8006336:	e0fb      	b.n	8006530 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800633e:	b29a      	uxth	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6899      	ldr	r1, [r3, #8]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	899a      	ldrh	r2, [r3, #12]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	791b      	ldrb	r3, [r3, #4]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f93a 	bl	80065ca <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2204      	movs	r2, #4
 800635a:	761a      	strb	r2, [r3, #24]
      break;
 800635c:	e0f1      	b.n	8006542 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	791b      	ldrb	r3, [r3, #4]
 8006362:	4619      	mov	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fc31 	bl	8006bcc <USBH_LL_GetURBState>
 800636a:	4603      	mov	r3, r0
 800636c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800636e:	7bbb      	ldrb	r3, [r7, #14]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d102      	bne.n	800637a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2209      	movs	r2, #9
 8006378:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800637a:	7bbb      	ldrb	r3, [r7, #14]
 800637c:	2b05      	cmp	r3, #5
 800637e:	d102      	bne.n	8006386 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006380:	2303      	movs	r3, #3
 8006382:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006384:	e0d6      	b.n	8006534 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006386:	7bbb      	ldrb	r3, [r7, #14]
 8006388:	2b04      	cmp	r3, #4
 800638a:	f040 80d3 	bne.w	8006534 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	220b      	movs	r2, #11
 8006392:	761a      	strb	r2, [r3, #24]
      break;
 8006394:	e0ce      	b.n	8006534 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6899      	ldr	r1, [r3, #8]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	899a      	ldrh	r2, [r3, #12]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	795b      	ldrb	r3, [r3, #5]
 80063a2:	2001      	movs	r0, #1
 80063a4:	9000      	str	r0, [sp, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f8ea 	bl	8006580 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2206      	movs	r2, #6
 80063bc:	761a      	strb	r2, [r3, #24]
      break;
 80063be:	e0c0      	b.n	8006542 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	795b      	ldrb	r3, [r3, #5]
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fc00 	bl	8006bcc <USBH_LL_GetURBState>
 80063cc:	4603      	mov	r3, r0
 80063ce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80063d0:	7bbb      	ldrb	r3, [r7, #14]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d103      	bne.n	80063de <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2207      	movs	r2, #7
 80063da:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80063dc:	e0ac      	b.n	8006538 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80063de:	7bbb      	ldrb	r3, [r7, #14]
 80063e0:	2b05      	cmp	r3, #5
 80063e2:	d105      	bne.n	80063f0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	220c      	movs	r2, #12
 80063e8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80063ea:	2303      	movs	r3, #3
 80063ec:	73fb      	strb	r3, [r7, #15]
      break;
 80063ee:	e0a3      	b.n	8006538 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80063f0:	7bbb      	ldrb	r3, [r7, #14]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d103      	bne.n	80063fe <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2205      	movs	r2, #5
 80063fa:	761a      	strb	r2, [r3, #24]
      break;
 80063fc:	e09c      	b.n	8006538 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80063fe:	7bbb      	ldrb	r3, [r7, #14]
 8006400:	2b04      	cmp	r3, #4
 8006402:	f040 8099 	bne.w	8006538 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	220b      	movs	r2, #11
 800640a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800640c:	2302      	movs	r3, #2
 800640e:	73fb      	strb	r3, [r7, #15]
      break;
 8006410:	e092      	b.n	8006538 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	791b      	ldrb	r3, [r3, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	2100      	movs	r1, #0
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f8d5 	bl	80065ca <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006426:	b29a      	uxth	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2208      	movs	r2, #8
 8006430:	761a      	strb	r2, [r3, #24]

      break;
 8006432:	e086      	b.n	8006542 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	791b      	ldrb	r3, [r3, #4]
 8006438:	4619      	mov	r1, r3
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fbc6 	bl	8006bcc <USBH_LL_GetURBState>
 8006440:	4603      	mov	r3, r0
 8006442:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006444:	7bbb      	ldrb	r3, [r7, #14]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d105      	bne.n	8006456 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	220d      	movs	r2, #13
 800644e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006454:	e072      	b.n	800653c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006456:	7bbb      	ldrb	r3, [r7, #14]
 8006458:	2b04      	cmp	r3, #4
 800645a:	d103      	bne.n	8006464 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	220b      	movs	r2, #11
 8006460:	761a      	strb	r2, [r3, #24]
      break;
 8006462:	e06b      	b.n	800653c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006464:	7bbb      	ldrb	r3, [r7, #14]
 8006466:	2b05      	cmp	r3, #5
 8006468:	d168      	bne.n	800653c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800646a:	2303      	movs	r3, #3
 800646c:	73fb      	strb	r3, [r7, #15]
      break;
 800646e:	e065      	b.n	800653c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	795b      	ldrb	r3, [r3, #5]
 8006474:	2201      	movs	r2, #1
 8006476:	9200      	str	r2, [sp, #0]
 8006478:	2200      	movs	r2, #0
 800647a:	2100      	movs	r1, #0
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f87f 	bl	8006580 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006488:	b29a      	uxth	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	220a      	movs	r2, #10
 8006492:	761a      	strb	r2, [r3, #24]
      break;
 8006494:	e055      	b.n	8006542 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	795b      	ldrb	r3, [r3, #5]
 800649a:	4619      	mov	r1, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fb95 	bl	8006bcc <USBH_LL_GetURBState>
 80064a2:	4603      	mov	r3, r0
 80064a4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80064a6:	7bbb      	ldrb	r3, [r7, #14]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d105      	bne.n	80064b8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	220d      	movs	r2, #13
 80064b4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80064b6:	e043      	b.n	8006540 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80064b8:	7bbb      	ldrb	r3, [r7, #14]
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d103      	bne.n	80064c6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2209      	movs	r2, #9
 80064c2:	761a      	strb	r2, [r3, #24]
      break;
 80064c4:	e03c      	b.n	8006540 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80064c6:	7bbb      	ldrb	r3, [r7, #14]
 80064c8:	2b04      	cmp	r3, #4
 80064ca:	d139      	bne.n	8006540 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	220b      	movs	r2, #11
 80064d0:	761a      	strb	r2, [r3, #24]
      break;
 80064d2:	e035      	b.n	8006540 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	7e5b      	ldrb	r3, [r3, #25]
 80064d8:	3301      	adds	r3, #1
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	765a      	strb	r2, [r3, #25]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	7e5b      	ldrb	r3, [r3, #25]
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d806      	bhi.n	80064f6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80064f4:	e025      	b.n	8006542 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80064fc:	2106      	movs	r1, #6
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	795b      	ldrb	r3, [r3, #5]
 800650c:	4619      	mov	r1, r3
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f90c 	bl	800672c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	791b      	ldrb	r3, [r3, #4]
 8006518:	4619      	mov	r1, r3
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f906 	bl	800672c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006526:	2302      	movs	r3, #2
 8006528:	73fb      	strb	r3, [r7, #15]
      break;
 800652a:	e00a      	b.n	8006542 <USBH_HandleControl+0x2de>

    default:
      break;
 800652c:	bf00      	nop
 800652e:	e008      	b.n	8006542 <USBH_HandleControl+0x2de>
      break;
 8006530:	bf00      	nop
 8006532:	e006      	b.n	8006542 <USBH_HandleControl+0x2de>
      break;
 8006534:	bf00      	nop
 8006536:	e004      	b.n	8006542 <USBH_HandleControl+0x2de>
      break;
 8006538:	bf00      	nop
 800653a:	e002      	b.n	8006542 <USBH_HandleControl+0x2de>
      break;
 800653c:	bf00      	nop
 800653e:	e000      	b.n	8006542 <USBH_HandleControl+0x2de>
      break;
 8006540:	bf00      	nop
  }

  return status;
 8006542:	7bfb      	ldrb	r3, [r7, #15]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af04      	add	r7, sp, #16
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	4613      	mov	r3, r2
 8006558:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800655a:	79f9      	ldrb	r1, [r7, #7]
 800655c:	2300      	movs	r3, #0
 800655e:	9303      	str	r3, [sp, #12]
 8006560:	2308      	movs	r3, #8
 8006562:	9302      	str	r3, [sp, #8]
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	9301      	str	r3, [sp, #4]
 8006568:	2300      	movs	r3, #0
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	2300      	movs	r3, #0
 800656e:	2200      	movs	r2, #0
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 fafa 	bl	8006b6a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b088      	sub	sp, #32
 8006584:	af04      	add	r7, sp, #16
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	4611      	mov	r1, r2
 800658c:	461a      	mov	r2, r3
 800658e:	460b      	mov	r3, r1
 8006590:	80fb      	strh	r3, [r7, #6]
 8006592:	4613      	mov	r3, r2
 8006594:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80065a4:	7979      	ldrb	r1, [r7, #5]
 80065a6:	7e3b      	ldrb	r3, [r7, #24]
 80065a8:	9303      	str	r3, [sp, #12]
 80065aa:	88fb      	ldrh	r3, [r7, #6]
 80065ac:	9302      	str	r3, [sp, #8]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	9301      	str	r3, [sp, #4]
 80065b2:	2301      	movs	r3, #1
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	2300      	movs	r3, #0
 80065b8:	2200      	movs	r2, #0
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 fad5 	bl	8006b6a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b088      	sub	sp, #32
 80065ce:	af04      	add	r7, sp, #16
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	4611      	mov	r1, r2
 80065d6:	461a      	mov	r2, r3
 80065d8:	460b      	mov	r3, r1
 80065da:	80fb      	strh	r3, [r7, #6]
 80065dc:	4613      	mov	r3, r2
 80065de:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80065e0:	7979      	ldrb	r1, [r7, #5]
 80065e2:	2300      	movs	r3, #0
 80065e4:	9303      	str	r3, [sp, #12]
 80065e6:	88fb      	ldrh	r3, [r7, #6]
 80065e8:	9302      	str	r3, [sp, #8]
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	9301      	str	r3, [sp, #4]
 80065ee:	2301      	movs	r3, #1
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	2300      	movs	r3, #0
 80065f4:	2201      	movs	r2, #1
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 fab7 	bl	8006b6a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80065fc:	2300      	movs	r3, #0

}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b088      	sub	sp, #32
 800660a:	af04      	add	r7, sp, #16
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	60b9      	str	r1, [r7, #8]
 8006610:	4611      	mov	r1, r2
 8006612:	461a      	mov	r2, r3
 8006614:	460b      	mov	r3, r1
 8006616:	80fb      	strh	r3, [r7, #6]
 8006618:	4613      	mov	r3, r2
 800661a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800662a:	7979      	ldrb	r1, [r7, #5]
 800662c:	7e3b      	ldrb	r3, [r7, #24]
 800662e:	9303      	str	r3, [sp, #12]
 8006630:	88fb      	ldrh	r3, [r7, #6]
 8006632:	9302      	str	r3, [sp, #8]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	9301      	str	r3, [sp, #4]
 8006638:	2301      	movs	r3, #1
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	2302      	movs	r3, #2
 800663e:	2200      	movs	r2, #0
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 fa92 	bl	8006b6a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b088      	sub	sp, #32
 8006654:	af04      	add	r7, sp, #16
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	4611      	mov	r1, r2
 800665c:	461a      	mov	r2, r3
 800665e:	460b      	mov	r3, r1
 8006660:	80fb      	strh	r3, [r7, #6]
 8006662:	4613      	mov	r3, r2
 8006664:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006666:	7979      	ldrb	r1, [r7, #5]
 8006668:	2300      	movs	r3, #0
 800666a:	9303      	str	r3, [sp, #12]
 800666c:	88fb      	ldrh	r3, [r7, #6]
 800666e:	9302      	str	r3, [sp, #8]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	9301      	str	r3, [sp, #4]
 8006674:	2301      	movs	r3, #1
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	2302      	movs	r3, #2
 800667a:	2201      	movs	r2, #1
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 fa74 	bl	8006b6a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af04      	add	r7, sp, #16
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	4608      	mov	r0, r1
 8006696:	4611      	mov	r1, r2
 8006698:	461a      	mov	r2, r3
 800669a:	4603      	mov	r3, r0
 800669c:	70fb      	strb	r3, [r7, #3]
 800669e:	460b      	mov	r3, r1
 80066a0:	70bb      	strb	r3, [r7, #2]
 80066a2:	4613      	mov	r3, r2
 80066a4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80066a6:	7878      	ldrb	r0, [r7, #1]
 80066a8:	78ba      	ldrb	r2, [r7, #2]
 80066aa:	78f9      	ldrb	r1, [r7, #3]
 80066ac:	8b3b      	ldrh	r3, [r7, #24]
 80066ae:	9302      	str	r3, [sp, #8]
 80066b0:	7d3b      	ldrb	r3, [r7, #20]
 80066b2:	9301      	str	r3, [sp, #4]
 80066b4:	7c3b      	ldrb	r3, [r7, #16]
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	4603      	mov	r3, r0
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fa07 	bl	8006ace <USBH_LL_OpenPipe>

  return USBH_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b082      	sub	sp, #8
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	460b      	mov	r3, r1
 80066d4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80066d6:	78fb      	ldrb	r3, [r7, #3]
 80066d8:	4619      	mov	r1, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fa26 	bl	8006b2c <USBH_LL_ClosePipe>

  return USBH_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b084      	sub	sp, #16
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	460b      	mov	r3, r1
 80066f4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f836 	bl	8006768 <USBH_GetFreePipe>
 80066fc:	4603      	mov	r3, r0
 80066fe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006700:	89fb      	ldrh	r3, [r7, #14]
 8006702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006706:	4293      	cmp	r3, r2
 8006708:	d00a      	beq.n	8006720 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800670a:	78fa      	ldrb	r2, [r7, #3]
 800670c:	89fb      	ldrh	r3, [r7, #14]
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006716:	6879      	ldr	r1, [r7, #4]
 8006718:	33e0      	adds	r3, #224	; 0xe0
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	440b      	add	r3, r1
 800671e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006720:	89fb      	ldrh	r3, [r7, #14]
 8006722:	b2db      	uxtb	r3, r3
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	2b0f      	cmp	r3, #15
 800673c:	d80d      	bhi.n	800675a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800673e:	78fb      	ldrb	r3, [r7, #3]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	33e0      	adds	r3, #224	; 0xe0
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	78fb      	ldrb	r3, [r7, #3]
 800674c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	33e0      	adds	r3, #224	; 0xe0
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	440b      	add	r3, r1
 8006758:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006774:	2300      	movs	r3, #0
 8006776:	73fb      	strb	r3, [r7, #15]
 8006778:	e00f      	b.n	800679a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800677a:	7bfb      	ldrb	r3, [r7, #15]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	33e0      	adds	r3, #224	; 0xe0
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d102      	bne.n	8006794 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800678e:	7bfb      	ldrb	r3, [r7, #15]
 8006790:	b29b      	uxth	r3, r3
 8006792:	e007      	b.n	80067a4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006794:	7bfb      	ldrb	r3, [r7, #15]
 8006796:	3301      	adds	r3, #1
 8006798:	73fb      	strb	r3, [r7, #15]
 800679a:	7bfb      	ldrb	r3, [r7, #15]
 800679c:	2b0f      	cmp	r3, #15
 800679e:	d9ec      	bls.n	800677a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80067a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80067b4:	2201      	movs	r2, #1
 80067b6:	490e      	ldr	r1, [pc, #56]	; (80067f0 <MX_USB_HOST_Init+0x40>)
 80067b8:	480e      	ldr	r0, [pc, #56]	; (80067f4 <MX_USB_HOST_Init+0x44>)
 80067ba:	f7ff fb37 	bl	8005e2c <USBH_Init>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80067c4:	f7fa f972 	bl	8000aac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80067c8:	490b      	ldr	r1, [pc, #44]	; (80067f8 <MX_USB_HOST_Init+0x48>)
 80067ca:	480a      	ldr	r0, [pc, #40]	; (80067f4 <MX_USB_HOST_Init+0x44>)
 80067cc:	f7ff fbbc 	bl	8005f48 <USBH_RegisterClass>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80067d6:	f7fa f969 	bl	8000aac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80067da:	4806      	ldr	r0, [pc, #24]	; (80067f4 <MX_USB_HOST_Init+0x44>)
 80067dc:	f7ff fc40 	bl	8006060 <USBH_Start>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80067e6:	f7fa f961 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80067ea:	bf00      	nop
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	080067fd 	.word	0x080067fd
 80067f4:	20000160 	.word	0x20000160
 80067f8:	2000000c 	.word	0x2000000c

080067fc <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006808:	78fb      	ldrb	r3, [r7, #3]
 800680a:	3b01      	subs	r3, #1
 800680c:	2b04      	cmp	r3, #4
 800680e:	d819      	bhi.n	8006844 <USBH_UserProcess+0x48>
 8006810:	a201      	add	r2, pc, #4	; (adr r2, 8006818 <USBH_UserProcess+0x1c>)
 8006812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006816:	bf00      	nop
 8006818:	08006845 	.word	0x08006845
 800681c:	08006835 	.word	0x08006835
 8006820:	08006845 	.word	0x08006845
 8006824:	0800683d 	.word	0x0800683d
 8006828:	0800682d 	.word	0x0800682d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800682c:	4b09      	ldr	r3, [pc, #36]	; (8006854 <USBH_UserProcess+0x58>)
 800682e:	2203      	movs	r2, #3
 8006830:	701a      	strb	r2, [r3, #0]
  break;
 8006832:	e008      	b.n	8006846 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006834:	4b07      	ldr	r3, [pc, #28]	; (8006854 <USBH_UserProcess+0x58>)
 8006836:	2202      	movs	r2, #2
 8006838:	701a      	strb	r2, [r3, #0]
  break;
 800683a:	e004      	b.n	8006846 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800683c:	4b05      	ldr	r3, [pc, #20]	; (8006854 <USBH_UserProcess+0x58>)
 800683e:	2201      	movs	r2, #1
 8006840:	701a      	strb	r2, [r3, #0]
  break;
 8006842:	e000      	b.n	8006846 <USBH_UserProcess+0x4a>

  default:
  break;
 8006844:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006846:	bf00      	nop
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	20000538 	.word	0x20000538

08006858 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b08a      	sub	sp, #40	; 0x28
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006860:	f107 0314 	add.w	r3, r7, #20
 8006864:	2200      	movs	r2, #0
 8006866:	601a      	str	r2, [r3, #0]
 8006868:	605a      	str	r2, [r3, #4]
 800686a:	609a      	str	r2, [r3, #8]
 800686c:	60da      	str	r2, [r3, #12]
 800686e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006878:	d147      	bne.n	800690a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800687a:	2300      	movs	r3, #0
 800687c:	613b      	str	r3, [r7, #16]
 800687e:	4b25      	ldr	r3, [pc, #148]	; (8006914 <HAL_HCD_MspInit+0xbc>)
 8006880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006882:	4a24      	ldr	r2, [pc, #144]	; (8006914 <HAL_HCD_MspInit+0xbc>)
 8006884:	f043 0301 	orr.w	r3, r3, #1
 8006888:	6313      	str	r3, [r2, #48]	; 0x30
 800688a:	4b22      	ldr	r3, [pc, #136]	; (8006914 <HAL_HCD_MspInit+0xbc>)
 800688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	613b      	str	r3, [r7, #16]
 8006894:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800689a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800689c:	2300      	movs	r3, #0
 800689e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068a0:	2300      	movs	r3, #0
 80068a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80068a4:	f107 0314 	add.w	r3, r7, #20
 80068a8:	4619      	mov	r1, r3
 80068aa:	481b      	ldr	r0, [pc, #108]	; (8006918 <HAL_HCD_MspInit+0xc0>)
 80068ac:	f7fa fd0c 	bl	80012c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80068b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80068b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068b6:	2302      	movs	r3, #2
 80068b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068ba:	2300      	movs	r3, #0
 80068bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068be:	2300      	movs	r3, #0
 80068c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80068c2:	230a      	movs	r3, #10
 80068c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068c6:	f107 0314 	add.w	r3, r7, #20
 80068ca:	4619      	mov	r1, r3
 80068cc:	4812      	ldr	r0, [pc, #72]	; (8006918 <HAL_HCD_MspInit+0xc0>)
 80068ce:	f7fa fcfb 	bl	80012c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80068d2:	4b10      	ldr	r3, [pc, #64]	; (8006914 <HAL_HCD_MspInit+0xbc>)
 80068d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d6:	4a0f      	ldr	r2, [pc, #60]	; (8006914 <HAL_HCD_MspInit+0xbc>)
 80068d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068dc:	6353      	str	r3, [r2, #52]	; 0x34
 80068de:	2300      	movs	r3, #0
 80068e0:	60fb      	str	r3, [r7, #12]
 80068e2:	4b0c      	ldr	r3, [pc, #48]	; (8006914 <HAL_HCD_MspInit+0xbc>)
 80068e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e6:	4a0b      	ldr	r2, [pc, #44]	; (8006914 <HAL_HCD_MspInit+0xbc>)
 80068e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068ec:	6453      	str	r3, [r2, #68]	; 0x44
 80068ee:	4b09      	ldr	r3, [pc, #36]	; (8006914 <HAL_HCD_MspInit+0xbc>)
 80068f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80068fa:	2200      	movs	r2, #0
 80068fc:	2100      	movs	r1, #0
 80068fe:	2043      	movs	r0, #67	; 0x43
 8006900:	f7fa fcab 	bl	800125a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006904:	2043      	movs	r0, #67	; 0x43
 8006906:	f7fa fcc4 	bl	8001292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800690a:	bf00      	nop
 800690c:	3728      	adds	r7, #40	; 0x28
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	40023800 	.word	0x40023800
 8006918:	40020000 	.word	0x40020000

0800691c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800692a:	4618      	mov	r0, r3
 800692c:	f7ff fbb7 	bl	800609e <USBH_LL_IncTimer>
}
 8006930:	bf00      	nop
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006946:	4618      	mov	r0, r3
 8006948:	f7ff fbef 	bl	800612a <USBH_LL_Connect>
}
 800694c:	bf00      	nop
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006962:	4618      	mov	r0, r3
 8006964:	f7ff fbf8 	bl	8006158 <USBH_LL_Disconnect>
}
 8006968:	bf00      	nop
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	460b      	mov	r3, r1
 800697a:	70fb      	strb	r3, [r7, #3]
 800697c:	4613      	mov	r3, r2
 800697e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff fba9 	bl	80060f2 <USBH_LL_PortEnabled>
}
 80069a0:	bf00      	nop
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7ff fba9 	bl	800610e <USBH_LL_PortDisabled>
}
 80069bc:	bf00      	nop
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d12a      	bne.n	8006a2c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80069d6:	4a18      	ldr	r2, [pc, #96]	; (8006a38 <USBH_LL_Init+0x74>)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a15      	ldr	r2, [pc, #84]	; (8006a38 <USBH_LL_Init+0x74>)
 80069e2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80069e6:	4b14      	ldr	r3, [pc, #80]	; (8006a38 <USBH_LL_Init+0x74>)
 80069e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80069ec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80069ee:	4b12      	ldr	r3, [pc, #72]	; (8006a38 <USBH_LL_Init+0x74>)
 80069f0:	2208      	movs	r2, #8
 80069f2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80069f4:	4b10      	ldr	r3, [pc, #64]	; (8006a38 <USBH_LL_Init+0x74>)
 80069f6:	2201      	movs	r2, #1
 80069f8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80069fa:	4b0f      	ldr	r3, [pc, #60]	; (8006a38 <USBH_LL_Init+0x74>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006a00:	4b0d      	ldr	r3, [pc, #52]	; (8006a38 <USBH_LL_Init+0x74>)
 8006a02:	2202      	movs	r2, #2
 8006a04:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006a06:	4b0c      	ldr	r3, [pc, #48]	; (8006a38 <USBH_LL_Init+0x74>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006a0c:	480a      	ldr	r0, [pc, #40]	; (8006a38 <USBH_LL_Init+0x74>)
 8006a0e:	f7fa fe34 	bl	800167a <HAL_HCD_Init>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006a18:	f7fa f848 	bl	8000aac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006a1c:	4806      	ldr	r0, [pc, #24]	; (8006a38 <USBH_LL_Init+0x74>)
 8006a1e:	f7fb fa0a 	bl	8001e36 <HAL_HCD_GetCurrentFrame>
 8006a22:	4603      	mov	r3, r0
 8006a24:	4619      	mov	r1, r3
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff fb2a 	bl	8006080 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	2000053c 	.word	0x2000053c

08006a3c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fb f987 	bl	8001d66 <HAL_HCD_Start>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 f90e 	bl	8006c80 <USBH_Get_USB_Status>
 8006a64:	4603      	mov	r3, r0
 8006a66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a68:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7fb f98f 	bl	8001dac <HAL_HCD_Stop>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006a92:	7bfb      	ldrb	r3, [r7, #15]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 f8f3 	bl	8006c80 <USBH_Get_USB_Status>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006aba:	78fa      	ldrb	r2, [r7, #3]
 8006abc:	4611      	mov	r1, r2
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fb f9a5 	bl	8001e0e <HAL_HCD_HC_GetXferCount>
 8006ac4:	4603      	mov	r3, r0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006ace:	b590      	push	{r4, r7, lr}
 8006ad0:	b089      	sub	sp, #36	; 0x24
 8006ad2:	af04      	add	r7, sp, #16
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	4608      	mov	r0, r1
 8006ad8:	4611      	mov	r1, r2
 8006ada:	461a      	mov	r2, r3
 8006adc:	4603      	mov	r3, r0
 8006ade:	70fb      	strb	r3, [r7, #3]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	70bb      	strb	r3, [r7, #2]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006aec:	2300      	movs	r3, #0
 8006aee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006af6:	787c      	ldrb	r4, [r7, #1]
 8006af8:	78ba      	ldrb	r2, [r7, #2]
 8006afa:	78f9      	ldrb	r1, [r7, #3]
 8006afc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006afe:	9302      	str	r3, [sp, #8]
 8006b00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b04:	9301      	str	r3, [sp, #4]
 8006b06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	4623      	mov	r3, r4
 8006b0e:	f7fa fe16 	bl	800173e <HAL_HCD_HC_Init>
 8006b12:	4603      	mov	r3, r0
 8006b14:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 f8b1 	bl	8006c80 <USBH_Get_USB_Status>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b22:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd90      	pop	{r4, r7, pc}

08006b2c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	460b      	mov	r3, r1
 8006b36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006b46:	78fa      	ldrb	r2, [r7, #3]
 8006b48:	4611      	mov	r1, r2
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7fa fe86 	bl	800185c <HAL_HCD_HC_Halt>
 8006b50:	4603      	mov	r3, r0
 8006b52:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 f892 	bl	8006c80 <USBH_Get_USB_Status>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b60:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006b6a:	b590      	push	{r4, r7, lr}
 8006b6c:	b089      	sub	sp, #36	; 0x24
 8006b6e:	af04      	add	r7, sp, #16
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	4608      	mov	r0, r1
 8006b74:	4611      	mov	r1, r2
 8006b76:	461a      	mov	r2, r3
 8006b78:	4603      	mov	r3, r0
 8006b7a:	70fb      	strb	r3, [r7, #3]
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	70bb      	strb	r3, [r7, #2]
 8006b80:	4613      	mov	r3, r2
 8006b82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006b92:	787c      	ldrb	r4, [r7, #1]
 8006b94:	78ba      	ldrb	r2, [r7, #2]
 8006b96:	78f9      	ldrb	r1, [r7, #3]
 8006b98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b9c:	9303      	str	r3, [sp, #12]
 8006b9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006ba0:	9302      	str	r3, [sp, #8]
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	9301      	str	r3, [sp, #4]
 8006ba6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	4623      	mov	r3, r4
 8006bae:	f7fa fe79 	bl	80018a4 <HAL_HCD_HC_SubmitRequest>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006bb6:	7bfb      	ldrb	r3, [r7, #15]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 f861 	bl	8006c80 <USBH_Get_USB_Status>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd90      	pop	{r4, r7, pc}

08006bcc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006bde:	78fa      	ldrb	r2, [r7, #3]
 8006be0:	4611      	mov	r1, r2
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7fb f8ff 	bl	8001de6 <HAL_HCD_HC_GetURBState>
 8006be8:	4603      	mov	r3, r0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b082      	sub	sp, #8
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d103      	bne.n	8006c10 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006c08:	78fb      	ldrb	r3, [r7, #3]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 f864 	bl	8006cd8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006c10:	20c8      	movs	r0, #200	; 0xc8
 8006c12:	f7fa fa23 	bl	800105c <HAL_Delay>
  return USBH_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	460b      	mov	r3, r1
 8006c2a:	70fb      	strb	r3, [r7, #3]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006c36:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006c38:	78fb      	ldrb	r3, [r7, #3]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	212c      	movs	r1, #44	; 0x2c
 8006c3e:	fb01 f303 	mul.w	r3, r1, r3
 8006c42:	4413      	add	r3, r2
 8006c44:	333b      	adds	r3, #59	; 0x3b
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d009      	beq.n	8006c60 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006c4c:	78fb      	ldrb	r3, [r7, #3]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	212c      	movs	r1, #44	; 0x2c
 8006c52:	fb01 f303 	mul.w	r3, r1, r3
 8006c56:	4413      	add	r3, r2
 8006c58:	3354      	adds	r3, #84	; 0x54
 8006c5a:	78ba      	ldrb	r2, [r7, #2]
 8006c5c:	701a      	strb	r2, [r3, #0]
 8006c5e:	e008      	b.n	8006c72 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006c60:	78fb      	ldrb	r3, [r7, #3]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	212c      	movs	r1, #44	; 0x2c
 8006c66:	fb01 f303 	mul.w	r3, r1, r3
 8006c6a:	4413      	add	r3, r2
 8006c6c:	3355      	adds	r3, #85	; 0x55
 8006c6e:	78ba      	ldrb	r2, [r7, #2]
 8006c70:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006c8e:	79fb      	ldrb	r3, [r7, #7]
 8006c90:	2b03      	cmp	r3, #3
 8006c92:	d817      	bhi.n	8006cc4 <USBH_Get_USB_Status+0x44>
 8006c94:	a201      	add	r2, pc, #4	; (adr r2, 8006c9c <USBH_Get_USB_Status+0x1c>)
 8006c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9a:	bf00      	nop
 8006c9c:	08006cad 	.word	0x08006cad
 8006ca0:	08006cb3 	.word	0x08006cb3
 8006ca4:	08006cb9 	.word	0x08006cb9
 8006ca8:	08006cbf 	.word	0x08006cbf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	73fb      	strb	r3, [r7, #15]
    break;
 8006cb0:	e00b      	b.n	8006cca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	73fb      	strb	r3, [r7, #15]
    break;
 8006cb6:	e008      	b.n	8006cca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	73fb      	strb	r3, [r7, #15]
    break;
 8006cbc:	e005      	b.n	8006cca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	73fb      	strb	r3, [r7, #15]
    break;
 8006cc2:	e002      	b.n	8006cca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8006cc8:	bf00      	nop
  }
  return usb_status;
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	4603      	mov	r3, r0
 8006ce0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8006ce2:	79fb      	ldrb	r3, [r7, #7]
 8006ce4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006ce6:	79fb      	ldrb	r3, [r7, #7]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d102      	bne.n	8006cf2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8006cec:	2300      	movs	r3, #0
 8006cee:	73fb      	strb	r3, [r7, #15]
 8006cf0:	e001      	b.n	8006cf6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	4803      	ldr	r0, [pc, #12]	; (8006d0c <MX_DriverVbusFS+0x34>)
 8006cfe:	f7fa fc7f 	bl	8001600 <HAL_GPIO_WritePin>
}
 8006d02:	bf00      	nop
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	40020800 	.word	0x40020800

08006d10 <__errno>:
 8006d10:	4b01      	ldr	r3, [pc, #4]	; (8006d18 <__errno+0x8>)
 8006d12:	6818      	ldr	r0, [r3, #0]
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	2000002c 	.word	0x2000002c

08006d1c <__libc_init_array>:
 8006d1c:	b570      	push	{r4, r5, r6, lr}
 8006d1e:	4d0d      	ldr	r5, [pc, #52]	; (8006d54 <__libc_init_array+0x38>)
 8006d20:	4c0d      	ldr	r4, [pc, #52]	; (8006d58 <__libc_init_array+0x3c>)
 8006d22:	1b64      	subs	r4, r4, r5
 8006d24:	10a4      	asrs	r4, r4, #2
 8006d26:	2600      	movs	r6, #0
 8006d28:	42a6      	cmp	r6, r4
 8006d2a:	d109      	bne.n	8006d40 <__libc_init_array+0x24>
 8006d2c:	4d0b      	ldr	r5, [pc, #44]	; (8006d5c <__libc_init_array+0x40>)
 8006d2e:	4c0c      	ldr	r4, [pc, #48]	; (8006d60 <__libc_init_array+0x44>)
 8006d30:	f001 f88e 	bl	8007e50 <_init>
 8006d34:	1b64      	subs	r4, r4, r5
 8006d36:	10a4      	asrs	r4, r4, #2
 8006d38:	2600      	movs	r6, #0
 8006d3a:	42a6      	cmp	r6, r4
 8006d3c:	d105      	bne.n	8006d4a <__libc_init_array+0x2e>
 8006d3e:	bd70      	pop	{r4, r5, r6, pc}
 8006d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d44:	4798      	blx	r3
 8006d46:	3601      	adds	r6, #1
 8006d48:	e7ee      	b.n	8006d28 <__libc_init_array+0xc>
 8006d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d4e:	4798      	blx	r3
 8006d50:	3601      	adds	r6, #1
 8006d52:	e7f2      	b.n	8006d3a <__libc_init_array+0x1e>
 8006d54:	08007fd4 	.word	0x08007fd4
 8006d58:	08007fd4 	.word	0x08007fd4
 8006d5c:	08007fd4 	.word	0x08007fd4
 8006d60:	08007fd8 	.word	0x08007fd8

08006d64 <malloc>:
 8006d64:	4b02      	ldr	r3, [pc, #8]	; (8006d70 <malloc+0xc>)
 8006d66:	4601      	mov	r1, r0
 8006d68:	6818      	ldr	r0, [r3, #0]
 8006d6a:	f000 b87f 	b.w	8006e6c <_malloc_r>
 8006d6e:	bf00      	nop
 8006d70:	2000002c 	.word	0x2000002c

08006d74 <free>:
 8006d74:	4b02      	ldr	r3, [pc, #8]	; (8006d80 <free+0xc>)
 8006d76:	4601      	mov	r1, r0
 8006d78:	6818      	ldr	r0, [r3, #0]
 8006d7a:	f000 b80b 	b.w	8006d94 <_free_r>
 8006d7e:	bf00      	nop
 8006d80:	2000002c 	.word	0x2000002c

08006d84 <memset>:
 8006d84:	4402      	add	r2, r0
 8006d86:	4603      	mov	r3, r0
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d100      	bne.n	8006d8e <memset+0xa>
 8006d8c:	4770      	bx	lr
 8006d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d92:	e7f9      	b.n	8006d88 <memset+0x4>

08006d94 <_free_r>:
 8006d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d96:	2900      	cmp	r1, #0
 8006d98:	d044      	beq.n	8006e24 <_free_r+0x90>
 8006d9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d9e:	9001      	str	r0, [sp, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f1a1 0404 	sub.w	r4, r1, #4
 8006da6:	bfb8      	it	lt
 8006da8:	18e4      	addlt	r4, r4, r3
 8006daa:	f000 f97f 	bl	80070ac <__malloc_lock>
 8006dae:	4a1e      	ldr	r2, [pc, #120]	; (8006e28 <_free_r+0x94>)
 8006db0:	9801      	ldr	r0, [sp, #4]
 8006db2:	6813      	ldr	r3, [r2, #0]
 8006db4:	b933      	cbnz	r3, 8006dc4 <_free_r+0x30>
 8006db6:	6063      	str	r3, [r4, #4]
 8006db8:	6014      	str	r4, [r2, #0]
 8006dba:	b003      	add	sp, #12
 8006dbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006dc0:	f000 b97a 	b.w	80070b8 <__malloc_unlock>
 8006dc4:	42a3      	cmp	r3, r4
 8006dc6:	d908      	bls.n	8006dda <_free_r+0x46>
 8006dc8:	6825      	ldr	r5, [r4, #0]
 8006dca:	1961      	adds	r1, r4, r5
 8006dcc:	428b      	cmp	r3, r1
 8006dce:	bf01      	itttt	eq
 8006dd0:	6819      	ldreq	r1, [r3, #0]
 8006dd2:	685b      	ldreq	r3, [r3, #4]
 8006dd4:	1949      	addeq	r1, r1, r5
 8006dd6:	6021      	streq	r1, [r4, #0]
 8006dd8:	e7ed      	b.n	8006db6 <_free_r+0x22>
 8006dda:	461a      	mov	r2, r3
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	b10b      	cbz	r3, 8006de4 <_free_r+0x50>
 8006de0:	42a3      	cmp	r3, r4
 8006de2:	d9fa      	bls.n	8006dda <_free_r+0x46>
 8006de4:	6811      	ldr	r1, [r2, #0]
 8006de6:	1855      	adds	r5, r2, r1
 8006de8:	42a5      	cmp	r5, r4
 8006dea:	d10b      	bne.n	8006e04 <_free_r+0x70>
 8006dec:	6824      	ldr	r4, [r4, #0]
 8006dee:	4421      	add	r1, r4
 8006df0:	1854      	adds	r4, r2, r1
 8006df2:	42a3      	cmp	r3, r4
 8006df4:	6011      	str	r1, [r2, #0]
 8006df6:	d1e0      	bne.n	8006dba <_free_r+0x26>
 8006df8:	681c      	ldr	r4, [r3, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	6053      	str	r3, [r2, #4]
 8006dfe:	4421      	add	r1, r4
 8006e00:	6011      	str	r1, [r2, #0]
 8006e02:	e7da      	b.n	8006dba <_free_r+0x26>
 8006e04:	d902      	bls.n	8006e0c <_free_r+0x78>
 8006e06:	230c      	movs	r3, #12
 8006e08:	6003      	str	r3, [r0, #0]
 8006e0a:	e7d6      	b.n	8006dba <_free_r+0x26>
 8006e0c:	6825      	ldr	r5, [r4, #0]
 8006e0e:	1961      	adds	r1, r4, r5
 8006e10:	428b      	cmp	r3, r1
 8006e12:	bf04      	itt	eq
 8006e14:	6819      	ldreq	r1, [r3, #0]
 8006e16:	685b      	ldreq	r3, [r3, #4]
 8006e18:	6063      	str	r3, [r4, #4]
 8006e1a:	bf04      	itt	eq
 8006e1c:	1949      	addeq	r1, r1, r5
 8006e1e:	6021      	streq	r1, [r4, #0]
 8006e20:	6054      	str	r4, [r2, #4]
 8006e22:	e7ca      	b.n	8006dba <_free_r+0x26>
 8006e24:	b003      	add	sp, #12
 8006e26:	bd30      	pop	{r4, r5, pc}
 8006e28:	20000840 	.word	0x20000840

08006e2c <sbrk_aligned>:
 8006e2c:	b570      	push	{r4, r5, r6, lr}
 8006e2e:	4e0e      	ldr	r6, [pc, #56]	; (8006e68 <sbrk_aligned+0x3c>)
 8006e30:	460c      	mov	r4, r1
 8006e32:	6831      	ldr	r1, [r6, #0]
 8006e34:	4605      	mov	r5, r0
 8006e36:	b911      	cbnz	r1, 8006e3e <sbrk_aligned+0x12>
 8006e38:	f000 f8f8 	bl	800702c <_sbrk_r>
 8006e3c:	6030      	str	r0, [r6, #0]
 8006e3e:	4621      	mov	r1, r4
 8006e40:	4628      	mov	r0, r5
 8006e42:	f000 f8f3 	bl	800702c <_sbrk_r>
 8006e46:	1c43      	adds	r3, r0, #1
 8006e48:	d00a      	beq.n	8006e60 <sbrk_aligned+0x34>
 8006e4a:	1cc4      	adds	r4, r0, #3
 8006e4c:	f024 0403 	bic.w	r4, r4, #3
 8006e50:	42a0      	cmp	r0, r4
 8006e52:	d007      	beq.n	8006e64 <sbrk_aligned+0x38>
 8006e54:	1a21      	subs	r1, r4, r0
 8006e56:	4628      	mov	r0, r5
 8006e58:	f000 f8e8 	bl	800702c <_sbrk_r>
 8006e5c:	3001      	adds	r0, #1
 8006e5e:	d101      	bne.n	8006e64 <sbrk_aligned+0x38>
 8006e60:	f04f 34ff 	mov.w	r4, #4294967295
 8006e64:	4620      	mov	r0, r4
 8006e66:	bd70      	pop	{r4, r5, r6, pc}
 8006e68:	20000844 	.word	0x20000844

08006e6c <_malloc_r>:
 8006e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e70:	1ccd      	adds	r5, r1, #3
 8006e72:	f025 0503 	bic.w	r5, r5, #3
 8006e76:	3508      	adds	r5, #8
 8006e78:	2d0c      	cmp	r5, #12
 8006e7a:	bf38      	it	cc
 8006e7c:	250c      	movcc	r5, #12
 8006e7e:	2d00      	cmp	r5, #0
 8006e80:	4607      	mov	r7, r0
 8006e82:	db01      	blt.n	8006e88 <_malloc_r+0x1c>
 8006e84:	42a9      	cmp	r1, r5
 8006e86:	d905      	bls.n	8006e94 <_malloc_r+0x28>
 8006e88:	230c      	movs	r3, #12
 8006e8a:	603b      	str	r3, [r7, #0]
 8006e8c:	2600      	movs	r6, #0
 8006e8e:	4630      	mov	r0, r6
 8006e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e94:	4e2e      	ldr	r6, [pc, #184]	; (8006f50 <_malloc_r+0xe4>)
 8006e96:	f000 f909 	bl	80070ac <__malloc_lock>
 8006e9a:	6833      	ldr	r3, [r6, #0]
 8006e9c:	461c      	mov	r4, r3
 8006e9e:	bb34      	cbnz	r4, 8006eee <_malloc_r+0x82>
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	f7ff ffc2 	bl	8006e2c <sbrk_aligned>
 8006ea8:	1c43      	adds	r3, r0, #1
 8006eaa:	4604      	mov	r4, r0
 8006eac:	d14d      	bne.n	8006f4a <_malloc_r+0xde>
 8006eae:	6834      	ldr	r4, [r6, #0]
 8006eb0:	4626      	mov	r6, r4
 8006eb2:	2e00      	cmp	r6, #0
 8006eb4:	d140      	bne.n	8006f38 <_malloc_r+0xcc>
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	4631      	mov	r1, r6
 8006eba:	4638      	mov	r0, r7
 8006ebc:	eb04 0803 	add.w	r8, r4, r3
 8006ec0:	f000 f8b4 	bl	800702c <_sbrk_r>
 8006ec4:	4580      	cmp	r8, r0
 8006ec6:	d13a      	bne.n	8006f3e <_malloc_r+0xd2>
 8006ec8:	6821      	ldr	r1, [r4, #0]
 8006eca:	3503      	adds	r5, #3
 8006ecc:	1a6d      	subs	r5, r5, r1
 8006ece:	f025 0503 	bic.w	r5, r5, #3
 8006ed2:	3508      	adds	r5, #8
 8006ed4:	2d0c      	cmp	r5, #12
 8006ed6:	bf38      	it	cc
 8006ed8:	250c      	movcc	r5, #12
 8006eda:	4629      	mov	r1, r5
 8006edc:	4638      	mov	r0, r7
 8006ede:	f7ff ffa5 	bl	8006e2c <sbrk_aligned>
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	d02b      	beq.n	8006f3e <_malloc_r+0xd2>
 8006ee6:	6823      	ldr	r3, [r4, #0]
 8006ee8:	442b      	add	r3, r5
 8006eea:	6023      	str	r3, [r4, #0]
 8006eec:	e00e      	b.n	8006f0c <_malloc_r+0xa0>
 8006eee:	6822      	ldr	r2, [r4, #0]
 8006ef0:	1b52      	subs	r2, r2, r5
 8006ef2:	d41e      	bmi.n	8006f32 <_malloc_r+0xc6>
 8006ef4:	2a0b      	cmp	r2, #11
 8006ef6:	d916      	bls.n	8006f26 <_malloc_r+0xba>
 8006ef8:	1961      	adds	r1, r4, r5
 8006efa:	42a3      	cmp	r3, r4
 8006efc:	6025      	str	r5, [r4, #0]
 8006efe:	bf18      	it	ne
 8006f00:	6059      	strne	r1, [r3, #4]
 8006f02:	6863      	ldr	r3, [r4, #4]
 8006f04:	bf08      	it	eq
 8006f06:	6031      	streq	r1, [r6, #0]
 8006f08:	5162      	str	r2, [r4, r5]
 8006f0a:	604b      	str	r3, [r1, #4]
 8006f0c:	4638      	mov	r0, r7
 8006f0e:	f104 060b 	add.w	r6, r4, #11
 8006f12:	f000 f8d1 	bl	80070b8 <__malloc_unlock>
 8006f16:	f026 0607 	bic.w	r6, r6, #7
 8006f1a:	1d23      	adds	r3, r4, #4
 8006f1c:	1af2      	subs	r2, r6, r3
 8006f1e:	d0b6      	beq.n	8006e8e <_malloc_r+0x22>
 8006f20:	1b9b      	subs	r3, r3, r6
 8006f22:	50a3      	str	r3, [r4, r2]
 8006f24:	e7b3      	b.n	8006e8e <_malloc_r+0x22>
 8006f26:	6862      	ldr	r2, [r4, #4]
 8006f28:	42a3      	cmp	r3, r4
 8006f2a:	bf0c      	ite	eq
 8006f2c:	6032      	streq	r2, [r6, #0]
 8006f2e:	605a      	strne	r2, [r3, #4]
 8006f30:	e7ec      	b.n	8006f0c <_malloc_r+0xa0>
 8006f32:	4623      	mov	r3, r4
 8006f34:	6864      	ldr	r4, [r4, #4]
 8006f36:	e7b2      	b.n	8006e9e <_malloc_r+0x32>
 8006f38:	4634      	mov	r4, r6
 8006f3a:	6876      	ldr	r6, [r6, #4]
 8006f3c:	e7b9      	b.n	8006eb2 <_malloc_r+0x46>
 8006f3e:	230c      	movs	r3, #12
 8006f40:	603b      	str	r3, [r7, #0]
 8006f42:	4638      	mov	r0, r7
 8006f44:	f000 f8b8 	bl	80070b8 <__malloc_unlock>
 8006f48:	e7a1      	b.n	8006e8e <_malloc_r+0x22>
 8006f4a:	6025      	str	r5, [r4, #0]
 8006f4c:	e7de      	b.n	8006f0c <_malloc_r+0xa0>
 8006f4e:	bf00      	nop
 8006f50:	20000840 	.word	0x20000840

08006f54 <srand>:
 8006f54:	b538      	push	{r3, r4, r5, lr}
 8006f56:	4b10      	ldr	r3, [pc, #64]	; (8006f98 <srand+0x44>)
 8006f58:	681d      	ldr	r5, [r3, #0]
 8006f5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	b9b3      	cbnz	r3, 8006f8e <srand+0x3a>
 8006f60:	2018      	movs	r0, #24
 8006f62:	f7ff feff 	bl	8006d64 <malloc>
 8006f66:	4602      	mov	r2, r0
 8006f68:	63a8      	str	r0, [r5, #56]	; 0x38
 8006f6a:	b920      	cbnz	r0, 8006f76 <srand+0x22>
 8006f6c:	4b0b      	ldr	r3, [pc, #44]	; (8006f9c <srand+0x48>)
 8006f6e:	480c      	ldr	r0, [pc, #48]	; (8006fa0 <srand+0x4c>)
 8006f70:	2142      	movs	r1, #66	; 0x42
 8006f72:	f000 f86b 	bl	800704c <__assert_func>
 8006f76:	490b      	ldr	r1, [pc, #44]	; (8006fa4 <srand+0x50>)
 8006f78:	4b0b      	ldr	r3, [pc, #44]	; (8006fa8 <srand+0x54>)
 8006f7a:	e9c0 1300 	strd	r1, r3, [r0]
 8006f7e:	4b0b      	ldr	r3, [pc, #44]	; (8006fac <srand+0x58>)
 8006f80:	6083      	str	r3, [r0, #8]
 8006f82:	230b      	movs	r3, #11
 8006f84:	8183      	strh	r3, [r0, #12]
 8006f86:	2100      	movs	r1, #0
 8006f88:	2001      	movs	r0, #1
 8006f8a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006f8e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006f90:	2200      	movs	r2, #0
 8006f92:	611c      	str	r4, [r3, #16]
 8006f94:	615a      	str	r2, [r3, #20]
 8006f96:	bd38      	pop	{r3, r4, r5, pc}
 8006f98:	2000002c 	.word	0x2000002c
 8006f9c:	08007e88 	.word	0x08007e88
 8006fa0:	08007e9f 	.word	0x08007e9f
 8006fa4:	abcd330e 	.word	0xabcd330e
 8006fa8:	e66d1234 	.word	0xe66d1234
 8006fac:	0005deec 	.word	0x0005deec

08006fb0 <rand>:
 8006fb0:	4b16      	ldr	r3, [pc, #88]	; (800700c <rand+0x5c>)
 8006fb2:	b510      	push	{r4, lr}
 8006fb4:	681c      	ldr	r4, [r3, #0]
 8006fb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006fb8:	b9b3      	cbnz	r3, 8006fe8 <rand+0x38>
 8006fba:	2018      	movs	r0, #24
 8006fbc:	f7ff fed2 	bl	8006d64 <malloc>
 8006fc0:	63a0      	str	r0, [r4, #56]	; 0x38
 8006fc2:	b928      	cbnz	r0, 8006fd0 <rand+0x20>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	4b12      	ldr	r3, [pc, #72]	; (8007010 <rand+0x60>)
 8006fc8:	4812      	ldr	r0, [pc, #72]	; (8007014 <rand+0x64>)
 8006fca:	214e      	movs	r1, #78	; 0x4e
 8006fcc:	f000 f83e 	bl	800704c <__assert_func>
 8006fd0:	4a11      	ldr	r2, [pc, #68]	; (8007018 <rand+0x68>)
 8006fd2:	4b12      	ldr	r3, [pc, #72]	; (800701c <rand+0x6c>)
 8006fd4:	e9c0 2300 	strd	r2, r3, [r0]
 8006fd8:	4b11      	ldr	r3, [pc, #68]	; (8007020 <rand+0x70>)
 8006fda:	6083      	str	r3, [r0, #8]
 8006fdc:	230b      	movs	r3, #11
 8006fde:	8183      	strh	r3, [r0, #12]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006fe8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006fea:	4a0e      	ldr	r2, [pc, #56]	; (8007024 <rand+0x74>)
 8006fec:	6920      	ldr	r0, [r4, #16]
 8006fee:	6963      	ldr	r3, [r4, #20]
 8006ff0:	490d      	ldr	r1, [pc, #52]	; (8007028 <rand+0x78>)
 8006ff2:	4342      	muls	r2, r0
 8006ff4:	fb01 2203 	mla	r2, r1, r3, r2
 8006ff8:	fba0 0101 	umull	r0, r1, r0, r1
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	eb42 0001 	adc.w	r0, r2, r1
 8007002:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8007006:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800700a:	bd10      	pop	{r4, pc}
 800700c:	2000002c 	.word	0x2000002c
 8007010:	08007e88 	.word	0x08007e88
 8007014:	08007e9f 	.word	0x08007e9f
 8007018:	abcd330e 	.word	0xabcd330e
 800701c:	e66d1234 	.word	0xe66d1234
 8007020:	0005deec 	.word	0x0005deec
 8007024:	5851f42d 	.word	0x5851f42d
 8007028:	4c957f2d 	.word	0x4c957f2d

0800702c <_sbrk_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	4d06      	ldr	r5, [pc, #24]	; (8007048 <_sbrk_r+0x1c>)
 8007030:	2300      	movs	r3, #0
 8007032:	4604      	mov	r4, r0
 8007034:	4608      	mov	r0, r1
 8007036:	602b      	str	r3, [r5, #0]
 8007038:	f7f9 ff2c 	bl	8000e94 <_sbrk>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	d102      	bne.n	8007046 <_sbrk_r+0x1a>
 8007040:	682b      	ldr	r3, [r5, #0]
 8007042:	b103      	cbz	r3, 8007046 <_sbrk_r+0x1a>
 8007044:	6023      	str	r3, [r4, #0]
 8007046:	bd38      	pop	{r3, r4, r5, pc}
 8007048:	20000848 	.word	0x20000848

0800704c <__assert_func>:
 800704c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800704e:	4614      	mov	r4, r2
 8007050:	461a      	mov	r2, r3
 8007052:	4b09      	ldr	r3, [pc, #36]	; (8007078 <__assert_func+0x2c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4605      	mov	r5, r0
 8007058:	68d8      	ldr	r0, [r3, #12]
 800705a:	b14c      	cbz	r4, 8007070 <__assert_func+0x24>
 800705c:	4b07      	ldr	r3, [pc, #28]	; (800707c <__assert_func+0x30>)
 800705e:	9100      	str	r1, [sp, #0]
 8007060:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007064:	4906      	ldr	r1, [pc, #24]	; (8007080 <__assert_func+0x34>)
 8007066:	462b      	mov	r3, r5
 8007068:	f000 f80e 	bl	8007088 <fiprintf>
 800706c:	f000 fbd8 	bl	8007820 <abort>
 8007070:	4b04      	ldr	r3, [pc, #16]	; (8007084 <__assert_func+0x38>)
 8007072:	461c      	mov	r4, r3
 8007074:	e7f3      	b.n	800705e <__assert_func+0x12>
 8007076:	bf00      	nop
 8007078:	2000002c 	.word	0x2000002c
 800707c:	08007efa 	.word	0x08007efa
 8007080:	08007f07 	.word	0x08007f07
 8007084:	08007f35 	.word	0x08007f35

08007088 <fiprintf>:
 8007088:	b40e      	push	{r1, r2, r3}
 800708a:	b503      	push	{r0, r1, lr}
 800708c:	4601      	mov	r1, r0
 800708e:	ab03      	add	r3, sp, #12
 8007090:	4805      	ldr	r0, [pc, #20]	; (80070a8 <fiprintf+0x20>)
 8007092:	f853 2b04 	ldr.w	r2, [r3], #4
 8007096:	6800      	ldr	r0, [r0, #0]
 8007098:	9301      	str	r3, [sp, #4]
 800709a:	f000 f83d 	bl	8007118 <_vfiprintf_r>
 800709e:	b002      	add	sp, #8
 80070a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80070a4:	b003      	add	sp, #12
 80070a6:	4770      	bx	lr
 80070a8:	2000002c 	.word	0x2000002c

080070ac <__malloc_lock>:
 80070ac:	4801      	ldr	r0, [pc, #4]	; (80070b4 <__malloc_lock+0x8>)
 80070ae:	f000 bd77 	b.w	8007ba0 <__retarget_lock_acquire_recursive>
 80070b2:	bf00      	nop
 80070b4:	2000084c 	.word	0x2000084c

080070b8 <__malloc_unlock>:
 80070b8:	4801      	ldr	r0, [pc, #4]	; (80070c0 <__malloc_unlock+0x8>)
 80070ba:	f000 bd72 	b.w	8007ba2 <__retarget_lock_release_recursive>
 80070be:	bf00      	nop
 80070c0:	2000084c 	.word	0x2000084c

080070c4 <__sfputc_r>:
 80070c4:	6893      	ldr	r3, [r2, #8]
 80070c6:	3b01      	subs	r3, #1
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	b410      	push	{r4}
 80070cc:	6093      	str	r3, [r2, #8]
 80070ce:	da08      	bge.n	80070e2 <__sfputc_r+0x1e>
 80070d0:	6994      	ldr	r4, [r2, #24]
 80070d2:	42a3      	cmp	r3, r4
 80070d4:	db01      	blt.n	80070da <__sfputc_r+0x16>
 80070d6:	290a      	cmp	r1, #10
 80070d8:	d103      	bne.n	80070e2 <__sfputc_r+0x1e>
 80070da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070de:	f000 badf 	b.w	80076a0 <__swbuf_r>
 80070e2:	6813      	ldr	r3, [r2, #0]
 80070e4:	1c58      	adds	r0, r3, #1
 80070e6:	6010      	str	r0, [r2, #0]
 80070e8:	7019      	strb	r1, [r3, #0]
 80070ea:	4608      	mov	r0, r1
 80070ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <__sfputs_r>:
 80070f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f4:	4606      	mov	r6, r0
 80070f6:	460f      	mov	r7, r1
 80070f8:	4614      	mov	r4, r2
 80070fa:	18d5      	adds	r5, r2, r3
 80070fc:	42ac      	cmp	r4, r5
 80070fe:	d101      	bne.n	8007104 <__sfputs_r+0x12>
 8007100:	2000      	movs	r0, #0
 8007102:	e007      	b.n	8007114 <__sfputs_r+0x22>
 8007104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007108:	463a      	mov	r2, r7
 800710a:	4630      	mov	r0, r6
 800710c:	f7ff ffda 	bl	80070c4 <__sfputc_r>
 8007110:	1c43      	adds	r3, r0, #1
 8007112:	d1f3      	bne.n	80070fc <__sfputs_r+0xa>
 8007114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007118 <_vfiprintf_r>:
 8007118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	460d      	mov	r5, r1
 800711e:	b09d      	sub	sp, #116	; 0x74
 8007120:	4614      	mov	r4, r2
 8007122:	4698      	mov	r8, r3
 8007124:	4606      	mov	r6, r0
 8007126:	b118      	cbz	r0, 8007130 <_vfiprintf_r+0x18>
 8007128:	6983      	ldr	r3, [r0, #24]
 800712a:	b90b      	cbnz	r3, 8007130 <_vfiprintf_r+0x18>
 800712c:	f000 fc9a 	bl	8007a64 <__sinit>
 8007130:	4b89      	ldr	r3, [pc, #548]	; (8007358 <_vfiprintf_r+0x240>)
 8007132:	429d      	cmp	r5, r3
 8007134:	d11b      	bne.n	800716e <_vfiprintf_r+0x56>
 8007136:	6875      	ldr	r5, [r6, #4]
 8007138:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800713a:	07d9      	lsls	r1, r3, #31
 800713c:	d405      	bmi.n	800714a <_vfiprintf_r+0x32>
 800713e:	89ab      	ldrh	r3, [r5, #12]
 8007140:	059a      	lsls	r2, r3, #22
 8007142:	d402      	bmi.n	800714a <_vfiprintf_r+0x32>
 8007144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007146:	f000 fd2b 	bl	8007ba0 <__retarget_lock_acquire_recursive>
 800714a:	89ab      	ldrh	r3, [r5, #12]
 800714c:	071b      	lsls	r3, r3, #28
 800714e:	d501      	bpl.n	8007154 <_vfiprintf_r+0x3c>
 8007150:	692b      	ldr	r3, [r5, #16]
 8007152:	b9eb      	cbnz	r3, 8007190 <_vfiprintf_r+0x78>
 8007154:	4629      	mov	r1, r5
 8007156:	4630      	mov	r0, r6
 8007158:	f000 faf4 	bl	8007744 <__swsetup_r>
 800715c:	b1c0      	cbz	r0, 8007190 <_vfiprintf_r+0x78>
 800715e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007160:	07dc      	lsls	r4, r3, #31
 8007162:	d50e      	bpl.n	8007182 <_vfiprintf_r+0x6a>
 8007164:	f04f 30ff 	mov.w	r0, #4294967295
 8007168:	b01d      	add	sp, #116	; 0x74
 800716a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800716e:	4b7b      	ldr	r3, [pc, #492]	; (800735c <_vfiprintf_r+0x244>)
 8007170:	429d      	cmp	r5, r3
 8007172:	d101      	bne.n	8007178 <_vfiprintf_r+0x60>
 8007174:	68b5      	ldr	r5, [r6, #8]
 8007176:	e7df      	b.n	8007138 <_vfiprintf_r+0x20>
 8007178:	4b79      	ldr	r3, [pc, #484]	; (8007360 <_vfiprintf_r+0x248>)
 800717a:	429d      	cmp	r5, r3
 800717c:	bf08      	it	eq
 800717e:	68f5      	ldreq	r5, [r6, #12]
 8007180:	e7da      	b.n	8007138 <_vfiprintf_r+0x20>
 8007182:	89ab      	ldrh	r3, [r5, #12]
 8007184:	0598      	lsls	r0, r3, #22
 8007186:	d4ed      	bmi.n	8007164 <_vfiprintf_r+0x4c>
 8007188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800718a:	f000 fd0a 	bl	8007ba2 <__retarget_lock_release_recursive>
 800718e:	e7e9      	b.n	8007164 <_vfiprintf_r+0x4c>
 8007190:	2300      	movs	r3, #0
 8007192:	9309      	str	r3, [sp, #36]	; 0x24
 8007194:	2320      	movs	r3, #32
 8007196:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800719a:	f8cd 800c 	str.w	r8, [sp, #12]
 800719e:	2330      	movs	r3, #48	; 0x30
 80071a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007364 <_vfiprintf_r+0x24c>
 80071a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071a8:	f04f 0901 	mov.w	r9, #1
 80071ac:	4623      	mov	r3, r4
 80071ae:	469a      	mov	sl, r3
 80071b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071b4:	b10a      	cbz	r2, 80071ba <_vfiprintf_r+0xa2>
 80071b6:	2a25      	cmp	r2, #37	; 0x25
 80071b8:	d1f9      	bne.n	80071ae <_vfiprintf_r+0x96>
 80071ba:	ebba 0b04 	subs.w	fp, sl, r4
 80071be:	d00b      	beq.n	80071d8 <_vfiprintf_r+0xc0>
 80071c0:	465b      	mov	r3, fp
 80071c2:	4622      	mov	r2, r4
 80071c4:	4629      	mov	r1, r5
 80071c6:	4630      	mov	r0, r6
 80071c8:	f7ff ff93 	bl	80070f2 <__sfputs_r>
 80071cc:	3001      	adds	r0, #1
 80071ce:	f000 80aa 	beq.w	8007326 <_vfiprintf_r+0x20e>
 80071d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071d4:	445a      	add	r2, fp
 80071d6:	9209      	str	r2, [sp, #36]	; 0x24
 80071d8:	f89a 3000 	ldrb.w	r3, [sl]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 80a2 	beq.w	8007326 <_vfiprintf_r+0x20e>
 80071e2:	2300      	movs	r3, #0
 80071e4:	f04f 32ff 	mov.w	r2, #4294967295
 80071e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071ec:	f10a 0a01 	add.w	sl, sl, #1
 80071f0:	9304      	str	r3, [sp, #16]
 80071f2:	9307      	str	r3, [sp, #28]
 80071f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071f8:	931a      	str	r3, [sp, #104]	; 0x68
 80071fa:	4654      	mov	r4, sl
 80071fc:	2205      	movs	r2, #5
 80071fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007202:	4858      	ldr	r0, [pc, #352]	; (8007364 <_vfiprintf_r+0x24c>)
 8007204:	f7f8 ffe4 	bl	80001d0 <memchr>
 8007208:	9a04      	ldr	r2, [sp, #16]
 800720a:	b9d8      	cbnz	r0, 8007244 <_vfiprintf_r+0x12c>
 800720c:	06d1      	lsls	r1, r2, #27
 800720e:	bf44      	itt	mi
 8007210:	2320      	movmi	r3, #32
 8007212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007216:	0713      	lsls	r3, r2, #28
 8007218:	bf44      	itt	mi
 800721a:	232b      	movmi	r3, #43	; 0x2b
 800721c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007220:	f89a 3000 	ldrb.w	r3, [sl]
 8007224:	2b2a      	cmp	r3, #42	; 0x2a
 8007226:	d015      	beq.n	8007254 <_vfiprintf_r+0x13c>
 8007228:	9a07      	ldr	r2, [sp, #28]
 800722a:	4654      	mov	r4, sl
 800722c:	2000      	movs	r0, #0
 800722e:	f04f 0c0a 	mov.w	ip, #10
 8007232:	4621      	mov	r1, r4
 8007234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007238:	3b30      	subs	r3, #48	; 0x30
 800723a:	2b09      	cmp	r3, #9
 800723c:	d94e      	bls.n	80072dc <_vfiprintf_r+0x1c4>
 800723e:	b1b0      	cbz	r0, 800726e <_vfiprintf_r+0x156>
 8007240:	9207      	str	r2, [sp, #28]
 8007242:	e014      	b.n	800726e <_vfiprintf_r+0x156>
 8007244:	eba0 0308 	sub.w	r3, r0, r8
 8007248:	fa09 f303 	lsl.w	r3, r9, r3
 800724c:	4313      	orrs	r3, r2
 800724e:	9304      	str	r3, [sp, #16]
 8007250:	46a2      	mov	sl, r4
 8007252:	e7d2      	b.n	80071fa <_vfiprintf_r+0xe2>
 8007254:	9b03      	ldr	r3, [sp, #12]
 8007256:	1d19      	adds	r1, r3, #4
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	9103      	str	r1, [sp, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	bfbb      	ittet	lt
 8007260:	425b      	neglt	r3, r3
 8007262:	f042 0202 	orrlt.w	r2, r2, #2
 8007266:	9307      	strge	r3, [sp, #28]
 8007268:	9307      	strlt	r3, [sp, #28]
 800726a:	bfb8      	it	lt
 800726c:	9204      	strlt	r2, [sp, #16]
 800726e:	7823      	ldrb	r3, [r4, #0]
 8007270:	2b2e      	cmp	r3, #46	; 0x2e
 8007272:	d10c      	bne.n	800728e <_vfiprintf_r+0x176>
 8007274:	7863      	ldrb	r3, [r4, #1]
 8007276:	2b2a      	cmp	r3, #42	; 0x2a
 8007278:	d135      	bne.n	80072e6 <_vfiprintf_r+0x1ce>
 800727a:	9b03      	ldr	r3, [sp, #12]
 800727c:	1d1a      	adds	r2, r3, #4
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	9203      	str	r2, [sp, #12]
 8007282:	2b00      	cmp	r3, #0
 8007284:	bfb8      	it	lt
 8007286:	f04f 33ff 	movlt.w	r3, #4294967295
 800728a:	3402      	adds	r4, #2
 800728c:	9305      	str	r3, [sp, #20]
 800728e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007374 <_vfiprintf_r+0x25c>
 8007292:	7821      	ldrb	r1, [r4, #0]
 8007294:	2203      	movs	r2, #3
 8007296:	4650      	mov	r0, sl
 8007298:	f7f8 ff9a 	bl	80001d0 <memchr>
 800729c:	b140      	cbz	r0, 80072b0 <_vfiprintf_r+0x198>
 800729e:	2340      	movs	r3, #64	; 0x40
 80072a0:	eba0 000a 	sub.w	r0, r0, sl
 80072a4:	fa03 f000 	lsl.w	r0, r3, r0
 80072a8:	9b04      	ldr	r3, [sp, #16]
 80072aa:	4303      	orrs	r3, r0
 80072ac:	3401      	adds	r4, #1
 80072ae:	9304      	str	r3, [sp, #16]
 80072b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072b4:	482c      	ldr	r0, [pc, #176]	; (8007368 <_vfiprintf_r+0x250>)
 80072b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072ba:	2206      	movs	r2, #6
 80072bc:	f7f8 ff88 	bl	80001d0 <memchr>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d03f      	beq.n	8007344 <_vfiprintf_r+0x22c>
 80072c4:	4b29      	ldr	r3, [pc, #164]	; (800736c <_vfiprintf_r+0x254>)
 80072c6:	bb1b      	cbnz	r3, 8007310 <_vfiprintf_r+0x1f8>
 80072c8:	9b03      	ldr	r3, [sp, #12]
 80072ca:	3307      	adds	r3, #7
 80072cc:	f023 0307 	bic.w	r3, r3, #7
 80072d0:	3308      	adds	r3, #8
 80072d2:	9303      	str	r3, [sp, #12]
 80072d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d6:	443b      	add	r3, r7
 80072d8:	9309      	str	r3, [sp, #36]	; 0x24
 80072da:	e767      	b.n	80071ac <_vfiprintf_r+0x94>
 80072dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80072e0:	460c      	mov	r4, r1
 80072e2:	2001      	movs	r0, #1
 80072e4:	e7a5      	b.n	8007232 <_vfiprintf_r+0x11a>
 80072e6:	2300      	movs	r3, #0
 80072e8:	3401      	adds	r4, #1
 80072ea:	9305      	str	r3, [sp, #20]
 80072ec:	4619      	mov	r1, r3
 80072ee:	f04f 0c0a 	mov.w	ip, #10
 80072f2:	4620      	mov	r0, r4
 80072f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072f8:	3a30      	subs	r2, #48	; 0x30
 80072fa:	2a09      	cmp	r2, #9
 80072fc:	d903      	bls.n	8007306 <_vfiprintf_r+0x1ee>
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d0c5      	beq.n	800728e <_vfiprintf_r+0x176>
 8007302:	9105      	str	r1, [sp, #20]
 8007304:	e7c3      	b.n	800728e <_vfiprintf_r+0x176>
 8007306:	fb0c 2101 	mla	r1, ip, r1, r2
 800730a:	4604      	mov	r4, r0
 800730c:	2301      	movs	r3, #1
 800730e:	e7f0      	b.n	80072f2 <_vfiprintf_r+0x1da>
 8007310:	ab03      	add	r3, sp, #12
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	462a      	mov	r2, r5
 8007316:	4b16      	ldr	r3, [pc, #88]	; (8007370 <_vfiprintf_r+0x258>)
 8007318:	a904      	add	r1, sp, #16
 800731a:	4630      	mov	r0, r6
 800731c:	f3af 8000 	nop.w
 8007320:	4607      	mov	r7, r0
 8007322:	1c78      	adds	r0, r7, #1
 8007324:	d1d6      	bne.n	80072d4 <_vfiprintf_r+0x1bc>
 8007326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007328:	07d9      	lsls	r1, r3, #31
 800732a:	d405      	bmi.n	8007338 <_vfiprintf_r+0x220>
 800732c:	89ab      	ldrh	r3, [r5, #12]
 800732e:	059a      	lsls	r2, r3, #22
 8007330:	d402      	bmi.n	8007338 <_vfiprintf_r+0x220>
 8007332:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007334:	f000 fc35 	bl	8007ba2 <__retarget_lock_release_recursive>
 8007338:	89ab      	ldrh	r3, [r5, #12]
 800733a:	065b      	lsls	r3, r3, #25
 800733c:	f53f af12 	bmi.w	8007164 <_vfiprintf_r+0x4c>
 8007340:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007342:	e711      	b.n	8007168 <_vfiprintf_r+0x50>
 8007344:	ab03      	add	r3, sp, #12
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	462a      	mov	r2, r5
 800734a:	4b09      	ldr	r3, [pc, #36]	; (8007370 <_vfiprintf_r+0x258>)
 800734c:	a904      	add	r1, sp, #16
 800734e:	4630      	mov	r0, r6
 8007350:	f000 f880 	bl	8007454 <_printf_i>
 8007354:	e7e4      	b.n	8007320 <_vfiprintf_r+0x208>
 8007356:	bf00      	nop
 8007358:	08007f8c 	.word	0x08007f8c
 800735c:	08007fac 	.word	0x08007fac
 8007360:	08007f6c 	.word	0x08007f6c
 8007364:	08007f36 	.word	0x08007f36
 8007368:	08007f40 	.word	0x08007f40
 800736c:	00000000 	.word	0x00000000
 8007370:	080070f3 	.word	0x080070f3
 8007374:	08007f3c 	.word	0x08007f3c

08007378 <_printf_common>:
 8007378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800737c:	4616      	mov	r6, r2
 800737e:	4699      	mov	r9, r3
 8007380:	688a      	ldr	r2, [r1, #8]
 8007382:	690b      	ldr	r3, [r1, #16]
 8007384:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007388:	4293      	cmp	r3, r2
 800738a:	bfb8      	it	lt
 800738c:	4613      	movlt	r3, r2
 800738e:	6033      	str	r3, [r6, #0]
 8007390:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007394:	4607      	mov	r7, r0
 8007396:	460c      	mov	r4, r1
 8007398:	b10a      	cbz	r2, 800739e <_printf_common+0x26>
 800739a:	3301      	adds	r3, #1
 800739c:	6033      	str	r3, [r6, #0]
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	0699      	lsls	r1, r3, #26
 80073a2:	bf42      	ittt	mi
 80073a4:	6833      	ldrmi	r3, [r6, #0]
 80073a6:	3302      	addmi	r3, #2
 80073a8:	6033      	strmi	r3, [r6, #0]
 80073aa:	6825      	ldr	r5, [r4, #0]
 80073ac:	f015 0506 	ands.w	r5, r5, #6
 80073b0:	d106      	bne.n	80073c0 <_printf_common+0x48>
 80073b2:	f104 0a19 	add.w	sl, r4, #25
 80073b6:	68e3      	ldr	r3, [r4, #12]
 80073b8:	6832      	ldr	r2, [r6, #0]
 80073ba:	1a9b      	subs	r3, r3, r2
 80073bc:	42ab      	cmp	r3, r5
 80073be:	dc26      	bgt.n	800740e <_printf_common+0x96>
 80073c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073c4:	1e13      	subs	r3, r2, #0
 80073c6:	6822      	ldr	r2, [r4, #0]
 80073c8:	bf18      	it	ne
 80073ca:	2301      	movne	r3, #1
 80073cc:	0692      	lsls	r2, r2, #26
 80073ce:	d42b      	bmi.n	8007428 <_printf_common+0xb0>
 80073d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073d4:	4649      	mov	r1, r9
 80073d6:	4638      	mov	r0, r7
 80073d8:	47c0      	blx	r8
 80073da:	3001      	adds	r0, #1
 80073dc:	d01e      	beq.n	800741c <_printf_common+0xa4>
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	68e5      	ldr	r5, [r4, #12]
 80073e2:	6832      	ldr	r2, [r6, #0]
 80073e4:	f003 0306 	and.w	r3, r3, #6
 80073e8:	2b04      	cmp	r3, #4
 80073ea:	bf08      	it	eq
 80073ec:	1aad      	subeq	r5, r5, r2
 80073ee:	68a3      	ldr	r3, [r4, #8]
 80073f0:	6922      	ldr	r2, [r4, #16]
 80073f2:	bf0c      	ite	eq
 80073f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073f8:	2500      	movne	r5, #0
 80073fa:	4293      	cmp	r3, r2
 80073fc:	bfc4      	itt	gt
 80073fe:	1a9b      	subgt	r3, r3, r2
 8007400:	18ed      	addgt	r5, r5, r3
 8007402:	2600      	movs	r6, #0
 8007404:	341a      	adds	r4, #26
 8007406:	42b5      	cmp	r5, r6
 8007408:	d11a      	bne.n	8007440 <_printf_common+0xc8>
 800740a:	2000      	movs	r0, #0
 800740c:	e008      	b.n	8007420 <_printf_common+0xa8>
 800740e:	2301      	movs	r3, #1
 8007410:	4652      	mov	r2, sl
 8007412:	4649      	mov	r1, r9
 8007414:	4638      	mov	r0, r7
 8007416:	47c0      	blx	r8
 8007418:	3001      	adds	r0, #1
 800741a:	d103      	bne.n	8007424 <_printf_common+0xac>
 800741c:	f04f 30ff 	mov.w	r0, #4294967295
 8007420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007424:	3501      	adds	r5, #1
 8007426:	e7c6      	b.n	80073b6 <_printf_common+0x3e>
 8007428:	18e1      	adds	r1, r4, r3
 800742a:	1c5a      	adds	r2, r3, #1
 800742c:	2030      	movs	r0, #48	; 0x30
 800742e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007432:	4422      	add	r2, r4
 8007434:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007438:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800743c:	3302      	adds	r3, #2
 800743e:	e7c7      	b.n	80073d0 <_printf_common+0x58>
 8007440:	2301      	movs	r3, #1
 8007442:	4622      	mov	r2, r4
 8007444:	4649      	mov	r1, r9
 8007446:	4638      	mov	r0, r7
 8007448:	47c0      	blx	r8
 800744a:	3001      	adds	r0, #1
 800744c:	d0e6      	beq.n	800741c <_printf_common+0xa4>
 800744e:	3601      	adds	r6, #1
 8007450:	e7d9      	b.n	8007406 <_printf_common+0x8e>
	...

08007454 <_printf_i>:
 8007454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007458:	7e0f      	ldrb	r7, [r1, #24]
 800745a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800745c:	2f78      	cmp	r7, #120	; 0x78
 800745e:	4691      	mov	r9, r2
 8007460:	4680      	mov	r8, r0
 8007462:	460c      	mov	r4, r1
 8007464:	469a      	mov	sl, r3
 8007466:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800746a:	d807      	bhi.n	800747c <_printf_i+0x28>
 800746c:	2f62      	cmp	r7, #98	; 0x62
 800746e:	d80a      	bhi.n	8007486 <_printf_i+0x32>
 8007470:	2f00      	cmp	r7, #0
 8007472:	f000 80d8 	beq.w	8007626 <_printf_i+0x1d2>
 8007476:	2f58      	cmp	r7, #88	; 0x58
 8007478:	f000 80a3 	beq.w	80075c2 <_printf_i+0x16e>
 800747c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007480:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007484:	e03a      	b.n	80074fc <_printf_i+0xa8>
 8007486:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800748a:	2b15      	cmp	r3, #21
 800748c:	d8f6      	bhi.n	800747c <_printf_i+0x28>
 800748e:	a101      	add	r1, pc, #4	; (adr r1, 8007494 <_printf_i+0x40>)
 8007490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007494:	080074ed 	.word	0x080074ed
 8007498:	08007501 	.word	0x08007501
 800749c:	0800747d 	.word	0x0800747d
 80074a0:	0800747d 	.word	0x0800747d
 80074a4:	0800747d 	.word	0x0800747d
 80074a8:	0800747d 	.word	0x0800747d
 80074ac:	08007501 	.word	0x08007501
 80074b0:	0800747d 	.word	0x0800747d
 80074b4:	0800747d 	.word	0x0800747d
 80074b8:	0800747d 	.word	0x0800747d
 80074bc:	0800747d 	.word	0x0800747d
 80074c0:	0800760d 	.word	0x0800760d
 80074c4:	08007531 	.word	0x08007531
 80074c8:	080075ef 	.word	0x080075ef
 80074cc:	0800747d 	.word	0x0800747d
 80074d0:	0800747d 	.word	0x0800747d
 80074d4:	0800762f 	.word	0x0800762f
 80074d8:	0800747d 	.word	0x0800747d
 80074dc:	08007531 	.word	0x08007531
 80074e0:	0800747d 	.word	0x0800747d
 80074e4:	0800747d 	.word	0x0800747d
 80074e8:	080075f7 	.word	0x080075f7
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	1d1a      	adds	r2, r3, #4
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	602a      	str	r2, [r5, #0]
 80074f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074fc:	2301      	movs	r3, #1
 80074fe:	e0a3      	b.n	8007648 <_printf_i+0x1f4>
 8007500:	6820      	ldr	r0, [r4, #0]
 8007502:	6829      	ldr	r1, [r5, #0]
 8007504:	0606      	lsls	r6, r0, #24
 8007506:	f101 0304 	add.w	r3, r1, #4
 800750a:	d50a      	bpl.n	8007522 <_printf_i+0xce>
 800750c:	680e      	ldr	r6, [r1, #0]
 800750e:	602b      	str	r3, [r5, #0]
 8007510:	2e00      	cmp	r6, #0
 8007512:	da03      	bge.n	800751c <_printf_i+0xc8>
 8007514:	232d      	movs	r3, #45	; 0x2d
 8007516:	4276      	negs	r6, r6
 8007518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800751c:	485e      	ldr	r0, [pc, #376]	; (8007698 <_printf_i+0x244>)
 800751e:	230a      	movs	r3, #10
 8007520:	e019      	b.n	8007556 <_printf_i+0x102>
 8007522:	680e      	ldr	r6, [r1, #0]
 8007524:	602b      	str	r3, [r5, #0]
 8007526:	f010 0f40 	tst.w	r0, #64	; 0x40
 800752a:	bf18      	it	ne
 800752c:	b236      	sxthne	r6, r6
 800752e:	e7ef      	b.n	8007510 <_printf_i+0xbc>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	6820      	ldr	r0, [r4, #0]
 8007534:	1d19      	adds	r1, r3, #4
 8007536:	6029      	str	r1, [r5, #0]
 8007538:	0601      	lsls	r1, r0, #24
 800753a:	d501      	bpl.n	8007540 <_printf_i+0xec>
 800753c:	681e      	ldr	r6, [r3, #0]
 800753e:	e002      	b.n	8007546 <_printf_i+0xf2>
 8007540:	0646      	lsls	r6, r0, #25
 8007542:	d5fb      	bpl.n	800753c <_printf_i+0xe8>
 8007544:	881e      	ldrh	r6, [r3, #0]
 8007546:	4854      	ldr	r0, [pc, #336]	; (8007698 <_printf_i+0x244>)
 8007548:	2f6f      	cmp	r7, #111	; 0x6f
 800754a:	bf0c      	ite	eq
 800754c:	2308      	moveq	r3, #8
 800754e:	230a      	movne	r3, #10
 8007550:	2100      	movs	r1, #0
 8007552:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007556:	6865      	ldr	r5, [r4, #4]
 8007558:	60a5      	str	r5, [r4, #8]
 800755a:	2d00      	cmp	r5, #0
 800755c:	bfa2      	ittt	ge
 800755e:	6821      	ldrge	r1, [r4, #0]
 8007560:	f021 0104 	bicge.w	r1, r1, #4
 8007564:	6021      	strge	r1, [r4, #0]
 8007566:	b90e      	cbnz	r6, 800756c <_printf_i+0x118>
 8007568:	2d00      	cmp	r5, #0
 800756a:	d04d      	beq.n	8007608 <_printf_i+0x1b4>
 800756c:	4615      	mov	r5, r2
 800756e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007572:	fb03 6711 	mls	r7, r3, r1, r6
 8007576:	5dc7      	ldrb	r7, [r0, r7]
 8007578:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800757c:	4637      	mov	r7, r6
 800757e:	42bb      	cmp	r3, r7
 8007580:	460e      	mov	r6, r1
 8007582:	d9f4      	bls.n	800756e <_printf_i+0x11a>
 8007584:	2b08      	cmp	r3, #8
 8007586:	d10b      	bne.n	80075a0 <_printf_i+0x14c>
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	07de      	lsls	r6, r3, #31
 800758c:	d508      	bpl.n	80075a0 <_printf_i+0x14c>
 800758e:	6923      	ldr	r3, [r4, #16]
 8007590:	6861      	ldr	r1, [r4, #4]
 8007592:	4299      	cmp	r1, r3
 8007594:	bfde      	ittt	le
 8007596:	2330      	movle	r3, #48	; 0x30
 8007598:	f805 3c01 	strble.w	r3, [r5, #-1]
 800759c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80075a0:	1b52      	subs	r2, r2, r5
 80075a2:	6122      	str	r2, [r4, #16]
 80075a4:	f8cd a000 	str.w	sl, [sp]
 80075a8:	464b      	mov	r3, r9
 80075aa:	aa03      	add	r2, sp, #12
 80075ac:	4621      	mov	r1, r4
 80075ae:	4640      	mov	r0, r8
 80075b0:	f7ff fee2 	bl	8007378 <_printf_common>
 80075b4:	3001      	adds	r0, #1
 80075b6:	d14c      	bne.n	8007652 <_printf_i+0x1fe>
 80075b8:	f04f 30ff 	mov.w	r0, #4294967295
 80075bc:	b004      	add	sp, #16
 80075be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c2:	4835      	ldr	r0, [pc, #212]	; (8007698 <_printf_i+0x244>)
 80075c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80075c8:	6829      	ldr	r1, [r5, #0]
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80075d0:	6029      	str	r1, [r5, #0]
 80075d2:	061d      	lsls	r5, r3, #24
 80075d4:	d514      	bpl.n	8007600 <_printf_i+0x1ac>
 80075d6:	07df      	lsls	r7, r3, #31
 80075d8:	bf44      	itt	mi
 80075da:	f043 0320 	orrmi.w	r3, r3, #32
 80075de:	6023      	strmi	r3, [r4, #0]
 80075e0:	b91e      	cbnz	r6, 80075ea <_printf_i+0x196>
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	f023 0320 	bic.w	r3, r3, #32
 80075e8:	6023      	str	r3, [r4, #0]
 80075ea:	2310      	movs	r3, #16
 80075ec:	e7b0      	b.n	8007550 <_printf_i+0xfc>
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	f043 0320 	orr.w	r3, r3, #32
 80075f4:	6023      	str	r3, [r4, #0]
 80075f6:	2378      	movs	r3, #120	; 0x78
 80075f8:	4828      	ldr	r0, [pc, #160]	; (800769c <_printf_i+0x248>)
 80075fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075fe:	e7e3      	b.n	80075c8 <_printf_i+0x174>
 8007600:	0659      	lsls	r1, r3, #25
 8007602:	bf48      	it	mi
 8007604:	b2b6      	uxthmi	r6, r6
 8007606:	e7e6      	b.n	80075d6 <_printf_i+0x182>
 8007608:	4615      	mov	r5, r2
 800760a:	e7bb      	b.n	8007584 <_printf_i+0x130>
 800760c:	682b      	ldr	r3, [r5, #0]
 800760e:	6826      	ldr	r6, [r4, #0]
 8007610:	6961      	ldr	r1, [r4, #20]
 8007612:	1d18      	adds	r0, r3, #4
 8007614:	6028      	str	r0, [r5, #0]
 8007616:	0635      	lsls	r5, r6, #24
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	d501      	bpl.n	8007620 <_printf_i+0x1cc>
 800761c:	6019      	str	r1, [r3, #0]
 800761e:	e002      	b.n	8007626 <_printf_i+0x1d2>
 8007620:	0670      	lsls	r0, r6, #25
 8007622:	d5fb      	bpl.n	800761c <_printf_i+0x1c8>
 8007624:	8019      	strh	r1, [r3, #0]
 8007626:	2300      	movs	r3, #0
 8007628:	6123      	str	r3, [r4, #16]
 800762a:	4615      	mov	r5, r2
 800762c:	e7ba      	b.n	80075a4 <_printf_i+0x150>
 800762e:	682b      	ldr	r3, [r5, #0]
 8007630:	1d1a      	adds	r2, r3, #4
 8007632:	602a      	str	r2, [r5, #0]
 8007634:	681d      	ldr	r5, [r3, #0]
 8007636:	6862      	ldr	r2, [r4, #4]
 8007638:	2100      	movs	r1, #0
 800763a:	4628      	mov	r0, r5
 800763c:	f7f8 fdc8 	bl	80001d0 <memchr>
 8007640:	b108      	cbz	r0, 8007646 <_printf_i+0x1f2>
 8007642:	1b40      	subs	r0, r0, r5
 8007644:	6060      	str	r0, [r4, #4]
 8007646:	6863      	ldr	r3, [r4, #4]
 8007648:	6123      	str	r3, [r4, #16]
 800764a:	2300      	movs	r3, #0
 800764c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007650:	e7a8      	b.n	80075a4 <_printf_i+0x150>
 8007652:	6923      	ldr	r3, [r4, #16]
 8007654:	462a      	mov	r2, r5
 8007656:	4649      	mov	r1, r9
 8007658:	4640      	mov	r0, r8
 800765a:	47d0      	blx	sl
 800765c:	3001      	adds	r0, #1
 800765e:	d0ab      	beq.n	80075b8 <_printf_i+0x164>
 8007660:	6823      	ldr	r3, [r4, #0]
 8007662:	079b      	lsls	r3, r3, #30
 8007664:	d413      	bmi.n	800768e <_printf_i+0x23a>
 8007666:	68e0      	ldr	r0, [r4, #12]
 8007668:	9b03      	ldr	r3, [sp, #12]
 800766a:	4298      	cmp	r0, r3
 800766c:	bfb8      	it	lt
 800766e:	4618      	movlt	r0, r3
 8007670:	e7a4      	b.n	80075bc <_printf_i+0x168>
 8007672:	2301      	movs	r3, #1
 8007674:	4632      	mov	r2, r6
 8007676:	4649      	mov	r1, r9
 8007678:	4640      	mov	r0, r8
 800767a:	47d0      	blx	sl
 800767c:	3001      	adds	r0, #1
 800767e:	d09b      	beq.n	80075b8 <_printf_i+0x164>
 8007680:	3501      	adds	r5, #1
 8007682:	68e3      	ldr	r3, [r4, #12]
 8007684:	9903      	ldr	r1, [sp, #12]
 8007686:	1a5b      	subs	r3, r3, r1
 8007688:	42ab      	cmp	r3, r5
 800768a:	dcf2      	bgt.n	8007672 <_printf_i+0x21e>
 800768c:	e7eb      	b.n	8007666 <_printf_i+0x212>
 800768e:	2500      	movs	r5, #0
 8007690:	f104 0619 	add.w	r6, r4, #25
 8007694:	e7f5      	b.n	8007682 <_printf_i+0x22e>
 8007696:	bf00      	nop
 8007698:	08007f47 	.word	0x08007f47
 800769c:	08007f58 	.word	0x08007f58

080076a0 <__swbuf_r>:
 80076a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a2:	460e      	mov	r6, r1
 80076a4:	4614      	mov	r4, r2
 80076a6:	4605      	mov	r5, r0
 80076a8:	b118      	cbz	r0, 80076b2 <__swbuf_r+0x12>
 80076aa:	6983      	ldr	r3, [r0, #24]
 80076ac:	b90b      	cbnz	r3, 80076b2 <__swbuf_r+0x12>
 80076ae:	f000 f9d9 	bl	8007a64 <__sinit>
 80076b2:	4b21      	ldr	r3, [pc, #132]	; (8007738 <__swbuf_r+0x98>)
 80076b4:	429c      	cmp	r4, r3
 80076b6:	d12b      	bne.n	8007710 <__swbuf_r+0x70>
 80076b8:	686c      	ldr	r4, [r5, #4]
 80076ba:	69a3      	ldr	r3, [r4, #24]
 80076bc:	60a3      	str	r3, [r4, #8]
 80076be:	89a3      	ldrh	r3, [r4, #12]
 80076c0:	071a      	lsls	r2, r3, #28
 80076c2:	d52f      	bpl.n	8007724 <__swbuf_r+0x84>
 80076c4:	6923      	ldr	r3, [r4, #16]
 80076c6:	b36b      	cbz	r3, 8007724 <__swbuf_r+0x84>
 80076c8:	6923      	ldr	r3, [r4, #16]
 80076ca:	6820      	ldr	r0, [r4, #0]
 80076cc:	1ac0      	subs	r0, r0, r3
 80076ce:	6963      	ldr	r3, [r4, #20]
 80076d0:	b2f6      	uxtb	r6, r6
 80076d2:	4283      	cmp	r3, r0
 80076d4:	4637      	mov	r7, r6
 80076d6:	dc04      	bgt.n	80076e2 <__swbuf_r+0x42>
 80076d8:	4621      	mov	r1, r4
 80076da:	4628      	mov	r0, r5
 80076dc:	f000 f92e 	bl	800793c <_fflush_r>
 80076e0:	bb30      	cbnz	r0, 8007730 <__swbuf_r+0x90>
 80076e2:	68a3      	ldr	r3, [r4, #8]
 80076e4:	3b01      	subs	r3, #1
 80076e6:	60a3      	str	r3, [r4, #8]
 80076e8:	6823      	ldr	r3, [r4, #0]
 80076ea:	1c5a      	adds	r2, r3, #1
 80076ec:	6022      	str	r2, [r4, #0]
 80076ee:	701e      	strb	r6, [r3, #0]
 80076f0:	6963      	ldr	r3, [r4, #20]
 80076f2:	3001      	adds	r0, #1
 80076f4:	4283      	cmp	r3, r0
 80076f6:	d004      	beq.n	8007702 <__swbuf_r+0x62>
 80076f8:	89a3      	ldrh	r3, [r4, #12]
 80076fa:	07db      	lsls	r3, r3, #31
 80076fc:	d506      	bpl.n	800770c <__swbuf_r+0x6c>
 80076fe:	2e0a      	cmp	r6, #10
 8007700:	d104      	bne.n	800770c <__swbuf_r+0x6c>
 8007702:	4621      	mov	r1, r4
 8007704:	4628      	mov	r0, r5
 8007706:	f000 f919 	bl	800793c <_fflush_r>
 800770a:	b988      	cbnz	r0, 8007730 <__swbuf_r+0x90>
 800770c:	4638      	mov	r0, r7
 800770e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007710:	4b0a      	ldr	r3, [pc, #40]	; (800773c <__swbuf_r+0x9c>)
 8007712:	429c      	cmp	r4, r3
 8007714:	d101      	bne.n	800771a <__swbuf_r+0x7a>
 8007716:	68ac      	ldr	r4, [r5, #8]
 8007718:	e7cf      	b.n	80076ba <__swbuf_r+0x1a>
 800771a:	4b09      	ldr	r3, [pc, #36]	; (8007740 <__swbuf_r+0xa0>)
 800771c:	429c      	cmp	r4, r3
 800771e:	bf08      	it	eq
 8007720:	68ec      	ldreq	r4, [r5, #12]
 8007722:	e7ca      	b.n	80076ba <__swbuf_r+0x1a>
 8007724:	4621      	mov	r1, r4
 8007726:	4628      	mov	r0, r5
 8007728:	f000 f80c 	bl	8007744 <__swsetup_r>
 800772c:	2800      	cmp	r0, #0
 800772e:	d0cb      	beq.n	80076c8 <__swbuf_r+0x28>
 8007730:	f04f 37ff 	mov.w	r7, #4294967295
 8007734:	e7ea      	b.n	800770c <__swbuf_r+0x6c>
 8007736:	bf00      	nop
 8007738:	08007f8c 	.word	0x08007f8c
 800773c:	08007fac 	.word	0x08007fac
 8007740:	08007f6c 	.word	0x08007f6c

08007744 <__swsetup_r>:
 8007744:	4b32      	ldr	r3, [pc, #200]	; (8007810 <__swsetup_r+0xcc>)
 8007746:	b570      	push	{r4, r5, r6, lr}
 8007748:	681d      	ldr	r5, [r3, #0]
 800774a:	4606      	mov	r6, r0
 800774c:	460c      	mov	r4, r1
 800774e:	b125      	cbz	r5, 800775a <__swsetup_r+0x16>
 8007750:	69ab      	ldr	r3, [r5, #24]
 8007752:	b913      	cbnz	r3, 800775a <__swsetup_r+0x16>
 8007754:	4628      	mov	r0, r5
 8007756:	f000 f985 	bl	8007a64 <__sinit>
 800775a:	4b2e      	ldr	r3, [pc, #184]	; (8007814 <__swsetup_r+0xd0>)
 800775c:	429c      	cmp	r4, r3
 800775e:	d10f      	bne.n	8007780 <__swsetup_r+0x3c>
 8007760:	686c      	ldr	r4, [r5, #4]
 8007762:	89a3      	ldrh	r3, [r4, #12]
 8007764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007768:	0719      	lsls	r1, r3, #28
 800776a:	d42c      	bmi.n	80077c6 <__swsetup_r+0x82>
 800776c:	06dd      	lsls	r5, r3, #27
 800776e:	d411      	bmi.n	8007794 <__swsetup_r+0x50>
 8007770:	2309      	movs	r3, #9
 8007772:	6033      	str	r3, [r6, #0]
 8007774:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007778:	81a3      	strh	r3, [r4, #12]
 800777a:	f04f 30ff 	mov.w	r0, #4294967295
 800777e:	e03e      	b.n	80077fe <__swsetup_r+0xba>
 8007780:	4b25      	ldr	r3, [pc, #148]	; (8007818 <__swsetup_r+0xd4>)
 8007782:	429c      	cmp	r4, r3
 8007784:	d101      	bne.n	800778a <__swsetup_r+0x46>
 8007786:	68ac      	ldr	r4, [r5, #8]
 8007788:	e7eb      	b.n	8007762 <__swsetup_r+0x1e>
 800778a:	4b24      	ldr	r3, [pc, #144]	; (800781c <__swsetup_r+0xd8>)
 800778c:	429c      	cmp	r4, r3
 800778e:	bf08      	it	eq
 8007790:	68ec      	ldreq	r4, [r5, #12]
 8007792:	e7e6      	b.n	8007762 <__swsetup_r+0x1e>
 8007794:	0758      	lsls	r0, r3, #29
 8007796:	d512      	bpl.n	80077be <__swsetup_r+0x7a>
 8007798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800779a:	b141      	cbz	r1, 80077ae <__swsetup_r+0x6a>
 800779c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077a0:	4299      	cmp	r1, r3
 80077a2:	d002      	beq.n	80077aa <__swsetup_r+0x66>
 80077a4:	4630      	mov	r0, r6
 80077a6:	f7ff faf5 	bl	8006d94 <_free_r>
 80077aa:	2300      	movs	r3, #0
 80077ac:	6363      	str	r3, [r4, #52]	; 0x34
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80077b4:	81a3      	strh	r3, [r4, #12]
 80077b6:	2300      	movs	r3, #0
 80077b8:	6063      	str	r3, [r4, #4]
 80077ba:	6923      	ldr	r3, [r4, #16]
 80077bc:	6023      	str	r3, [r4, #0]
 80077be:	89a3      	ldrh	r3, [r4, #12]
 80077c0:	f043 0308 	orr.w	r3, r3, #8
 80077c4:	81a3      	strh	r3, [r4, #12]
 80077c6:	6923      	ldr	r3, [r4, #16]
 80077c8:	b94b      	cbnz	r3, 80077de <__swsetup_r+0x9a>
 80077ca:	89a3      	ldrh	r3, [r4, #12]
 80077cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077d4:	d003      	beq.n	80077de <__swsetup_r+0x9a>
 80077d6:	4621      	mov	r1, r4
 80077d8:	4630      	mov	r0, r6
 80077da:	f000 fa09 	bl	8007bf0 <__smakebuf_r>
 80077de:	89a0      	ldrh	r0, [r4, #12]
 80077e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077e4:	f010 0301 	ands.w	r3, r0, #1
 80077e8:	d00a      	beq.n	8007800 <__swsetup_r+0xbc>
 80077ea:	2300      	movs	r3, #0
 80077ec:	60a3      	str	r3, [r4, #8]
 80077ee:	6963      	ldr	r3, [r4, #20]
 80077f0:	425b      	negs	r3, r3
 80077f2:	61a3      	str	r3, [r4, #24]
 80077f4:	6923      	ldr	r3, [r4, #16]
 80077f6:	b943      	cbnz	r3, 800780a <__swsetup_r+0xc6>
 80077f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077fc:	d1ba      	bne.n	8007774 <__swsetup_r+0x30>
 80077fe:	bd70      	pop	{r4, r5, r6, pc}
 8007800:	0781      	lsls	r1, r0, #30
 8007802:	bf58      	it	pl
 8007804:	6963      	ldrpl	r3, [r4, #20]
 8007806:	60a3      	str	r3, [r4, #8]
 8007808:	e7f4      	b.n	80077f4 <__swsetup_r+0xb0>
 800780a:	2000      	movs	r0, #0
 800780c:	e7f7      	b.n	80077fe <__swsetup_r+0xba>
 800780e:	bf00      	nop
 8007810:	2000002c 	.word	0x2000002c
 8007814:	08007f8c 	.word	0x08007f8c
 8007818:	08007fac 	.word	0x08007fac
 800781c:	08007f6c 	.word	0x08007f6c

08007820 <abort>:
 8007820:	b508      	push	{r3, lr}
 8007822:	2006      	movs	r0, #6
 8007824:	f000 fa4c 	bl	8007cc0 <raise>
 8007828:	2001      	movs	r0, #1
 800782a:	f7f9 fabb 	bl	8000da4 <_exit>
	...

08007830 <__sflush_r>:
 8007830:	898a      	ldrh	r2, [r1, #12]
 8007832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007836:	4605      	mov	r5, r0
 8007838:	0710      	lsls	r0, r2, #28
 800783a:	460c      	mov	r4, r1
 800783c:	d458      	bmi.n	80078f0 <__sflush_r+0xc0>
 800783e:	684b      	ldr	r3, [r1, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	dc05      	bgt.n	8007850 <__sflush_r+0x20>
 8007844:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007846:	2b00      	cmp	r3, #0
 8007848:	dc02      	bgt.n	8007850 <__sflush_r+0x20>
 800784a:	2000      	movs	r0, #0
 800784c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007852:	2e00      	cmp	r6, #0
 8007854:	d0f9      	beq.n	800784a <__sflush_r+0x1a>
 8007856:	2300      	movs	r3, #0
 8007858:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800785c:	682f      	ldr	r7, [r5, #0]
 800785e:	602b      	str	r3, [r5, #0]
 8007860:	d032      	beq.n	80078c8 <__sflush_r+0x98>
 8007862:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007864:	89a3      	ldrh	r3, [r4, #12]
 8007866:	075a      	lsls	r2, r3, #29
 8007868:	d505      	bpl.n	8007876 <__sflush_r+0x46>
 800786a:	6863      	ldr	r3, [r4, #4]
 800786c:	1ac0      	subs	r0, r0, r3
 800786e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007870:	b10b      	cbz	r3, 8007876 <__sflush_r+0x46>
 8007872:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007874:	1ac0      	subs	r0, r0, r3
 8007876:	2300      	movs	r3, #0
 8007878:	4602      	mov	r2, r0
 800787a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800787c:	6a21      	ldr	r1, [r4, #32]
 800787e:	4628      	mov	r0, r5
 8007880:	47b0      	blx	r6
 8007882:	1c43      	adds	r3, r0, #1
 8007884:	89a3      	ldrh	r3, [r4, #12]
 8007886:	d106      	bne.n	8007896 <__sflush_r+0x66>
 8007888:	6829      	ldr	r1, [r5, #0]
 800788a:	291d      	cmp	r1, #29
 800788c:	d82c      	bhi.n	80078e8 <__sflush_r+0xb8>
 800788e:	4a2a      	ldr	r2, [pc, #168]	; (8007938 <__sflush_r+0x108>)
 8007890:	40ca      	lsrs	r2, r1
 8007892:	07d6      	lsls	r6, r2, #31
 8007894:	d528      	bpl.n	80078e8 <__sflush_r+0xb8>
 8007896:	2200      	movs	r2, #0
 8007898:	6062      	str	r2, [r4, #4]
 800789a:	04d9      	lsls	r1, r3, #19
 800789c:	6922      	ldr	r2, [r4, #16]
 800789e:	6022      	str	r2, [r4, #0]
 80078a0:	d504      	bpl.n	80078ac <__sflush_r+0x7c>
 80078a2:	1c42      	adds	r2, r0, #1
 80078a4:	d101      	bne.n	80078aa <__sflush_r+0x7a>
 80078a6:	682b      	ldr	r3, [r5, #0]
 80078a8:	b903      	cbnz	r3, 80078ac <__sflush_r+0x7c>
 80078aa:	6560      	str	r0, [r4, #84]	; 0x54
 80078ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078ae:	602f      	str	r7, [r5, #0]
 80078b0:	2900      	cmp	r1, #0
 80078b2:	d0ca      	beq.n	800784a <__sflush_r+0x1a>
 80078b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078b8:	4299      	cmp	r1, r3
 80078ba:	d002      	beq.n	80078c2 <__sflush_r+0x92>
 80078bc:	4628      	mov	r0, r5
 80078be:	f7ff fa69 	bl	8006d94 <_free_r>
 80078c2:	2000      	movs	r0, #0
 80078c4:	6360      	str	r0, [r4, #52]	; 0x34
 80078c6:	e7c1      	b.n	800784c <__sflush_r+0x1c>
 80078c8:	6a21      	ldr	r1, [r4, #32]
 80078ca:	2301      	movs	r3, #1
 80078cc:	4628      	mov	r0, r5
 80078ce:	47b0      	blx	r6
 80078d0:	1c41      	adds	r1, r0, #1
 80078d2:	d1c7      	bne.n	8007864 <__sflush_r+0x34>
 80078d4:	682b      	ldr	r3, [r5, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d0c4      	beq.n	8007864 <__sflush_r+0x34>
 80078da:	2b1d      	cmp	r3, #29
 80078dc:	d001      	beq.n	80078e2 <__sflush_r+0xb2>
 80078de:	2b16      	cmp	r3, #22
 80078e0:	d101      	bne.n	80078e6 <__sflush_r+0xb6>
 80078e2:	602f      	str	r7, [r5, #0]
 80078e4:	e7b1      	b.n	800784a <__sflush_r+0x1a>
 80078e6:	89a3      	ldrh	r3, [r4, #12]
 80078e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078ec:	81a3      	strh	r3, [r4, #12]
 80078ee:	e7ad      	b.n	800784c <__sflush_r+0x1c>
 80078f0:	690f      	ldr	r7, [r1, #16]
 80078f2:	2f00      	cmp	r7, #0
 80078f4:	d0a9      	beq.n	800784a <__sflush_r+0x1a>
 80078f6:	0793      	lsls	r3, r2, #30
 80078f8:	680e      	ldr	r6, [r1, #0]
 80078fa:	bf08      	it	eq
 80078fc:	694b      	ldreq	r3, [r1, #20]
 80078fe:	600f      	str	r7, [r1, #0]
 8007900:	bf18      	it	ne
 8007902:	2300      	movne	r3, #0
 8007904:	eba6 0807 	sub.w	r8, r6, r7
 8007908:	608b      	str	r3, [r1, #8]
 800790a:	f1b8 0f00 	cmp.w	r8, #0
 800790e:	dd9c      	ble.n	800784a <__sflush_r+0x1a>
 8007910:	6a21      	ldr	r1, [r4, #32]
 8007912:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007914:	4643      	mov	r3, r8
 8007916:	463a      	mov	r2, r7
 8007918:	4628      	mov	r0, r5
 800791a:	47b0      	blx	r6
 800791c:	2800      	cmp	r0, #0
 800791e:	dc06      	bgt.n	800792e <__sflush_r+0xfe>
 8007920:	89a3      	ldrh	r3, [r4, #12]
 8007922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007926:	81a3      	strh	r3, [r4, #12]
 8007928:	f04f 30ff 	mov.w	r0, #4294967295
 800792c:	e78e      	b.n	800784c <__sflush_r+0x1c>
 800792e:	4407      	add	r7, r0
 8007930:	eba8 0800 	sub.w	r8, r8, r0
 8007934:	e7e9      	b.n	800790a <__sflush_r+0xda>
 8007936:	bf00      	nop
 8007938:	20400001 	.word	0x20400001

0800793c <_fflush_r>:
 800793c:	b538      	push	{r3, r4, r5, lr}
 800793e:	690b      	ldr	r3, [r1, #16]
 8007940:	4605      	mov	r5, r0
 8007942:	460c      	mov	r4, r1
 8007944:	b913      	cbnz	r3, 800794c <_fflush_r+0x10>
 8007946:	2500      	movs	r5, #0
 8007948:	4628      	mov	r0, r5
 800794a:	bd38      	pop	{r3, r4, r5, pc}
 800794c:	b118      	cbz	r0, 8007956 <_fflush_r+0x1a>
 800794e:	6983      	ldr	r3, [r0, #24]
 8007950:	b90b      	cbnz	r3, 8007956 <_fflush_r+0x1a>
 8007952:	f000 f887 	bl	8007a64 <__sinit>
 8007956:	4b14      	ldr	r3, [pc, #80]	; (80079a8 <_fflush_r+0x6c>)
 8007958:	429c      	cmp	r4, r3
 800795a:	d11b      	bne.n	8007994 <_fflush_r+0x58>
 800795c:	686c      	ldr	r4, [r5, #4]
 800795e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d0ef      	beq.n	8007946 <_fflush_r+0xa>
 8007966:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007968:	07d0      	lsls	r0, r2, #31
 800796a:	d404      	bmi.n	8007976 <_fflush_r+0x3a>
 800796c:	0599      	lsls	r1, r3, #22
 800796e:	d402      	bmi.n	8007976 <_fflush_r+0x3a>
 8007970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007972:	f000 f915 	bl	8007ba0 <__retarget_lock_acquire_recursive>
 8007976:	4628      	mov	r0, r5
 8007978:	4621      	mov	r1, r4
 800797a:	f7ff ff59 	bl	8007830 <__sflush_r>
 800797e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007980:	07da      	lsls	r2, r3, #31
 8007982:	4605      	mov	r5, r0
 8007984:	d4e0      	bmi.n	8007948 <_fflush_r+0xc>
 8007986:	89a3      	ldrh	r3, [r4, #12]
 8007988:	059b      	lsls	r3, r3, #22
 800798a:	d4dd      	bmi.n	8007948 <_fflush_r+0xc>
 800798c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800798e:	f000 f908 	bl	8007ba2 <__retarget_lock_release_recursive>
 8007992:	e7d9      	b.n	8007948 <_fflush_r+0xc>
 8007994:	4b05      	ldr	r3, [pc, #20]	; (80079ac <_fflush_r+0x70>)
 8007996:	429c      	cmp	r4, r3
 8007998:	d101      	bne.n	800799e <_fflush_r+0x62>
 800799a:	68ac      	ldr	r4, [r5, #8]
 800799c:	e7df      	b.n	800795e <_fflush_r+0x22>
 800799e:	4b04      	ldr	r3, [pc, #16]	; (80079b0 <_fflush_r+0x74>)
 80079a0:	429c      	cmp	r4, r3
 80079a2:	bf08      	it	eq
 80079a4:	68ec      	ldreq	r4, [r5, #12]
 80079a6:	e7da      	b.n	800795e <_fflush_r+0x22>
 80079a8:	08007f8c 	.word	0x08007f8c
 80079ac:	08007fac 	.word	0x08007fac
 80079b0:	08007f6c 	.word	0x08007f6c

080079b4 <std>:
 80079b4:	2300      	movs	r3, #0
 80079b6:	b510      	push	{r4, lr}
 80079b8:	4604      	mov	r4, r0
 80079ba:	e9c0 3300 	strd	r3, r3, [r0]
 80079be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079c2:	6083      	str	r3, [r0, #8]
 80079c4:	8181      	strh	r1, [r0, #12]
 80079c6:	6643      	str	r3, [r0, #100]	; 0x64
 80079c8:	81c2      	strh	r2, [r0, #14]
 80079ca:	6183      	str	r3, [r0, #24]
 80079cc:	4619      	mov	r1, r3
 80079ce:	2208      	movs	r2, #8
 80079d0:	305c      	adds	r0, #92	; 0x5c
 80079d2:	f7ff f9d7 	bl	8006d84 <memset>
 80079d6:	4b05      	ldr	r3, [pc, #20]	; (80079ec <std+0x38>)
 80079d8:	6263      	str	r3, [r4, #36]	; 0x24
 80079da:	4b05      	ldr	r3, [pc, #20]	; (80079f0 <std+0x3c>)
 80079dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80079de:	4b05      	ldr	r3, [pc, #20]	; (80079f4 <std+0x40>)
 80079e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079e2:	4b05      	ldr	r3, [pc, #20]	; (80079f8 <std+0x44>)
 80079e4:	6224      	str	r4, [r4, #32]
 80079e6:	6323      	str	r3, [r4, #48]	; 0x30
 80079e8:	bd10      	pop	{r4, pc}
 80079ea:	bf00      	nop
 80079ec:	08007cf9 	.word	0x08007cf9
 80079f0:	08007d1b 	.word	0x08007d1b
 80079f4:	08007d53 	.word	0x08007d53
 80079f8:	08007d77 	.word	0x08007d77

080079fc <_cleanup_r>:
 80079fc:	4901      	ldr	r1, [pc, #4]	; (8007a04 <_cleanup_r+0x8>)
 80079fe:	f000 b8af 	b.w	8007b60 <_fwalk_reent>
 8007a02:	bf00      	nop
 8007a04:	0800793d 	.word	0x0800793d

08007a08 <__sfmoreglue>:
 8007a08:	b570      	push	{r4, r5, r6, lr}
 8007a0a:	2268      	movs	r2, #104	; 0x68
 8007a0c:	1e4d      	subs	r5, r1, #1
 8007a0e:	4355      	muls	r5, r2
 8007a10:	460e      	mov	r6, r1
 8007a12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a16:	f7ff fa29 	bl	8006e6c <_malloc_r>
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	b140      	cbz	r0, 8007a30 <__sfmoreglue+0x28>
 8007a1e:	2100      	movs	r1, #0
 8007a20:	e9c0 1600 	strd	r1, r6, [r0]
 8007a24:	300c      	adds	r0, #12
 8007a26:	60a0      	str	r0, [r4, #8]
 8007a28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a2c:	f7ff f9aa 	bl	8006d84 <memset>
 8007a30:	4620      	mov	r0, r4
 8007a32:	bd70      	pop	{r4, r5, r6, pc}

08007a34 <__sfp_lock_acquire>:
 8007a34:	4801      	ldr	r0, [pc, #4]	; (8007a3c <__sfp_lock_acquire+0x8>)
 8007a36:	f000 b8b3 	b.w	8007ba0 <__retarget_lock_acquire_recursive>
 8007a3a:	bf00      	nop
 8007a3c:	2000084d 	.word	0x2000084d

08007a40 <__sfp_lock_release>:
 8007a40:	4801      	ldr	r0, [pc, #4]	; (8007a48 <__sfp_lock_release+0x8>)
 8007a42:	f000 b8ae 	b.w	8007ba2 <__retarget_lock_release_recursive>
 8007a46:	bf00      	nop
 8007a48:	2000084d 	.word	0x2000084d

08007a4c <__sinit_lock_acquire>:
 8007a4c:	4801      	ldr	r0, [pc, #4]	; (8007a54 <__sinit_lock_acquire+0x8>)
 8007a4e:	f000 b8a7 	b.w	8007ba0 <__retarget_lock_acquire_recursive>
 8007a52:	bf00      	nop
 8007a54:	2000084e 	.word	0x2000084e

08007a58 <__sinit_lock_release>:
 8007a58:	4801      	ldr	r0, [pc, #4]	; (8007a60 <__sinit_lock_release+0x8>)
 8007a5a:	f000 b8a2 	b.w	8007ba2 <__retarget_lock_release_recursive>
 8007a5e:	bf00      	nop
 8007a60:	2000084e 	.word	0x2000084e

08007a64 <__sinit>:
 8007a64:	b510      	push	{r4, lr}
 8007a66:	4604      	mov	r4, r0
 8007a68:	f7ff fff0 	bl	8007a4c <__sinit_lock_acquire>
 8007a6c:	69a3      	ldr	r3, [r4, #24]
 8007a6e:	b11b      	cbz	r3, 8007a78 <__sinit+0x14>
 8007a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a74:	f7ff bff0 	b.w	8007a58 <__sinit_lock_release>
 8007a78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a7c:	6523      	str	r3, [r4, #80]	; 0x50
 8007a7e:	4b13      	ldr	r3, [pc, #76]	; (8007acc <__sinit+0x68>)
 8007a80:	4a13      	ldr	r2, [pc, #76]	; (8007ad0 <__sinit+0x6c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a86:	42a3      	cmp	r3, r4
 8007a88:	bf04      	itt	eq
 8007a8a:	2301      	moveq	r3, #1
 8007a8c:	61a3      	streq	r3, [r4, #24]
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f000 f820 	bl	8007ad4 <__sfp>
 8007a94:	6060      	str	r0, [r4, #4]
 8007a96:	4620      	mov	r0, r4
 8007a98:	f000 f81c 	bl	8007ad4 <__sfp>
 8007a9c:	60a0      	str	r0, [r4, #8]
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f000 f818 	bl	8007ad4 <__sfp>
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	60e0      	str	r0, [r4, #12]
 8007aa8:	2104      	movs	r1, #4
 8007aaa:	6860      	ldr	r0, [r4, #4]
 8007aac:	f7ff ff82 	bl	80079b4 <std>
 8007ab0:	68a0      	ldr	r0, [r4, #8]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	2109      	movs	r1, #9
 8007ab6:	f7ff ff7d 	bl	80079b4 <std>
 8007aba:	68e0      	ldr	r0, [r4, #12]
 8007abc:	2202      	movs	r2, #2
 8007abe:	2112      	movs	r1, #18
 8007ac0:	f7ff ff78 	bl	80079b4 <std>
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	61a3      	str	r3, [r4, #24]
 8007ac8:	e7d2      	b.n	8007a70 <__sinit+0xc>
 8007aca:	bf00      	nop
 8007acc:	08007e84 	.word	0x08007e84
 8007ad0:	080079fd 	.word	0x080079fd

08007ad4 <__sfp>:
 8007ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad6:	4607      	mov	r7, r0
 8007ad8:	f7ff ffac 	bl	8007a34 <__sfp_lock_acquire>
 8007adc:	4b1e      	ldr	r3, [pc, #120]	; (8007b58 <__sfp+0x84>)
 8007ade:	681e      	ldr	r6, [r3, #0]
 8007ae0:	69b3      	ldr	r3, [r6, #24]
 8007ae2:	b913      	cbnz	r3, 8007aea <__sfp+0x16>
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	f7ff ffbd 	bl	8007a64 <__sinit>
 8007aea:	3648      	adds	r6, #72	; 0x48
 8007aec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	d503      	bpl.n	8007afc <__sfp+0x28>
 8007af4:	6833      	ldr	r3, [r6, #0]
 8007af6:	b30b      	cbz	r3, 8007b3c <__sfp+0x68>
 8007af8:	6836      	ldr	r6, [r6, #0]
 8007afa:	e7f7      	b.n	8007aec <__sfp+0x18>
 8007afc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b00:	b9d5      	cbnz	r5, 8007b38 <__sfp+0x64>
 8007b02:	4b16      	ldr	r3, [pc, #88]	; (8007b5c <__sfp+0x88>)
 8007b04:	60e3      	str	r3, [r4, #12]
 8007b06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b0a:	6665      	str	r5, [r4, #100]	; 0x64
 8007b0c:	f000 f847 	bl	8007b9e <__retarget_lock_init_recursive>
 8007b10:	f7ff ff96 	bl	8007a40 <__sfp_lock_release>
 8007b14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007b18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007b1c:	6025      	str	r5, [r4, #0]
 8007b1e:	61a5      	str	r5, [r4, #24]
 8007b20:	2208      	movs	r2, #8
 8007b22:	4629      	mov	r1, r5
 8007b24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b28:	f7ff f92c 	bl	8006d84 <memset>
 8007b2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b34:	4620      	mov	r0, r4
 8007b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b38:	3468      	adds	r4, #104	; 0x68
 8007b3a:	e7d9      	b.n	8007af0 <__sfp+0x1c>
 8007b3c:	2104      	movs	r1, #4
 8007b3e:	4638      	mov	r0, r7
 8007b40:	f7ff ff62 	bl	8007a08 <__sfmoreglue>
 8007b44:	4604      	mov	r4, r0
 8007b46:	6030      	str	r0, [r6, #0]
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d1d5      	bne.n	8007af8 <__sfp+0x24>
 8007b4c:	f7ff ff78 	bl	8007a40 <__sfp_lock_release>
 8007b50:	230c      	movs	r3, #12
 8007b52:	603b      	str	r3, [r7, #0]
 8007b54:	e7ee      	b.n	8007b34 <__sfp+0x60>
 8007b56:	bf00      	nop
 8007b58:	08007e84 	.word	0x08007e84
 8007b5c:	ffff0001 	.word	0xffff0001

08007b60 <_fwalk_reent>:
 8007b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b64:	4606      	mov	r6, r0
 8007b66:	4688      	mov	r8, r1
 8007b68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b6c:	2700      	movs	r7, #0
 8007b6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b72:	f1b9 0901 	subs.w	r9, r9, #1
 8007b76:	d505      	bpl.n	8007b84 <_fwalk_reent+0x24>
 8007b78:	6824      	ldr	r4, [r4, #0]
 8007b7a:	2c00      	cmp	r4, #0
 8007b7c:	d1f7      	bne.n	8007b6e <_fwalk_reent+0xe>
 8007b7e:	4638      	mov	r0, r7
 8007b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b84:	89ab      	ldrh	r3, [r5, #12]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d907      	bls.n	8007b9a <_fwalk_reent+0x3a>
 8007b8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	d003      	beq.n	8007b9a <_fwalk_reent+0x3a>
 8007b92:	4629      	mov	r1, r5
 8007b94:	4630      	mov	r0, r6
 8007b96:	47c0      	blx	r8
 8007b98:	4307      	orrs	r7, r0
 8007b9a:	3568      	adds	r5, #104	; 0x68
 8007b9c:	e7e9      	b.n	8007b72 <_fwalk_reent+0x12>

08007b9e <__retarget_lock_init_recursive>:
 8007b9e:	4770      	bx	lr

08007ba0 <__retarget_lock_acquire_recursive>:
 8007ba0:	4770      	bx	lr

08007ba2 <__retarget_lock_release_recursive>:
 8007ba2:	4770      	bx	lr

08007ba4 <__swhatbuf_r>:
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	460e      	mov	r6, r1
 8007ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bac:	2900      	cmp	r1, #0
 8007bae:	b096      	sub	sp, #88	; 0x58
 8007bb0:	4614      	mov	r4, r2
 8007bb2:	461d      	mov	r5, r3
 8007bb4:	da08      	bge.n	8007bc8 <__swhatbuf_r+0x24>
 8007bb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	602a      	str	r2, [r5, #0]
 8007bbe:	061a      	lsls	r2, r3, #24
 8007bc0:	d410      	bmi.n	8007be4 <__swhatbuf_r+0x40>
 8007bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bc6:	e00e      	b.n	8007be6 <__swhatbuf_r+0x42>
 8007bc8:	466a      	mov	r2, sp
 8007bca:	f000 f8fb 	bl	8007dc4 <_fstat_r>
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	dbf1      	blt.n	8007bb6 <__swhatbuf_r+0x12>
 8007bd2:	9a01      	ldr	r2, [sp, #4]
 8007bd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007bd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007bdc:	425a      	negs	r2, r3
 8007bde:	415a      	adcs	r2, r3
 8007be0:	602a      	str	r2, [r5, #0]
 8007be2:	e7ee      	b.n	8007bc2 <__swhatbuf_r+0x1e>
 8007be4:	2340      	movs	r3, #64	; 0x40
 8007be6:	2000      	movs	r0, #0
 8007be8:	6023      	str	r3, [r4, #0]
 8007bea:	b016      	add	sp, #88	; 0x58
 8007bec:	bd70      	pop	{r4, r5, r6, pc}
	...

08007bf0 <__smakebuf_r>:
 8007bf0:	898b      	ldrh	r3, [r1, #12]
 8007bf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bf4:	079d      	lsls	r5, r3, #30
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	d507      	bpl.n	8007c0c <__smakebuf_r+0x1c>
 8007bfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c00:	6023      	str	r3, [r4, #0]
 8007c02:	6123      	str	r3, [r4, #16]
 8007c04:	2301      	movs	r3, #1
 8007c06:	6163      	str	r3, [r4, #20]
 8007c08:	b002      	add	sp, #8
 8007c0a:	bd70      	pop	{r4, r5, r6, pc}
 8007c0c:	ab01      	add	r3, sp, #4
 8007c0e:	466a      	mov	r2, sp
 8007c10:	f7ff ffc8 	bl	8007ba4 <__swhatbuf_r>
 8007c14:	9900      	ldr	r1, [sp, #0]
 8007c16:	4605      	mov	r5, r0
 8007c18:	4630      	mov	r0, r6
 8007c1a:	f7ff f927 	bl	8006e6c <_malloc_r>
 8007c1e:	b948      	cbnz	r0, 8007c34 <__smakebuf_r+0x44>
 8007c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c24:	059a      	lsls	r2, r3, #22
 8007c26:	d4ef      	bmi.n	8007c08 <__smakebuf_r+0x18>
 8007c28:	f023 0303 	bic.w	r3, r3, #3
 8007c2c:	f043 0302 	orr.w	r3, r3, #2
 8007c30:	81a3      	strh	r3, [r4, #12]
 8007c32:	e7e3      	b.n	8007bfc <__smakebuf_r+0xc>
 8007c34:	4b0d      	ldr	r3, [pc, #52]	; (8007c6c <__smakebuf_r+0x7c>)
 8007c36:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c38:	89a3      	ldrh	r3, [r4, #12]
 8007c3a:	6020      	str	r0, [r4, #0]
 8007c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c40:	81a3      	strh	r3, [r4, #12]
 8007c42:	9b00      	ldr	r3, [sp, #0]
 8007c44:	6163      	str	r3, [r4, #20]
 8007c46:	9b01      	ldr	r3, [sp, #4]
 8007c48:	6120      	str	r0, [r4, #16]
 8007c4a:	b15b      	cbz	r3, 8007c64 <__smakebuf_r+0x74>
 8007c4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c50:	4630      	mov	r0, r6
 8007c52:	f000 f8c9 	bl	8007de8 <_isatty_r>
 8007c56:	b128      	cbz	r0, 8007c64 <__smakebuf_r+0x74>
 8007c58:	89a3      	ldrh	r3, [r4, #12]
 8007c5a:	f023 0303 	bic.w	r3, r3, #3
 8007c5e:	f043 0301 	orr.w	r3, r3, #1
 8007c62:	81a3      	strh	r3, [r4, #12]
 8007c64:	89a0      	ldrh	r0, [r4, #12]
 8007c66:	4305      	orrs	r5, r0
 8007c68:	81a5      	strh	r5, [r4, #12]
 8007c6a:	e7cd      	b.n	8007c08 <__smakebuf_r+0x18>
 8007c6c:	080079fd 	.word	0x080079fd

08007c70 <_raise_r>:
 8007c70:	291f      	cmp	r1, #31
 8007c72:	b538      	push	{r3, r4, r5, lr}
 8007c74:	4604      	mov	r4, r0
 8007c76:	460d      	mov	r5, r1
 8007c78:	d904      	bls.n	8007c84 <_raise_r+0x14>
 8007c7a:	2316      	movs	r3, #22
 8007c7c:	6003      	str	r3, [r0, #0]
 8007c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c82:	bd38      	pop	{r3, r4, r5, pc}
 8007c84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007c86:	b112      	cbz	r2, 8007c8e <_raise_r+0x1e>
 8007c88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c8c:	b94b      	cbnz	r3, 8007ca2 <_raise_r+0x32>
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f000 f830 	bl	8007cf4 <_getpid_r>
 8007c94:	462a      	mov	r2, r5
 8007c96:	4601      	mov	r1, r0
 8007c98:	4620      	mov	r0, r4
 8007c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c9e:	f000 b817 	b.w	8007cd0 <_kill_r>
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d00a      	beq.n	8007cbc <_raise_r+0x4c>
 8007ca6:	1c59      	adds	r1, r3, #1
 8007ca8:	d103      	bne.n	8007cb2 <_raise_r+0x42>
 8007caa:	2316      	movs	r3, #22
 8007cac:	6003      	str	r3, [r0, #0]
 8007cae:	2001      	movs	r0, #1
 8007cb0:	e7e7      	b.n	8007c82 <_raise_r+0x12>
 8007cb2:	2400      	movs	r4, #0
 8007cb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007cb8:	4628      	mov	r0, r5
 8007cba:	4798      	blx	r3
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	e7e0      	b.n	8007c82 <_raise_r+0x12>

08007cc0 <raise>:
 8007cc0:	4b02      	ldr	r3, [pc, #8]	; (8007ccc <raise+0xc>)
 8007cc2:	4601      	mov	r1, r0
 8007cc4:	6818      	ldr	r0, [r3, #0]
 8007cc6:	f7ff bfd3 	b.w	8007c70 <_raise_r>
 8007cca:	bf00      	nop
 8007ccc:	2000002c 	.word	0x2000002c

08007cd0 <_kill_r>:
 8007cd0:	b538      	push	{r3, r4, r5, lr}
 8007cd2:	4d07      	ldr	r5, [pc, #28]	; (8007cf0 <_kill_r+0x20>)
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	4608      	mov	r0, r1
 8007cda:	4611      	mov	r1, r2
 8007cdc:	602b      	str	r3, [r5, #0]
 8007cde:	f7f9 f851 	bl	8000d84 <_kill>
 8007ce2:	1c43      	adds	r3, r0, #1
 8007ce4:	d102      	bne.n	8007cec <_kill_r+0x1c>
 8007ce6:	682b      	ldr	r3, [r5, #0]
 8007ce8:	b103      	cbz	r3, 8007cec <_kill_r+0x1c>
 8007cea:	6023      	str	r3, [r4, #0]
 8007cec:	bd38      	pop	{r3, r4, r5, pc}
 8007cee:	bf00      	nop
 8007cf0:	20000848 	.word	0x20000848

08007cf4 <_getpid_r>:
 8007cf4:	f7f9 b83e 	b.w	8000d74 <_getpid>

08007cf8 <__sread>:
 8007cf8:	b510      	push	{r4, lr}
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d00:	f000 f894 	bl	8007e2c <_read_r>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	bfab      	itete	ge
 8007d08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8007d0c:	181b      	addge	r3, r3, r0
 8007d0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d12:	bfac      	ite	ge
 8007d14:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d16:	81a3      	strhlt	r3, [r4, #12]
 8007d18:	bd10      	pop	{r4, pc}

08007d1a <__swrite>:
 8007d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1e:	461f      	mov	r7, r3
 8007d20:	898b      	ldrh	r3, [r1, #12]
 8007d22:	05db      	lsls	r3, r3, #23
 8007d24:	4605      	mov	r5, r0
 8007d26:	460c      	mov	r4, r1
 8007d28:	4616      	mov	r6, r2
 8007d2a:	d505      	bpl.n	8007d38 <__swrite+0x1e>
 8007d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d30:	2302      	movs	r3, #2
 8007d32:	2200      	movs	r2, #0
 8007d34:	f000 f868 	bl	8007e08 <_lseek_r>
 8007d38:	89a3      	ldrh	r3, [r4, #12]
 8007d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d42:	81a3      	strh	r3, [r4, #12]
 8007d44:	4632      	mov	r2, r6
 8007d46:	463b      	mov	r3, r7
 8007d48:	4628      	mov	r0, r5
 8007d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d4e:	f000 b817 	b.w	8007d80 <_write_r>

08007d52 <__sseek>:
 8007d52:	b510      	push	{r4, lr}
 8007d54:	460c      	mov	r4, r1
 8007d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d5a:	f000 f855 	bl	8007e08 <_lseek_r>
 8007d5e:	1c43      	adds	r3, r0, #1
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	bf15      	itete	ne
 8007d64:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d6e:	81a3      	strheq	r3, [r4, #12]
 8007d70:	bf18      	it	ne
 8007d72:	81a3      	strhne	r3, [r4, #12]
 8007d74:	bd10      	pop	{r4, pc}

08007d76 <__sclose>:
 8007d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d7a:	f000 b813 	b.w	8007da4 <_close_r>
	...

08007d80 <_write_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4d07      	ldr	r5, [pc, #28]	; (8007da0 <_write_r+0x20>)
 8007d84:	4604      	mov	r4, r0
 8007d86:	4608      	mov	r0, r1
 8007d88:	4611      	mov	r1, r2
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	602a      	str	r2, [r5, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f7f9 f82f 	bl	8000df2 <_write>
 8007d94:	1c43      	adds	r3, r0, #1
 8007d96:	d102      	bne.n	8007d9e <_write_r+0x1e>
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	b103      	cbz	r3, 8007d9e <_write_r+0x1e>
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}
 8007da0:	20000848 	.word	0x20000848

08007da4 <_close_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	4d06      	ldr	r5, [pc, #24]	; (8007dc0 <_close_r+0x1c>)
 8007da8:	2300      	movs	r3, #0
 8007daa:	4604      	mov	r4, r0
 8007dac:	4608      	mov	r0, r1
 8007dae:	602b      	str	r3, [r5, #0]
 8007db0:	f7f9 f83b 	bl	8000e2a <_close>
 8007db4:	1c43      	adds	r3, r0, #1
 8007db6:	d102      	bne.n	8007dbe <_close_r+0x1a>
 8007db8:	682b      	ldr	r3, [r5, #0]
 8007dba:	b103      	cbz	r3, 8007dbe <_close_r+0x1a>
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	bd38      	pop	{r3, r4, r5, pc}
 8007dc0:	20000848 	.word	0x20000848

08007dc4 <_fstat_r>:
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	4d07      	ldr	r5, [pc, #28]	; (8007de4 <_fstat_r+0x20>)
 8007dc8:	2300      	movs	r3, #0
 8007dca:	4604      	mov	r4, r0
 8007dcc:	4608      	mov	r0, r1
 8007dce:	4611      	mov	r1, r2
 8007dd0:	602b      	str	r3, [r5, #0]
 8007dd2:	f7f9 f836 	bl	8000e42 <_fstat>
 8007dd6:	1c43      	adds	r3, r0, #1
 8007dd8:	d102      	bne.n	8007de0 <_fstat_r+0x1c>
 8007dda:	682b      	ldr	r3, [r5, #0]
 8007ddc:	b103      	cbz	r3, 8007de0 <_fstat_r+0x1c>
 8007dde:	6023      	str	r3, [r4, #0]
 8007de0:	bd38      	pop	{r3, r4, r5, pc}
 8007de2:	bf00      	nop
 8007de4:	20000848 	.word	0x20000848

08007de8 <_isatty_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4d06      	ldr	r5, [pc, #24]	; (8007e04 <_isatty_r+0x1c>)
 8007dec:	2300      	movs	r3, #0
 8007dee:	4604      	mov	r4, r0
 8007df0:	4608      	mov	r0, r1
 8007df2:	602b      	str	r3, [r5, #0]
 8007df4:	f7f9 f835 	bl	8000e62 <_isatty>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d102      	bne.n	8007e02 <_isatty_r+0x1a>
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	b103      	cbz	r3, 8007e02 <_isatty_r+0x1a>
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
 8007e04:	20000848 	.word	0x20000848

08007e08 <_lseek_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	4d07      	ldr	r5, [pc, #28]	; (8007e28 <_lseek_r+0x20>)
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	4608      	mov	r0, r1
 8007e10:	4611      	mov	r1, r2
 8007e12:	2200      	movs	r2, #0
 8007e14:	602a      	str	r2, [r5, #0]
 8007e16:	461a      	mov	r2, r3
 8007e18:	f7f9 f82e 	bl	8000e78 <_lseek>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_lseek_r+0x1e>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_lseek_r+0x1e>
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	20000848 	.word	0x20000848

08007e2c <_read_r>:
 8007e2c:	b538      	push	{r3, r4, r5, lr}
 8007e2e:	4d07      	ldr	r5, [pc, #28]	; (8007e4c <_read_r+0x20>)
 8007e30:	4604      	mov	r4, r0
 8007e32:	4608      	mov	r0, r1
 8007e34:	4611      	mov	r1, r2
 8007e36:	2200      	movs	r2, #0
 8007e38:	602a      	str	r2, [r5, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f7f8 ffbc 	bl	8000db8 <_read>
 8007e40:	1c43      	adds	r3, r0, #1
 8007e42:	d102      	bne.n	8007e4a <_read_r+0x1e>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	b103      	cbz	r3, 8007e4a <_read_r+0x1e>
 8007e48:	6023      	str	r3, [r4, #0]
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	20000848 	.word	0x20000848

08007e50 <_init>:
 8007e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e52:	bf00      	nop
 8007e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e56:	bc08      	pop	{r3}
 8007e58:	469e      	mov	lr, r3
 8007e5a:	4770      	bx	lr

08007e5c <_fini>:
 8007e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5e:	bf00      	nop
 8007e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e62:	bc08      	pop	{r3}
 8007e64:	469e      	mov	lr, r3
 8007e66:	4770      	bx	lr
