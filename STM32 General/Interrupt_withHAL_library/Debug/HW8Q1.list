
HW8Q1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c10  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08006d98  08006d98  00016d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006db4  08006db4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006db4  08006db4  00016db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dbc  08006dbc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dbc  08006dbc  00016dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dc0  08006dc0  00016dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000808  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000898  20000898  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015af0  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003744  00000000  00000000  00035bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001120  00000000  00000000  000392f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb0  00000000  00000000  0003a418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023681  00000000  00000000  0003b3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000172c5  00000000  00000000  0005ea49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb548  00000000  00000000  00075d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141256  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004900  00000000  00000000  001412a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006d80 	.word	0x08006d80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08006d80 	.word	0x08006d80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fca0 	bl	8000e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f8ae 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f9aa 	bl	8000830 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f914 	bl	8000708 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f940 	bl	8000764 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f96e 	bl	80007c4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e8:	f006 f85a 	bl	80065a0 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f2:	481b      	ldr	r0, [pc, #108]	; (8000560 <main+0x94>)
 80004f4:	f000 ffea 	bl	80014cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004fe:	4818      	ldr	r0, [pc, #96]	; (8000560 <main+0x94>)
 8000500:	f000 ffe4 	bl	80014cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050a:	4815      	ldr	r0, [pc, #84]	; (8000560 <main+0x94>)
 800050c:	f000 ffde 	bl	80014cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000516:	4812      	ldr	r0, [pc, #72]	; (8000560 <main+0x94>)
 8000518:	f000 ffd8 	bl	80014cc <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800051c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000520:	f000 fcea 	bl	8000ef8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052a:	480d      	ldr	r0, [pc, #52]	; (8000560 <main+0x94>)
 800052c:	f000 ffce 	bl	80014cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000536:	480a      	ldr	r0, [pc, #40]	; (8000560 <main+0x94>)
 8000538:	f000 ffc8 	bl	80014cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000542:	4807      	ldr	r0, [pc, #28]	; (8000560 <main+0x94>)
 8000544:	f000 ffc2 	bl	80014cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054e:	4804      	ldr	r0, [pc, #16]	; (8000560 <main+0x94>)
 8000550:	f000 ffbc 	bl	80014cc <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000554:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000558:	f000 fcce 	bl	8000ef8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800055c:	e7c6      	b.n	80004ec <main+0x20>
 800055e:	bf00      	nop
 8000560:	40020c00 	.word	0x40020c00

08000564 <HAL_GPIO_EXTI_Callback>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	80fb      	strh	r3, [r7, #6]

	for(uint32_t i = 0; i < 500000; i++);
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
 8000572:	e002      	b.n	800057a <HAL_GPIO_EXTI_Callback+0x16>
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	3301      	adds	r3, #1
 8000578:	617b      	str	r3, [r7, #20]
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	4a29      	ldr	r2, [pc, #164]	; (8000624 <HAL_GPIO_EXTI_Callback+0xc0>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d9f8      	bls.n	8000574 <HAL_GPIO_EXTI_Callback+0x10>

	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8000582:	e043      	b.n	800060c <HAL_GPIO_EXTI_Callback+0xa8>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058a:	4827      	ldr	r0, [pc, #156]	; (8000628 <HAL_GPIO_EXTI_Callback+0xc4>)
 800058c:	f000 ff9e 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000596:	4824      	ldr	r0, [pc, #144]	; (8000628 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000598:	f000 ff98 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a2:	4821      	ldr	r0, [pc, #132]	; (8000628 <HAL_GPIO_EXTI_Callback+0xc4>)
 80005a4:	f000 ff92 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ae:	481e      	ldr	r0, [pc, #120]	; (8000628 <HAL_GPIO_EXTI_Callback+0xc4>)
 80005b0:	f000 ff8c 	bl	80014cc <HAL_GPIO_WritePin>
		for(uint32_t i = 0; i < 5000000; i++);
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	e002      	b.n	80005c0 <HAL_GPIO_EXTI_Callback+0x5c>
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	3301      	adds	r3, #1
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
 80005c2:	4a1a      	ldr	r2, [pc, #104]	; (800062c <HAL_GPIO_EXTI_Callback+0xc8>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d9f8      	bls.n	80005ba <HAL_GPIO_EXTI_Callback+0x56>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ce:	4816      	ldr	r0, [pc, #88]	; (8000628 <HAL_GPIO_EXTI_Callback+0xc4>)
 80005d0:	f000 ff7c 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005da:	4813      	ldr	r0, [pc, #76]	; (8000628 <HAL_GPIO_EXTI_Callback+0xc4>)
 80005dc:	f000 ff76 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e6:	4810      	ldr	r0, [pc, #64]	; (8000628 <HAL_GPIO_EXTI_Callback+0xc4>)
 80005e8:	f000 ff70 	bl	80014cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f2:	480d      	ldr	r0, [pc, #52]	; (8000628 <HAL_GPIO_EXTI_Callback+0xc4>)
 80005f4:	f000 ff6a 	bl	80014cc <HAL_GPIO_WritePin>
		for(uint32_t i = 0; i < 5000000; i++);
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	e002      	b.n	8000604 <HAL_GPIO_EXTI_Callback+0xa0>
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	3301      	adds	r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	4a09      	ldr	r2, [pc, #36]	; (800062c <HAL_GPIO_EXTI_Callback+0xc8>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d9f8      	bls.n	80005fe <HAL_GPIO_EXTI_Callback+0x9a>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 800060c:	2101      	movs	r1, #1
 800060e:	4808      	ldr	r0, [pc, #32]	; (8000630 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000610:	f000 ff44 	bl	800149c <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	2b01      	cmp	r3, #1
 8000618:	d0b4      	beq.n	8000584 <HAL_GPIO_EXTI_Callback+0x20>
	}
}
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	3718      	adds	r7, #24
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	0007a11f 	.word	0x0007a11f
 8000628:	40020c00 	.word	0x40020c00
 800062c:	004c4b3f 	.word	0x004c4b3f
 8000630:	40020000 	.word	0x40020000

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f006 fa96 	bl	8006b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a27      	ldr	r2, [pc, #156]	; (8000700 <SystemClock_Config+0xcc>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b22      	ldr	r3, [pc, #136]	; (8000704 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a21      	ldr	r2, [pc, #132]	; (8000704 <SystemClock_Config+0xd0>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000690:	2301      	movs	r3, #1
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b2:	2307      	movs	r3, #7
 80006b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 f90a 	bl	80038d4 <HAL_RCC_OscConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006c6:	f000 f9b9 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	230f      	movs	r3, #15
 80006cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2302      	movs	r3, #2
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2105      	movs	r1, #5
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 fb6b 	bl	8003dc4 <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006f4:	f000 f9a2 	bl	8000a3c <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	; 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_I2C1_Init+0x50>)
 800070e:	4a13      	ldr	r2, [pc, #76]	; (800075c <MX_I2C1_Init+0x54>)
 8000710:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_I2C1_Init+0x50>)
 8000714:	4a12      	ldr	r2, [pc, #72]	; (8000760 <MX_I2C1_Init+0x58>)
 8000716:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_I2C1_Init+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_I2C1_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_I2C1_Init+0x50>)
 8000726:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800072a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <MX_I2C1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_I2C1_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_I2C1_Init+0x50>)
 8000746:	f002 fae1 	bl	8002d0c <HAL_I2C_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000750:	f000 f974 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200000ac 	.word	0x200000ac
 800075c:	40005400 	.word	0x40005400
 8000760:	000186a0 	.word	0x000186a0

08000764 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_I2S3_Init+0x54>)
 800076a:	4a14      	ldr	r2, [pc, #80]	; (80007bc <MX_I2S3_Init+0x58>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_I2S3_Init+0x54>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_I2S3_Init+0x54>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_I2S3_Init+0x54>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <MX_I2S3_Init+0x54>)
 8000784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000788:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_I2S3_Init+0x54>)
 800078c:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <MX_I2S3_Init+0x5c>)
 800078e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_I2S3_Init+0x54>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_I2S3_Init+0x54>)
 8000798:	2200      	movs	r2, #0
 800079a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_I2S3_Init+0x54>)
 800079e:	2200      	movs	r2, #0
 80007a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_I2S3_Init+0x54>)
 80007a4:	f002 fbf6 	bl	8002f94 <HAL_I2S_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ae:	f000 f945 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000100 	.word	0x20000100
 80007bc:	40003c00 	.word	0x40003c00
 80007c0:	00017700 	.word	0x00017700

080007c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_SPI1_Init+0x64>)
 80007ca:	4a18      	ldr	r2, [pc, #96]	; (800082c <MX_SPI1_Init+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_SPI1_Init+0x64>)
 80007d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_SPI1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_SPI1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_SPI1_Init+0x64>)
 80007f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_SPI1_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_SPI1_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_SPI1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <MX_SPI1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_SPI1_Init+0x64>)
 8000810:	220a      	movs	r2, #10
 8000812:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_SPI1_Init+0x64>)
 8000816:	f003 fe21 	bl	800445c <HAL_SPI_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000820:	f000 f90c 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000148 	.word	0x20000148
 800082c:	40013000 	.word	0x40013000

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	4b76      	ldr	r3, [pc, #472]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a75      	ldr	r2, [pc, #468]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 8000850:	f043 0310 	orr.w	r3, r3, #16
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b73      	ldr	r3, [pc, #460]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0310 	and.w	r3, r3, #16
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	4b6f      	ldr	r3, [pc, #444]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a6e      	ldr	r2, [pc, #440]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b6c      	ldr	r3, [pc, #432]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b68      	ldr	r3, [pc, #416]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a67      	ldr	r2, [pc, #412]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b65      	ldr	r3, [pc, #404]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b61      	ldr	r3, [pc, #388]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a60      	ldr	r2, [pc, #384]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b5e      	ldr	r3, [pc, #376]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b5a      	ldr	r3, [pc, #360]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a59      	ldr	r2, [pc, #356]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b57      	ldr	r3, [pc, #348]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b53      	ldr	r3, [pc, #332]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a52      	ldr	r2, [pc, #328]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008dc:	f043 0308 	orr.w	r3, r3, #8
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b50      	ldr	r3, [pc, #320]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0308 	and.w	r3, r3, #8
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2108      	movs	r1, #8
 80008f2:	484d      	ldr	r0, [pc, #308]	; (8000a28 <MX_GPIO_Init+0x1f8>)
 80008f4:	f000 fdea 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2101      	movs	r1, #1
 80008fc:	484b      	ldr	r0, [pc, #300]	; (8000a2c <MX_GPIO_Init+0x1fc>)
 80008fe:	f000 fde5 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin
 8000902:	2200      	movs	r2, #0
 8000904:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000908:	4849      	ldr	r0, [pc, #292]	; (8000a30 <MX_GPIO_Init+0x200>)
 800090a:	f000 fddf 	bl	80014cc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800090e:	2308      	movs	r3, #8
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4840      	ldr	r0, [pc, #256]	; (8000a28 <MX_GPIO_Init+0x1f8>)
 8000926:	f000 fc1d 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800092a:	2301      	movs	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	483a      	ldr	r0, [pc, #232]	; (8000a2c <MX_GPIO_Init+0x1fc>)
 8000942:	f000 fc0f 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000946:	2308      	movs	r3, #8
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000956:	2305      	movs	r3, #5
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4832      	ldr	r0, [pc, #200]	; (8000a2c <MX_GPIO_Init+0x1fc>)
 8000962:	f000 fbff 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000966:	2301      	movs	r3, #1
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	482e      	ldr	r0, [pc, #184]	; (8000a34 <MX_GPIO_Init+0x204>)
 800097c:	f000 fbf2 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000980:	2304      	movs	r3, #4
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4829      	ldr	r0, [pc, #164]	; (8000a38 <MX_GPIO_Init+0x208>)
 8000994:	f000 fbe6 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009aa:	2305      	movs	r3, #5
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4820      	ldr	r0, [pc, #128]	; (8000a38 <MX_GPIO_Init+0x208>)
 80009b6:	f000 fbd5 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Orange_LED_Pin Red_LED_Pin Blue_LED_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin
 80009ba:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009be:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4817      	ldr	r0, [pc, #92]	; (8000a30 <MX_GPIO_Init+0x200>)
 80009d4:	f000 fbc6 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d8:	2320      	movs	r3, #32
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4811      	ldr	r0, [pc, #68]	; (8000a30 <MX_GPIO_Init+0x200>)
 80009ec:	f000 fbba 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f0:	2302      	movs	r3, #2
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4808      	ldr	r0, [pc, #32]	; (8000a28 <MX_GPIO_Init+0x1f8>)
 8000a06:	f000 fbad 	bl	8001164 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	2006      	movs	r0, #6
 8000a10:	f000 fb71 	bl	80010f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a14:	2006      	movs	r0, #6
 8000a16:	f000 fb8a 	bl	800112e <HAL_NVIC_EnableIRQ>

}
 8000a1a:	bf00      	nop
 8000a1c:	3730      	adds	r7, #48	; 0x30
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40020800 	.word	0x40020800
 8000a30:	40020c00 	.word	0x40020c00
 8000a34:	40020000 	.word	0x40020000
 8000a38:	40020400 	.word	0x40020400

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <Error_Handler+0x8>
	...

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	4a0f      	ldr	r2, [pc, #60]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a86:	2007      	movs	r0, #7
 8000a88:	f000 fb2a 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800

08000a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a19      	ldr	r2, [pc, #100]	; (8000b1c <HAL_I2C_MspInit+0x84>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d12c      	bne.n	8000b14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ad6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000adc:	2312      	movs	r3, #18
 8000ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	480c      	ldr	r0, [pc, #48]	; (8000b24 <HAL_I2C_MspInit+0x8c>)
 8000af4:	f000 fb36 	bl	8001164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000b02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b06:	6413      	str	r3, [r2, #64]	; 0x40
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b14:	bf00      	nop
 8000b16:	3728      	adds	r7, #40	; 0x28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40005400 	.word	0x40005400
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020400 	.word	0x40020400

08000b28 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08e      	sub	sp, #56	; 0x38
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a31      	ldr	r2, [pc, #196]	; (8000c18 <HAL_I2S_MspInit+0xf0>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d15a      	bne.n	8000c0e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b5c:	23c0      	movs	r3, #192	; 0xc0
 8000b5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b60:	2302      	movs	r3, #2
 8000b62:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f003 fb37 	bl	80041dc <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b74:	f7ff ff62 	bl	8000a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <HAL_I2S_MspInit+0xf4>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	4a26      	ldr	r2, [pc, #152]	; (8000c1c <HAL_I2S_MspInit+0xf4>)
 8000b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b86:	6413      	str	r3, [r2, #64]	; 0x40
 8000b88:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <HAL_I2S_MspInit+0xf4>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <HAL_I2S_MspInit+0xf4>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	4a1f      	ldr	r2, [pc, #124]	; (8000c1c <HAL_I2S_MspInit+0xf4>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <HAL_I2S_MspInit+0xf4>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <HAL_I2S_MspInit+0xf4>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	4a18      	ldr	r2, [pc, #96]	; (8000c1c <HAL_I2S_MspInit+0xf4>)
 8000bba:	f043 0304 	orr.w	r3, r3, #4
 8000bbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <HAL_I2S_MspInit+0xf4>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	f003 0304 	and.w	r3, r3, #4
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bcc:	2310      	movs	r3, #16
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bdc:	2306      	movs	r3, #6
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	480e      	ldr	r0, [pc, #56]	; (8000c20 <HAL_I2S_MspInit+0xf8>)
 8000be8:	f000 fabc 	bl	8001164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bec:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bfe:	2306      	movs	r3, #6
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	4806      	ldr	r0, [pc, #24]	; (8000c24 <HAL_I2S_MspInit+0xfc>)
 8000c0a:	f000 faab 	bl	8001164 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3738      	adds	r7, #56	; 0x38
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40003c00 	.word	0x40003c00
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40020800 	.word	0x40020800

08000c28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a19      	ldr	r2, [pc, #100]	; (8000cac <HAL_SPI_MspInit+0x84>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d12b      	bne.n	8000ca2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <HAL_SPI_MspInit+0x88>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	4a17      	ldr	r2, [pc, #92]	; (8000cb0 <HAL_SPI_MspInit+0x88>)
 8000c54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c58:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_SPI_MspInit+0x88>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <HAL_SPI_MspInit+0x88>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <HAL_SPI_MspInit+0x88>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_SPI_MspInit+0x88>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c82:	23e0      	movs	r3, #224	; 0xe0
 8000c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c92:	2305      	movs	r3, #5
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <HAL_SPI_MspInit+0x8c>)
 8000c9e:	f000 fa61 	bl	8001164 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ca2:	bf00      	nop
 8000ca4:	3728      	adds	r7, #40	; 0x28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40013000 	.word	0x40013000
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020000 	.word	0x40020000

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <NMI_Handler+0x4>

08000cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <MemManage_Handler+0x4>

08000cca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d04:	f000 f8d8 	bl	8000eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f000 fbf5 	bl	8001500 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <OTG_FS_IRQHandler+0x10>)
 8000d22:	f000 fe6f 	bl	8001a04 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000584 	.word	0x20000584

08000d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d38:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <_sbrk+0x5c>)
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <_sbrk+0x60>)
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <_sbrk+0x64>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <_sbrk+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d207      	bcs.n	8000d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d60:	f005 fece 	bl	8006b00 <__errno>
 8000d64:	4603      	mov	r3, r0
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <_sbrk+0x64>)
 8000d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20020000 	.word	0x20020000
 8000d90:	00000400 	.word	0x00000400
 8000d94:	200001a0 	.word	0x200001a0
 8000d98:	20000898 	.word	0x20000898

08000d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dc6:	490e      	ldr	r1, [pc, #56]	; (8000e00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ddc:	4c0b      	ldr	r4, [pc, #44]	; (8000e0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dea:	f7ff ffd7 	bl	8000d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dee:	f005 fe8d 	bl	8006b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df2:	f7ff fb6b 	bl	80004cc <main>
  bx  lr    
 8000df6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000df8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e04:	08006dc4 	.word	0x08006dc4
  ldr r2, =_sbss
 8000e08:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e0c:	20000898 	.word	0x20000898

08000e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC_IRQHandler>
	...

08000e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <HAL_Init+0x40>)
 8000e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <HAL_Init+0x40>)
 8000e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_Init+0x40>)
 8000e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 f94f 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e42:	2000      	movs	r0, #0
 8000e44:	f000 f808 	bl	8000e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e48:	f7ff fdfe 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023c00 	.word	0x40023c00

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_InitTick+0x54>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_InitTick+0x58>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f967 	bl	800114a <HAL_SYSTICK_Config>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00e      	b.n	8000ea4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b0f      	cmp	r3, #15
 8000e8a:	d80a      	bhi.n	8000ea2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f000 f92f 	bl	80010f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e98:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <HAL_InitTick+0x5c>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e000      	b.n	8000ea4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	20000004 	.word	0x20000004

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	200001a4 	.word	0x200001a4

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	200001a4 	.word	0x200001a4

08000ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f00:	f7ff ffee 	bl	8000ee0 <HAL_GetTick>
 8000f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f10:	d005      	beq.n	8000f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_Delay+0x44>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f1e:	bf00      	nop
 8000f20:	f7ff ffde 	bl	8000ee0 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d8f7      	bhi.n	8000f20 <HAL_Delay+0x28>
  {
  }
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008

08000f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f72:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	60d3      	str	r3, [r2, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	f003 0307 	and.w	r3, r3, #7
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	db0b      	blt.n	8000fce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	f003 021f 	and.w	r2, r3, #31
 8000fbc:	4907      	ldr	r1, [pc, #28]	; (8000fdc <__NVIC_EnableIRQ+0x38>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	095b      	lsrs	r3, r3, #5
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000e100 	.word	0xe000e100

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db0a      	blt.n	800100a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	490c      	ldr	r1, [pc, #48]	; (800102c <__NVIC_SetPriority+0x4c>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	440b      	add	r3, r1
 8001004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001008:	e00a      	b.n	8001020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4908      	ldr	r1, [pc, #32]	; (8001030 <__NVIC_SetPriority+0x50>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	3b04      	subs	r3, #4
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	440b      	add	r3, r1
 800101e:	761a      	strb	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf28      	it	cs
 8001052:	2304      	movcs	r3, #4
 8001054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3304      	adds	r3, #4
 800105a:	2b06      	cmp	r3, #6
 800105c:	d902      	bls.n	8001064 <NVIC_EncodePriority+0x30>
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3b03      	subs	r3, #3
 8001062:	e000      	b.n	8001066 <NVIC_EncodePriority+0x32>
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	f04f 32ff 	mov.w	r2, #4294967295
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107c:	f04f 31ff 	mov.w	r1, #4294967295
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43d9      	mvns	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	4313      	orrs	r3, r2
         );
}
 800108e:	4618      	mov	r0, r3
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ac:	d301      	bcc.n	80010b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00f      	b.n	80010d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <SysTick_Config+0x40>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ba:	210f      	movs	r1, #15
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f7ff ff8e 	bl	8000fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <SysTick_Config+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <SysTick_Config+0x40>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	e000e010 	.word	0xe000e010

080010e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff29 	bl	8000f40 <__NVIC_SetPriorityGrouping>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001108:	f7ff ff3e 	bl	8000f88 <__NVIC_GetPriorityGrouping>
 800110c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff ff8e 	bl	8001034 <NVIC_EncodePriority>
 8001118:	4602      	mov	r2, r0
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff5d 	bl	8000fe0 <__NVIC_SetPriority>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff31 	bl	8000fa4 <__NVIC_EnableIRQ>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ffa2 	bl	800109c <SysTick_Config>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
 800117e:	e16b      	b.n	8001458 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001180:	2201      	movs	r2, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	429a      	cmp	r2, r3
 800119a:	f040 815a 	bne.w	8001452 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d005      	beq.n	80011b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d130      	bne.n	8001218 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ec:	2201      	movs	r2, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	091b      	lsrs	r3, r3, #4
 8001202:	f003 0201 	and.w	r2, r3, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	2b03      	cmp	r3, #3
 8001222:	d017      	beq.n	8001254 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	2203      	movs	r2, #3
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d123      	bne.n	80012a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	08da      	lsrs	r2, r3, #3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3208      	adds	r2, #8
 8001268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	220f      	movs	r2, #15
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	691a      	ldr	r2, [r3, #16]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	08da      	lsrs	r2, r3, #3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3208      	adds	r2, #8
 80012a2:	69b9      	ldr	r1, [r7, #24]
 80012a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0203 	and.w	r2, r3, #3
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 80b4 	beq.w	8001452 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b60      	ldr	r3, [pc, #384]	; (8001470 <HAL_GPIO_Init+0x30c>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	4a5f      	ldr	r2, [pc, #380]	; (8001470 <HAL_GPIO_Init+0x30c>)
 80012f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f8:	6453      	str	r3, [r2, #68]	; 0x44
 80012fa:	4b5d      	ldr	r3, [pc, #372]	; (8001470 <HAL_GPIO_Init+0x30c>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001306:	4a5b      	ldr	r2, [pc, #364]	; (8001474 <HAL_GPIO_Init+0x310>)
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	3302      	adds	r3, #2
 800130e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	220f      	movs	r2, #15
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a52      	ldr	r2, [pc, #328]	; (8001478 <HAL_GPIO_Init+0x314>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d02b      	beq.n	800138a <HAL_GPIO_Init+0x226>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a51      	ldr	r2, [pc, #324]	; (800147c <HAL_GPIO_Init+0x318>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d025      	beq.n	8001386 <HAL_GPIO_Init+0x222>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a50      	ldr	r2, [pc, #320]	; (8001480 <HAL_GPIO_Init+0x31c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d01f      	beq.n	8001382 <HAL_GPIO_Init+0x21e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4f      	ldr	r2, [pc, #316]	; (8001484 <HAL_GPIO_Init+0x320>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d019      	beq.n	800137e <HAL_GPIO_Init+0x21a>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4e      	ldr	r2, [pc, #312]	; (8001488 <HAL_GPIO_Init+0x324>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d013      	beq.n	800137a <HAL_GPIO_Init+0x216>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4d      	ldr	r2, [pc, #308]	; (800148c <HAL_GPIO_Init+0x328>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d00d      	beq.n	8001376 <HAL_GPIO_Init+0x212>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4c      	ldr	r2, [pc, #304]	; (8001490 <HAL_GPIO_Init+0x32c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d007      	beq.n	8001372 <HAL_GPIO_Init+0x20e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4b      	ldr	r2, [pc, #300]	; (8001494 <HAL_GPIO_Init+0x330>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d101      	bne.n	800136e <HAL_GPIO_Init+0x20a>
 800136a:	2307      	movs	r3, #7
 800136c:	e00e      	b.n	800138c <HAL_GPIO_Init+0x228>
 800136e:	2308      	movs	r3, #8
 8001370:	e00c      	b.n	800138c <HAL_GPIO_Init+0x228>
 8001372:	2306      	movs	r3, #6
 8001374:	e00a      	b.n	800138c <HAL_GPIO_Init+0x228>
 8001376:	2305      	movs	r3, #5
 8001378:	e008      	b.n	800138c <HAL_GPIO_Init+0x228>
 800137a:	2304      	movs	r3, #4
 800137c:	e006      	b.n	800138c <HAL_GPIO_Init+0x228>
 800137e:	2303      	movs	r3, #3
 8001380:	e004      	b.n	800138c <HAL_GPIO_Init+0x228>
 8001382:	2302      	movs	r3, #2
 8001384:	e002      	b.n	800138c <HAL_GPIO_Init+0x228>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <HAL_GPIO_Init+0x228>
 800138a:	2300      	movs	r3, #0
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	f002 0203 	and.w	r2, r2, #3
 8001392:	0092      	lsls	r2, r2, #2
 8001394:	4093      	lsls	r3, r2
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800139c:	4935      	ldr	r1, [pc, #212]	; (8001474 <HAL_GPIO_Init+0x310>)
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	3302      	adds	r3, #2
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013aa:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <HAL_GPIO_Init+0x334>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ce:	4a32      	ldr	r2, [pc, #200]	; (8001498 <HAL_GPIO_Init+0x334>)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d4:	4b30      	ldr	r3, [pc, #192]	; (8001498 <HAL_GPIO_Init+0x334>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f8:	4a27      	ldr	r2, [pc, #156]	; (8001498 <HAL_GPIO_Init+0x334>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013fe:	4b26      	ldr	r3, [pc, #152]	; (8001498 <HAL_GPIO_Init+0x334>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001422:	4a1d      	ldr	r2, [pc, #116]	; (8001498 <HAL_GPIO_Init+0x334>)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <HAL_GPIO_Init+0x334>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800144c:	4a12      	ldr	r2, [pc, #72]	; (8001498 <HAL_GPIO_Init+0x334>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3301      	adds	r3, #1
 8001456:	61fb      	str	r3, [r7, #28]
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	2b0f      	cmp	r3, #15
 800145c:	f67f ae90 	bls.w	8001180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3724      	adds	r7, #36	; 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	40013800 	.word	0x40013800
 8001478:	40020000 	.word	0x40020000
 800147c:	40020400 	.word	0x40020400
 8001480:	40020800 	.word	0x40020800
 8001484:	40020c00 	.word	0x40020c00
 8001488:	40021000 	.word	0x40021000
 800148c:	40021400 	.word	0x40021400
 8001490:	40021800 	.word	0x40021800
 8001494:	40021c00 	.word	0x40021c00
 8001498:	40013c00 	.word	0x40013c00

0800149c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	887b      	ldrh	r3, [r7, #2]
 80014ae:	4013      	ands	r3, r2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d002      	beq.n	80014ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	e001      	b.n	80014be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]
 80014d8:	4613      	mov	r3, r2
 80014da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014dc:	787b      	ldrb	r3, [r7, #1]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014e2:	887a      	ldrh	r2, [r7, #2]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014e8:	e003      	b.n	80014f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	041a      	lsls	r2, r3, #16
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	619a      	str	r2, [r3, #24]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	4013      	ands	r3, r2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d006      	beq.n	8001524 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001516:	4a05      	ldr	r2, [pc, #20]	; (800152c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f820 	bl	8000564 <HAL_GPIO_EXTI_Callback>
  }
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40013c00 	.word	0x40013c00

08001530 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	b08f      	sub	sp, #60	; 0x3c
 8001534:	af0a      	add	r7, sp, #40	; 0x28
 8001536:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e054      	b.n	80015ec <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d106      	bne.n	8001562 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f005 f873 	bl	8006648 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2203      	movs	r2, #3
 8001566:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800156e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001572:	2b00      	cmp	r3, #0
 8001574:	d102      	bne.n	800157c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f003 f866 	bl	8004652 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	687e      	ldr	r6, [r7, #4]
 800158e:	466d      	mov	r5, sp
 8001590:	f106 0410 	add.w	r4, r6, #16
 8001594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800159a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80015a4:	1d33      	adds	r3, r6, #4
 80015a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a8:	6838      	ldr	r0, [r7, #0]
 80015aa:	f002 ffe0 	bl	800456e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2101      	movs	r1, #1
 80015b4:	4618      	mov	r0, r3
 80015b6:	f003 f85d 	bl	8004674 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	687e      	ldr	r6, [r7, #4]
 80015c2:	466d      	mov	r5, sp
 80015c4:	f106 0410 	add.w	r4, r6, #16
 80015c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80015d8:	1d33      	adds	r3, r6, #4
 80015da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015dc:	6838      	ldr	r0, [r7, #0]
 80015de:	f003 f9e5 	bl	80049ac <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015f4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b089      	sub	sp, #36	; 0x24
 80015f8:	af04      	add	r7, sp, #16
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	4608      	mov	r0, r1
 80015fe:	4611      	mov	r1, r2
 8001600:	461a      	mov	r2, r3
 8001602:	4603      	mov	r3, r0
 8001604:	70fb      	strb	r3, [r7, #3]
 8001606:	460b      	mov	r3, r1
 8001608:	70bb      	strb	r3, [r7, #2]
 800160a:	4613      	mov	r3, r2
 800160c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_HCD_HC_Init+0x28>
 8001618:	2302      	movs	r3, #2
 800161a:	e076      	b.n	800170a <HAL_HCD_HC_Init+0x116>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	212c      	movs	r1, #44	; 0x2c
 800162a:	fb01 f303 	mul.w	r3, r1, r3
 800162e:	4413      	add	r3, r2
 8001630:	333d      	adds	r3, #61	; 0x3d
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	212c      	movs	r1, #44	; 0x2c
 800163c:	fb01 f303 	mul.w	r3, r1, r3
 8001640:	4413      	add	r3, r2
 8001642:	3338      	adds	r3, #56	; 0x38
 8001644:	787a      	ldrb	r2, [r7, #1]
 8001646:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	212c      	movs	r1, #44	; 0x2c
 800164e:	fb01 f303 	mul.w	r3, r1, r3
 8001652:	4413      	add	r3, r2
 8001654:	3340      	adds	r3, #64	; 0x40
 8001656:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001658:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	212c      	movs	r1, #44	; 0x2c
 8001660:	fb01 f303 	mul.w	r3, r1, r3
 8001664:	4413      	add	r3, r2
 8001666:	3339      	adds	r3, #57	; 0x39
 8001668:	78fa      	ldrb	r2, [r7, #3]
 800166a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	212c      	movs	r1, #44	; 0x2c
 8001672:	fb01 f303 	mul.w	r3, r1, r3
 8001676:	4413      	add	r3, r2
 8001678:	333f      	adds	r3, #63	; 0x3f
 800167a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800167e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	78ba      	ldrb	r2, [r7, #2]
 8001684:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001688:	b2d0      	uxtb	r0, r2
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	212c      	movs	r1, #44	; 0x2c
 800168e:	fb01 f303 	mul.w	r3, r1, r3
 8001692:	4413      	add	r3, r2
 8001694:	333a      	adds	r3, #58	; 0x3a
 8001696:	4602      	mov	r2, r0
 8001698:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800169a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	da09      	bge.n	80016b6 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016a2:	78fb      	ldrb	r3, [r7, #3]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	212c      	movs	r1, #44	; 0x2c
 80016a8:	fb01 f303 	mul.w	r3, r1, r3
 80016ac:	4413      	add	r3, r2
 80016ae:	333b      	adds	r3, #59	; 0x3b
 80016b0:	2201      	movs	r2, #1
 80016b2:	701a      	strb	r2, [r3, #0]
 80016b4:	e008      	b.n	80016c8 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016b6:	78fb      	ldrb	r3, [r7, #3]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	212c      	movs	r1, #44	; 0x2c
 80016bc:	fb01 f303 	mul.w	r3, r1, r3
 80016c0:	4413      	add	r3, r2
 80016c2:	333b      	adds	r3, #59	; 0x3b
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	212c      	movs	r1, #44	; 0x2c
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	333c      	adds	r3, #60	; 0x3c
 80016d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016da:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	787c      	ldrb	r4, [r7, #1]
 80016e2:	78ba      	ldrb	r2, [r7, #2]
 80016e4:	78f9      	ldrb	r1, [r7, #3]
 80016e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016e8:	9302      	str	r3, [sp, #8]
 80016ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	4623      	mov	r3, r4
 80016f8:	f003 fab4 	bl	8004c64 <USB_HC_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001708:	7bfb      	ldrb	r3, [r7, #15]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	bd90      	pop	{r4, r7, pc}

08001712 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b084      	sub	sp, #16
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	460b      	mov	r3, r1
 800171c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <HAL_HCD_HC_Halt+0x1e>
 800172c:	2302      	movs	r3, #2
 800172e:	e00f      	b.n	8001750 <HAL_HCD_HC_Halt+0x3e>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	78fa      	ldrb	r2, [r7, #3]
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f003 fd04 	bl	800514e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	4608      	mov	r0, r1
 8001762:	4611      	mov	r1, r2
 8001764:	461a      	mov	r2, r3
 8001766:	4603      	mov	r3, r0
 8001768:	70fb      	strb	r3, [r7, #3]
 800176a:	460b      	mov	r3, r1
 800176c:	70bb      	strb	r3, [r7, #2]
 800176e:	4613      	mov	r3, r2
 8001770:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	212c      	movs	r1, #44	; 0x2c
 8001778:	fb01 f303 	mul.w	r3, r1, r3
 800177c:	4413      	add	r3, r2
 800177e:	333b      	adds	r3, #59	; 0x3b
 8001780:	78ba      	ldrb	r2, [r7, #2]
 8001782:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	212c      	movs	r1, #44	; 0x2c
 800178a:	fb01 f303 	mul.w	r3, r1, r3
 800178e:	4413      	add	r3, r2
 8001790:	333f      	adds	r3, #63	; 0x3f
 8001792:	787a      	ldrb	r2, [r7, #1]
 8001794:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001796:	7c3b      	ldrb	r3, [r7, #16]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d112      	bne.n	80017c2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	212c      	movs	r1, #44	; 0x2c
 80017a2:	fb01 f303 	mul.w	r3, r1, r3
 80017a6:	4413      	add	r3, r2
 80017a8:	3342      	adds	r3, #66	; 0x42
 80017aa:	2203      	movs	r2, #3
 80017ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	212c      	movs	r1, #44	; 0x2c
 80017b4:	fb01 f303 	mul.w	r3, r1, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	333d      	adds	r3, #61	; 0x3d
 80017bc:	7f3a      	ldrb	r2, [r7, #28]
 80017be:	701a      	strb	r2, [r3, #0]
 80017c0:	e008      	b.n	80017d4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	212c      	movs	r1, #44	; 0x2c
 80017c8:	fb01 f303 	mul.w	r3, r1, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	3342      	adds	r3, #66	; 0x42
 80017d0:	2202      	movs	r2, #2
 80017d2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017d4:	787b      	ldrb	r3, [r7, #1]
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	f200 80c6 	bhi.w	8001968 <HAL_HCD_HC_SubmitRequest+0x210>
 80017dc:	a201      	add	r2, pc, #4	; (adr r2, 80017e4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80017de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e2:	bf00      	nop
 80017e4:	080017f5 	.word	0x080017f5
 80017e8:	08001955 	.word	0x08001955
 80017ec:	08001859 	.word	0x08001859
 80017f0:	080018d7 	.word	0x080018d7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80017f4:	7c3b      	ldrb	r3, [r7, #16]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	f040 80b8 	bne.w	800196c <HAL_HCD_HC_SubmitRequest+0x214>
 80017fc:	78bb      	ldrb	r3, [r7, #2]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 80b4 	bne.w	800196c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001804:	8b3b      	ldrh	r3, [r7, #24]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d108      	bne.n	800181c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	212c      	movs	r1, #44	; 0x2c
 8001810:	fb01 f303 	mul.w	r3, r1, r3
 8001814:	4413      	add	r3, r2
 8001816:	3355      	adds	r3, #85	; 0x55
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	212c      	movs	r1, #44	; 0x2c
 8001822:	fb01 f303 	mul.w	r3, r1, r3
 8001826:	4413      	add	r3, r2
 8001828:	3355      	adds	r3, #85	; 0x55
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d109      	bne.n	8001844 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	212c      	movs	r1, #44	; 0x2c
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4413      	add	r3, r2
 800183c:	3342      	adds	r3, #66	; 0x42
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001842:	e093      	b.n	800196c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	212c      	movs	r1, #44	; 0x2c
 800184a:	fb01 f303 	mul.w	r3, r1, r3
 800184e:	4413      	add	r3, r2
 8001850:	3342      	adds	r3, #66	; 0x42
 8001852:	2202      	movs	r2, #2
 8001854:	701a      	strb	r2, [r3, #0]
      break;
 8001856:	e089      	b.n	800196c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001858:	78bb      	ldrb	r3, [r7, #2]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d11d      	bne.n	800189a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	212c      	movs	r1, #44	; 0x2c
 8001864:	fb01 f303 	mul.w	r3, r1, r3
 8001868:	4413      	add	r3, r2
 800186a:	3355      	adds	r3, #85	; 0x55
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	212c      	movs	r1, #44	; 0x2c
 8001878:	fb01 f303 	mul.w	r3, r1, r3
 800187c:	4413      	add	r3, r2
 800187e:	3342      	adds	r3, #66	; 0x42
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001884:	e073      	b.n	800196e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001886:	78fb      	ldrb	r3, [r7, #3]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	212c      	movs	r1, #44	; 0x2c
 800188c:	fb01 f303 	mul.w	r3, r1, r3
 8001890:	4413      	add	r3, r2
 8001892:	3342      	adds	r3, #66	; 0x42
 8001894:	2202      	movs	r2, #2
 8001896:	701a      	strb	r2, [r3, #0]
      break;
 8001898:	e069      	b.n	800196e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	212c      	movs	r1, #44	; 0x2c
 80018a0:	fb01 f303 	mul.w	r3, r1, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	3354      	adds	r3, #84	; 0x54
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d109      	bne.n	80018c2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	212c      	movs	r1, #44	; 0x2c
 80018b4:	fb01 f303 	mul.w	r3, r1, r3
 80018b8:	4413      	add	r3, r2
 80018ba:	3342      	adds	r3, #66	; 0x42
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
      break;
 80018c0:	e055      	b.n	800196e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	212c      	movs	r1, #44	; 0x2c
 80018c8:	fb01 f303 	mul.w	r3, r1, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	3342      	adds	r3, #66	; 0x42
 80018d0:	2202      	movs	r2, #2
 80018d2:	701a      	strb	r2, [r3, #0]
      break;
 80018d4:	e04b      	b.n	800196e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018d6:	78bb      	ldrb	r3, [r7, #2]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d11d      	bne.n	8001918 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	212c      	movs	r1, #44	; 0x2c
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	3355      	adds	r3, #85	; 0x55
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d109      	bne.n	8001904 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	212c      	movs	r1, #44	; 0x2c
 80018f6:	fb01 f303 	mul.w	r3, r1, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	3342      	adds	r3, #66	; 0x42
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001902:	e034      	b.n	800196e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	212c      	movs	r1, #44	; 0x2c
 800190a:	fb01 f303 	mul.w	r3, r1, r3
 800190e:	4413      	add	r3, r2
 8001910:	3342      	adds	r3, #66	; 0x42
 8001912:	2202      	movs	r2, #2
 8001914:	701a      	strb	r2, [r3, #0]
      break;
 8001916:	e02a      	b.n	800196e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001918:	78fb      	ldrb	r3, [r7, #3]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	212c      	movs	r1, #44	; 0x2c
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	4413      	add	r3, r2
 8001924:	3354      	adds	r3, #84	; 0x54
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d109      	bne.n	8001940 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800192c:	78fb      	ldrb	r3, [r7, #3]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	212c      	movs	r1, #44	; 0x2c
 8001932:	fb01 f303 	mul.w	r3, r1, r3
 8001936:	4413      	add	r3, r2
 8001938:	3342      	adds	r3, #66	; 0x42
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
      break;
 800193e:	e016      	b.n	800196e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	212c      	movs	r1, #44	; 0x2c
 8001946:	fb01 f303 	mul.w	r3, r1, r3
 800194a:	4413      	add	r3, r2
 800194c:	3342      	adds	r3, #66	; 0x42
 800194e:	2202      	movs	r2, #2
 8001950:	701a      	strb	r2, [r3, #0]
      break;
 8001952:	e00c      	b.n	800196e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	212c      	movs	r1, #44	; 0x2c
 800195a:	fb01 f303 	mul.w	r3, r1, r3
 800195e:	4413      	add	r3, r2
 8001960:	3342      	adds	r3, #66	; 0x42
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
      break;
 8001966:	e002      	b.n	800196e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001968:	bf00      	nop
 800196a:	e000      	b.n	800196e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800196c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	212c      	movs	r1, #44	; 0x2c
 8001974:	fb01 f303 	mul.w	r3, r1, r3
 8001978:	4413      	add	r3, r2
 800197a:	3344      	adds	r3, #68	; 0x44
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	8b3a      	ldrh	r2, [r7, #24]
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	202c      	movs	r0, #44	; 0x2c
 8001988:	fb00 f303 	mul.w	r3, r0, r3
 800198c:	440b      	add	r3, r1
 800198e:	334c      	adds	r3, #76	; 0x4c
 8001990:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001992:	78fb      	ldrb	r3, [r7, #3]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	212c      	movs	r1, #44	; 0x2c
 8001998:	fb01 f303 	mul.w	r3, r1, r3
 800199c:	4413      	add	r3, r2
 800199e:	3360      	adds	r3, #96	; 0x60
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	212c      	movs	r1, #44	; 0x2c
 80019aa:	fb01 f303 	mul.w	r3, r1, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	3350      	adds	r3, #80	; 0x50
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	212c      	movs	r1, #44	; 0x2c
 80019bc:	fb01 f303 	mul.w	r3, r1, r3
 80019c0:	4413      	add	r3, r2
 80019c2:	3339      	adds	r3, #57	; 0x39
 80019c4:	78fa      	ldrb	r2, [r7, #3]
 80019c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	212c      	movs	r1, #44	; 0x2c
 80019ce:	fb01 f303 	mul.w	r3, r1, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	3361      	adds	r3, #97	; 0x61
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6818      	ldr	r0, [r3, #0]
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	222c      	movs	r2, #44	; 0x2c
 80019e2:	fb02 f303 	mul.w	r3, r2, r3
 80019e6:	3338      	adds	r3, #56	; 0x38
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	18d1      	adds	r1, r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	461a      	mov	r2, r3
 80019f4:	f003 fa58 	bl	8004ea8 <USB_HC_StartXfer>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop

08001a04 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 ff83 	bl	8004926 <USB_GetMode>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	f040 80f6 	bne.w	8001c14 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f002 ff67 	bl	8004900 <USB_ReadInterrupts>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 80ec 	beq.w	8001c12 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 ff5e 	bl	8004900 <USB_ReadInterrupts>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a4e:	d104      	bne.n	8001a5a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f002 ff4e 	bl	8004900 <USB_ReadInterrupts>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a6e:	d104      	bne.n	8001a7a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f002 ff3e 	bl	8004900 <USB_ReadInterrupts>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a8e:	d104      	bne.n	8001a9a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f002 ff2e 	bl	8004900 <USB_ReadInterrupts>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d103      	bne.n	8001ab6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f002 ff20 	bl	8004900 <USB_ReadInterrupts>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aca:	d11c      	bne.n	8001b06 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ad4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10f      	bne.n	8001b06 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ae6:	2110      	movs	r1, #16
 8001ae8:	6938      	ldr	r0, [r7, #16]
 8001aea:	f002 fe0f 	bl	800470c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001aee:	6938      	ldr	r0, [r7, #16]
 8001af0:	f002 fe40 	bl	8004774 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2101      	movs	r1, #1
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 f816 	bl	8004b2c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f004 fe1f 	bl	8006744 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f002 fef8 	bl	8004900 <USB_ReadInterrupts>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b1a:	d102      	bne.n	8001b22 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f001 f882 	bl	8002c26 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f002 feea 	bl	8004900 <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d106      	bne.n	8001b44 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f004 fde8 	bl	800670c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2208      	movs	r2, #8
 8001b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f002 fed9 	bl	8004900 <USB_ReadInterrupts>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	2b10      	cmp	r3, #16
 8001b56:	d101      	bne.n	8001b5c <HAL_HCD_IRQHandler+0x158>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <HAL_HCD_IRQHandler+0x15a>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d012      	beq.n	8001b88 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	699a      	ldr	r2, [r3, #24]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0210 	bic.w	r2, r2, #16
 8001b70:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 ff85 	bl	8002a82 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	699a      	ldr	r2, [r3, #24]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0210 	orr.w	r2, r2, #16
 8001b86:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f002 feb7 	bl	8004900 <USB_ReadInterrupts>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b9c:	d13a      	bne.n	8001c14 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f003 fac2 	bl	800512c <USB_HC_ReadInterrupt>
 8001ba8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e025      	b.n	8001bfc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d018      	beq.n	8001bf6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	015a      	lsls	r2, r3, #5
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4413      	add	r3, r2
 8001bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bda:	d106      	bne.n	8001bea <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	4619      	mov	r1, r3
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f88f 	bl	8001d06 <HCD_HC_IN_IRQHandler>
 8001be8:	e005      	b.n	8001bf6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	4619      	mov	r1, r3
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 fbdd 	bl	80023b0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d3d4      	bcc.n	8001bb0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c0e:	615a      	str	r2, [r3, #20]
 8001c10:	e000      	b.n	8001c14 <HAL_HCD_IRQHandler+0x210>
      return;
 8001c12:	bf00      	nop
    }
  }
}
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <HAL_HCD_Start+0x16>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e013      	b.n	8001c58 <HAL_HCD_Start+0x3e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f002 ffae 	bl	8004ba0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f002 fcf1 	bl	8004630 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_HCD_Stop+0x16>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e00d      	b.n	8001c92 <HAL_HCD_Stop+0x32>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f003 fb9c 	bl	80053c0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ca6:	78fb      	ldrb	r3, [r7, #3]
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	212c      	movs	r1, #44	; 0x2c
 8001cac:	fb01 f303 	mul.w	r3, r1, r3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	3360      	adds	r3, #96	; 0x60
 8001cb4:	781b      	ldrb	r3, [r3, #0]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	212c      	movs	r1, #44	; 0x2c
 8001cd4:	fb01 f303 	mul.w	r3, r1, r3
 8001cd8:	4413      	add	r3, r2
 8001cda:	3350      	adds	r3, #80	; 0x50
 8001cdc:	681b      	ldr	r3, [r3, #0]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f002 ffa2 	bl	8004c40 <USB_GetCurrentFrame>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	015a      	lsls	r2, r3, #5
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4413      	add	r3, r2
 8001d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d11a      	bne.n	8001d6c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	015a      	lsls	r2, r3, #5
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d42:	461a      	mov	r2, r3
 8001d44:	2304      	movs	r3, #4
 8001d46:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	212c      	movs	r1, #44	; 0x2c
 8001d4e:	fb01 f303 	mul.w	r3, r1, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	3361      	adds	r3, #97	; 0x61
 8001d56:	2206      	movs	r2, #6
 8001d58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 f9f2 	bl	800514e <USB_HC_Halt>
 8001d6a:	e0af      	b.n	8001ecc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	015a      	lsls	r2, r3, #5
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d82:	d11b      	bne.n	8001dbc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	015a      	lsls	r2, r3, #5
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d90:	461a      	mov	r2, r3
 8001d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d96:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	212c      	movs	r1, #44	; 0x2c
 8001d9e:	fb01 f303 	mul.w	r3, r1, r3
 8001da2:	4413      	add	r3, r2
 8001da4:	3361      	adds	r3, #97	; 0x61
 8001da6:	2207      	movs	r2, #7
 8001da8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f003 f9ca 	bl	800514e <USB_HC_Halt>
 8001dba:	e087      	b.n	8001ecc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	015a      	lsls	r2, r3, #5
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	2b20      	cmp	r3, #32
 8001dd0:	d109      	bne.n	8001de6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	015a      	lsls	r2, r3, #5
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dde:	461a      	mov	r2, r3
 8001de0:	2320      	movs	r3, #32
 8001de2:	6093      	str	r3, [r2, #8]
 8001de4:	e072      	b.n	8001ecc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d11a      	bne.n	8001e32 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e08:	461a      	mov	r2, r3
 8001e0a:	2308      	movs	r3, #8
 8001e0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	212c      	movs	r1, #44	; 0x2c
 8001e14:	fb01 f303 	mul.w	r3, r1, r3
 8001e18:	4413      	add	r3, r2
 8001e1a:	3361      	adds	r3, #97	; 0x61
 8001e1c:	2205      	movs	r2, #5
 8001e1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	4611      	mov	r1, r2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 f98f 	bl	800514e <USB_HC_Halt>
 8001e30:	e04c      	b.n	8001ecc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e48:	d11b      	bne.n	8001e82 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	015a      	lsls	r2, r3, #5
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e56:	461a      	mov	r2, r3
 8001e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	212c      	movs	r1, #44	; 0x2c
 8001e64:	fb01 f303 	mul.w	r3, r1, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	3361      	adds	r3, #97	; 0x61
 8001e6c:	2208      	movs	r2, #8
 8001e6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	4611      	mov	r1, r2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f003 f967 	bl	800514e <USB_HC_Halt>
 8001e80:	e024      	b.n	8001ecc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	015a      	lsls	r2, r3, #5
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4413      	add	r3, r2
 8001e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e94:	2b80      	cmp	r3, #128	; 0x80
 8001e96:	d119      	bne.n	8001ecc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	015a      	lsls	r2, r3, #5
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	212c      	movs	r1, #44	; 0x2c
 8001eb0:	fb01 f303 	mul.w	r3, r1, r3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3361      	adds	r3, #97	; 0x61
 8001eb8:	2206      	movs	r2, #6
 8001eba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f003 f941 	bl	800514e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	015a      	lsls	r2, r3, #5
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ee2:	d112      	bne.n	8001f0a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	4611      	mov	r1, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 f92d 	bl	800514e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	015a      	lsls	r2, r3, #5
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f00:	461a      	mov	r2, r3
 8001f02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f06:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f08:	e24e      	b.n	80023a8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	f040 80df 	bne.w	80020e0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d019      	beq.n	8001f5e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	212c      	movs	r1, #44	; 0x2c
 8001f30:	fb01 f303 	mul.w	r3, r1, r3
 8001f34:	4413      	add	r3, r2
 8001f36:	3348      	adds	r3, #72	; 0x48
 8001f38:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	0159      	lsls	r1, r3, #5
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	440b      	add	r3, r1
 8001f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f4c:	1ad2      	subs	r2, r2, r3
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	202c      	movs	r0, #44	; 0x2c
 8001f54:	fb00 f303 	mul.w	r3, r0, r3
 8001f58:	440b      	add	r3, r1
 8001f5a:	3350      	adds	r3, #80	; 0x50
 8001f5c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	212c      	movs	r1, #44	; 0x2c
 8001f64:	fb01 f303 	mul.w	r3, r1, r3
 8001f68:	4413      	add	r3, r2
 8001f6a:	3361      	adds	r3, #97	; 0x61
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	212c      	movs	r1, #44	; 0x2c
 8001f76:	fb01 f303 	mul.w	r3, r1, r3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	335c      	adds	r3, #92	; 0x5c
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8e:	461a      	mov	r2, r3
 8001f90:	2301      	movs	r3, #1
 8001f92:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	212c      	movs	r1, #44	; 0x2c
 8001f9a:	fb01 f303 	mul.w	r3, r1, r3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	333f      	adds	r3, #63	; 0x3f
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d009      	beq.n	8001fbc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	212c      	movs	r1, #44	; 0x2c
 8001fae:	fb01 f303 	mul.w	r3, r1, r3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	333f      	adds	r3, #63	; 0x3f
 8001fb6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d111      	bne.n	8001fe0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f003 f8c1 	bl	800514e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	015a      	lsls	r2, r3, #5
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd8:	461a      	mov	r2, r3
 8001fda:	2310      	movs	r3, #16
 8001fdc:	6093      	str	r3, [r2, #8]
 8001fde:	e03a      	b.n	8002056 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	212c      	movs	r1, #44	; 0x2c
 8001fe6:	fb01 f303 	mul.w	r3, r1, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	333f      	adds	r3, #63	; 0x3f
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d009      	beq.n	8002008 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	212c      	movs	r1, #44	; 0x2c
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	333f      	adds	r3, #63	; 0x3f
 8002002:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002004:	2b01      	cmp	r3, #1
 8002006:	d126      	bne.n	8002056 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	0151      	lsls	r1, r2, #5
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	440a      	add	r2, r1
 800201e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002022:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002026:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	212c      	movs	r1, #44	; 0x2c
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	4413      	add	r3, r2
 8002034:	3360      	adds	r3, #96	; 0x60
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	b2d9      	uxtb	r1, r3
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	202c      	movs	r0, #44	; 0x2c
 8002044:	fb00 f303 	mul.w	r3, r0, r3
 8002048:	4413      	add	r3, r2
 800204a:	3360      	adds	r3, #96	; 0x60
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f004 fb85 	bl	8006760 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d12b      	bne.n	80020b6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	212c      	movs	r1, #44	; 0x2c
 8002064:	fb01 f303 	mul.w	r3, r1, r3
 8002068:	4413      	add	r3, r2
 800206a:	3348      	adds	r3, #72	; 0x48
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	202c      	movs	r0, #44	; 0x2c
 8002074:	fb00 f202 	mul.w	r2, r0, r2
 8002078:	440a      	add	r2, r1
 800207a:	3240      	adds	r2, #64	; 0x40
 800207c:	8812      	ldrh	r2, [r2, #0]
 800207e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 818e 	beq.w	80023a8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	212c      	movs	r1, #44	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	3354      	adds	r3, #84	; 0x54
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	f083 0301 	eor.w	r3, r3, #1
 80020a0:	b2d8      	uxtb	r0, r3
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	212c      	movs	r1, #44	; 0x2c
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	3354      	adds	r3, #84	; 0x54
 80020b0:	4602      	mov	r2, r0
 80020b2:	701a      	strb	r2, [r3, #0]
}
 80020b4:	e178      	b.n	80023a8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	3354      	adds	r3, #84	; 0x54
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	f083 0301 	eor.w	r3, r3, #1
 80020ca:	b2d8      	uxtb	r0, r3
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	212c      	movs	r1, #44	; 0x2c
 80020d2:	fb01 f303 	mul.w	r3, r1, r3
 80020d6:	4413      	add	r3, r2
 80020d8:	3354      	adds	r3, #84	; 0x54
 80020da:	4602      	mov	r2, r0
 80020dc:	701a      	strb	r2, [r3, #0]
}
 80020de:	e163      	b.n	80023a8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	015a      	lsls	r2, r3, #5
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	f040 80f6 	bne.w	80022e4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	212c      	movs	r1, #44	; 0x2c
 80020fe:	fb01 f303 	mul.w	r3, r1, r3
 8002102:	4413      	add	r3, r2
 8002104:	3361      	adds	r3, #97	; 0x61
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d109      	bne.n	8002120 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	212c      	movs	r1, #44	; 0x2c
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	3360      	adds	r3, #96	; 0x60
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]
 800211e:	e0c9      	b.n	80022b4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	212c      	movs	r1, #44	; 0x2c
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	4413      	add	r3, r2
 800212c:	3361      	adds	r3, #97	; 0x61
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b05      	cmp	r3, #5
 8002132:	d109      	bne.n	8002148 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	212c      	movs	r1, #44	; 0x2c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	3360      	adds	r3, #96	; 0x60
 8002142:	2205      	movs	r2, #5
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	e0b5      	b.n	80022b4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	212c      	movs	r1, #44	; 0x2c
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	3361      	adds	r3, #97	; 0x61
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b06      	cmp	r3, #6
 800215a:	d009      	beq.n	8002170 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	3361      	adds	r3, #97	; 0x61
 800216a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800216c:	2b08      	cmp	r3, #8
 800216e:	d150      	bne.n	8002212 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	212c      	movs	r1, #44	; 0x2c
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	4413      	add	r3, r2
 800217c:	335c      	adds	r3, #92	; 0x5c
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	202c      	movs	r0, #44	; 0x2c
 8002188:	fb00 f303 	mul.w	r3, r0, r3
 800218c:	440b      	add	r3, r1
 800218e:	335c      	adds	r3, #92	; 0x5c
 8002190:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	212c      	movs	r1, #44	; 0x2c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	335c      	adds	r3, #92	; 0x5c
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d912      	bls.n	80021cc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	212c      	movs	r1, #44	; 0x2c
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	4413      	add	r3, r2
 80021b2:	335c      	adds	r3, #92	; 0x5c
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	212c      	movs	r1, #44	; 0x2c
 80021be:	fb01 f303 	mul.w	r3, r1, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	3360      	adds	r3, #96	; 0x60
 80021c6:	2204      	movs	r2, #4
 80021c8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021ca:	e073      	b.n	80022b4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	212c      	movs	r1, #44	; 0x2c
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	3360      	adds	r3, #96	; 0x60
 80021da:	2202      	movs	r2, #2
 80021dc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021f4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021fc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220a:	461a      	mov	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002210:	e050      	b.n	80022b4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	212c      	movs	r1, #44	; 0x2c
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	4413      	add	r3, r2
 800221e:	3361      	adds	r3, #97	; 0x61
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b03      	cmp	r3, #3
 8002224:	d122      	bne.n	800226c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	212c      	movs	r1, #44	; 0x2c
 800222c:	fb01 f303 	mul.w	r3, r1, r3
 8002230:	4413      	add	r3, r2
 8002232:	3360      	adds	r3, #96	; 0x60
 8002234:	2202      	movs	r2, #2
 8002236:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4413      	add	r3, r2
 8002240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800224e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002256:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4413      	add	r3, r2
 8002260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002264:	461a      	mov	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	e023      	b.n	80022b4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	212c      	movs	r1, #44	; 0x2c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	3361      	adds	r3, #97	; 0x61
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b07      	cmp	r3, #7
 800227e:	d119      	bne.n	80022b4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	212c      	movs	r1, #44	; 0x2c
 8002286:	fb01 f303 	mul.w	r3, r1, r3
 800228a:	4413      	add	r3, r2
 800228c:	335c      	adds	r3, #92	; 0x5c
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	202c      	movs	r0, #44	; 0x2c
 8002298:	fb00 f303 	mul.w	r3, r0, r3
 800229c:	440b      	add	r3, r1
 800229e:	335c      	adds	r3, #92	; 0x5c
 80022a0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	212c      	movs	r1, #44	; 0x2c
 80022a8:	fb01 f303 	mul.w	r3, r1, r3
 80022ac:	4413      	add	r3, r2
 80022ae:	3360      	adds	r3, #96	; 0x60
 80022b0:	2204      	movs	r2, #4
 80022b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c0:	461a      	mov	r2, r3
 80022c2:	2302      	movs	r3, #2
 80022c4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	b2d9      	uxtb	r1, r3
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	202c      	movs	r0, #44	; 0x2c
 80022d0:	fb00 f303 	mul.w	r3, r0, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	3360      	adds	r3, #96	; 0x60
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f004 fa3f 	bl	8006760 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022e2:	e061      	b.n	80023a8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	2b10      	cmp	r3, #16
 80022f8:	d156      	bne.n	80023a8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	333f      	adds	r3, #63	; 0x3f
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b03      	cmp	r3, #3
 800230c:	d111      	bne.n	8002332 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	335c      	adds	r3, #92	; 0x5c
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f002 ff0f 	bl	800514e <USB_HC_Halt>
 8002330:	e031      	b.n	8002396 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	212c      	movs	r1, #44	; 0x2c
 8002338:	fb01 f303 	mul.w	r3, r1, r3
 800233c:	4413      	add	r3, r2
 800233e:	333f      	adds	r3, #63	; 0x3f
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d009      	beq.n	800235a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	212c      	movs	r1, #44	; 0x2c
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	4413      	add	r3, r2
 8002352:	333f      	adds	r3, #63	; 0x3f
 8002354:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002356:	2b02      	cmp	r3, #2
 8002358:	d11d      	bne.n	8002396 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	212c      	movs	r1, #44	; 0x2c
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	4413      	add	r3, r2
 8002366:	335c      	adds	r3, #92	; 0x5c
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d110      	bne.n	8002396 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	212c      	movs	r1, #44	; 0x2c
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	4413      	add	r3, r2
 8002380:	3361      	adds	r3, #97	; 0x61
 8002382:	2203      	movs	r2, #3
 8002384:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f002 fedc 	bl	800514e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4413      	add	r3, r2
 800239e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a2:	461a      	mov	r2, r3
 80023a4:	2310      	movs	r3, #16
 80023a6:	6093      	str	r3, [r2, #8]
}
 80023a8:	bf00      	nop
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d11a      	bne.n	8002416 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	015a      	lsls	r2, r3, #5
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ec:	461a      	mov	r2, r3
 80023ee:	2304      	movs	r3, #4
 80023f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	212c      	movs	r1, #44	; 0x2c
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	3361      	adds	r3, #97	; 0x61
 8002400:	2206      	movs	r2, #6
 8002402:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	4611      	mov	r1, r2
 800240e:	4618      	mov	r0, r3
 8002410:	f002 fe9d 	bl	800514e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002414:	e331      	b.n	8002a7a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	4413      	add	r3, r2
 800241e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b20      	cmp	r3, #32
 800242a:	d12e      	bne.n	800248a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	4413      	add	r3, r2
 8002434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002438:	461a      	mov	r2, r3
 800243a:	2320      	movs	r3, #32
 800243c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	212c      	movs	r1, #44	; 0x2c
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	4413      	add	r3, r2
 800244a:	333d      	adds	r3, #61	; 0x3d
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b01      	cmp	r3, #1
 8002450:	f040 8313 	bne.w	8002a7a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	212c      	movs	r1, #44	; 0x2c
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	4413      	add	r3, r2
 8002460:	333d      	adds	r3, #61	; 0x3d
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	212c      	movs	r1, #44	; 0x2c
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	4413      	add	r3, r2
 8002472:	3360      	adds	r3, #96	; 0x60
 8002474:	2202      	movs	r2, #2
 8002476:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f002 fe63 	bl	800514e <USB_HC_Halt>
}
 8002488:	e2f7      	b.n	8002a7a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4413      	add	r3, r2
 8002492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800249c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024a0:	d112      	bne.n	80024c8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ae:	461a      	mov	r2, r3
 80024b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024b4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f002 fe44 	bl	800514e <USB_HC_Halt>
}
 80024c6:	e2d8      	b.n	8002a7a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d140      	bne.n	8002560 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	212c      	movs	r1, #44	; 0x2c
 80024e4:	fb01 f303 	mul.w	r3, r1, r3
 80024e8:	4413      	add	r3, r2
 80024ea:	335c      	adds	r3, #92	; 0x5c
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002502:	2b40      	cmp	r3, #64	; 0x40
 8002504:	d111      	bne.n	800252a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	333d      	adds	r3, #61	; 0x3d
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	4413      	add	r3, r2
 8002520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002524:	461a      	mov	r2, r3
 8002526:	2340      	movs	r3, #64	; 0x40
 8002528:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4413      	add	r3, r2
 8002532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002536:	461a      	mov	r2, r3
 8002538:	2301      	movs	r3, #1
 800253a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	212c      	movs	r1, #44	; 0x2c
 8002542:	fb01 f303 	mul.w	r3, r1, r3
 8002546:	4413      	add	r3, r2
 8002548:	3361      	adds	r3, #97	; 0x61
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f002 fdf8 	bl	800514e <USB_HC_Halt>
}
 800255e:	e28c      	b.n	8002a7a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002572:	2b40      	cmp	r3, #64	; 0x40
 8002574:	d12c      	bne.n	80025d0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	212c      	movs	r1, #44	; 0x2c
 800257c:	fb01 f303 	mul.w	r3, r1, r3
 8002580:	4413      	add	r3, r2
 8002582:	3361      	adds	r3, #97	; 0x61
 8002584:	2204      	movs	r2, #4
 8002586:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	212c      	movs	r1, #44	; 0x2c
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	333d      	adds	r3, #61	; 0x3d
 8002596:	2201      	movs	r2, #1
 8002598:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	335c      	adds	r3, #92	; 0x5c
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f002 fdc9 	bl	800514e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c8:	461a      	mov	r2, r3
 80025ca:	2340      	movs	r3, #64	; 0x40
 80025cc:	6093      	str	r3, [r2, #8]
}
 80025ce:	e254      	b.n	8002a7a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d11a      	bne.n	800261c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f2:	461a      	mov	r2, r3
 80025f4:	2308      	movs	r3, #8
 80025f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	212c      	movs	r1, #44	; 0x2c
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4413      	add	r3, r2
 8002604:	3361      	adds	r3, #97	; 0x61
 8002606:	2205      	movs	r2, #5
 8002608:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f002 fd9a 	bl	800514e <USB_HC_Halt>
}
 800261a:	e22e      	b.n	8002a7a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	4413      	add	r3, r2
 8002624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	2b10      	cmp	r3, #16
 8002630:	d140      	bne.n	80026b4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	212c      	movs	r1, #44	; 0x2c
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	4413      	add	r3, r2
 800263e:	335c      	adds	r3, #92	; 0x5c
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	212c      	movs	r1, #44	; 0x2c
 800264a:	fb01 f303 	mul.w	r3, r1, r3
 800264e:	4413      	add	r3, r2
 8002650:	3361      	adds	r3, #97	; 0x61
 8002652:	2203      	movs	r2, #3
 8002654:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	212c      	movs	r1, #44	; 0x2c
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	333d      	adds	r3, #61	; 0x3d
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d112      	bne.n	8002690 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	212c      	movs	r1, #44	; 0x2c
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4413      	add	r3, r2
 8002676:	333c      	adds	r3, #60	; 0x3c
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d108      	bne.n	8002690 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	212c      	movs	r1, #44	; 0x2c
 8002684:	fb01 f303 	mul.w	r3, r1, r3
 8002688:	4413      	add	r3, r2
 800268a:	333d      	adds	r3, #61	; 0x3d
 800268c:	2201      	movs	r2, #1
 800268e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f002 fd57 	bl	800514e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ac:	461a      	mov	r2, r3
 80026ae:	2310      	movs	r3, #16
 80026b0:	6093      	str	r3, [r2, #8]
}
 80026b2:	e1e2      	b.n	8002a7a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c6:	2b80      	cmp	r3, #128	; 0x80
 80026c8:	d164      	bne.n	8002794 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d111      	bne.n	80026f6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	3361      	adds	r3, #97	; 0x61
 80026e0:	2206      	movs	r2, #6
 80026e2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 fd2d 	bl	800514e <USB_HC_Halt>
 80026f4:	e044      	b.n	8002780 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	335c      	adds	r3, #92	; 0x5c
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	202c      	movs	r0, #44	; 0x2c
 800270e:	fb00 f303 	mul.w	r3, r0, r3
 8002712:	440b      	add	r3, r1
 8002714:	335c      	adds	r3, #92	; 0x5c
 8002716:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	212c      	movs	r1, #44	; 0x2c
 800271e:	fb01 f303 	mul.w	r3, r1, r3
 8002722:	4413      	add	r3, r2
 8002724:	335c      	adds	r3, #92	; 0x5c
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d920      	bls.n	800276e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	212c      	movs	r1, #44	; 0x2c
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	4413      	add	r3, r2
 8002738:	335c      	adds	r3, #92	; 0x5c
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	3360      	adds	r3, #96	; 0x60
 800274c:	2204      	movs	r2, #4
 800274e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	b2d9      	uxtb	r1, r3
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	202c      	movs	r0, #44	; 0x2c
 800275a:	fb00 f303 	mul.w	r3, r0, r3
 800275e:	4413      	add	r3, r2
 8002760:	3360      	adds	r3, #96	; 0x60
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f003 fffa 	bl	8006760 <HAL_HCD_HC_NotifyURBChange_Callback>
 800276c:	e008      	b.n	8002780 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	3360      	adds	r3, #96	; 0x60
 800277c:	2202      	movs	r2, #2
 800277e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278c:	461a      	mov	r2, r3
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	6093      	str	r3, [r2, #8]
}
 8002792:	e172      	b.n	8002a7a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027aa:	d11b      	bne.n	80027e4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	212c      	movs	r1, #44	; 0x2c
 80027b2:	fb01 f303 	mul.w	r3, r1, r3
 80027b6:	4413      	add	r3, r2
 80027b8:	3361      	adds	r3, #97	; 0x61
 80027ba:	2208      	movs	r2, #8
 80027bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	4611      	mov	r1, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f002 fcc0 	bl	800514e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027da:	461a      	mov	r2, r3
 80027dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027e0:	6093      	str	r3, [r2, #8]
}
 80027e2:	e14a      	b.n	8002a7a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	f040 813f 	bne.w	8002a7a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	212c      	movs	r1, #44	; 0x2c
 8002802:	fb01 f303 	mul.w	r3, r1, r3
 8002806:	4413      	add	r3, r2
 8002808:	3361      	adds	r3, #97	; 0x61
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d17d      	bne.n	800290c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	212c      	movs	r1, #44	; 0x2c
 8002816:	fb01 f303 	mul.w	r3, r1, r3
 800281a:	4413      	add	r3, r2
 800281c:	3360      	adds	r3, #96	; 0x60
 800281e:	2201      	movs	r2, #1
 8002820:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	212c      	movs	r1, #44	; 0x2c
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	4413      	add	r3, r2
 800282e:	333f      	adds	r3, #63	; 0x3f
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d00a      	beq.n	800284c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	212c      	movs	r1, #44	; 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	333f      	adds	r3, #63	; 0x3f
 8002844:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002846:	2b03      	cmp	r3, #3
 8002848:	f040 8100 	bne.w	8002a4c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d113      	bne.n	800287c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	3355      	adds	r3, #85	; 0x55
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	f083 0301 	eor.w	r3, r3, #1
 8002868:	b2d8      	uxtb	r0, r3
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	212c      	movs	r1, #44	; 0x2c
 8002870:	fb01 f303 	mul.w	r3, r1, r3
 8002874:	4413      	add	r3, r2
 8002876:	3355      	adds	r3, #85	; 0x55
 8002878:	4602      	mov	r2, r0
 800287a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	2b01      	cmp	r3, #1
 8002882:	f040 80e3 	bne.w	8002a4c <HCD_HC_OUT_IRQHandler+0x69c>
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	212c      	movs	r1, #44	; 0x2c
 800288c:	fb01 f303 	mul.w	r3, r1, r3
 8002890:	4413      	add	r3, r2
 8002892:	334c      	adds	r3, #76	; 0x4c
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 80d8 	beq.w	8002a4c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	212c      	movs	r1, #44	; 0x2c
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	334c      	adds	r3, #76	; 0x4c
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	202c      	movs	r0, #44	; 0x2c
 80028b2:	fb00 f202 	mul.w	r2, r0, r2
 80028b6:	440a      	add	r2, r1
 80028b8:	3240      	adds	r2, #64	; 0x40
 80028ba:	8812      	ldrh	r2, [r2, #0]
 80028bc:	4413      	add	r3, r2
 80028be:	3b01      	subs	r3, #1
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	202c      	movs	r0, #44	; 0x2c
 80028c6:	fb00 f202 	mul.w	r2, r0, r2
 80028ca:	440a      	add	r2, r1
 80028cc:	3240      	adds	r2, #64	; 0x40
 80028ce:	8812      	ldrh	r2, [r2, #0]
 80028d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 80b5 	beq.w	8002a4c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	212c      	movs	r1, #44	; 0x2c
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	3355      	adds	r3, #85	; 0x55
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	f083 0301 	eor.w	r3, r3, #1
 80028f6:	b2d8      	uxtb	r0, r3
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	3355      	adds	r3, #85	; 0x55
 8002906:	4602      	mov	r2, r0
 8002908:	701a      	strb	r2, [r3, #0]
 800290a:	e09f      	b.n	8002a4c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	212c      	movs	r1, #44	; 0x2c
 8002912:	fb01 f303 	mul.w	r3, r1, r3
 8002916:	4413      	add	r3, r2
 8002918:	3361      	adds	r3, #97	; 0x61
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b03      	cmp	r3, #3
 800291e:	d109      	bne.n	8002934 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	212c      	movs	r1, #44	; 0x2c
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	4413      	add	r3, r2
 800292c:	3360      	adds	r3, #96	; 0x60
 800292e:	2202      	movs	r2, #2
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	e08b      	b.n	8002a4c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	212c      	movs	r1, #44	; 0x2c
 800293a:	fb01 f303 	mul.w	r3, r1, r3
 800293e:	4413      	add	r3, r2
 8002940:	3361      	adds	r3, #97	; 0x61
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b04      	cmp	r3, #4
 8002946:	d109      	bne.n	800295c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	212c      	movs	r1, #44	; 0x2c
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	4413      	add	r3, r2
 8002954:	3360      	adds	r3, #96	; 0x60
 8002956:	2202      	movs	r2, #2
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	e077      	b.n	8002a4c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	212c      	movs	r1, #44	; 0x2c
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	4413      	add	r3, r2
 8002968:	3361      	adds	r3, #97	; 0x61
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b05      	cmp	r3, #5
 800296e:	d109      	bne.n	8002984 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	212c      	movs	r1, #44	; 0x2c
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	3360      	adds	r3, #96	; 0x60
 800297e:	2205      	movs	r2, #5
 8002980:	701a      	strb	r2, [r3, #0]
 8002982:	e063      	b.n	8002a4c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	3361      	adds	r3, #97	; 0x61
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b06      	cmp	r3, #6
 8002996:	d009      	beq.n	80029ac <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	212c      	movs	r1, #44	; 0x2c
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	4413      	add	r3, r2
 80029a4:	3361      	adds	r3, #97	; 0x61
 80029a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d14f      	bne.n	8002a4c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	335c      	adds	r3, #92	; 0x5c
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	202c      	movs	r0, #44	; 0x2c
 80029c4:	fb00 f303 	mul.w	r3, r0, r3
 80029c8:	440b      	add	r3, r1
 80029ca:	335c      	adds	r3, #92	; 0x5c
 80029cc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	212c      	movs	r1, #44	; 0x2c
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	4413      	add	r3, r2
 80029da:	335c      	adds	r3, #92	; 0x5c
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d912      	bls.n	8002a08 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	212c      	movs	r1, #44	; 0x2c
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	335c      	adds	r3, #92	; 0x5c
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	3360      	adds	r3, #96	; 0x60
 8002a02:	2204      	movs	r2, #4
 8002a04:	701a      	strb	r2, [r3, #0]
 8002a06:	e021      	b.n	8002a4c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3360      	adds	r3, #96	; 0x60
 8002a16:	2202      	movs	r2, #2
 8002a18:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a30:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a38:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a46:	461a      	mov	r2, r3
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	b2d9      	uxtb	r1, r3
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	202c      	movs	r0, #44	; 0x2c
 8002a68:	fb00 f303 	mul.w	r3, r0, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3360      	adds	r3, #96	; 0x60
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f003 fe73 	bl	8006760 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a7a:	bf00      	nop
 8002a7c:	3720      	adds	r7, #32
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b08a      	sub	sp, #40	; 0x28
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	0c5b      	lsrs	r3, r3, #17
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ab6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d004      	beq.n	8002ac8 <HCD_RXQLVL_IRQHandler+0x46>
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b05      	cmp	r3, #5
 8002ac2:	f000 80a9 	beq.w	8002c18 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002ac6:	e0aa      	b.n	8002c1e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 80a6 	beq.w	8002c1c <HCD_RXQLVL_IRQHandler+0x19a>
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	212c      	movs	r1, #44	; 0x2c
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	3344      	adds	r3, #68	; 0x44
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 809b 	beq.w	8002c1c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	212c      	movs	r1, #44	; 0x2c
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	3350      	adds	r3, #80	; 0x50
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	441a      	add	r2, r3
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	202c      	movs	r0, #44	; 0x2c
 8002b00:	fb00 f303 	mul.w	r3, r0, r3
 8002b04:	440b      	add	r3, r1
 8002b06:	334c      	adds	r3, #76	; 0x4c
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d87a      	bhi.n	8002c04 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	212c      	movs	r1, #44	; 0x2c
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3344      	adds	r3, #68	; 0x44
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	b292      	uxth	r2, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	f001 fe92 	bl	8004850 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	212c      	movs	r1, #44	; 0x2c
 8002b32:	fb01 f303 	mul.w	r3, r1, r3
 8002b36:	4413      	add	r3, r2
 8002b38:	3344      	adds	r3, #68	; 0x44
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	441a      	add	r2, r3
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	202c      	movs	r0, #44	; 0x2c
 8002b46:	fb00 f303 	mul.w	r3, r0, r3
 8002b4a:	440b      	add	r3, r1
 8002b4c:	3344      	adds	r3, #68	; 0x44
 8002b4e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	212c      	movs	r1, #44	; 0x2c
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3350      	adds	r3, #80	; 0x50
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	441a      	add	r2, r3
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	202c      	movs	r0, #44	; 0x2c
 8002b6a:	fb00 f303 	mul.w	r3, r0, r3
 8002b6e:	440b      	add	r3, r1
 8002b70:	3350      	adds	r3, #80	; 0x50
 8002b72:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	0cdb      	lsrs	r3, r3, #19
 8002b84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b88:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	212c      	movs	r1, #44	; 0x2c
 8002b90:	fb01 f303 	mul.w	r3, r1, r3
 8002b94:	4413      	add	r3, r2
 8002b96:	3340      	adds	r3, #64	; 0x40
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d13c      	bne.n	8002c1c <HCD_RXQLVL_IRQHandler+0x19a>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d039      	beq.n	8002c1c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bbe:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bc6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	212c      	movs	r1, #44	; 0x2c
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	4413      	add	r3, r2
 8002be6:	3354      	adds	r3, #84	; 0x54
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	f083 0301 	eor.w	r3, r3, #1
 8002bee:	b2d8      	uxtb	r0, r3
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3354      	adds	r3, #84	; 0x54
 8002bfe:	4602      	mov	r2, r0
 8002c00:	701a      	strb	r2, [r3, #0]
      break;
 8002c02:	e00b      	b.n	8002c1c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3360      	adds	r3, #96	; 0x60
 8002c12:	2204      	movs	r2, #4
 8002c14:	701a      	strb	r2, [r3, #0]
      break;
 8002c16:	e001      	b.n	8002c1c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002c18:	bf00      	nop
 8002c1a:	e000      	b.n	8002c1e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002c1c:	bf00      	nop
  }
}
 8002c1e:	bf00      	nop
 8002c20:	3728      	adds	r7, #40	; 0x28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b086      	sub	sp, #24
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c52:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d10b      	bne.n	8002c76 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d102      	bne.n	8002c6e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f003 fd5d 	bl	8006728 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f043 0302 	orr.w	r3, r3, #2
 8002c74:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d132      	bne.n	8002ce6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f043 0308 	orr.w	r3, r3, #8
 8002c86:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d126      	bne.n	8002ce0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d113      	bne.n	8002cc2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002ca0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ca4:	d106      	bne.n	8002cb4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2102      	movs	r1, #2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f001 ff3d 	bl	8004b2c <USB_InitFSLSPClkSel>
 8002cb2:	e011      	b.n	8002cd8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2101      	movs	r1, #1
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f001 ff36 	bl	8004b2c <USB_InitFSLSPClkSel>
 8002cc0:	e00a      	b.n	8002cd8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d106      	bne.n	8002cd8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002cd6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f003 fd4f 	bl	800677c <HAL_HCD_PortEnabled_Callback>
 8002cde:	e002      	b.n	8002ce6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f003 fd59 	bl	8006798 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d103      	bne.n	8002cf8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f043 0320 	orr.w	r3, r3, #32
 8002cf6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	6013      	str	r3, [r2, #0]
}
 8002d04:	bf00      	nop
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e12b      	b.n	8002f76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fd feb0 	bl	8000a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2224      	movs	r2, #36	; 0x24
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0201 	bic.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d70:	f001 fa20 	bl	80041b4 <HAL_RCC_GetPCLK1Freq>
 8002d74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	4a81      	ldr	r2, [pc, #516]	; (8002f80 <HAL_I2C_Init+0x274>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d807      	bhi.n	8002d90 <HAL_I2C_Init+0x84>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4a80      	ldr	r2, [pc, #512]	; (8002f84 <HAL_I2C_Init+0x278>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	bf94      	ite	ls
 8002d88:	2301      	movls	r3, #1
 8002d8a:	2300      	movhi	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	e006      	b.n	8002d9e <HAL_I2C_Init+0x92>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4a7d      	ldr	r2, [pc, #500]	; (8002f88 <HAL_I2C_Init+0x27c>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	bf94      	ite	ls
 8002d98:	2301      	movls	r3, #1
 8002d9a:	2300      	movhi	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e0e7      	b.n	8002f76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4a78      	ldr	r2, [pc, #480]	; (8002f8c <HAL_I2C_Init+0x280>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	0c9b      	lsrs	r3, r3, #18
 8002db0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	4a6a      	ldr	r2, [pc, #424]	; (8002f80 <HAL_I2C_Init+0x274>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d802      	bhi.n	8002de0 <HAL_I2C_Init+0xd4>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	e009      	b.n	8002df4 <HAL_I2C_Init+0xe8>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002de6:	fb02 f303 	mul.w	r3, r2, r3
 8002dea:	4a69      	ldr	r2, [pc, #420]	; (8002f90 <HAL_I2C_Init+0x284>)
 8002dec:	fba2 2303 	umull	r2, r3, r2, r3
 8002df0:	099b      	lsrs	r3, r3, #6
 8002df2:	3301      	adds	r3, #1
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	495c      	ldr	r1, [pc, #368]	; (8002f80 <HAL_I2C_Init+0x274>)
 8002e10:	428b      	cmp	r3, r1
 8002e12:	d819      	bhi.n	8002e48 <HAL_I2C_Init+0x13c>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	1e59      	subs	r1, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e22:	1c59      	adds	r1, r3, #1
 8002e24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e28:	400b      	ands	r3, r1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <HAL_I2C_Init+0x138>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1e59      	subs	r1, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e42:	e051      	b.n	8002ee8 <HAL_I2C_Init+0x1dc>
 8002e44:	2304      	movs	r3, #4
 8002e46:	e04f      	b.n	8002ee8 <HAL_I2C_Init+0x1dc>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d111      	bne.n	8002e74 <HAL_I2C_Init+0x168>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1e58      	subs	r0, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6859      	ldr	r1, [r3, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	440b      	add	r3, r1
 8002e5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e62:	3301      	adds	r3, #1
 8002e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	bf0c      	ite	eq
 8002e6c:	2301      	moveq	r3, #1
 8002e6e:	2300      	movne	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	e012      	b.n	8002e9a <HAL_I2C_Init+0x18e>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1e58      	subs	r0, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6859      	ldr	r1, [r3, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	0099      	lsls	r1, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	bf0c      	ite	eq
 8002e94:	2301      	moveq	r3, #1
 8002e96:	2300      	movne	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_I2C_Init+0x196>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e022      	b.n	8002ee8 <HAL_I2C_Init+0x1dc>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10e      	bne.n	8002ec8 <HAL_I2C_Init+0x1bc>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1e58      	subs	r0, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6859      	ldr	r1, [r3, #4]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	440b      	add	r3, r1
 8002eb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec6:	e00f      	b.n	8002ee8 <HAL_I2C_Init+0x1dc>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1e58      	subs	r0, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6859      	ldr	r1, [r3, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	0099      	lsls	r1, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	6809      	ldr	r1, [r1, #0]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69da      	ldr	r2, [r3, #28]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6911      	ldr	r1, [r2, #16]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	68d2      	ldr	r2, [r2, #12]
 8002f22:	4311      	orrs	r1, r2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	430b      	orrs	r3, r1
 8002f2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	000186a0 	.word	0x000186a0
 8002f84:	001e847f 	.word	0x001e847f
 8002f88:	003d08ff 	.word	0x003d08ff
 8002f8c:	431bde83 	.word	0x431bde83
 8002f90:	10624dd3 	.word	0x10624dd3

08002f94 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e128      	b.n	80031f8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d109      	bne.n	8002fc6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a90      	ldr	r2, [pc, #576]	; (8003200 <HAL_I2S_Init+0x26c>)
 8002fbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7fd fdb1 	bl	8000b28 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002fdc:	f023 030f 	bic.w	r3, r3, #15
 8002fe0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d060      	beq.n	80030b4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d102      	bne.n	8003000 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002ffa:	2310      	movs	r3, #16
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	e001      	b.n	8003004 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003000:	2320      	movs	r3, #32
 8003002:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b20      	cmp	r3, #32
 800300a:	d802      	bhi.n	8003012 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003012:	2001      	movs	r0, #1
 8003014:	f001 f9c4 	bl	80043a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003018:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003022:	d125      	bne.n	8003070 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d010      	beq.n	800304e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	fbb2 f2f3 	udiv	r2, r2, r3
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	461a      	mov	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	fbb2 f3f3 	udiv	r3, r2, r3
 8003048:	3305      	adds	r3, #5
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	e01f      	b.n	800308e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	fbb2 f2f3 	udiv	r2, r2, r3
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	461a      	mov	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	fbb2 f3f3 	udiv	r3, r2, r3
 800306a:	3305      	adds	r3, #5
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	e00e      	b.n	800308e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	fbb2 f2f3 	udiv	r2, r2, r3
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	461a      	mov	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	fbb2 f3f3 	udiv	r3, r2, r3
 800308a:	3305      	adds	r3, #5
 800308c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4a5c      	ldr	r2, [pc, #368]	; (8003204 <HAL_I2S_Init+0x270>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	08db      	lsrs	r3, r3, #3
 8003098:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	085b      	lsrs	r3, r3, #1
 80030aa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	021b      	lsls	r3, r3, #8
 80030b0:	61bb      	str	r3, [r7, #24]
 80030b2:	e003      	b.n	80030bc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80030b4:	2302      	movs	r3, #2
 80030b6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d902      	bls.n	80030c8 <HAL_I2S_Init+0x134>
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	2bff      	cmp	r3, #255	; 0xff
 80030c6:	d907      	bls.n	80030d8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030cc:	f043 0210 	orr.w	r2, r3, #16
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e08f      	b.n	80031f8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	ea42 0103 	orr.w	r1, r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69fa      	ldr	r2, [r7, #28]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030f6:	f023 030f 	bic.w	r3, r3, #15
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6851      	ldr	r1, [r2, #4]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6892      	ldr	r2, [r2, #8]
 8003102:	4311      	orrs	r1, r2
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	68d2      	ldr	r2, [r2, #12]
 8003108:	4311      	orrs	r1, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6992      	ldr	r2, [r2, #24]
 800310e:	430a      	orrs	r2, r1
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800311a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d161      	bne.n	80031e8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a38      	ldr	r2, [pc, #224]	; (8003208 <HAL_I2S_Init+0x274>)
 8003128:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a37      	ldr	r2, [pc, #220]	; (800320c <HAL_I2S_Init+0x278>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d101      	bne.n	8003138 <HAL_I2S_Init+0x1a4>
 8003134:	4b36      	ldr	r3, [pc, #216]	; (8003210 <HAL_I2S_Init+0x27c>)
 8003136:	e001      	b.n	800313c <HAL_I2S_Init+0x1a8>
 8003138:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	4932      	ldr	r1, [pc, #200]	; (800320c <HAL_I2S_Init+0x278>)
 8003144:	428a      	cmp	r2, r1
 8003146:	d101      	bne.n	800314c <HAL_I2S_Init+0x1b8>
 8003148:	4a31      	ldr	r2, [pc, #196]	; (8003210 <HAL_I2S_Init+0x27c>)
 800314a:	e001      	b.n	8003150 <HAL_I2S_Init+0x1bc>
 800314c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003150:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003154:	f023 030f 	bic.w	r3, r3, #15
 8003158:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a2b      	ldr	r2, [pc, #172]	; (800320c <HAL_I2S_Init+0x278>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d101      	bne.n	8003168 <HAL_I2S_Init+0x1d4>
 8003164:	4b2a      	ldr	r3, [pc, #168]	; (8003210 <HAL_I2S_Init+0x27c>)
 8003166:	e001      	b.n	800316c <HAL_I2S_Init+0x1d8>
 8003168:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800316c:	2202      	movs	r2, #2
 800316e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a25      	ldr	r2, [pc, #148]	; (800320c <HAL_I2S_Init+0x278>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d101      	bne.n	800317e <HAL_I2S_Init+0x1ea>
 800317a:	4b25      	ldr	r3, [pc, #148]	; (8003210 <HAL_I2S_Init+0x27c>)
 800317c:	e001      	b.n	8003182 <HAL_I2S_Init+0x1ee>
 800317e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800318e:	d003      	beq.n	8003198 <HAL_I2S_Init+0x204>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d103      	bne.n	80031a0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	e001      	b.n	80031a4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80031a0:	2300      	movs	r3, #0
 80031a2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80031ae:	4313      	orrs	r3, r2
 80031b0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80031b8:	4313      	orrs	r3, r2
 80031ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80031c2:	4313      	orrs	r3, r2
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	897b      	ldrh	r3, [r7, #10]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031d0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a0d      	ldr	r2, [pc, #52]	; (800320c <HAL_I2S_Init+0x278>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d101      	bne.n	80031e0 <HAL_I2S_Init+0x24c>
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <HAL_I2S_Init+0x27c>)
 80031de:	e001      	b.n	80031e4 <HAL_I2S_Init+0x250>
 80031e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031e4:	897a      	ldrh	r2, [r7, #10]
 80031e6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3720      	adds	r7, #32
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	0800330b 	.word	0x0800330b
 8003204:	cccccccd 	.word	0xcccccccd
 8003208:	08003421 	.word	0x08003421
 800320c:	40003800 	.word	0x40003800
 8003210:	40003400 	.word	0x40003400

08003214 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	881a      	ldrh	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	1c9a      	adds	r2, r3, #2
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003272:	b29b      	uxth	r3, r3
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10e      	bne.n	80032a4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003294:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff ffb8 	bl	8003214 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	b292      	uxth	r2, r2
 80032c0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c6:	1c9a      	adds	r2, r3, #2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10e      	bne.n	8003302 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032f2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff ff93 	bl	8003228 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003302:	bf00      	nop
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b086      	sub	sp, #24
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b04      	cmp	r3, #4
 8003324:	d13a      	bne.n	800339c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b01      	cmp	r3, #1
 800332e:	d109      	bne.n	8003344 <I2S_IRQHandler+0x3a>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333a:	2b40      	cmp	r3, #64	; 0x40
 800333c:	d102      	bne.n	8003344 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff ffb4 	bl	80032ac <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334a:	2b40      	cmp	r3, #64	; 0x40
 800334c:	d126      	bne.n	800339c <I2S_IRQHandler+0x92>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 0320 	and.w	r3, r3, #32
 8003358:	2b20      	cmp	r3, #32
 800335a:	d11f      	bne.n	800339c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800336a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800336c:	2300      	movs	r3, #0
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	f043 0202 	orr.w	r2, r3, #2
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff ff50 	bl	800323c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d136      	bne.n	8003416 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d109      	bne.n	80033c6 <I2S_IRQHandler+0xbc>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033bc:	2b80      	cmp	r3, #128	; 0x80
 80033be:	d102      	bne.n	80033c6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ff45 	bl	8003250 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d122      	bne.n	8003416 <I2S_IRQHandler+0x10c>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b20      	cmp	r3, #32
 80033dc:	d11b      	bne.n	8003416 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033ec:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003408:	f043 0204 	orr.w	r2, r3, #4
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff ff13 	bl	800323c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003416:	bf00      	nop
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a92      	ldr	r2, [pc, #584]	; (8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d101      	bne.n	800343e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800343a:	4b92      	ldr	r3, [pc, #584]	; (8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800343c:	e001      	b.n	8003442 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800343e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a8b      	ldr	r2, [pc, #556]	; (8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d101      	bne.n	800345c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003458:	4b8a      	ldr	r3, [pc, #552]	; (8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800345a:	e001      	b.n	8003460 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800345c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800346c:	d004      	beq.n	8003478 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	f040 8099 	bne.w	80035aa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b02      	cmp	r3, #2
 8003480:	d107      	bne.n	8003492 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f925 	bl	80036dc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b01      	cmp	r3, #1
 800349a:	d107      	bne.n	80034ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f9c8 	bl	800383c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b2:	2b40      	cmp	r3, #64	; 0x40
 80034b4:	d13a      	bne.n	800352c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d035      	beq.n	800352c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a6e      	ldr	r2, [pc, #440]	; (8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d101      	bne.n	80034ce <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80034ca:	4b6e      	ldr	r3, [pc, #440]	; (8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034cc:	e001      	b.n	80034d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80034ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4969      	ldr	r1, [pc, #420]	; (8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034da:	428b      	cmp	r3, r1
 80034dc:	d101      	bne.n	80034e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80034de:	4b69      	ldr	r3, [pc, #420]	; (8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034e0:	e001      	b.n	80034e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80034e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034ea:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	f043 0202 	orr.w	r2, r3, #2
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff fe88 	bl	800323c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b08      	cmp	r3, #8
 8003534:	f040 80c3 	bne.w	80036be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 80bd 	beq.w	80036be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003552:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a49      	ldr	r2, [pc, #292]	; (8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d101      	bne.n	8003562 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800355e:	4b49      	ldr	r3, [pc, #292]	; (8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003560:	e001      	b.n	8003566 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003562:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4944      	ldr	r1, [pc, #272]	; (8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800356e:	428b      	cmp	r3, r1
 8003570:	d101      	bne.n	8003576 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003572:	4b44      	ldr	r3, [pc, #272]	; (8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003574:	e001      	b.n	800357a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003576:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800357a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800357e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003580:	2300      	movs	r3, #0
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	f043 0204 	orr.w	r2, r3, #4
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff fe4a 	bl	800323c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035a8:	e089      	b.n	80036be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d107      	bne.n	80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f8be 	bl	8003740 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d107      	bne.n	80035de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f8fd 	bl	80037d8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e4:	2b40      	cmp	r3, #64	; 0x40
 80035e6:	d12f      	bne.n	8003648 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d02a      	beq.n	8003648 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003600:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1e      	ldr	r2, [pc, #120]	; (8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d101      	bne.n	8003610 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800360c:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800360e:	e001      	b.n	8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003610:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4919      	ldr	r1, [pc, #100]	; (8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800361c:	428b      	cmp	r3, r1
 800361e:	d101      	bne.n	8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003620:	4b18      	ldr	r3, [pc, #96]	; (8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003622:	e001      	b.n	8003628 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003624:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003628:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800362c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	f043 0202 	orr.w	r2, r3, #2
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7ff fdfa 	bl	800323c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b08      	cmp	r3, #8
 8003650:	d136      	bne.n	80036c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d031      	beq.n	80036c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a07      	ldr	r2, [pc, #28]	; (8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d101      	bne.n	800366a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003666:	4b07      	ldr	r3, [pc, #28]	; (8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003668:	e001      	b.n	800366e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800366a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4902      	ldr	r1, [pc, #8]	; (8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003676:	428b      	cmp	r3, r1
 8003678:	d106      	bne.n	8003688 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800367a:	4b02      	ldr	r3, [pc, #8]	; (8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800367c:	e006      	b.n	800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800367e:	bf00      	nop
 8003680:	40003800 	.word	0x40003800
 8003684:	40003400 	.word	0x40003400
 8003688:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800368c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003690:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036a0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	f043 0204 	orr.w	r2, r3, #4
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff fdc0 	bl	800323c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036bc:	e000      	b.n	80036c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036be:	bf00      	nop
}
 80036c0:	bf00      	nop
 80036c2:	3720      	adds	r7, #32
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	1c99      	adds	r1, r3, #2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6251      	str	r1, [r2, #36]	; 0x24
 80036ee:	881a      	ldrh	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d113      	bne.n	8003736 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800371c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d106      	bne.n	8003736 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7ff ffc9 	bl	80036c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003736:	bf00      	nop
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	1c99      	adds	r1, r3, #2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6251      	str	r1, [r2, #36]	; 0x24
 8003752:	8819      	ldrh	r1, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1d      	ldr	r2, [pc, #116]	; (80037d0 <I2SEx_TxISR_I2SExt+0x90>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <I2SEx_TxISR_I2SExt+0x22>
 800375e:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <I2SEx_TxISR_I2SExt+0x94>)
 8003760:	e001      	b.n	8003766 <I2SEx_TxISR_I2SExt+0x26>
 8003762:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003766:	460a      	mov	r2, r1
 8003768:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d121      	bne.n	80037c6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a12      	ldr	r2, [pc, #72]	; (80037d0 <I2SEx_TxISR_I2SExt+0x90>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d101      	bne.n	8003790 <I2SEx_TxISR_I2SExt+0x50>
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <I2SEx_TxISR_I2SExt+0x94>)
 800378e:	e001      	b.n	8003794 <I2SEx_TxISR_I2SExt+0x54>
 8003790:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	490d      	ldr	r1, [pc, #52]	; (80037d0 <I2SEx_TxISR_I2SExt+0x90>)
 800379c:	428b      	cmp	r3, r1
 800379e:	d101      	bne.n	80037a4 <I2SEx_TxISR_I2SExt+0x64>
 80037a0:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <I2SEx_TxISR_I2SExt+0x94>)
 80037a2:	e001      	b.n	80037a8 <I2SEx_TxISR_I2SExt+0x68>
 80037a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d106      	bne.n	80037c6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff ff81 	bl	80036c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40003800 	.word	0x40003800
 80037d4:	40003400 	.word	0x40003400

080037d8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68d8      	ldr	r0, [r3, #12]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ea:	1c99      	adds	r1, r3, #2
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037f0:	b282      	uxth	r2, r0
 80037f2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003806:	b29b      	uxth	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d113      	bne.n	8003834 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800381a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff ff4a 	bl	80036c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003834:	bf00      	nop
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a20      	ldr	r2, [pc, #128]	; (80038cc <I2SEx_RxISR_I2SExt+0x90>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d101      	bne.n	8003852 <I2SEx_RxISR_I2SExt+0x16>
 800384e:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <I2SEx_RxISR_I2SExt+0x94>)
 8003850:	e001      	b.n	8003856 <I2SEx_RxISR_I2SExt+0x1a>
 8003852:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003856:	68d8      	ldr	r0, [r3, #12]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	1c99      	adds	r1, r3, #2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003862:	b282      	uxth	r2, r0
 8003864:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d121      	bne.n	80038c2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a12      	ldr	r2, [pc, #72]	; (80038cc <I2SEx_RxISR_I2SExt+0x90>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d101      	bne.n	800388c <I2SEx_RxISR_I2SExt+0x50>
 8003888:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <I2SEx_RxISR_I2SExt+0x94>)
 800388a:	e001      	b.n	8003890 <I2SEx_RxISR_I2SExt+0x54>
 800388c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	490d      	ldr	r1, [pc, #52]	; (80038cc <I2SEx_RxISR_I2SExt+0x90>)
 8003898:	428b      	cmp	r3, r1
 800389a:	d101      	bne.n	80038a0 <I2SEx_RxISR_I2SExt+0x64>
 800389c:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <I2SEx_RxISR_I2SExt+0x94>)
 800389e:	e001      	b.n	80038a4 <I2SEx_RxISR_I2SExt+0x68>
 80038a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038a8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d106      	bne.n	80038c2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff ff03 	bl	80036c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40003800 	.word	0x40003800
 80038d0:	40003400 	.word	0x40003400

080038d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e267      	b.n	8003db6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d075      	beq.n	80039de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038f2:	4b88      	ldr	r3, [pc, #544]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d00c      	beq.n	8003918 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038fe:	4b85      	ldr	r3, [pc, #532]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003906:	2b08      	cmp	r3, #8
 8003908:	d112      	bne.n	8003930 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800390a:	4b82      	ldr	r3, [pc, #520]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003912:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003916:	d10b      	bne.n	8003930 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003918:	4b7e      	ldr	r3, [pc, #504]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d05b      	beq.n	80039dc <HAL_RCC_OscConfig+0x108>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d157      	bne.n	80039dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e242      	b.n	8003db6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003938:	d106      	bne.n	8003948 <HAL_RCC_OscConfig+0x74>
 800393a:	4b76      	ldr	r3, [pc, #472]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a75      	ldr	r2, [pc, #468]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 8003940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	e01d      	b.n	8003984 <HAL_RCC_OscConfig+0xb0>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003950:	d10c      	bne.n	800396c <HAL_RCC_OscConfig+0x98>
 8003952:	4b70      	ldr	r3, [pc, #448]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a6f      	ldr	r2, [pc, #444]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 8003958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	4b6d      	ldr	r3, [pc, #436]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a6c      	ldr	r2, [pc, #432]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 8003964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	e00b      	b.n	8003984 <HAL_RCC_OscConfig+0xb0>
 800396c:	4b69      	ldr	r3, [pc, #420]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a68      	ldr	r2, [pc, #416]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 8003972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	4b66      	ldr	r3, [pc, #408]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a65      	ldr	r2, [pc, #404]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 800397e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d013      	beq.n	80039b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398c:	f7fd faa8 	bl	8000ee0 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003994:	f7fd faa4 	bl	8000ee0 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b64      	cmp	r3, #100	; 0x64
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e207      	b.n	8003db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a6:	4b5b      	ldr	r3, [pc, #364]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0xc0>
 80039b2:	e014      	b.n	80039de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b4:	f7fd fa94 	bl	8000ee0 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039bc:	f7fd fa90 	bl	8000ee0 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b64      	cmp	r3, #100	; 0x64
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e1f3      	b.n	8003db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ce:	4b51      	ldr	r3, [pc, #324]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0xe8>
 80039da:	e000      	b.n	80039de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d063      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ea:	4b4a      	ldr	r3, [pc, #296]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00b      	beq.n	8003a0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039f6:	4b47      	ldr	r3, [pc, #284]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d11c      	bne.n	8003a3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a02:	4b44      	ldr	r3, [pc, #272]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d116      	bne.n	8003a3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a0e:	4b41      	ldr	r3, [pc, #260]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d005      	beq.n	8003a26 <HAL_RCC_OscConfig+0x152>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d001      	beq.n	8003a26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e1c7      	b.n	8003db6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a26:	4b3b      	ldr	r3, [pc, #236]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4937      	ldr	r1, [pc, #220]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a3a:	e03a      	b.n	8003ab2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d020      	beq.n	8003a86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a44:	4b34      	ldr	r3, [pc, #208]	; (8003b18 <HAL_RCC_OscConfig+0x244>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4a:	f7fd fa49 	bl	8000ee0 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a52:	f7fd fa45 	bl	8000ee0 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e1a8      	b.n	8003db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a64:	4b2b      	ldr	r3, [pc, #172]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0f0      	beq.n	8003a52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a70:	4b28      	ldr	r3, [pc, #160]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4925      	ldr	r1, [pc, #148]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	600b      	str	r3, [r1, #0]
 8003a84:	e015      	b.n	8003ab2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a86:	4b24      	ldr	r3, [pc, #144]	; (8003b18 <HAL_RCC_OscConfig+0x244>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8c:	f7fd fa28 	bl	8000ee0 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a94:	f7fd fa24 	bl	8000ee0 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e187      	b.n	8003db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa6:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f0      	bne.n	8003a94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d036      	beq.n	8003b2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d016      	beq.n	8003af4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ac6:	4b15      	ldr	r3, [pc, #84]	; (8003b1c <HAL_RCC_OscConfig+0x248>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003acc:	f7fd fa08 	bl	8000ee0 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ad4:	f7fd fa04 	bl	8000ee0 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e167      	b.n	8003db6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x200>
 8003af2:	e01b      	b.n	8003b2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003af4:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <HAL_RCC_OscConfig+0x248>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003afa:	f7fd f9f1 	bl	8000ee0 <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b00:	e00e      	b.n	8003b20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b02:	f7fd f9ed 	bl	8000ee0 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d907      	bls.n	8003b20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e150      	b.n	8003db6 <HAL_RCC_OscConfig+0x4e2>
 8003b14:	40023800 	.word	0x40023800
 8003b18:	42470000 	.word	0x42470000
 8003b1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b20:	4b88      	ldr	r3, [pc, #544]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1ea      	bne.n	8003b02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8097 	beq.w	8003c68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b3e:	4b81      	ldr	r3, [pc, #516]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10f      	bne.n	8003b6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	4b7d      	ldr	r3, [pc, #500]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	4a7c      	ldr	r2, [pc, #496]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b58:	6413      	str	r3, [r2, #64]	; 0x40
 8003b5a:	4b7a      	ldr	r3, [pc, #488]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b62:	60bb      	str	r3, [r7, #8]
 8003b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b66:	2301      	movs	r3, #1
 8003b68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6a:	4b77      	ldr	r3, [pc, #476]	; (8003d48 <HAL_RCC_OscConfig+0x474>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d118      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b76:	4b74      	ldr	r3, [pc, #464]	; (8003d48 <HAL_RCC_OscConfig+0x474>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a73      	ldr	r2, [pc, #460]	; (8003d48 <HAL_RCC_OscConfig+0x474>)
 8003b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b82:	f7fd f9ad 	bl	8000ee0 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b8a:	f7fd f9a9 	bl	8000ee0 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e10c      	b.n	8003db6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9c:	4b6a      	ldr	r3, [pc, #424]	; (8003d48 <HAL_RCC_OscConfig+0x474>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d106      	bne.n	8003bbe <HAL_RCC_OscConfig+0x2ea>
 8003bb0:	4b64      	ldr	r3, [pc, #400]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb4:	4a63      	ldr	r2, [pc, #396]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	6713      	str	r3, [r2, #112]	; 0x70
 8003bbc:	e01c      	b.n	8003bf8 <HAL_RCC_OscConfig+0x324>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	2b05      	cmp	r3, #5
 8003bc4:	d10c      	bne.n	8003be0 <HAL_RCC_OscConfig+0x30c>
 8003bc6:	4b5f      	ldr	r3, [pc, #380]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bca:	4a5e      	ldr	r2, [pc, #376]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003bcc:	f043 0304 	orr.w	r3, r3, #4
 8003bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd2:	4b5c      	ldr	r3, [pc, #368]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	4a5b      	ldr	r2, [pc, #364]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003bd8:	f043 0301 	orr.w	r3, r3, #1
 8003bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bde:	e00b      	b.n	8003bf8 <HAL_RCC_OscConfig+0x324>
 8003be0:	4b58      	ldr	r3, [pc, #352]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be4:	4a57      	ldr	r2, [pc, #348]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003be6:	f023 0301 	bic.w	r3, r3, #1
 8003bea:	6713      	str	r3, [r2, #112]	; 0x70
 8003bec:	4b55      	ldr	r3, [pc, #340]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf0:	4a54      	ldr	r2, [pc, #336]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	f023 0304 	bic.w	r3, r3, #4
 8003bf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d015      	beq.n	8003c2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c00:	f7fd f96e 	bl	8000ee0 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c06:	e00a      	b.n	8003c1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c08:	f7fd f96a 	bl	8000ee0 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e0cb      	b.n	8003db6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1e:	4b49      	ldr	r3, [pc, #292]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0ee      	beq.n	8003c08 <HAL_RCC_OscConfig+0x334>
 8003c2a:	e014      	b.n	8003c56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c2c:	f7fd f958 	bl	8000ee0 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c32:	e00a      	b.n	8003c4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c34:	f7fd f954 	bl	8000ee0 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e0b5      	b.n	8003db6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c4a:	4b3e      	ldr	r3, [pc, #248]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1ee      	bne.n	8003c34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c56:	7dfb      	ldrb	r3, [r7, #23]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d105      	bne.n	8003c68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c5c:	4b39      	ldr	r3, [pc, #228]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	4a38      	ldr	r2, [pc, #224]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80a1 	beq.w	8003db4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c72:	4b34      	ldr	r3, [pc, #208]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d05c      	beq.n	8003d38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d141      	bne.n	8003d0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c86:	4b31      	ldr	r3, [pc, #196]	; (8003d4c <HAL_RCC_OscConfig+0x478>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8c:	f7fd f928 	bl	8000ee0 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c94:	f7fd f924 	bl	8000ee0 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e087      	b.n	8003db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca6:	4b27      	ldr	r3, [pc, #156]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69da      	ldr	r2, [r3, #28]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	019b      	lsls	r3, r3, #6
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	085b      	lsrs	r3, r3, #1
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	041b      	lsls	r3, r3, #16
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	061b      	lsls	r3, r3, #24
 8003cd6:	491b      	ldr	r1, [pc, #108]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cdc:	4b1b      	ldr	r3, [pc, #108]	; (8003d4c <HAL_RCC_OscConfig+0x478>)
 8003cde:	2201      	movs	r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce2:	f7fd f8fd 	bl	8000ee0 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cea:	f7fd f8f9 	bl	8000ee0 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e05c      	b.n	8003db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfc:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCC_OscConfig+0x416>
 8003d08:	e054      	b.n	8003db4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0a:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <HAL_RCC_OscConfig+0x478>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d10:	f7fd f8e6 	bl	8000ee0 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d18:	f7fd f8e2 	bl	8000ee0 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e045      	b.n	8003db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2a:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <HAL_RCC_OscConfig+0x470>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0x444>
 8003d36:	e03d      	b.n	8003db4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d107      	bne.n	8003d50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e038      	b.n	8003db6 <HAL_RCC_OscConfig+0x4e2>
 8003d44:	40023800 	.word	0x40023800
 8003d48:	40007000 	.word	0x40007000
 8003d4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d50:	4b1b      	ldr	r3, [pc, #108]	; (8003dc0 <HAL_RCC_OscConfig+0x4ec>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d028      	beq.n	8003db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d121      	bne.n	8003db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d11a      	bne.n	8003db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d80:	4013      	ands	r3, r2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d111      	bne.n	8003db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	085b      	lsrs	r3, r3, #1
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d107      	bne.n	8003db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d001      	beq.n	8003db4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e000      	b.n	8003db6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40023800 	.word	0x40023800

08003dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0cc      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd8:	4b68      	ldr	r3, [pc, #416]	; (8003f7c <HAL_RCC_ClockConfig+0x1b8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d90c      	bls.n	8003e00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de6:	4b65      	ldr	r3, [pc, #404]	; (8003f7c <HAL_RCC_ClockConfig+0x1b8>)
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dee:	4b63      	ldr	r3, [pc, #396]	; (8003f7c <HAL_RCC_ClockConfig+0x1b8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e0b8      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d020      	beq.n	8003e4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d005      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e18:	4b59      	ldr	r3, [pc, #356]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	4a58      	ldr	r2, [pc, #352]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e30:	4b53      	ldr	r3, [pc, #332]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	4a52      	ldr	r2, [pc, #328]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e3c:	4b50      	ldr	r3, [pc, #320]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	494d      	ldr	r1, [pc, #308]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d044      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d107      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e62:	4b47      	ldr	r3, [pc, #284]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d119      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e07f      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d003      	beq.n	8003e82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d107      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e82:	4b3f      	ldr	r3, [pc, #252]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d109      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e06f      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e92:	4b3b      	ldr	r3, [pc, #236]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e067      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ea2:	4b37      	ldr	r3, [pc, #220]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f023 0203 	bic.w	r2, r3, #3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	4934      	ldr	r1, [pc, #208]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eb4:	f7fd f814 	bl	8000ee0 <HAL_GetTick>
 8003eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eba:	e00a      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ebc:	f7fd f810 	bl	8000ee0 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e04f      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed2:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 020c 	and.w	r2, r3, #12
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d1eb      	bne.n	8003ebc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ee4:	4b25      	ldr	r3, [pc, #148]	; (8003f7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d20c      	bcs.n	8003f0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef2:	4b22      	ldr	r3, [pc, #136]	; (8003f7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efa:	4b20      	ldr	r3, [pc, #128]	; (8003f7c <HAL_RCC_ClockConfig+0x1b8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d001      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e032      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d008      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f18:	4b19      	ldr	r3, [pc, #100]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	4916      	ldr	r1, [pc, #88]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d009      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f36:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	490e      	ldr	r1, [pc, #56]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f4a:	f000 f821 	bl	8003f90 <HAL_RCC_GetSysClockFreq>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	091b      	lsrs	r3, r3, #4
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	490a      	ldr	r1, [pc, #40]	; (8003f84 <HAL_RCC_ClockConfig+0x1c0>)
 8003f5c:	5ccb      	ldrb	r3, [r1, r3]
 8003f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f62:	4a09      	ldr	r2, [pc, #36]	; (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f66:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <HAL_RCC_ClockConfig+0x1c8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fc ff74 	bl	8000e58 <HAL_InitTick>

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40023c00 	.word	0x40023c00
 8003f80:	40023800 	.word	0x40023800
 8003f84:	08006d9c 	.word	0x08006d9c
 8003f88:	20000000 	.word	0x20000000
 8003f8c:	20000004 	.word	0x20000004

08003f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f94:	b094      	sub	sp, #80	; 0x50
 8003f96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fa8:	4b79      	ldr	r3, [pc, #484]	; (8004190 <HAL_RCC_GetSysClockFreq+0x200>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 030c 	and.w	r3, r3, #12
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d00d      	beq.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x40>
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	f200 80e1 	bhi.w	800417c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d003      	beq.n	8003fca <HAL_RCC_GetSysClockFreq+0x3a>
 8003fc2:	e0db      	b.n	800417c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fc4:	4b73      	ldr	r3, [pc, #460]	; (8004194 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fc6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003fc8:	e0db      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fca:	4b73      	ldr	r3, [pc, #460]	; (8004198 <HAL_RCC_GetSysClockFreq+0x208>)
 8003fcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fce:	e0d8      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fd0:	4b6f      	ldr	r3, [pc, #444]	; (8004190 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fd8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fda:	4b6d      	ldr	r3, [pc, #436]	; (8004190 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d063      	beq.n	80040ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe6:	4b6a      	ldr	r3, [pc, #424]	; (8004190 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	099b      	lsrs	r3, r3, #6
 8003fec:	2200      	movs	r2, #0
 8003fee:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ff0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff8:	633b      	str	r3, [r7, #48]	; 0x30
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ffe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004002:	4622      	mov	r2, r4
 8004004:	462b      	mov	r3, r5
 8004006:	f04f 0000 	mov.w	r0, #0
 800400a:	f04f 0100 	mov.w	r1, #0
 800400e:	0159      	lsls	r1, r3, #5
 8004010:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004014:	0150      	lsls	r0, r2, #5
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4621      	mov	r1, r4
 800401c:	1a51      	subs	r1, r2, r1
 800401e:	6139      	str	r1, [r7, #16]
 8004020:	4629      	mov	r1, r5
 8004022:	eb63 0301 	sbc.w	r3, r3, r1
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004034:	4659      	mov	r1, fp
 8004036:	018b      	lsls	r3, r1, #6
 8004038:	4651      	mov	r1, sl
 800403a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800403e:	4651      	mov	r1, sl
 8004040:	018a      	lsls	r2, r1, #6
 8004042:	4651      	mov	r1, sl
 8004044:	ebb2 0801 	subs.w	r8, r2, r1
 8004048:	4659      	mov	r1, fp
 800404a:	eb63 0901 	sbc.w	r9, r3, r1
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	f04f 0300 	mov.w	r3, #0
 8004056:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800405a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800405e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004062:	4690      	mov	r8, r2
 8004064:	4699      	mov	r9, r3
 8004066:	4623      	mov	r3, r4
 8004068:	eb18 0303 	adds.w	r3, r8, r3
 800406c:	60bb      	str	r3, [r7, #8]
 800406e:	462b      	mov	r3, r5
 8004070:	eb49 0303 	adc.w	r3, r9, r3
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004082:	4629      	mov	r1, r5
 8004084:	024b      	lsls	r3, r1, #9
 8004086:	4621      	mov	r1, r4
 8004088:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800408c:	4621      	mov	r1, r4
 800408e:	024a      	lsls	r2, r1, #9
 8004090:	4610      	mov	r0, r2
 8004092:	4619      	mov	r1, r3
 8004094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004096:	2200      	movs	r2, #0
 8004098:	62bb      	str	r3, [r7, #40]	; 0x28
 800409a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800409c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040a0:	f7fc f892 	bl	80001c8 <__aeabi_uldivmod>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4613      	mov	r3, r2
 80040aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040ac:	e058      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ae:	4b38      	ldr	r3, [pc, #224]	; (8004190 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	099b      	lsrs	r3, r3, #6
 80040b4:	2200      	movs	r2, #0
 80040b6:	4618      	mov	r0, r3
 80040b8:	4611      	mov	r1, r2
 80040ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040be:	623b      	str	r3, [r7, #32]
 80040c0:	2300      	movs	r3, #0
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
 80040c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040c8:	4642      	mov	r2, r8
 80040ca:	464b      	mov	r3, r9
 80040cc:	f04f 0000 	mov.w	r0, #0
 80040d0:	f04f 0100 	mov.w	r1, #0
 80040d4:	0159      	lsls	r1, r3, #5
 80040d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040da:	0150      	lsls	r0, r2, #5
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4641      	mov	r1, r8
 80040e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80040e6:	4649      	mov	r1, r9
 80040e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004100:	ebb2 040a 	subs.w	r4, r2, sl
 8004104:	eb63 050b 	sbc.w	r5, r3, fp
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	00eb      	lsls	r3, r5, #3
 8004112:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004116:	00e2      	lsls	r2, r4, #3
 8004118:	4614      	mov	r4, r2
 800411a:	461d      	mov	r5, r3
 800411c:	4643      	mov	r3, r8
 800411e:	18e3      	adds	r3, r4, r3
 8004120:	603b      	str	r3, [r7, #0]
 8004122:	464b      	mov	r3, r9
 8004124:	eb45 0303 	adc.w	r3, r5, r3
 8004128:	607b      	str	r3, [r7, #4]
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004136:	4629      	mov	r1, r5
 8004138:	028b      	lsls	r3, r1, #10
 800413a:	4621      	mov	r1, r4
 800413c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004140:	4621      	mov	r1, r4
 8004142:	028a      	lsls	r2, r1, #10
 8004144:	4610      	mov	r0, r2
 8004146:	4619      	mov	r1, r3
 8004148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800414a:	2200      	movs	r2, #0
 800414c:	61bb      	str	r3, [r7, #24]
 800414e:	61fa      	str	r2, [r7, #28]
 8004150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004154:	f7fc f838 	bl	80001c8 <__aeabi_uldivmod>
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	4613      	mov	r3, r2
 800415e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004160:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <HAL_RCC_GetSysClockFreq+0x200>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	0c1b      	lsrs	r3, r3, #16
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	3301      	adds	r3, #1
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004170:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004174:	fbb2 f3f3 	udiv	r3, r2, r3
 8004178:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800417a:	e002      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800417c:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_RCC_GetSysClockFreq+0x204>)
 800417e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004184:	4618      	mov	r0, r3
 8004186:	3750      	adds	r7, #80	; 0x50
 8004188:	46bd      	mov	sp, r7
 800418a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800418e:	bf00      	nop
 8004190:	40023800 	.word	0x40023800
 8004194:	00f42400 	.word	0x00f42400
 8004198:	007a1200 	.word	0x007a1200

0800419c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041a0:	4b03      	ldr	r3, [pc, #12]	; (80041b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041a2:	681b      	ldr	r3, [r3, #0]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	20000000 	.word	0x20000000

080041b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041b8:	f7ff fff0 	bl	800419c <HAL_RCC_GetHCLKFreq>
 80041bc:	4602      	mov	r2, r0
 80041be:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	0a9b      	lsrs	r3, r3, #10
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	4903      	ldr	r1, [pc, #12]	; (80041d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ca:	5ccb      	ldrb	r3, [r1, r3]
 80041cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40023800 	.word	0x40023800
 80041d8:	08006dac 	.word	0x08006dac

080041dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d105      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004200:	2b00      	cmp	r3, #0
 8004202:	d035      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004204:	4b62      	ldr	r3, [pc, #392]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800420a:	f7fc fe69 	bl	8000ee0 <HAL_GetTick>
 800420e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004210:	e008      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004212:	f7fc fe65 	bl	8000ee0 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e0b0      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004224:	4b5b      	ldr	r3, [pc, #364]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f0      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	019a      	lsls	r2, r3, #6
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	071b      	lsls	r3, r3, #28
 800423c:	4955      	ldr	r1, [pc, #340]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004244:	4b52      	ldr	r3, [pc, #328]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004246:	2201      	movs	r2, #1
 8004248:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800424a:	f7fc fe49 	bl	8000ee0 <HAL_GetTick>
 800424e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004250:	e008      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004252:	f7fc fe45 	bl	8000ee0 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d901      	bls.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e090      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004264:	4b4b      	ldr	r3, [pc, #300]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0f0      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 8083 	beq.w	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	4b44      	ldr	r3, [pc, #272]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	4a43      	ldr	r2, [pc, #268]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800428c:	6413      	str	r3, [r2, #64]	; 0x40
 800428e:	4b41      	ldr	r3, [pc, #260]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800429a:	4b3f      	ldr	r3, [pc, #252]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a3e      	ldr	r2, [pc, #248]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042a6:	f7fc fe1b 	bl	8000ee0 <HAL_GetTick>
 80042aa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042ac:	e008      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80042ae:	f7fc fe17 	bl	8000ee0 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e062      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042c0:	4b35      	ldr	r3, [pc, #212]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0f0      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042cc:	4b31      	ldr	r3, [pc, #196]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d02f      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d028      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042ea:	4b2a      	ldr	r3, [pc, #168]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042f4:	4b29      	ldr	r3, [pc, #164]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042fa:	4b28      	ldr	r3, [pc, #160]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004300:	4a24      	ldr	r2, [pc, #144]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004306:	4b23      	ldr	r3, [pc, #140]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b01      	cmp	r3, #1
 8004310:	d114      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004312:	f7fc fde5 	bl	8000ee0 <HAL_GetTick>
 8004316:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004318:	e00a      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800431a:	f7fc fde1 	bl	8000ee0 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	f241 3288 	movw	r2, #5000	; 0x1388
 8004328:	4293      	cmp	r3, r2
 800432a:	d901      	bls.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e02a      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004330:	4b18      	ldr	r3, [pc, #96]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0ee      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004344:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004348:	d10d      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800434a:	4b12      	ldr	r3, [pc, #72]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800435a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800435e:	490d      	ldr	r1, [pc, #52]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004360:	4313      	orrs	r3, r2
 8004362:	608b      	str	r3, [r1, #8]
 8004364:	e005      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004366:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	4a0a      	ldr	r2, [pc, #40]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800436c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004370:	6093      	str	r3, [r2, #8]
 8004372:	4b08      	ldr	r3, [pc, #32]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004374:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800437e:	4905      	ldr	r1, [pc, #20]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004380:	4313      	orrs	r3, r2
 8004382:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	42470068 	.word	0x42470068
 8004394:	40023800 	.word	0x40023800
 8004398:	40007000 	.word	0x40007000
 800439c:	42470e40 	.word	0x42470e40

080043a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d13e      	bne.n	800443c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80043be:	4b23      	ldr	r3, [pc, #140]	; (800444c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d12f      	bne.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80043d4:	4b1e      	ldr	r3, [pc, #120]	; (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043d6:	617b      	str	r3, [r7, #20]
          break;
 80043d8:	e02f      	b.n	800443a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043da:	4b1c      	ldr	r3, [pc, #112]	; (800444c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043e6:	d108      	bne.n	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043e8:	4b18      	ldr	r3, [pc, #96]	; (800444c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f0:	4a18      	ldr	r2, [pc, #96]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80043f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	e007      	b.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043fa:	4b14      	ldr	r3, [pc, #80]	; (800444c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004402:	4a15      	ldr	r2, [pc, #84]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004404:	fbb2 f3f3 	udiv	r3, r2, r3
 8004408:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800440a:	4b10      	ldr	r3, [pc, #64]	; (800444c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800440c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004410:	099b      	lsrs	r3, r3, #6
 8004412:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	fb02 f303 	mul.w	r3, r2, r3
 800441c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800441e:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004424:	0f1b      	lsrs	r3, r3, #28
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004430:	617b      	str	r3, [r7, #20]
          break;
 8004432:	e002      	b.n	800443a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	617b      	str	r3, [r7, #20]
          break;
 8004438:	bf00      	nop
        }
      }
      break;
 800443a:	bf00      	nop
    }
  }
  return frequency;
 800443c:	697b      	ldr	r3, [r7, #20]
}
 800443e:	4618      	mov	r0, r3
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40023800 	.word	0x40023800
 8004450:	00bb8000 	.word	0x00bb8000
 8004454:	007a1200 	.word	0x007a1200
 8004458:	00f42400 	.word	0x00f42400

0800445c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e07b      	b.n	8004566 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	2b00      	cmp	r3, #0
 8004474:	d108      	bne.n	8004488 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800447e:	d009      	beq.n	8004494 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	61da      	str	r2, [r3, #28]
 8004486:	e005      	b.n	8004494 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fc fbba 	bl	8000c28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004518:	ea42 0103 	orr.w	r1, r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004520:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	0c1b      	lsrs	r3, r3, #16
 8004532:	f003 0104 	and.w	r1, r3, #4
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	f003 0210 	and.w	r2, r3, #16
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69da      	ldr	r2, [r3, #28]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004554:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800456e:	b084      	sub	sp, #16
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	f107 001c 	add.w	r0, r7, #28
 800457c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	2b01      	cmp	r3, #1
 8004584:	d122      	bne.n	80045cc <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800459a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80045ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d105      	bne.n	80045c0 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f9bf 	bl	8004944 <USB_CoreReset>
 80045c6:	4603      	mov	r3, r0
 80045c8:	73fb      	strb	r3, [r7, #15]
 80045ca:	e01a      	b.n	8004602 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f9b3 	bl	8004944 <USB_CoreReset>
 80045de:	4603      	mov	r3, r0
 80045e0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80045e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d106      	bne.n	80045f6 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	639a      	str	r2, [r3, #56]	; 0x38
 80045f4:	e005      	b.n	8004602 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004604:	2b01      	cmp	r3, #1
 8004606:	d10b      	bne.n	8004620 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f043 0206 	orr.w	r2, r3, #6
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f043 0220 	orr.w	r2, r3, #32
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004620:	7bfb      	ldrb	r3, [r7, #15]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800462c:	b004      	add	sp, #16
 800462e:	4770      	bx	lr

08004630 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f043 0201 	orr.w	r2, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f023 0201 	bic.w	r2, r3, #1
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004690:	78fb      	ldrb	r3, [r7, #3]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d115      	bne.n	80046c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046a2:	2001      	movs	r0, #1
 80046a4:	f7fc fc28 	bl	8000ef8 <HAL_Delay>
      ms++;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	3301      	adds	r3, #1
 80046ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f939 	bl	8004926 <USB_GetMode>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d01e      	beq.n	80046f8 <USB_SetCurrentMode+0x84>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b31      	cmp	r3, #49	; 0x31
 80046be:	d9f0      	bls.n	80046a2 <USB_SetCurrentMode+0x2e>
 80046c0:	e01a      	b.n	80046f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80046c2:	78fb      	ldrb	r3, [r7, #3]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d115      	bne.n	80046f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046d4:	2001      	movs	r0, #1
 80046d6:	f7fc fc0f 	bl	8000ef8 <HAL_Delay>
      ms++;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3301      	adds	r3, #1
 80046de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f920 	bl	8004926 <USB_GetMode>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d005      	beq.n	80046f8 <USB_SetCurrentMode+0x84>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b31      	cmp	r3, #49	; 0x31
 80046f0:	d9f0      	bls.n	80046d4 <USB_SetCurrentMode+0x60>
 80046f2:	e001      	b.n	80046f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e005      	b.n	8004704 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b32      	cmp	r3, #50	; 0x32
 80046fc:	d101      	bne.n	8004702 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3301      	adds	r3, #1
 800471e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4a13      	ldr	r2, [pc, #76]	; (8004770 <USB_FlushTxFifo+0x64>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d901      	bls.n	800472c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e01b      	b.n	8004764 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	daf2      	bge.n	800471a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	019b      	lsls	r3, r3, #6
 800473c:	f043 0220 	orr.w	r2, r3, #32
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3301      	adds	r3, #1
 8004748:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4a08      	ldr	r2, [pc, #32]	; (8004770 <USB_FlushTxFifo+0x64>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d901      	bls.n	8004756 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e006      	b.n	8004764 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	2b20      	cmp	r3, #32
 8004760:	d0f0      	beq.n	8004744 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	00030d40 	.word	0x00030d40

08004774 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	3301      	adds	r3, #1
 8004784:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4a11      	ldr	r2, [pc, #68]	; (80047d0 <USB_FlushRxFifo+0x5c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d901      	bls.n	8004792 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e018      	b.n	80047c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	daf2      	bge.n	8004780 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2210      	movs	r2, #16
 80047a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	3301      	adds	r3, #1
 80047a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4a08      	ldr	r2, [pc, #32]	; (80047d0 <USB_FlushRxFifo+0x5c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d901      	bls.n	80047b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e006      	b.n	80047c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f003 0310 	and.w	r3, r3, #16
 80047be:	2b10      	cmp	r3, #16
 80047c0:	d0f0      	beq.n	80047a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	00030d40 	.word	0x00030d40

080047d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b089      	sub	sp, #36	; 0x24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	4611      	mov	r1, r2
 80047e0:	461a      	mov	r2, r3
 80047e2:	460b      	mov	r3, r1
 80047e4:	71fb      	strb	r3, [r7, #7]
 80047e6:	4613      	mov	r3, r2
 80047e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80047f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d123      	bne.n	8004842 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80047fa:	88bb      	ldrh	r3, [r7, #4]
 80047fc:	3303      	adds	r3, #3
 80047fe:	089b      	lsrs	r3, r3, #2
 8004800:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004802:	2300      	movs	r3, #0
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	e018      	b.n	800483a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004808:	79fb      	ldrb	r3, [r7, #7]
 800480a:	031a      	lsls	r2, r3, #12
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	4413      	add	r3, r2
 8004810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004814:	461a      	mov	r2, r3
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	3301      	adds	r3, #1
 8004820:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	3301      	adds	r3, #1
 8004826:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	3301      	adds	r3, #1
 800482c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	3301      	adds	r3, #1
 8004832:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	3301      	adds	r3, #1
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	429a      	cmp	r2, r3
 8004840:	d3e2      	bcc.n	8004808 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3724      	adds	r7, #36	; 0x24
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004850:	b480      	push	{r7}
 8004852:	b08b      	sub	sp, #44	; 0x2c
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	4613      	mov	r3, r2
 800485c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	089b      	lsrs	r3, r3, #2
 800486a:	b29b      	uxth	r3, r3
 800486c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800486e:	88fb      	ldrh	r3, [r7, #6]
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004876:	2300      	movs	r3, #0
 8004878:	623b      	str	r3, [r7, #32]
 800487a:	e014      	b.n	80048a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	601a      	str	r2, [r3, #0]
    pDest++;
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	3301      	adds	r3, #1
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	3301      	adds	r3, #1
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	3301      	adds	r3, #1
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	3301      	adds	r3, #1
 800489e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	3301      	adds	r3, #1
 80048a4:	623b      	str	r3, [r7, #32]
 80048a6:	6a3a      	ldr	r2, [r7, #32]
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d3e6      	bcc.n	800487c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80048ae:	8bfb      	ldrh	r3, [r7, #30]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d01e      	beq.n	80048f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048be:	461a      	mov	r2, r3
 80048c0:	f107 0310 	add.w	r3, r7, #16
 80048c4:	6812      	ldr	r2, [r2, #0]
 80048c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	fa22 f303 	lsr.w	r3, r2, r3
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	701a      	strb	r2, [r3, #0]
      i++;
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	3301      	adds	r3, #1
 80048de:	623b      	str	r3, [r7, #32]
      pDest++;
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	3301      	adds	r3, #1
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80048e6:	8bfb      	ldrh	r3, [r7, #30]
 80048e8:	3b01      	subs	r3, #1
 80048ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80048ec:	8bfb      	ldrh	r3, [r7, #30]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1ea      	bne.n	80048c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	372c      	adds	r7, #44	; 0x2c
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4013      	ands	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004918:	68fb      	ldr	r3, [r7, #12]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f003 0301 	and.w	r3, r3, #1
}
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
	...

08004944 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3301      	adds	r3, #1
 8004954:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4a13      	ldr	r2, [pc, #76]	; (80049a8 <USB_CoreReset+0x64>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d901      	bls.n	8004962 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e01b      	b.n	800499a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	2b00      	cmp	r3, #0
 8004968:	daf2      	bge.n	8004950 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f043 0201 	orr.w	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3301      	adds	r3, #1
 800497e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4a09      	ldr	r2, [pc, #36]	; (80049a8 <USB_CoreReset+0x64>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d901      	bls.n	800498c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e006      	b.n	800499a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b01      	cmp	r3, #1
 8004996:	d0f0      	beq.n	800497a <USB_CoreReset+0x36>

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	00030d40 	.word	0x00030d40

080049ac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049ac:	b084      	sub	sp, #16
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b086      	sub	sp, #24
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80049ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049cc:	461a      	mov	r2, r3
 80049ce:	2300      	movs	r3, #0
 80049d0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d018      	beq.n	8004a34 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d10a      	bne.n	8004a1e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a16:	f043 0304 	orr.w	r3, r3, #4
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	e014      	b.n	8004a48 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a2c:	f023 0304 	bic.w	r3, r3, #4
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	e009      	b.n	8004a48 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a42:	f023 0304 	bic.w	r3, r3, #4
 8004a46:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a48:	2110      	movs	r1, #16
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff fe5e 	bl	800470c <USB_FlushTxFifo>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7ff fe8a 	bl	8004774 <USB_FlushRxFifo>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	613b      	str	r3, [r7, #16]
 8004a6e:	e015      	b.n	8004a9c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a82:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a90:	461a      	mov	r2, r3
 8004a92:	2300      	movs	r3, #0
 8004a94:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	613b      	str	r3, [r7, #16]
 8004a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d3e5      	bcc.n	8004a70 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00b      	beq.n	8004ad6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ac4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a13      	ldr	r2, [pc, #76]	; (8004b18 <USB_HostInit+0x16c>)
 8004aca:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a13      	ldr	r2, [pc, #76]	; (8004b1c <USB_HostInit+0x170>)
 8004ad0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004ad4:	e009      	b.n	8004aea <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2280      	movs	r2, #128	; 0x80
 8004ada:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a10      	ldr	r2, [pc, #64]	; (8004b20 <USB_HostInit+0x174>)
 8004ae0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a0f      	ldr	r2, [pc, #60]	; (8004b24 <USB_HostInit+0x178>)
 8004ae6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d105      	bne.n	8004afc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	f043 0210 	orr.w	r2, r3, #16
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	699a      	ldr	r2, [r3, #24]
 8004b00:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <USB_HostInit+0x17c>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b14:	b004      	add	sp, #16
 8004b16:	4770      	bx	lr
 8004b18:	01000200 	.word	0x01000200
 8004b1c:	00e00300 	.word	0x00e00300
 8004b20:	00600080 	.word	0x00600080
 8004b24:	004000e0 	.word	0x004000e0
 8004b28:	a3200008 	.word	0xa3200008

08004b2c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b4a:	f023 0303 	bic.w	r3, r3, #3
 8004b4e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	68f9      	ldr	r1, [r7, #12]
 8004b60:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b64:	4313      	orrs	r3, r2
 8004b66:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d107      	bne.n	8004b7e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b74:	461a      	mov	r2, r3
 8004b76:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004b7a:	6053      	str	r3, [r2, #4]
 8004b7c:	e009      	b.n	8004b92 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004b7e:	78fb      	ldrb	r3, [r7, #3]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d106      	bne.n	8004b92 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004b90:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004bc4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d109      	bne.n	8004be4 <USB_DriveVbus+0x44>
 8004bd0:	78fb      	ldrb	r3, [r7, #3]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d106      	bne.n	8004be4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004bde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004be2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bee:	d109      	bne.n	8004c04 <USB_DriveVbus+0x64>
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004bfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c02:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b085      	sub	sp, #20
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	0c5b      	lsrs	r3, r3, #17
 8004c30:	f003 0303 	and.w	r3, r3, #3
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	b29b      	uxth	r3, r3
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
	...

08004c64 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	4608      	mov	r0, r1
 8004c6e:	4611      	mov	r1, r2
 8004c70:	461a      	mov	r2, r3
 8004c72:	4603      	mov	r3, r0
 8004c74:	70fb      	strb	r3, [r7, #3]
 8004c76:	460b      	mov	r3, r1
 8004c78:	70bb      	strb	r3, [r7, #2]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004c86:	78fb      	ldrb	r3, [r7, #3]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c92:	461a      	mov	r2, r3
 8004c94:	f04f 33ff 	mov.w	r3, #4294967295
 8004c98:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004c9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d87e      	bhi.n	8004da0 <USB_HC_Init+0x13c>
 8004ca2:	a201      	add	r2, pc, #4	; (adr r2, 8004ca8 <USB_HC_Init+0x44>)
 8004ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca8:	08004cb9 	.word	0x08004cb9
 8004cac:	08004d63 	.word	0x08004d63
 8004cb0:	08004cb9 	.word	0x08004cb9
 8004cb4:	08004d25 	.word	0x08004d25
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004cb8:	78fb      	ldrb	r3, [r7, #3]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	f240 439d 	movw	r3, #1181	; 0x49d
 8004cca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004ccc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	da10      	bge.n	8004cf6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004cd4:	78fb      	ldrb	r3, [r7, #3]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	78fa      	ldrb	r2, [r7, #3]
 8004ce4:	0151      	lsls	r1, r2, #5
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	440a      	add	r2, r1
 8004cea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004cf4:	e057      	b.n	8004da6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d051      	beq.n	8004da6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004d02:	78fb      	ldrb	r3, [r7, #3]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	78fa      	ldrb	r2, [r7, #3]
 8004d12:	0151      	lsls	r1, r2, #5
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	440a      	add	r2, r1
 8004d18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d1c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d20:	60d3      	str	r3, [r2, #12]
      break;
 8004d22:	e040      	b.n	8004da6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d30:	461a      	mov	r2, r3
 8004d32:	f240 639d 	movw	r3, #1693	; 0x69d
 8004d36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	da34      	bge.n	8004daa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d40:	78fb      	ldrb	r3, [r7, #3]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	78fa      	ldrb	r2, [r7, #3]
 8004d50:	0151      	lsls	r1, r2, #5
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	440a      	add	r2, r1
 8004d56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004d60:	e023      	b.n	8004daa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d62:	78fb      	ldrb	r3, [r7, #3]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f240 2325 	movw	r3, #549	; 0x225
 8004d74:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d76:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	da17      	bge.n	8004dae <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	78fa      	ldrb	r2, [r7, #3]
 8004d8e:	0151      	lsls	r1, r2, #5
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	440a      	add	r2, r1
 8004d94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d98:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004d9c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004d9e:	e006      	b.n	8004dae <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	77fb      	strb	r3, [r7, #31]
      break;
 8004da4:	e004      	b.n	8004db0 <USB_HC_Init+0x14c>
      break;
 8004da6:	bf00      	nop
 8004da8:	e002      	b.n	8004db0 <USB_HC_Init+0x14c>
      break;
 8004daa:	bf00      	nop
 8004dac:	e000      	b.n	8004db0 <USB_HC_Init+0x14c>
      break;
 8004dae:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	78fa      	ldrb	r2, [r7, #3]
 8004dc0:	0151      	lsls	r1, r2, #5
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	440a      	add	r2, r1
 8004dc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dca:	f043 0302 	orr.w	r3, r3, #2
 8004dce:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dd6:	699a      	ldr	r2, [r3, #24]
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	f003 030f 	and.w	r3, r3, #15
 8004dde:	2101      	movs	r1, #1
 8004de0:	fa01 f303 	lsl.w	r3, r1, r3
 8004de4:	6939      	ldr	r1, [r7, #16]
 8004de6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004dea:	4313      	orrs	r3, r2
 8004dec:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004dfa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	da03      	bge.n	8004e0a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e06:	61bb      	str	r3, [r7, #24]
 8004e08:	e001      	b.n	8004e0e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7ff feff 	bl	8004c12 <USB_GetHostSpeed>
 8004e14:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004e16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d106      	bne.n	8004e2c <USB_HC_Init+0x1c8>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d003      	beq.n	8004e2c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004e24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e28:	617b      	str	r3, [r7, #20]
 8004e2a:	e001      	b.n	8004e30 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e30:	787b      	ldrb	r3, [r7, #1]
 8004e32:	059b      	lsls	r3, r3, #22
 8004e34:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e38:	78bb      	ldrb	r3, [r7, #2]
 8004e3a:	02db      	lsls	r3, r3, #11
 8004e3c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e40:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e46:	049b      	lsls	r3, r3, #18
 8004e48:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e4c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e4e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004e50:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e54:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e5a:	78fb      	ldrb	r3, [r7, #3]
 8004e5c:	0159      	lsls	r1, r3, #5
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	440b      	add	r3, r1
 8004e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e66:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e6c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004e6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d003      	beq.n	8004e7e <USB_HC_Init+0x21a>
 8004e76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d10f      	bne.n	8004e9e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004e7e:	78fb      	ldrb	r3, [r7, #3]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	78fa      	ldrb	r2, [r7, #3]
 8004e8e:	0151      	lsls	r1, r2, #5
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	440a      	add	r2, r1
 8004e94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e9c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004e9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3720      	adds	r7, #32
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08c      	sub	sp, #48	; 0x30
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	785b      	ldrb	r3, [r3, #1]
 8004ebe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ec4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d02d      	beq.n	8004f2e <USB_HC_StartXfer+0x86>
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	791b      	ldrb	r3, [r3, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d129      	bne.n	8004f2e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004eda:	79fb      	ldrb	r3, [r7, #7]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d117      	bne.n	8004f10 <USB_HC_StartXfer+0x68>
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	79db      	ldrb	r3, [r3, #7]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <USB_HC_StartXfer+0x48>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	79db      	ldrb	r3, [r3, #7]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d10f      	bne.n	8004f10 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	0151      	lsls	r1, r2, #5
 8004f02:	6a3a      	ldr	r2, [r7, #32]
 8004f04:	440a      	add	r2, r1
 8004f06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10b      	bne.n	8004f2e <USB_HC_StartXfer+0x86>
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	795b      	ldrb	r3, [r3, #5]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d107      	bne.n	8004f2e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	785b      	ldrb	r3, [r3, #1]
 8004f22:	4619      	mov	r1, r3
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 fa0f 	bl	8005348 <USB_DoPing>
      return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	e0f8      	b.n	8005120 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d018      	beq.n	8004f68 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	8912      	ldrh	r2, [r2, #8]
 8004f3e:	4413      	add	r3, r2
 8004f40:	3b01      	subs	r3, #1
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	8912      	ldrh	r2, [r2, #8]
 8004f46:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f4a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004f4c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004f4e:	8b7b      	ldrh	r3, [r7, #26]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d90b      	bls.n	8004f6c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004f54:	8b7b      	ldrh	r3, [r7, #26]
 8004f56:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004f58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	8912      	ldrh	r2, [r2, #8]
 8004f5e:	fb03 f202 	mul.w	r2, r3, r2
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	611a      	str	r2, [r3, #16]
 8004f66:	e001      	b.n	8004f6c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	78db      	ldrb	r3, [r3, #3]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d007      	beq.n	8004f84 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004f74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	8912      	ldrh	r2, [r2, #8]
 8004f7a:	fb03 f202 	mul.w	r2, r3, r2
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	611a      	str	r2, [r3, #16]
 8004f82:	e003      	b.n	8004f8c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	695a      	ldr	r2, [r3, #20]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f96:	04d9      	lsls	r1, r3, #19
 8004f98:	4b63      	ldr	r3, [pc, #396]	; (8005128 <USB_HC_StartXfer+0x280>)
 8004f9a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f9c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	7a9b      	ldrb	r3, [r3, #10]
 8004fa2:	075b      	lsls	r3, r3, #29
 8004fa4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fa8:	69f9      	ldr	r1, [r7, #28]
 8004faa:	0148      	lsls	r0, r1, #5
 8004fac:	6a39      	ldr	r1, [r7, #32]
 8004fae:	4401      	add	r1, r0
 8004fb0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004fb4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fb6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004fb8:	79fb      	ldrb	r3, [r7, #7]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d009      	beq.n	8004fd2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	68d9      	ldr	r1, [r3, #12]
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fce:	460a      	mov	r2, r1
 8004fd0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	bf0c      	ite	eq
 8004fe2:	2301      	moveq	r3, #1
 8004fe4:	2300      	movne	r3, #0
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	0151      	lsls	r1, r2, #5
 8004ffc:	6a3a      	ldr	r2, [r7, #32]
 8004ffe:	440a      	add	r2, r1
 8005000:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005004:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005008:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	4413      	add	r3, r2
 8005012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	7e7b      	ldrb	r3, [r7, #25]
 800501a:	075b      	lsls	r3, r3, #29
 800501c:	69f9      	ldr	r1, [r7, #28]
 800501e:	0148      	lsls	r0, r1, #5
 8005020:	6a39      	ldr	r1, [r7, #32]
 8005022:	4401      	add	r1, r0
 8005024:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005028:	4313      	orrs	r3, r2
 800502a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	4413      	add	r3, r2
 8005034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005042:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	78db      	ldrb	r3, [r3, #3]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d004      	beq.n	8005056 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005052:	613b      	str	r3, [r7, #16]
 8005054:	e003      	b.n	800505e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800505c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005064:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	4413      	add	r3, r2
 800506e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005072:	461a      	mov	r2, r3
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	e04e      	b.n	8005120 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	78db      	ldrb	r3, [r3, #3]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d149      	bne.n	800511e <USB_HC_StartXfer+0x276>
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d045      	beq.n	800511e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	79db      	ldrb	r3, [r3, #7]
 8005096:	2b03      	cmp	r3, #3
 8005098:	d830      	bhi.n	80050fc <USB_HC_StartXfer+0x254>
 800509a:	a201      	add	r2, pc, #4	; (adr r2, 80050a0 <USB_HC_StartXfer+0x1f8>)
 800509c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a0:	080050b1 	.word	0x080050b1
 80050a4:	080050d5 	.word	0x080050d5
 80050a8:	080050b1 	.word	0x080050b1
 80050ac:	080050d5 	.word	0x080050d5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	3303      	adds	r3, #3
 80050b6:	089b      	lsrs	r3, r3, #2
 80050b8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80050ba:	8afa      	ldrh	r2, [r7, #22]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d91c      	bls.n	8005100 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	f043 0220 	orr.w	r2, r3, #32
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80050d2:	e015      	b.n	8005100 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	3303      	adds	r3, #3
 80050da:	089b      	lsrs	r3, r3, #2
 80050dc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80050de:	8afa      	ldrh	r2, [r7, #22]
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d90a      	bls.n	8005104 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80050fa:	e003      	b.n	8005104 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80050fc:	bf00      	nop
 80050fe:	e002      	b.n	8005106 <USB_HC_StartXfer+0x25e>
        break;
 8005100:	bf00      	nop
 8005102:	e000      	b.n	8005106 <USB_HC_StartXfer+0x25e>
        break;
 8005104:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	68d9      	ldr	r1, [r3, #12]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	785a      	ldrb	r2, [r3, #1]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	b29b      	uxth	r3, r3
 8005114:	2000      	movs	r0, #0
 8005116:	9000      	str	r0, [sp, #0]
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f7ff fb5b 	bl	80047d4 <USB_WritePacket>
  }

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3728      	adds	r7, #40	; 0x28
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	1ff80000 	.word	0x1ff80000

0800512c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	b29b      	uxth	r3, r3
}
 8005142:	4618      	mov	r0, r3
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800514e:	b480      	push	{r7}
 8005150:	b089      	sub	sp, #36	; 0x24
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	460b      	mov	r3, r1
 8005158:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800515e:	78fb      	ldrb	r3, [r7, #3]
 8005160:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005162:	2300      	movs	r3, #0
 8005164:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	4413      	add	r3, r2
 800516e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	0c9b      	lsrs	r3, r3, #18
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	4413      	add	r3, r2
 8005184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	0fdb      	lsrs	r3, r3, #31
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b20      	cmp	r3, #32
 800519c:	d104      	bne.n	80051a8 <USB_HC_Halt+0x5a>
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80051a4:	2300      	movs	r3, #0
 80051a6:	e0c8      	b.n	800533a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <USB_HC_Halt+0x66>
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d163      	bne.n	800527c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	0151      	lsls	r1, r2, #5
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	440a      	add	r2, r1
 80051ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051d2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f040 80ab 	bne.w	8005338 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d133      	bne.n	8005256 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	0151      	lsls	r1, r2, #5
 8005200:	69fa      	ldr	r2, [r7, #28]
 8005202:	440a      	add	r2, r1
 8005204:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005208:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800520c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	4413      	add	r3, r2
 8005216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	0151      	lsls	r1, r2, #5
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	440a      	add	r2, r1
 8005224:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005228:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800522c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	3301      	adds	r3, #1
 8005232:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800523a:	d81d      	bhi.n	8005278 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	4413      	add	r3, r2
 8005244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800524e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005252:	d0ec      	beq.n	800522e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005254:	e070      	b.n	8005338 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	4413      	add	r3, r2
 800525e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	0151      	lsls	r1, r2, #5
 8005268:	69fa      	ldr	r2, [r7, #28]
 800526a:	440a      	add	r2, r1
 800526c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005270:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005274:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005276:	e05f      	b.n	8005338 <USB_HC_Halt+0x1ea>
            break;
 8005278:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800527a:	e05d      	b.n	8005338 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	4413      	add	r3, r2
 8005284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	0151      	lsls	r1, r2, #5
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	440a      	add	r2, r1
 8005292:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005296:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800529a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d133      	bne.n	8005314 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	0151      	lsls	r1, r2, #5
 80052be:	69fa      	ldr	r2, [r7, #28]
 80052c0:	440a      	add	r2, r1
 80052c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052ea:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3301      	adds	r3, #1
 80052f0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052f8:	d81d      	bhi.n	8005336 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	4413      	add	r3, r2
 8005302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800530c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005310:	d0ec      	beq.n	80052ec <USB_HC_Halt+0x19e>
 8005312:	e011      	b.n	8005338 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	4413      	add	r3, r2
 800531c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	0151      	lsls	r1, r2, #5
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	440a      	add	r2, r1
 800532a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800532e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005332:	6013      	str	r3, [r2, #0]
 8005334:	e000      	b.n	8005338 <USB_HC_Halt+0x1ea>
          break;
 8005336:	bf00      	nop
    }
  }

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3724      	adds	r7, #36	; 0x24
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
	...

08005348 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800535c:	2301      	movs	r3, #1
 800535e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	04da      	lsls	r2, r3, #19
 8005364:	4b15      	ldr	r3, [pc, #84]	; (80053bc <USB_DoPing+0x74>)
 8005366:	4013      	ands	r3, r2
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	0151      	lsls	r1, r2, #5
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	440a      	add	r2, r1
 8005370:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005374:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005378:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	4413      	add	r3, r2
 8005382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005390:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005398:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a6:	461a      	mov	r2, r3
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	1ff80000 	.word	0x1ff80000

080053c0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b088      	sub	sp, #32
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7ff f93c 	bl	8004652 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053da:	2110      	movs	r1, #16
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff f995 	bl	800470c <USB_FlushTxFifo>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff f9c1 	bl	8004774 <USB_FlushRxFifo>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80053fc:	2300      	movs	r3, #0
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	e01f      	b.n	8005442 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	4413      	add	r3, r2
 800540a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005418:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005420:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005428:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	4413      	add	r3, r2
 8005432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005436:	461a      	mov	r2, r3
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	3301      	adds	r3, #1
 8005440:	61bb      	str	r3, [r7, #24]
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	2b0f      	cmp	r3, #15
 8005446:	d9dc      	bls.n	8005402 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005448:	2300      	movs	r3, #0
 800544a:	61bb      	str	r3, [r7, #24]
 800544c:	e034      	b.n	80054b8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	4413      	add	r3, r2
 8005456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005464:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800546c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005474:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	4413      	add	r3, r2
 800547e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005482:	461a      	mov	r2, r3
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	3301      	adds	r3, #1
 800548c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005494:	d80c      	bhi.n	80054b0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	4413      	add	r3, r2
 800549e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054ac:	d0ec      	beq.n	8005488 <USB_StopHost+0xc8>
 80054ae:	e000      	b.n	80054b2 <USB_StopHost+0xf2>
        break;
 80054b0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	3301      	adds	r3, #1
 80054b6:	61bb      	str	r3, [r7, #24]
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	2b0f      	cmp	r3, #15
 80054bc:	d9c7      	bls.n	800544e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054c4:	461a      	mov	r2, r3
 80054c6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f04f 32ff 	mov.w	r2, #4294967295
 80054d2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff f8ab 	bl	8004630 <USB_EnableGlobalInt>

  return ret;
 80054da:	7ffb      	ldrb	r3, [r7, #31]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3720      	adds	r7, #32
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80054e4:	b590      	push	{r4, r7, lr}
 80054e6:	b089      	sub	sp, #36	; 0x24
 80054e8:	af04      	add	r7, sp, #16
 80054ea:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80054ec:	2301      	movs	r3, #1
 80054ee:	2202      	movs	r2, #2
 80054f0:	2102      	movs	r1, #2
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fc66 	bl	8005dc4 <USBH_FindInterface>
 80054f8:	4603      	mov	r3, r0
 80054fa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	2bff      	cmp	r3, #255	; 0xff
 8005500:	d002      	beq.n	8005508 <USBH_CDC_InterfaceInit+0x24>
 8005502:	7bfb      	ldrb	r3, [r7, #15]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d901      	bls.n	800550c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005508:	2302      	movs	r3, #2
 800550a:	e13d      	b.n	8005788 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	4619      	mov	r1, r3
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fc3b 	bl	8005d8c <USBH_SelectInterface>
 8005516:	4603      	mov	r3, r0
 8005518:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800551a:	7bbb      	ldrb	r3, [r7, #14]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005520:	2302      	movs	r3, #2
 8005522:	e131      	b.n	8005788 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800552a:	2050      	movs	r0, #80	; 0x50
 800552c:	f001 fb12 	bl	8006b54 <malloc>
 8005530:	4603      	mov	r3, r0
 8005532:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005544:	2302      	movs	r3, #2
 8005546:	e11f      	b.n	8005788 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005548:	2250      	movs	r2, #80	; 0x50
 800554a:	2100      	movs	r1, #0
 800554c:	68b8      	ldr	r0, [r7, #8]
 800554e:	f001 fb11 	bl	8006b74 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005552:	7bfb      	ldrb	r3, [r7, #15]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	211a      	movs	r1, #26
 8005558:	fb01 f303 	mul.w	r3, r1, r3
 800555c:	4413      	add	r3, r2
 800555e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	b25b      	sxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	da15      	bge.n	8005596 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800556a:	7bfb      	ldrb	r3, [r7, #15]
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	211a      	movs	r1, #26
 8005570:	fb01 f303 	mul.w	r3, r1, r3
 8005574:	4413      	add	r3, r2
 8005576:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800557a:	781a      	ldrb	r2, [r3, #0]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	211a      	movs	r1, #26
 8005586:	fb01 f303 	mul.w	r3, r1, r3
 800558a:	4413      	add	r3, r2
 800558c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005590:	881a      	ldrh	r2, [r3, #0]
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	785b      	ldrb	r3, [r3, #1]
 800559a:	4619      	mov	r1, r3
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 ff9c 	bl	80064da <USBH_AllocPipe>
 80055a2:	4603      	mov	r3, r0
 80055a4:	461a      	mov	r2, r3
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	7819      	ldrb	r1, [r3, #0]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	7858      	ldrb	r0, [r3, #1]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	8952      	ldrh	r2, [r2, #10]
 80055c2:	9202      	str	r2, [sp, #8]
 80055c4:	2203      	movs	r2, #3
 80055c6:	9201      	str	r2, [sp, #4]
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	4623      	mov	r3, r4
 80055cc:	4602      	mov	r2, r0
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 ff54 	bl	800647c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2200      	movs	r2, #0
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f001 fa17 	bl	8006a10 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80055e2:	2300      	movs	r3, #0
 80055e4:	2200      	movs	r2, #0
 80055e6:	210a      	movs	r1, #10
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fbeb 	bl	8005dc4 <USBH_FindInterface>
 80055ee:	4603      	mov	r3, r0
 80055f0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
 80055f4:	2bff      	cmp	r3, #255	; 0xff
 80055f6:	d002      	beq.n	80055fe <USBH_CDC_InterfaceInit+0x11a>
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d901      	bls.n	8005602 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80055fe:	2302      	movs	r3, #2
 8005600:	e0c2      	b.n	8005788 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	211a      	movs	r1, #26
 8005608:	fb01 f303 	mul.w	r3, r1, r3
 800560c:	4413      	add	r3, r2
 800560e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	b25b      	sxtb	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	da16      	bge.n	8005648 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800561a:	7bfb      	ldrb	r3, [r7, #15]
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	211a      	movs	r1, #26
 8005620:	fb01 f303 	mul.w	r3, r1, r3
 8005624:	4413      	add	r3, r2
 8005626:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800562a:	781a      	ldrb	r2, [r3, #0]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005630:	7bfb      	ldrb	r3, [r7, #15]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	211a      	movs	r1, #26
 8005636:	fb01 f303 	mul.w	r3, r1, r3
 800563a:	4413      	add	r3, r2
 800563c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005640:	881a      	ldrh	r2, [r3, #0]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	835a      	strh	r2, [r3, #26]
 8005646:	e015      	b.n	8005674 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005648:	7bfb      	ldrb	r3, [r7, #15]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	211a      	movs	r1, #26
 800564e:	fb01 f303 	mul.w	r3, r1, r3
 8005652:	4413      	add	r3, r2
 8005654:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005658:	781a      	ldrb	r2, [r3, #0]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800565e:	7bfb      	ldrb	r3, [r7, #15]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	211a      	movs	r1, #26
 8005664:	fb01 f303 	mul.w	r3, r1, r3
 8005668:	4413      	add	r3, r2
 800566a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800566e:	881a      	ldrh	r2, [r3, #0]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	211a      	movs	r1, #26
 800567a:	fb01 f303 	mul.w	r3, r1, r3
 800567e:	4413      	add	r3, r2
 8005680:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	b25b      	sxtb	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	da16      	bge.n	80056ba <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800568c:	7bfb      	ldrb	r3, [r7, #15]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	211a      	movs	r1, #26
 8005692:	fb01 f303 	mul.w	r3, r1, r3
 8005696:	4413      	add	r3, r2
 8005698:	f203 3356 	addw	r3, r3, #854	; 0x356
 800569c:	781a      	ldrb	r2, [r3, #0]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	211a      	movs	r1, #26
 80056a8:	fb01 f303 	mul.w	r3, r1, r3
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80056b2:	881a      	ldrh	r2, [r3, #0]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	835a      	strh	r2, [r3, #26]
 80056b8:	e015      	b.n	80056e6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	211a      	movs	r1, #26
 80056c0:	fb01 f303 	mul.w	r3, r1, r3
 80056c4:	4413      	add	r3, r2
 80056c6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80056ca:	781a      	ldrb	r2, [r3, #0]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	211a      	movs	r1, #26
 80056d6:	fb01 f303 	mul.w	r3, r1, r3
 80056da:	4413      	add	r3, r2
 80056dc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80056e0:	881a      	ldrh	r2, [r3, #0]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	7b9b      	ldrb	r3, [r3, #14]
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fef4 	bl	80064da <USBH_AllocPipe>
 80056f2:	4603      	mov	r3, r0
 80056f4:	461a      	mov	r2, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	7bdb      	ldrb	r3, [r3, #15]
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 feea 	bl	80064da <USBH_AllocPipe>
 8005706:	4603      	mov	r3, r0
 8005708:	461a      	mov	r2, r3
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	7b59      	ldrb	r1, [r3, #13]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	7b98      	ldrb	r0, [r3, #14]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	8b12      	ldrh	r2, [r2, #24]
 8005726:	9202      	str	r2, [sp, #8]
 8005728:	2202      	movs	r2, #2
 800572a:	9201      	str	r2, [sp, #4]
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	4623      	mov	r3, r4
 8005730:	4602      	mov	r2, r0
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fea2 	bl	800647c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	7b19      	ldrb	r1, [r3, #12]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	7bd8      	ldrb	r0, [r3, #15]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	8b52      	ldrh	r2, [r2, #26]
 8005750:	9202      	str	r2, [sp, #8]
 8005752:	2202      	movs	r2, #2
 8005754:	9201      	str	r2, [sp, #4]
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	4623      	mov	r3, r4
 800575a:	4602      	mov	r2, r0
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 fe8d 	bl	800647c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	7b5b      	ldrb	r3, [r3, #13]
 800576e:	2200      	movs	r2, #0
 8005770:	4619      	mov	r1, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f001 f94c 	bl	8006a10 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	7b1b      	ldrb	r3, [r3, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	4619      	mov	r1, r3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f001 f945 	bl	8006a10 <USBH_LL_SetToggle>

  return USBH_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	bd90      	pop	{r4, r7, pc}

08005790 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00e      	beq.n	80057c8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	4619      	mov	r1, r3
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fe82 	bl	80064ba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	4619      	mov	r1, r3
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fead 	bl	800651c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	7b1b      	ldrb	r3, [r3, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00e      	beq.n	80057ee <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	7b1b      	ldrb	r3, [r3, #12]
 80057d4:	4619      	mov	r1, r3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fe6f 	bl	80064ba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	7b1b      	ldrb	r3, [r3, #12]
 80057e0:	4619      	mov	r1, r3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fe9a 	bl	800651c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	7b5b      	ldrb	r3, [r3, #13]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00e      	beq.n	8005814 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	7b5b      	ldrb	r3, [r3, #13]
 80057fa:	4619      	mov	r1, r3
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fe5c 	bl	80064ba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	7b5b      	ldrb	r3, [r3, #13]
 8005806:	4619      	mov	r1, r3
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fe87 	bl	800651c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800581a:	69db      	ldr	r3, [r3, #28]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00b      	beq.n	8005838 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	4618      	mov	r0, r3
 800582a:	f001 f99b 	bl	8006b64 <free>
    phost->pActiveClass->pData = 0U;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005834:	2200      	movs	r2, #0
 8005836:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b084      	sub	sp, #16
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	3340      	adds	r3, #64	; 0x40
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f8b1 	bl	80059c2 <GetLineCoding>
 8005860:	4603      	mov	r3, r0
 8005862:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005864:	7afb      	ldrb	r3, [r7, #11]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d105      	bne.n	8005876 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005870:	2102      	movs	r1, #2
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005876:	7afb      	ldrb	r3, [r7, #11]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005888:	2301      	movs	r3, #1
 800588a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	d877      	bhi.n	8005994 <USBH_CDC_Process+0x114>
 80058a4:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <USBH_CDC_Process+0x2c>)
 80058a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058aa:	bf00      	nop
 80058ac:	080058c1 	.word	0x080058c1
 80058b0:	080058c7 	.word	0x080058c7
 80058b4:	080058f7 	.word	0x080058f7
 80058b8:	0800596b 	.word	0x0800596b
 80058bc:	08005979 	.word	0x08005979
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80058c0:	2300      	movs	r3, #0
 80058c2:	73fb      	strb	r3, [r7, #15]
      break;
 80058c4:	e06d      	b.n	80059a2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ca:	4619      	mov	r1, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f897 	bl	8005a00 <SetLineCoding>
 80058d2:	4603      	mov	r3, r0
 80058d4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80058d6:	7bbb      	ldrb	r3, [r7, #14]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d104      	bne.n	80058e6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80058e4:	e058      	b.n	8005998 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80058e6:	7bbb      	ldrb	r3, [r7, #14]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d055      	beq.n	8005998 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2204      	movs	r2, #4
 80058f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80058f4:	e050      	b.n	8005998 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	3340      	adds	r3, #64	; 0x40
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f860 	bl	80059c2 <GetLineCoding>
 8005902:	4603      	mov	r3, r0
 8005904:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005906:	7bbb      	ldrb	r3, [r7, #14]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d126      	bne.n	800595a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800591e:	791b      	ldrb	r3, [r3, #4]
 8005920:	429a      	cmp	r2, r3
 8005922:	d13b      	bne.n	800599c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800592e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005930:	429a      	cmp	r2, r3
 8005932:	d133      	bne.n	800599c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800593e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005940:	429a      	cmp	r2, r3
 8005942:	d12b      	bne.n	800599c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800594c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800594e:	429a      	cmp	r2, r3
 8005950:	d124      	bne.n	800599c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f958 	bl	8005c08 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005958:	e020      	b.n	800599c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800595a:	7bbb      	ldrb	r3, [r7, #14]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d01d      	beq.n	800599c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2204      	movs	r2, #4
 8005964:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005968:	e018      	b.n	800599c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f867 	bl	8005a3e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f8da 	bl	8005b2a <CDC_ProcessReception>
      break;
 8005976:	e014      	b.n	80059a2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005978:	2100      	movs	r1, #0
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fb08 	bl	8005f90 <USBH_ClrFeature>
 8005980:	4603      	mov	r3, r0
 8005982:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005984:	7bbb      	ldrb	r3, [r7, #14]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10a      	bne.n	80059a0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005992:	e005      	b.n	80059a0 <USBH_CDC_Process+0x120>

    default:
      break;
 8005994:	bf00      	nop
 8005996:	e004      	b.n	80059a2 <USBH_CDC_Process+0x122>
      break;
 8005998:	bf00      	nop
 800599a:	e002      	b.n	80059a2 <USBH_CDC_Process+0x122>
      break;
 800599c:	bf00      	nop
 800599e:	e000      	b.n	80059a2 <USBH_CDC_Process+0x122>
      break;
 80059a0:	bf00      	nop

  }

  return status;
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b082      	sub	sp, #8
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
 80059ca:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	22a1      	movs	r2, #161	; 0xa1
 80059d0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2221      	movs	r2, #33	; 0x21
 80059d6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2207      	movs	r2, #7
 80059e8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2207      	movs	r2, #7
 80059ee:	4619      	mov	r1, r3
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 faf1 	bl	8005fd8 <USBH_CtlReq>
 80059f6:	4603      	mov	r3, r0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2221      	movs	r2, #33	; 0x21
 8005a0e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2220      	movs	r2, #32
 8005a14:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2207      	movs	r2, #7
 8005a26:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2207      	movs	r2, #7
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fad2 	bl	8005fd8 <USBH_CtlReq>
 8005a34:	4603      	mov	r3, r0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b086      	sub	sp, #24
 8005a42:	af02      	add	r7, sp, #8
 8005a44:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005a50:	2300      	movs	r3, #0
 8005a52:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d002      	beq.n	8005a64 <CDC_ProcessTransmission+0x26>
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d023      	beq.n	8005aaa <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005a62:	e05e      	b.n	8005b22 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	8b12      	ldrh	r2, [r2, #24]
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d90b      	bls.n	8005a88 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	69d9      	ldr	r1, [r3, #28]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8b1a      	ldrh	r2, [r3, #24]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	7b5b      	ldrb	r3, [r3, #13]
 8005a7c:	2001      	movs	r0, #1
 8005a7e:	9000      	str	r0, [sp, #0]
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fcb8 	bl	80063f6 <USBH_BulkSendData>
 8005a86:	e00b      	b.n	8005aa0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	7b5b      	ldrb	r3, [r3, #13]
 8005a96:	2001      	movs	r0, #1
 8005a98:	9000      	str	r0, [sp, #0]
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fcab 	bl	80063f6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005aa8:	e03b      	b.n	8005b22 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	7b5b      	ldrb	r3, [r3, #13]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 ff83 	bl	80069bc <USBH_LL_GetURBState>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005aba:	7afb      	ldrb	r3, [r7, #11]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d128      	bne.n	8005b12 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	8b12      	ldrh	r2, [r2, #24]
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d90e      	bls.n	8005aea <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	8b12      	ldrh	r2, [r2, #24]
 8005ad4:	1a9a      	subs	r2, r3, r2
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	8b12      	ldrh	r2, [r2, #24]
 8005ae2:	441a      	add	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	61da      	str	r2, [r3, #28]
 8005ae8:	e002      	b.n	8005af0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d004      	beq.n	8005b02 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b00:	e00e      	b.n	8005b20 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f868 	bl	8005be0 <USBH_CDC_TransmitCallback>
      break;
 8005b10:	e006      	b.n	8005b20 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005b12:	7afb      	ldrb	r3, [r7, #11]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d103      	bne.n	8005b20 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b20:	bf00      	nop
  }
}
 8005b22:	bf00      	nop
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b086      	sub	sp, #24
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	d002      	beq.n	8005b50 <CDC_ProcessReception+0x26>
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	d00e      	beq.n	8005b6c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005b4e:	e043      	b.n	8005bd8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	6a19      	ldr	r1, [r3, #32]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	8b5a      	ldrh	r2, [r3, #26]
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	7b1b      	ldrb	r3, [r3, #12]
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fc6f 	bl	8006440 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2204      	movs	r2, #4
 8005b66:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005b6a:	e035      	b.n	8005bd8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	7b1b      	ldrb	r3, [r3, #12]
 8005b70:	4619      	mov	r1, r3
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 ff22 	bl	80069bc <USBH_LL_GetURBState>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005b7c:	7cfb      	ldrb	r3, [r7, #19]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d129      	bne.n	8005bd6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	7b1b      	ldrb	r3, [r3, #12]
 8005b86:	4619      	mov	r1, r3
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fe85 	bl	8006898 <USBH_LL_GetLastXferSize>
 8005b8e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d016      	beq.n	8005bc8 <CDC_ProcessReception+0x9e>
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	8b5b      	ldrh	r3, [r3, #26]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d910      	bls.n	8005bc8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1ad2      	subs	r2, r2, r3
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	6a1a      	ldr	r2, [r3, #32]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	441a      	add	r2, r3
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2203      	movs	r2, #3
 8005bc2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005bc6:	e006      	b.n	8005bd6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f80f 	bl	8005bf4 <USBH_CDC_ReceiveCallback>
      break;
 8005bd6:	bf00      	nop
  }
}
 8005bd8:	bf00      	nop
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	4613      	mov	r3, r2
 8005c28:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005c30:	2302      	movs	r3, #2
 8005c32:	e029      	b.n	8005c88 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	79fa      	ldrb	r2, [r7, #7]
 8005c38:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f81f 	bl	8005c90 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 fd97 	bl	80067b4 <USBH_LL_Init>

  return USBH_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	e009      	b.n	8005cb6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	33e0      	adds	r3, #224	; 0xe0
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	2200      	movs	r2, #0
 8005cae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b0f      	cmp	r3, #15
 8005cba:	d9f2      	bls.n	8005ca2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	e009      	b.n	8005cd6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005ccc:	2200      	movs	r2, #0
 8005cce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cdc:	d3f1      	bcc.n	8005cc2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2240      	movs	r2, #64	; 0x40
 8005d02:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d016      	beq.n	8005d7a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10e      	bne.n	8005d74 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005d5c:	1c59      	adds	r1, r3, #1
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	33de      	adds	r3, #222	; 0xde
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	73fb      	strb	r3, [r7, #15]
 8005d72:	e004      	b.n	8005d7e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005d74:	2302      	movs	r3, #2
 8005d76:	73fb      	strb	r3, [r7, #15]
 8005d78:	e001      	b.n	8005d7e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	460b      	mov	r3, r1
 8005d96:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005da2:	78fa      	ldrb	r2, [r7, #3]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d204      	bcs.n	8005db2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	78fa      	ldrb	r2, [r7, #3]
 8005dac:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005db0:	e001      	b.n	8005db6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005db2:	2302      	movs	r3, #2
 8005db4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	4608      	mov	r0, r1
 8005dce:	4611      	mov	r1, r2
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	70fb      	strb	r3, [r7, #3]
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	70bb      	strb	r3, [r7, #2]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005de2:	2300      	movs	r3, #0
 8005de4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005dec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005dee:	e025      	b.n	8005e3c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005df0:	7dfb      	ldrb	r3, [r7, #23]
 8005df2:	221a      	movs	r2, #26
 8005df4:	fb02 f303 	mul.w	r3, r2, r3
 8005df8:	3308      	adds	r3, #8
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	3302      	adds	r3, #2
 8005e00:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	795b      	ldrb	r3, [r3, #5]
 8005e06:	78fa      	ldrb	r2, [r7, #3]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d002      	beq.n	8005e12 <USBH_FindInterface+0x4e>
 8005e0c:	78fb      	ldrb	r3, [r7, #3]
 8005e0e:	2bff      	cmp	r3, #255	; 0xff
 8005e10:	d111      	bne.n	8005e36 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005e16:	78ba      	ldrb	r2, [r7, #2]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d002      	beq.n	8005e22 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e1c:	78bb      	ldrb	r3, [r7, #2]
 8005e1e:	2bff      	cmp	r3, #255	; 0xff
 8005e20:	d109      	bne.n	8005e36 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e26:	787a      	ldrb	r2, [r7, #1]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d002      	beq.n	8005e32 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005e2c:	787b      	ldrb	r3, [r7, #1]
 8005e2e:	2bff      	cmp	r3, #255	; 0xff
 8005e30:	d101      	bne.n	8005e36 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005e32:	7dfb      	ldrb	r3, [r7, #23]
 8005e34:	e006      	b.n	8005e44 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005e36:	7dfb      	ldrb	r3, [r7, #23]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e3c:	7dfb      	ldrb	r3, [r7, #23]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d9d6      	bls.n	8005df0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005e42:	23ff      	movs	r3, #255	; 0xff
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fce7 	bl	800682c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005e5e:	2101      	movs	r1, #1
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fdbe 	bl	80069e2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3708      	adds	r7, #8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b082      	sub	sp, #8
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f804 	bl	8005eb2 <USBH_HandleSof>
}
 8005eaa:	bf00      	nop
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b082      	sub	sp, #8
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b0b      	cmp	r3, #11
 8005ec2:	d10a      	bne.n	8005eda <USBH_HandleSof+0x28>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d005      	beq.n	8005eda <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	4798      	blx	r3
  }
}
 8005eda:	bf00      	nop
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8005ef2:	bf00      	nop
}
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8005f0e:	bf00      	nop
}
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fc7a 	bl	8006862 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	791b      	ldrb	r3, [r3, #4]
 8005f72:	4619      	mov	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 fad1 	bl	800651c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	795b      	ldrb	r3, [r3, #5]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 facb 	bl	800651c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	789b      	ldrb	r3, [r3, #2]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d10f      	bne.n	8005fc4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005fb6:	78fb      	ldrb	r3, [r7, #3]
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f805 	bl	8005fd8 <USBH_CtlReq>
 8005fce:	4603      	mov	r3, r0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	789b      	ldrb	r3, [r3, #2]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d002      	beq.n	8005ff8 <USBH_CtlReq+0x20>
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d00f      	beq.n	8006016 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8005ff6:	e027      	b.n	8006048 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	88fa      	ldrh	r2, [r7, #6]
 8006002:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2201      	movs	r2, #1
 8006008:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2202      	movs	r2, #2
 800600e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006010:	2301      	movs	r3, #1
 8006012:	75fb      	strb	r3, [r7, #23]
      break;
 8006014:	e018      	b.n	8006048 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 f81c 	bl	8006054 <USBH_HandleControl>
 800601c:	4603      	mov	r3, r0
 800601e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006020:	7dfb      	ldrb	r3, [r7, #23]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <USBH_CtlReq+0x54>
 8006026:	7dfb      	ldrb	r3, [r7, #23]
 8006028:	2b03      	cmp	r3, #3
 800602a:	d106      	bne.n	800603a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2201      	movs	r2, #1
 8006030:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	761a      	strb	r2, [r3, #24]
      break;
 8006038:	e005      	b.n	8006046 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800603a:	7dfb      	ldrb	r3, [r7, #23]
 800603c:	2b02      	cmp	r3, #2
 800603e:	d102      	bne.n	8006046 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2201      	movs	r2, #1
 8006044:	709a      	strb	r2, [r3, #2]
      break;
 8006046:	bf00      	nop
  }
  return status;
 8006048:	7dfb      	ldrb	r3, [r7, #23]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
	...

08006054 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af02      	add	r7, sp, #8
 800605a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800605c:	2301      	movs	r3, #1
 800605e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006060:	2300      	movs	r3, #0
 8006062:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	7e1b      	ldrb	r3, [r3, #24]
 8006068:	3b01      	subs	r3, #1
 800606a:	2b0a      	cmp	r3, #10
 800606c:	f200 8156 	bhi.w	800631c <USBH_HandleControl+0x2c8>
 8006070:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <USBH_HandleControl+0x24>)
 8006072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006076:	bf00      	nop
 8006078:	080060a5 	.word	0x080060a5
 800607c:	080060bf 	.word	0x080060bf
 8006080:	08006129 	.word	0x08006129
 8006084:	0800614f 	.word	0x0800614f
 8006088:	08006187 	.word	0x08006187
 800608c:	080061b1 	.word	0x080061b1
 8006090:	08006203 	.word	0x08006203
 8006094:	08006225 	.word	0x08006225
 8006098:	08006261 	.word	0x08006261
 800609c:	08006287 	.word	0x08006287
 80060a0:	080062c5 	.word	0x080062c5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f103 0110 	add.w	r1, r3, #16
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	795b      	ldrb	r3, [r3, #5]
 80060ae:	461a      	mov	r2, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f943 	bl	800633c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2202      	movs	r2, #2
 80060ba:	761a      	strb	r2, [r3, #24]
      break;
 80060bc:	e139      	b.n	8006332 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	795b      	ldrb	r3, [r3, #5]
 80060c2:	4619      	mov	r1, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 fc79 	bl	80069bc <USBH_LL_GetURBState>
 80060ca:	4603      	mov	r3, r0
 80060cc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80060ce:	7bbb      	ldrb	r3, [r7, #14]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d11e      	bne.n	8006112 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	7c1b      	ldrb	r3, [r3, #16]
 80060d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060dc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	8adb      	ldrh	r3, [r3, #22]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80060e6:	7b7b      	ldrb	r3, [r7, #13]
 80060e8:	2b80      	cmp	r3, #128	; 0x80
 80060ea:	d103      	bne.n	80060f4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2203      	movs	r2, #3
 80060f0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80060f2:	e115      	b.n	8006320 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2205      	movs	r2, #5
 80060f8:	761a      	strb	r2, [r3, #24]
      break;
 80060fa:	e111      	b.n	8006320 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80060fc:	7b7b      	ldrb	r3, [r7, #13]
 80060fe:	2b80      	cmp	r3, #128	; 0x80
 8006100:	d103      	bne.n	800610a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2209      	movs	r2, #9
 8006106:	761a      	strb	r2, [r3, #24]
      break;
 8006108:	e10a      	b.n	8006320 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2207      	movs	r2, #7
 800610e:	761a      	strb	r2, [r3, #24]
      break;
 8006110:	e106      	b.n	8006320 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006112:	7bbb      	ldrb	r3, [r7, #14]
 8006114:	2b04      	cmp	r3, #4
 8006116:	d003      	beq.n	8006120 <USBH_HandleControl+0xcc>
 8006118:	7bbb      	ldrb	r3, [r7, #14]
 800611a:	2b02      	cmp	r3, #2
 800611c:	f040 8100 	bne.w	8006320 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	220b      	movs	r2, #11
 8006124:	761a      	strb	r2, [r3, #24]
      break;
 8006126:	e0fb      	b.n	8006320 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800612e:	b29a      	uxth	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6899      	ldr	r1, [r3, #8]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	899a      	ldrh	r2, [r3, #12]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	791b      	ldrb	r3, [r3, #4]
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f93a 	bl	80063ba <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2204      	movs	r2, #4
 800614a:	761a      	strb	r2, [r3, #24]
      break;
 800614c:	e0f1      	b.n	8006332 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	791b      	ldrb	r3, [r3, #4]
 8006152:	4619      	mov	r1, r3
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fc31 	bl	80069bc <USBH_LL_GetURBState>
 800615a:	4603      	mov	r3, r0
 800615c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800615e:	7bbb      	ldrb	r3, [r7, #14]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d102      	bne.n	800616a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2209      	movs	r2, #9
 8006168:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800616a:	7bbb      	ldrb	r3, [r7, #14]
 800616c:	2b05      	cmp	r3, #5
 800616e:	d102      	bne.n	8006176 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006170:	2303      	movs	r3, #3
 8006172:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006174:	e0d6      	b.n	8006324 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006176:	7bbb      	ldrb	r3, [r7, #14]
 8006178:	2b04      	cmp	r3, #4
 800617a:	f040 80d3 	bne.w	8006324 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	220b      	movs	r2, #11
 8006182:	761a      	strb	r2, [r3, #24]
      break;
 8006184:	e0ce      	b.n	8006324 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6899      	ldr	r1, [r3, #8]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	899a      	ldrh	r2, [r3, #12]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	795b      	ldrb	r3, [r3, #5]
 8006192:	2001      	movs	r0, #1
 8006194:	9000      	str	r0, [sp, #0]
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f8ea 	bl	8006370 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2206      	movs	r2, #6
 80061ac:	761a      	strb	r2, [r3, #24]
      break;
 80061ae:	e0c0      	b.n	8006332 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	795b      	ldrb	r3, [r3, #5]
 80061b4:	4619      	mov	r1, r3
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fc00 	bl	80069bc <USBH_LL_GetURBState>
 80061bc:	4603      	mov	r3, r0
 80061be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80061c0:	7bbb      	ldrb	r3, [r7, #14]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d103      	bne.n	80061ce <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2207      	movs	r2, #7
 80061ca:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80061cc:	e0ac      	b.n	8006328 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80061ce:	7bbb      	ldrb	r3, [r7, #14]
 80061d0:	2b05      	cmp	r3, #5
 80061d2:	d105      	bne.n	80061e0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	220c      	movs	r2, #12
 80061d8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80061da:	2303      	movs	r3, #3
 80061dc:	73fb      	strb	r3, [r7, #15]
      break;
 80061de:	e0a3      	b.n	8006328 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80061e0:	7bbb      	ldrb	r3, [r7, #14]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d103      	bne.n	80061ee <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2205      	movs	r2, #5
 80061ea:	761a      	strb	r2, [r3, #24]
      break;
 80061ec:	e09c      	b.n	8006328 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80061ee:	7bbb      	ldrb	r3, [r7, #14]
 80061f0:	2b04      	cmp	r3, #4
 80061f2:	f040 8099 	bne.w	8006328 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	220b      	movs	r2, #11
 80061fa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80061fc:	2302      	movs	r3, #2
 80061fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006200:	e092      	b.n	8006328 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	791b      	ldrb	r3, [r3, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	2100      	movs	r1, #0
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f8d5 	bl	80063ba <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006216:	b29a      	uxth	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2208      	movs	r2, #8
 8006220:	761a      	strb	r2, [r3, #24]

      break;
 8006222:	e086      	b.n	8006332 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	791b      	ldrb	r3, [r3, #4]
 8006228:	4619      	mov	r1, r3
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fbc6 	bl	80069bc <USBH_LL_GetURBState>
 8006230:	4603      	mov	r3, r0
 8006232:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006234:	7bbb      	ldrb	r3, [r7, #14]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d105      	bne.n	8006246 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	220d      	movs	r2, #13
 800623e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006240:	2300      	movs	r3, #0
 8006242:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006244:	e072      	b.n	800632c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006246:	7bbb      	ldrb	r3, [r7, #14]
 8006248:	2b04      	cmp	r3, #4
 800624a:	d103      	bne.n	8006254 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	220b      	movs	r2, #11
 8006250:	761a      	strb	r2, [r3, #24]
      break;
 8006252:	e06b      	b.n	800632c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006254:	7bbb      	ldrb	r3, [r7, #14]
 8006256:	2b05      	cmp	r3, #5
 8006258:	d168      	bne.n	800632c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800625a:	2303      	movs	r3, #3
 800625c:	73fb      	strb	r3, [r7, #15]
      break;
 800625e:	e065      	b.n	800632c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	795b      	ldrb	r3, [r3, #5]
 8006264:	2201      	movs	r2, #1
 8006266:	9200      	str	r2, [sp, #0]
 8006268:	2200      	movs	r2, #0
 800626a:	2100      	movs	r1, #0
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f87f 	bl	8006370 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006278:	b29a      	uxth	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	220a      	movs	r2, #10
 8006282:	761a      	strb	r2, [r3, #24]
      break;
 8006284:	e055      	b.n	8006332 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	795b      	ldrb	r3, [r3, #5]
 800628a:	4619      	mov	r1, r3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fb95 	bl	80069bc <USBH_LL_GetURBState>
 8006292:	4603      	mov	r3, r0
 8006294:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006296:	7bbb      	ldrb	r3, [r7, #14]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d105      	bne.n	80062a8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	220d      	movs	r2, #13
 80062a4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80062a6:	e043      	b.n	8006330 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80062a8:	7bbb      	ldrb	r3, [r7, #14]
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d103      	bne.n	80062b6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2209      	movs	r2, #9
 80062b2:	761a      	strb	r2, [r3, #24]
      break;
 80062b4:	e03c      	b.n	8006330 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80062b6:	7bbb      	ldrb	r3, [r7, #14]
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d139      	bne.n	8006330 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	220b      	movs	r2, #11
 80062c0:	761a      	strb	r2, [r3, #24]
      break;
 80062c2:	e035      	b.n	8006330 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	7e5b      	ldrb	r3, [r3, #25]
 80062c8:	3301      	adds	r3, #1
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	765a      	strb	r2, [r3, #25]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	7e5b      	ldrb	r3, [r3, #25]
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d806      	bhi.n	80062e6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80062e4:	e025      	b.n	8006332 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062ec:	2106      	movs	r1, #6
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	795b      	ldrb	r3, [r3, #5]
 80062fc:	4619      	mov	r1, r3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f90c 	bl	800651c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	791b      	ldrb	r3, [r3, #4]
 8006308:	4619      	mov	r1, r3
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f906 	bl	800651c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006316:	2302      	movs	r3, #2
 8006318:	73fb      	strb	r3, [r7, #15]
      break;
 800631a:	e00a      	b.n	8006332 <USBH_HandleControl+0x2de>

    default:
      break;
 800631c:	bf00      	nop
 800631e:	e008      	b.n	8006332 <USBH_HandleControl+0x2de>
      break;
 8006320:	bf00      	nop
 8006322:	e006      	b.n	8006332 <USBH_HandleControl+0x2de>
      break;
 8006324:	bf00      	nop
 8006326:	e004      	b.n	8006332 <USBH_HandleControl+0x2de>
      break;
 8006328:	bf00      	nop
 800632a:	e002      	b.n	8006332 <USBH_HandleControl+0x2de>
      break;
 800632c:	bf00      	nop
 800632e:	e000      	b.n	8006332 <USBH_HandleControl+0x2de>
      break;
 8006330:	bf00      	nop
  }

  return status;
 8006332:	7bfb      	ldrb	r3, [r7, #15]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af04      	add	r7, sp, #16
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	4613      	mov	r3, r2
 8006348:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800634a:	79f9      	ldrb	r1, [r7, #7]
 800634c:	2300      	movs	r3, #0
 800634e:	9303      	str	r3, [sp, #12]
 8006350:	2308      	movs	r3, #8
 8006352:	9302      	str	r3, [sp, #8]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	9301      	str	r3, [sp, #4]
 8006358:	2300      	movs	r3, #0
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	2300      	movs	r3, #0
 800635e:	2200      	movs	r2, #0
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 fafa 	bl	800695a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b088      	sub	sp, #32
 8006374:	af04      	add	r7, sp, #16
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	4611      	mov	r1, r2
 800637c:	461a      	mov	r2, r3
 800637e:	460b      	mov	r3, r1
 8006380:	80fb      	strh	r3, [r7, #6]
 8006382:	4613      	mov	r3, r2
 8006384:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006394:	7979      	ldrb	r1, [r7, #5]
 8006396:	7e3b      	ldrb	r3, [r7, #24]
 8006398:	9303      	str	r3, [sp, #12]
 800639a:	88fb      	ldrh	r3, [r7, #6]
 800639c:	9302      	str	r3, [sp, #8]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	9301      	str	r3, [sp, #4]
 80063a2:	2301      	movs	r3, #1
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	2300      	movs	r3, #0
 80063a8:	2200      	movs	r2, #0
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 fad5 	bl	800695a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b088      	sub	sp, #32
 80063be:	af04      	add	r7, sp, #16
 80063c0:	60f8      	str	r0, [r7, #12]
 80063c2:	60b9      	str	r1, [r7, #8]
 80063c4:	4611      	mov	r1, r2
 80063c6:	461a      	mov	r2, r3
 80063c8:	460b      	mov	r3, r1
 80063ca:	80fb      	strh	r3, [r7, #6]
 80063cc:	4613      	mov	r3, r2
 80063ce:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80063d0:	7979      	ldrb	r1, [r7, #5]
 80063d2:	2300      	movs	r3, #0
 80063d4:	9303      	str	r3, [sp, #12]
 80063d6:	88fb      	ldrh	r3, [r7, #6]
 80063d8:	9302      	str	r3, [sp, #8]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	9301      	str	r3, [sp, #4]
 80063de:	2301      	movs	r3, #1
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	2300      	movs	r3, #0
 80063e4:	2201      	movs	r2, #1
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 fab7 	bl	800695a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80063ec:	2300      	movs	r3, #0

}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b088      	sub	sp, #32
 80063fa:	af04      	add	r7, sp, #16
 80063fc:	60f8      	str	r0, [r7, #12]
 80063fe:	60b9      	str	r1, [r7, #8]
 8006400:	4611      	mov	r1, r2
 8006402:	461a      	mov	r2, r3
 8006404:	460b      	mov	r3, r1
 8006406:	80fb      	strh	r3, [r7, #6]
 8006408:	4613      	mov	r3, r2
 800640a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006416:	2300      	movs	r3, #0
 8006418:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800641a:	7979      	ldrb	r1, [r7, #5]
 800641c:	7e3b      	ldrb	r3, [r7, #24]
 800641e:	9303      	str	r3, [sp, #12]
 8006420:	88fb      	ldrh	r3, [r7, #6]
 8006422:	9302      	str	r3, [sp, #8]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	9301      	str	r3, [sp, #4]
 8006428:	2301      	movs	r3, #1
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	2302      	movs	r3, #2
 800642e:	2200      	movs	r2, #0
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 fa92 	bl	800695a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af04      	add	r7, sp, #16
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	4611      	mov	r1, r2
 800644c:	461a      	mov	r2, r3
 800644e:	460b      	mov	r3, r1
 8006450:	80fb      	strh	r3, [r7, #6]
 8006452:	4613      	mov	r3, r2
 8006454:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006456:	7979      	ldrb	r1, [r7, #5]
 8006458:	2300      	movs	r3, #0
 800645a:	9303      	str	r3, [sp, #12]
 800645c:	88fb      	ldrh	r3, [r7, #6]
 800645e:	9302      	str	r3, [sp, #8]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	9301      	str	r3, [sp, #4]
 8006464:	2301      	movs	r3, #1
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	2302      	movs	r3, #2
 800646a:	2201      	movs	r2, #1
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 fa74 	bl	800695a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af04      	add	r7, sp, #16
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	4608      	mov	r0, r1
 8006486:	4611      	mov	r1, r2
 8006488:	461a      	mov	r2, r3
 800648a:	4603      	mov	r3, r0
 800648c:	70fb      	strb	r3, [r7, #3]
 800648e:	460b      	mov	r3, r1
 8006490:	70bb      	strb	r3, [r7, #2]
 8006492:	4613      	mov	r3, r2
 8006494:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006496:	7878      	ldrb	r0, [r7, #1]
 8006498:	78ba      	ldrb	r2, [r7, #2]
 800649a:	78f9      	ldrb	r1, [r7, #3]
 800649c:	8b3b      	ldrh	r3, [r7, #24]
 800649e:	9302      	str	r3, [sp, #8]
 80064a0:	7d3b      	ldrb	r3, [r7, #20]
 80064a2:	9301      	str	r3, [sp, #4]
 80064a4:	7c3b      	ldrb	r3, [r7, #16]
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	4603      	mov	r3, r0
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fa07 	bl	80068be <USBH_LL_OpenPipe>

  return USBH_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b082      	sub	sp, #8
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	460b      	mov	r3, r1
 80064c4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80064c6:	78fb      	ldrb	r3, [r7, #3]
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fa26 	bl	800691c <USBH_LL_ClosePipe>

  return USBH_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	460b      	mov	r3, r1
 80064e4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f836 	bl	8006558 <USBH_GetFreePipe>
 80064ec:	4603      	mov	r3, r0
 80064ee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80064f0:	89fb      	ldrh	r3, [r7, #14]
 80064f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d00a      	beq.n	8006510 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80064fa:	78fa      	ldrb	r2, [r7, #3]
 80064fc:	89fb      	ldrh	r3, [r7, #14]
 80064fe:	f003 030f 	and.w	r3, r3, #15
 8006502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006506:	6879      	ldr	r1, [r7, #4]
 8006508:	33e0      	adds	r3, #224	; 0xe0
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	440b      	add	r3, r1
 800650e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006510:	89fb      	ldrh	r3, [r7, #14]
 8006512:	b2db      	uxtb	r3, r3
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	460b      	mov	r3, r1
 8006526:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006528:	78fb      	ldrb	r3, [r7, #3]
 800652a:	2b0f      	cmp	r3, #15
 800652c:	d80d      	bhi.n	800654a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800652e:	78fb      	ldrb	r3, [r7, #3]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	33e0      	adds	r3, #224	; 0xe0
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	33e0      	adds	r3, #224	; 0xe0
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	440b      	add	r3, r1
 8006548:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006564:	2300      	movs	r3, #0
 8006566:	73fb      	strb	r3, [r7, #15]
 8006568:	e00f      	b.n	800658a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800656a:	7bfb      	ldrb	r3, [r7, #15]
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	33e0      	adds	r3, #224	; 0xe0
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d102      	bne.n	8006584 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800657e:	7bfb      	ldrb	r3, [r7, #15]
 8006580:	b29b      	uxth	r3, r3
 8006582:	e007      	b.n	8006594 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	3301      	adds	r3, #1
 8006588:	73fb      	strb	r3, [r7, #15]
 800658a:	7bfb      	ldrb	r3, [r7, #15]
 800658c:	2b0f      	cmp	r3, #15
 800658e:	d9ec      	bls.n	800656a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006590:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006594:	4618      	mov	r0, r3
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80065a4:	2201      	movs	r2, #1
 80065a6:	490e      	ldr	r1, [pc, #56]	; (80065e0 <MX_USB_HOST_Init+0x40>)
 80065a8:	480e      	ldr	r0, [pc, #56]	; (80065e4 <MX_USB_HOST_Init+0x44>)
 80065aa:	f7ff fb37 	bl	8005c1c <USBH_Init>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80065b4:	f7fa fa42 	bl	8000a3c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80065b8:	490b      	ldr	r1, [pc, #44]	; (80065e8 <MX_USB_HOST_Init+0x48>)
 80065ba:	480a      	ldr	r0, [pc, #40]	; (80065e4 <MX_USB_HOST_Init+0x44>)
 80065bc:	f7ff fbbc 	bl	8005d38 <USBH_RegisterClass>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80065c6:	f7fa fa39 	bl	8000a3c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80065ca:	4806      	ldr	r0, [pc, #24]	; (80065e4 <MX_USB_HOST_Init+0x44>)
 80065cc:	f7ff fc40 	bl	8005e50 <USBH_Start>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80065d6:	f7fa fa31 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80065da:	bf00      	nop
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	080065ed 	.word	0x080065ed
 80065e4:	200001a8 	.word	0x200001a8
 80065e8:	2000000c 	.word	0x2000000c

080065ec <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	460b      	mov	r3, r1
 80065f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80065f8:	78fb      	ldrb	r3, [r7, #3]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	d819      	bhi.n	8006634 <USBH_UserProcess+0x48>
 8006600:	a201      	add	r2, pc, #4	; (adr r2, 8006608 <USBH_UserProcess+0x1c>)
 8006602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006606:	bf00      	nop
 8006608:	08006635 	.word	0x08006635
 800660c:	08006625 	.word	0x08006625
 8006610:	08006635 	.word	0x08006635
 8006614:	0800662d 	.word	0x0800662d
 8006618:	0800661d 	.word	0x0800661d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800661c:	4b09      	ldr	r3, [pc, #36]	; (8006644 <USBH_UserProcess+0x58>)
 800661e:	2203      	movs	r2, #3
 8006620:	701a      	strb	r2, [r3, #0]
  break;
 8006622:	e008      	b.n	8006636 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006624:	4b07      	ldr	r3, [pc, #28]	; (8006644 <USBH_UserProcess+0x58>)
 8006626:	2202      	movs	r2, #2
 8006628:	701a      	strb	r2, [r3, #0]
  break;
 800662a:	e004      	b.n	8006636 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800662c:	4b05      	ldr	r3, [pc, #20]	; (8006644 <USBH_UserProcess+0x58>)
 800662e:	2201      	movs	r2, #1
 8006630:	701a      	strb	r2, [r3, #0]
  break;
 8006632:	e000      	b.n	8006636 <USBH_UserProcess+0x4a>

  default:
  break;
 8006634:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006636:	bf00      	nop
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	20000580 	.word	0x20000580

08006648 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08a      	sub	sp, #40	; 0x28
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006650:	f107 0314 	add.w	r3, r7, #20
 8006654:	2200      	movs	r2, #0
 8006656:	601a      	str	r2, [r3, #0]
 8006658:	605a      	str	r2, [r3, #4]
 800665a:	609a      	str	r2, [r3, #8]
 800665c:	60da      	str	r2, [r3, #12]
 800665e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006668:	d147      	bne.n	80066fa <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800666a:	2300      	movs	r3, #0
 800666c:	613b      	str	r3, [r7, #16]
 800666e:	4b25      	ldr	r3, [pc, #148]	; (8006704 <HAL_HCD_MspInit+0xbc>)
 8006670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006672:	4a24      	ldr	r2, [pc, #144]	; (8006704 <HAL_HCD_MspInit+0xbc>)
 8006674:	f043 0301 	orr.w	r3, r3, #1
 8006678:	6313      	str	r3, [r2, #48]	; 0x30
 800667a:	4b22      	ldr	r3, [pc, #136]	; (8006704 <HAL_HCD_MspInit+0xbc>)
 800667c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	613b      	str	r3, [r7, #16]
 8006684:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006686:	f44f 7300 	mov.w	r3, #512	; 0x200
 800668a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800668c:	2300      	movs	r3, #0
 800668e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006690:	2300      	movs	r3, #0
 8006692:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006694:	f107 0314 	add.w	r3, r7, #20
 8006698:	4619      	mov	r1, r3
 800669a:	481b      	ldr	r0, [pc, #108]	; (8006708 <HAL_HCD_MspInit+0xc0>)
 800669c:	f7fa fd62 	bl	8001164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80066a0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80066a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066a6:	2302      	movs	r3, #2
 80066a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066aa:	2300      	movs	r3, #0
 80066ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066ae:	2300      	movs	r3, #0
 80066b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80066b2:	230a      	movs	r3, #10
 80066b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066b6:	f107 0314 	add.w	r3, r7, #20
 80066ba:	4619      	mov	r1, r3
 80066bc:	4812      	ldr	r0, [pc, #72]	; (8006708 <HAL_HCD_MspInit+0xc0>)
 80066be:	f7fa fd51 	bl	8001164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80066c2:	4b10      	ldr	r3, [pc, #64]	; (8006704 <HAL_HCD_MspInit+0xbc>)
 80066c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c6:	4a0f      	ldr	r2, [pc, #60]	; (8006704 <HAL_HCD_MspInit+0xbc>)
 80066c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066cc:	6353      	str	r3, [r2, #52]	; 0x34
 80066ce:	2300      	movs	r3, #0
 80066d0:	60fb      	str	r3, [r7, #12]
 80066d2:	4b0c      	ldr	r3, [pc, #48]	; (8006704 <HAL_HCD_MspInit+0xbc>)
 80066d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d6:	4a0b      	ldr	r2, [pc, #44]	; (8006704 <HAL_HCD_MspInit+0xbc>)
 80066d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066dc:	6453      	str	r3, [r2, #68]	; 0x44
 80066de:	4b09      	ldr	r3, [pc, #36]	; (8006704 <HAL_HCD_MspInit+0xbc>)
 80066e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80066ea:	2200      	movs	r2, #0
 80066ec:	2100      	movs	r1, #0
 80066ee:	2043      	movs	r0, #67	; 0x43
 80066f0:	f7fa fd01 	bl	80010f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80066f4:	2043      	movs	r0, #67	; 0x43
 80066f6:	f7fa fd1a 	bl	800112e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80066fa:	bf00      	nop
 80066fc:	3728      	adds	r7, #40	; 0x28
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	40023800 	.word	0x40023800
 8006708:	40020000 	.word	0x40020000

0800670c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800671a:	4618      	mov	r0, r3
 800671c:	f7ff fbb7 	bl	8005e8e <USBH_LL_IncTimer>
}
 8006720:	bf00      	nop
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006736:	4618      	mov	r0, r3
 8006738:	f7ff fbef 	bl	8005f1a <USBH_LL_Connect>
}
 800673c:	bf00      	nop
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006752:	4618      	mov	r0, r3
 8006754:	f7ff fbf8 	bl	8005f48 <USBH_LL_Disconnect>
}
 8006758:	bf00      	nop
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	460b      	mov	r3, r1
 800676a:	70fb      	strb	r3, [r7, #3]
 800676c:	4613      	mov	r3, r2
 800676e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff fba9 	bl	8005ee2 <USBH_LL_PortEnabled>
}
 8006790:	bf00      	nop
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff fba9 	bl	8005efe <USBH_LL_PortDisabled>
}
 80067ac:	bf00      	nop
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d12a      	bne.n	800681c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80067c6:	4a18      	ldr	r2, [pc, #96]	; (8006828 <USBH_LL_Init+0x74>)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a15      	ldr	r2, [pc, #84]	; (8006828 <USBH_LL_Init+0x74>)
 80067d2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80067d6:	4b14      	ldr	r3, [pc, #80]	; (8006828 <USBH_LL_Init+0x74>)
 80067d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80067dc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80067de:	4b12      	ldr	r3, [pc, #72]	; (8006828 <USBH_LL_Init+0x74>)
 80067e0:	2208      	movs	r2, #8
 80067e2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80067e4:	4b10      	ldr	r3, [pc, #64]	; (8006828 <USBH_LL_Init+0x74>)
 80067e6:	2201      	movs	r2, #1
 80067e8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80067ea:	4b0f      	ldr	r3, [pc, #60]	; (8006828 <USBH_LL_Init+0x74>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80067f0:	4b0d      	ldr	r3, [pc, #52]	; (8006828 <USBH_LL_Init+0x74>)
 80067f2:	2202      	movs	r2, #2
 80067f4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80067f6:	4b0c      	ldr	r3, [pc, #48]	; (8006828 <USBH_LL_Init+0x74>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80067fc:	480a      	ldr	r0, [pc, #40]	; (8006828 <USBH_LL_Init+0x74>)
 80067fe:	f7fa fe97 	bl	8001530 <HAL_HCD_Init>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006808:	f7fa f918 	bl	8000a3c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800680c:	4806      	ldr	r0, [pc, #24]	; (8006828 <USBH_LL_Init+0x74>)
 800680e:	f7fb fa6c 	bl	8001cea <HAL_HCD_GetCurrentFrame>
 8006812:	4603      	mov	r3, r0
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff fb2a 	bl	8005e70 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20000584 	.word	0x20000584

0800682c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006842:	4618      	mov	r0, r3
 8006844:	f7fb f9e9 	bl	8001c1a <HAL_HCD_Start>
 8006848:	4603      	mov	r3, r0
 800684a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800684c:	7bfb      	ldrb	r3, [r7, #15]
 800684e:	4618      	mov	r0, r3
 8006850:	f000 f90e 	bl	8006a70 <USBH_Get_USB_Status>
 8006854:	4603      	mov	r3, r0
 8006856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006858:	7bbb      	ldrb	r3, [r7, #14]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b084      	sub	sp, #16
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800686a:	2300      	movs	r3, #0
 800686c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006878:	4618      	mov	r0, r3
 800687a:	f7fb f9f1 	bl	8001c60 <HAL_HCD_Stop>
 800687e:	4603      	mov	r3, r0
 8006880:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006882:	7bfb      	ldrb	r3, [r7, #15]
 8006884:	4618      	mov	r0, r3
 8006886:	f000 f8f3 	bl	8006a70 <USBH_Get_USB_Status>
 800688a:	4603      	mov	r3, r0
 800688c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800688e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	460b      	mov	r3, r1
 80068a2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80068aa:	78fa      	ldrb	r2, [r7, #3]
 80068ac:	4611      	mov	r1, r2
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fb fa07 	bl	8001cc2 <HAL_HCD_HC_GetXferCount>
 80068b4:	4603      	mov	r3, r0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80068be:	b590      	push	{r4, r7, lr}
 80068c0:	b089      	sub	sp, #36	; 0x24
 80068c2:	af04      	add	r7, sp, #16
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	4608      	mov	r0, r1
 80068c8:	4611      	mov	r1, r2
 80068ca:	461a      	mov	r2, r3
 80068cc:	4603      	mov	r3, r0
 80068ce:	70fb      	strb	r3, [r7, #3]
 80068d0:	460b      	mov	r3, r1
 80068d2:	70bb      	strb	r3, [r7, #2]
 80068d4:	4613      	mov	r3, r2
 80068d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80068dc:	2300      	movs	r3, #0
 80068de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80068e6:	787c      	ldrb	r4, [r7, #1]
 80068e8:	78ba      	ldrb	r2, [r7, #2]
 80068ea:	78f9      	ldrb	r1, [r7, #3]
 80068ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80068ee:	9302      	str	r3, [sp, #8]
 80068f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80068f4:	9301      	str	r3, [sp, #4]
 80068f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	4623      	mov	r3, r4
 80068fe:	f7fa fe79 	bl	80015f4 <HAL_HCD_HC_Init>
 8006902:	4603      	mov	r3, r0
 8006904:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006906:	7bfb      	ldrb	r3, [r7, #15]
 8006908:	4618      	mov	r0, r3
 800690a:	f000 f8b1 	bl	8006a70 <USBH_Get_USB_Status>
 800690e:	4603      	mov	r3, r0
 8006910:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006912:	7bbb      	ldrb	r3, [r7, #14]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	bd90      	pop	{r4, r7, pc}

0800691c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006936:	78fa      	ldrb	r2, [r7, #3]
 8006938:	4611      	mov	r1, r2
 800693a:	4618      	mov	r0, r3
 800693c:	f7fa fee9 	bl	8001712 <HAL_HCD_HC_Halt>
 8006940:	4603      	mov	r3, r0
 8006942:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	4618      	mov	r0, r3
 8006948:	f000 f892 	bl	8006a70 <USBH_Get_USB_Status>
 800694c:	4603      	mov	r3, r0
 800694e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006950:	7bbb      	ldrb	r3, [r7, #14]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800695a:	b590      	push	{r4, r7, lr}
 800695c:	b089      	sub	sp, #36	; 0x24
 800695e:	af04      	add	r7, sp, #16
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	4608      	mov	r0, r1
 8006964:	4611      	mov	r1, r2
 8006966:	461a      	mov	r2, r3
 8006968:	4603      	mov	r3, r0
 800696a:	70fb      	strb	r3, [r7, #3]
 800696c:	460b      	mov	r3, r1
 800696e:	70bb      	strb	r3, [r7, #2]
 8006970:	4613      	mov	r3, r2
 8006972:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006982:	787c      	ldrb	r4, [r7, #1]
 8006984:	78ba      	ldrb	r2, [r7, #2]
 8006986:	78f9      	ldrb	r1, [r7, #3]
 8006988:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800698c:	9303      	str	r3, [sp, #12]
 800698e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006990:	9302      	str	r3, [sp, #8]
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	f897 3020 	ldrb.w	r3, [r7, #32]
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	4623      	mov	r3, r4
 800699e:	f7fa fedb 	bl	8001758 <HAL_HCD_HC_SubmitRequest>
 80069a2:	4603      	mov	r3, r0
 80069a4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 f861 	bl	8006a70 <USBH_Get_USB_Status>
 80069ae:	4603      	mov	r3, r0
 80069b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd90      	pop	{r4, r7, pc}

080069bc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80069ce:	78fa      	ldrb	r2, [r7, #3]
 80069d0:	4611      	mov	r1, r2
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fb f961 	bl	8001c9a <HAL_HCD_HC_GetURBState>
 80069d8:	4603      	mov	r3, r0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b082      	sub	sp, #8
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	460b      	mov	r3, r1
 80069ec:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d103      	bne.n	8006a00 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80069f8:	78fb      	ldrb	r3, [r7, #3]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 f864 	bl	8006ac8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006a00:	20c8      	movs	r0, #200	; 0xc8
 8006a02:	f7fa fa79 	bl	8000ef8 <HAL_Delay>
  return USBH_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	70fb      	strb	r3, [r7, #3]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a26:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006a28:	78fb      	ldrb	r3, [r7, #3]
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	212c      	movs	r1, #44	; 0x2c
 8006a2e:	fb01 f303 	mul.w	r3, r1, r3
 8006a32:	4413      	add	r3, r2
 8006a34:	333b      	adds	r3, #59	; 0x3b
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d009      	beq.n	8006a50 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006a3c:	78fb      	ldrb	r3, [r7, #3]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	212c      	movs	r1, #44	; 0x2c
 8006a42:	fb01 f303 	mul.w	r3, r1, r3
 8006a46:	4413      	add	r3, r2
 8006a48:	3354      	adds	r3, #84	; 0x54
 8006a4a:	78ba      	ldrb	r2, [r7, #2]
 8006a4c:	701a      	strb	r2, [r3, #0]
 8006a4e:	e008      	b.n	8006a62 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006a50:	78fb      	ldrb	r3, [r7, #3]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	212c      	movs	r1, #44	; 0x2c
 8006a56:	fb01 f303 	mul.w	r3, r1, r3
 8006a5a:	4413      	add	r3, r2
 8006a5c:	3355      	adds	r3, #85	; 0x55
 8006a5e:	78ba      	ldrb	r2, [r7, #2]
 8006a60:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	4603      	mov	r3, r0
 8006a78:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006a7e:	79fb      	ldrb	r3, [r7, #7]
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d817      	bhi.n	8006ab4 <USBH_Get_USB_Status+0x44>
 8006a84:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <USBH_Get_USB_Status+0x1c>)
 8006a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8a:	bf00      	nop
 8006a8c:	08006a9d 	.word	0x08006a9d
 8006a90:	08006aa3 	.word	0x08006aa3
 8006a94:	08006aa9 	.word	0x08006aa9
 8006a98:	08006aaf 	.word	0x08006aaf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	73fb      	strb	r3, [r7, #15]
    break;
 8006aa0:	e00b      	b.n	8006aba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	73fb      	strb	r3, [r7, #15]
    break;
 8006aa6:	e008      	b.n	8006aba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	73fb      	strb	r3, [r7, #15]
    break;
 8006aac:	e005      	b.n	8006aba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006aae:	2302      	movs	r3, #2
 8006ab0:	73fb      	strb	r3, [r7, #15]
    break;
 8006ab2:	e002      	b.n	8006aba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ab8:	bf00      	nop
  }
  return usb_status;
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	4603      	mov	r3, r0
 8006ad0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8006ad2:	79fb      	ldrb	r3, [r7, #7]
 8006ad4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006ad6:	79fb      	ldrb	r3, [r7, #7]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d102      	bne.n	8006ae2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8006adc:	2300      	movs	r3, #0
 8006ade:	73fb      	strb	r3, [r7, #15]
 8006ae0:	e001      	b.n	8006ae6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	2101      	movs	r1, #1
 8006aec:	4803      	ldr	r0, [pc, #12]	; (8006afc <MX_DriverVbusFS+0x34>)
 8006aee:	f7fa fced 	bl	80014cc <HAL_GPIO_WritePin>
}
 8006af2:	bf00      	nop
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	40020800 	.word	0x40020800

08006b00 <__errno>:
 8006b00:	4b01      	ldr	r3, [pc, #4]	; (8006b08 <__errno+0x8>)
 8006b02:	6818      	ldr	r0, [r3, #0]
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	2000002c 	.word	0x2000002c

08006b0c <__libc_init_array>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	4d0d      	ldr	r5, [pc, #52]	; (8006b44 <__libc_init_array+0x38>)
 8006b10:	4c0d      	ldr	r4, [pc, #52]	; (8006b48 <__libc_init_array+0x3c>)
 8006b12:	1b64      	subs	r4, r4, r5
 8006b14:	10a4      	asrs	r4, r4, #2
 8006b16:	2600      	movs	r6, #0
 8006b18:	42a6      	cmp	r6, r4
 8006b1a:	d109      	bne.n	8006b30 <__libc_init_array+0x24>
 8006b1c:	4d0b      	ldr	r5, [pc, #44]	; (8006b4c <__libc_init_array+0x40>)
 8006b1e:	4c0c      	ldr	r4, [pc, #48]	; (8006b50 <__libc_init_array+0x44>)
 8006b20:	f000 f92e 	bl	8006d80 <_init>
 8006b24:	1b64      	subs	r4, r4, r5
 8006b26:	10a4      	asrs	r4, r4, #2
 8006b28:	2600      	movs	r6, #0
 8006b2a:	42a6      	cmp	r6, r4
 8006b2c:	d105      	bne.n	8006b3a <__libc_init_array+0x2e>
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}
 8006b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b34:	4798      	blx	r3
 8006b36:	3601      	adds	r6, #1
 8006b38:	e7ee      	b.n	8006b18 <__libc_init_array+0xc>
 8006b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b3e:	4798      	blx	r3
 8006b40:	3601      	adds	r6, #1
 8006b42:	e7f2      	b.n	8006b2a <__libc_init_array+0x1e>
 8006b44:	08006dbc 	.word	0x08006dbc
 8006b48:	08006dbc 	.word	0x08006dbc
 8006b4c:	08006dbc 	.word	0x08006dbc
 8006b50:	08006dc0 	.word	0x08006dc0

08006b54 <malloc>:
 8006b54:	4b02      	ldr	r3, [pc, #8]	; (8006b60 <malloc+0xc>)
 8006b56:	4601      	mov	r1, r0
 8006b58:	6818      	ldr	r0, [r3, #0]
 8006b5a:	f000 b87f 	b.w	8006c5c <_malloc_r>
 8006b5e:	bf00      	nop
 8006b60:	2000002c 	.word	0x2000002c

08006b64 <free>:
 8006b64:	4b02      	ldr	r3, [pc, #8]	; (8006b70 <free+0xc>)
 8006b66:	4601      	mov	r1, r0
 8006b68:	6818      	ldr	r0, [r3, #0]
 8006b6a:	f000 b80b 	b.w	8006b84 <_free_r>
 8006b6e:	bf00      	nop
 8006b70:	2000002c 	.word	0x2000002c

08006b74 <memset>:
 8006b74:	4402      	add	r2, r0
 8006b76:	4603      	mov	r3, r0
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d100      	bne.n	8006b7e <memset+0xa>
 8006b7c:	4770      	bx	lr
 8006b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b82:	e7f9      	b.n	8006b78 <memset+0x4>

08006b84 <_free_r>:
 8006b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b86:	2900      	cmp	r1, #0
 8006b88:	d044      	beq.n	8006c14 <_free_r+0x90>
 8006b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b8e:	9001      	str	r0, [sp, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f1a1 0404 	sub.w	r4, r1, #4
 8006b96:	bfb8      	it	lt
 8006b98:	18e4      	addlt	r4, r4, r3
 8006b9a:	f000 f8e3 	bl	8006d64 <__malloc_lock>
 8006b9e:	4a1e      	ldr	r2, [pc, #120]	; (8006c18 <_free_r+0x94>)
 8006ba0:	9801      	ldr	r0, [sp, #4]
 8006ba2:	6813      	ldr	r3, [r2, #0]
 8006ba4:	b933      	cbnz	r3, 8006bb4 <_free_r+0x30>
 8006ba6:	6063      	str	r3, [r4, #4]
 8006ba8:	6014      	str	r4, [r2, #0]
 8006baa:	b003      	add	sp, #12
 8006bac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bb0:	f000 b8de 	b.w	8006d70 <__malloc_unlock>
 8006bb4:	42a3      	cmp	r3, r4
 8006bb6:	d908      	bls.n	8006bca <_free_r+0x46>
 8006bb8:	6825      	ldr	r5, [r4, #0]
 8006bba:	1961      	adds	r1, r4, r5
 8006bbc:	428b      	cmp	r3, r1
 8006bbe:	bf01      	itttt	eq
 8006bc0:	6819      	ldreq	r1, [r3, #0]
 8006bc2:	685b      	ldreq	r3, [r3, #4]
 8006bc4:	1949      	addeq	r1, r1, r5
 8006bc6:	6021      	streq	r1, [r4, #0]
 8006bc8:	e7ed      	b.n	8006ba6 <_free_r+0x22>
 8006bca:	461a      	mov	r2, r3
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	b10b      	cbz	r3, 8006bd4 <_free_r+0x50>
 8006bd0:	42a3      	cmp	r3, r4
 8006bd2:	d9fa      	bls.n	8006bca <_free_r+0x46>
 8006bd4:	6811      	ldr	r1, [r2, #0]
 8006bd6:	1855      	adds	r5, r2, r1
 8006bd8:	42a5      	cmp	r5, r4
 8006bda:	d10b      	bne.n	8006bf4 <_free_r+0x70>
 8006bdc:	6824      	ldr	r4, [r4, #0]
 8006bde:	4421      	add	r1, r4
 8006be0:	1854      	adds	r4, r2, r1
 8006be2:	42a3      	cmp	r3, r4
 8006be4:	6011      	str	r1, [r2, #0]
 8006be6:	d1e0      	bne.n	8006baa <_free_r+0x26>
 8006be8:	681c      	ldr	r4, [r3, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	6053      	str	r3, [r2, #4]
 8006bee:	4421      	add	r1, r4
 8006bf0:	6011      	str	r1, [r2, #0]
 8006bf2:	e7da      	b.n	8006baa <_free_r+0x26>
 8006bf4:	d902      	bls.n	8006bfc <_free_r+0x78>
 8006bf6:	230c      	movs	r3, #12
 8006bf8:	6003      	str	r3, [r0, #0]
 8006bfa:	e7d6      	b.n	8006baa <_free_r+0x26>
 8006bfc:	6825      	ldr	r5, [r4, #0]
 8006bfe:	1961      	adds	r1, r4, r5
 8006c00:	428b      	cmp	r3, r1
 8006c02:	bf04      	itt	eq
 8006c04:	6819      	ldreq	r1, [r3, #0]
 8006c06:	685b      	ldreq	r3, [r3, #4]
 8006c08:	6063      	str	r3, [r4, #4]
 8006c0a:	bf04      	itt	eq
 8006c0c:	1949      	addeq	r1, r1, r5
 8006c0e:	6021      	streq	r1, [r4, #0]
 8006c10:	6054      	str	r4, [r2, #4]
 8006c12:	e7ca      	b.n	8006baa <_free_r+0x26>
 8006c14:	b003      	add	sp, #12
 8006c16:	bd30      	pop	{r4, r5, pc}
 8006c18:	20000888 	.word	0x20000888

08006c1c <sbrk_aligned>:
 8006c1c:	b570      	push	{r4, r5, r6, lr}
 8006c1e:	4e0e      	ldr	r6, [pc, #56]	; (8006c58 <sbrk_aligned+0x3c>)
 8006c20:	460c      	mov	r4, r1
 8006c22:	6831      	ldr	r1, [r6, #0]
 8006c24:	4605      	mov	r5, r0
 8006c26:	b911      	cbnz	r1, 8006c2e <sbrk_aligned+0x12>
 8006c28:	f000 f88c 	bl	8006d44 <_sbrk_r>
 8006c2c:	6030      	str	r0, [r6, #0]
 8006c2e:	4621      	mov	r1, r4
 8006c30:	4628      	mov	r0, r5
 8006c32:	f000 f887 	bl	8006d44 <_sbrk_r>
 8006c36:	1c43      	adds	r3, r0, #1
 8006c38:	d00a      	beq.n	8006c50 <sbrk_aligned+0x34>
 8006c3a:	1cc4      	adds	r4, r0, #3
 8006c3c:	f024 0403 	bic.w	r4, r4, #3
 8006c40:	42a0      	cmp	r0, r4
 8006c42:	d007      	beq.n	8006c54 <sbrk_aligned+0x38>
 8006c44:	1a21      	subs	r1, r4, r0
 8006c46:	4628      	mov	r0, r5
 8006c48:	f000 f87c 	bl	8006d44 <_sbrk_r>
 8006c4c:	3001      	adds	r0, #1
 8006c4e:	d101      	bne.n	8006c54 <sbrk_aligned+0x38>
 8006c50:	f04f 34ff 	mov.w	r4, #4294967295
 8006c54:	4620      	mov	r0, r4
 8006c56:	bd70      	pop	{r4, r5, r6, pc}
 8006c58:	2000088c 	.word	0x2000088c

08006c5c <_malloc_r>:
 8006c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c60:	1ccd      	adds	r5, r1, #3
 8006c62:	f025 0503 	bic.w	r5, r5, #3
 8006c66:	3508      	adds	r5, #8
 8006c68:	2d0c      	cmp	r5, #12
 8006c6a:	bf38      	it	cc
 8006c6c:	250c      	movcc	r5, #12
 8006c6e:	2d00      	cmp	r5, #0
 8006c70:	4607      	mov	r7, r0
 8006c72:	db01      	blt.n	8006c78 <_malloc_r+0x1c>
 8006c74:	42a9      	cmp	r1, r5
 8006c76:	d905      	bls.n	8006c84 <_malloc_r+0x28>
 8006c78:	230c      	movs	r3, #12
 8006c7a:	603b      	str	r3, [r7, #0]
 8006c7c:	2600      	movs	r6, #0
 8006c7e:	4630      	mov	r0, r6
 8006c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c84:	4e2e      	ldr	r6, [pc, #184]	; (8006d40 <_malloc_r+0xe4>)
 8006c86:	f000 f86d 	bl	8006d64 <__malloc_lock>
 8006c8a:	6833      	ldr	r3, [r6, #0]
 8006c8c:	461c      	mov	r4, r3
 8006c8e:	bb34      	cbnz	r4, 8006cde <_malloc_r+0x82>
 8006c90:	4629      	mov	r1, r5
 8006c92:	4638      	mov	r0, r7
 8006c94:	f7ff ffc2 	bl	8006c1c <sbrk_aligned>
 8006c98:	1c43      	adds	r3, r0, #1
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	d14d      	bne.n	8006d3a <_malloc_r+0xde>
 8006c9e:	6834      	ldr	r4, [r6, #0]
 8006ca0:	4626      	mov	r6, r4
 8006ca2:	2e00      	cmp	r6, #0
 8006ca4:	d140      	bne.n	8006d28 <_malloc_r+0xcc>
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	4631      	mov	r1, r6
 8006caa:	4638      	mov	r0, r7
 8006cac:	eb04 0803 	add.w	r8, r4, r3
 8006cb0:	f000 f848 	bl	8006d44 <_sbrk_r>
 8006cb4:	4580      	cmp	r8, r0
 8006cb6:	d13a      	bne.n	8006d2e <_malloc_r+0xd2>
 8006cb8:	6821      	ldr	r1, [r4, #0]
 8006cba:	3503      	adds	r5, #3
 8006cbc:	1a6d      	subs	r5, r5, r1
 8006cbe:	f025 0503 	bic.w	r5, r5, #3
 8006cc2:	3508      	adds	r5, #8
 8006cc4:	2d0c      	cmp	r5, #12
 8006cc6:	bf38      	it	cc
 8006cc8:	250c      	movcc	r5, #12
 8006cca:	4629      	mov	r1, r5
 8006ccc:	4638      	mov	r0, r7
 8006cce:	f7ff ffa5 	bl	8006c1c <sbrk_aligned>
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	d02b      	beq.n	8006d2e <_malloc_r+0xd2>
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	442b      	add	r3, r5
 8006cda:	6023      	str	r3, [r4, #0]
 8006cdc:	e00e      	b.n	8006cfc <_malloc_r+0xa0>
 8006cde:	6822      	ldr	r2, [r4, #0]
 8006ce0:	1b52      	subs	r2, r2, r5
 8006ce2:	d41e      	bmi.n	8006d22 <_malloc_r+0xc6>
 8006ce4:	2a0b      	cmp	r2, #11
 8006ce6:	d916      	bls.n	8006d16 <_malloc_r+0xba>
 8006ce8:	1961      	adds	r1, r4, r5
 8006cea:	42a3      	cmp	r3, r4
 8006cec:	6025      	str	r5, [r4, #0]
 8006cee:	bf18      	it	ne
 8006cf0:	6059      	strne	r1, [r3, #4]
 8006cf2:	6863      	ldr	r3, [r4, #4]
 8006cf4:	bf08      	it	eq
 8006cf6:	6031      	streq	r1, [r6, #0]
 8006cf8:	5162      	str	r2, [r4, r5]
 8006cfa:	604b      	str	r3, [r1, #4]
 8006cfc:	4638      	mov	r0, r7
 8006cfe:	f104 060b 	add.w	r6, r4, #11
 8006d02:	f000 f835 	bl	8006d70 <__malloc_unlock>
 8006d06:	f026 0607 	bic.w	r6, r6, #7
 8006d0a:	1d23      	adds	r3, r4, #4
 8006d0c:	1af2      	subs	r2, r6, r3
 8006d0e:	d0b6      	beq.n	8006c7e <_malloc_r+0x22>
 8006d10:	1b9b      	subs	r3, r3, r6
 8006d12:	50a3      	str	r3, [r4, r2]
 8006d14:	e7b3      	b.n	8006c7e <_malloc_r+0x22>
 8006d16:	6862      	ldr	r2, [r4, #4]
 8006d18:	42a3      	cmp	r3, r4
 8006d1a:	bf0c      	ite	eq
 8006d1c:	6032      	streq	r2, [r6, #0]
 8006d1e:	605a      	strne	r2, [r3, #4]
 8006d20:	e7ec      	b.n	8006cfc <_malloc_r+0xa0>
 8006d22:	4623      	mov	r3, r4
 8006d24:	6864      	ldr	r4, [r4, #4]
 8006d26:	e7b2      	b.n	8006c8e <_malloc_r+0x32>
 8006d28:	4634      	mov	r4, r6
 8006d2a:	6876      	ldr	r6, [r6, #4]
 8006d2c:	e7b9      	b.n	8006ca2 <_malloc_r+0x46>
 8006d2e:	230c      	movs	r3, #12
 8006d30:	603b      	str	r3, [r7, #0]
 8006d32:	4638      	mov	r0, r7
 8006d34:	f000 f81c 	bl	8006d70 <__malloc_unlock>
 8006d38:	e7a1      	b.n	8006c7e <_malloc_r+0x22>
 8006d3a:	6025      	str	r5, [r4, #0]
 8006d3c:	e7de      	b.n	8006cfc <_malloc_r+0xa0>
 8006d3e:	bf00      	nop
 8006d40:	20000888 	.word	0x20000888

08006d44 <_sbrk_r>:
 8006d44:	b538      	push	{r3, r4, r5, lr}
 8006d46:	4d06      	ldr	r5, [pc, #24]	; (8006d60 <_sbrk_r+0x1c>)
 8006d48:	2300      	movs	r3, #0
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	4608      	mov	r0, r1
 8006d4e:	602b      	str	r3, [r5, #0]
 8006d50:	f7f9 ffee 	bl	8000d30 <_sbrk>
 8006d54:	1c43      	adds	r3, r0, #1
 8006d56:	d102      	bne.n	8006d5e <_sbrk_r+0x1a>
 8006d58:	682b      	ldr	r3, [r5, #0]
 8006d5a:	b103      	cbz	r3, 8006d5e <_sbrk_r+0x1a>
 8006d5c:	6023      	str	r3, [r4, #0]
 8006d5e:	bd38      	pop	{r3, r4, r5, pc}
 8006d60:	20000890 	.word	0x20000890

08006d64 <__malloc_lock>:
 8006d64:	4801      	ldr	r0, [pc, #4]	; (8006d6c <__malloc_lock+0x8>)
 8006d66:	f000 b809 	b.w	8006d7c <__retarget_lock_acquire_recursive>
 8006d6a:	bf00      	nop
 8006d6c:	20000894 	.word	0x20000894

08006d70 <__malloc_unlock>:
 8006d70:	4801      	ldr	r0, [pc, #4]	; (8006d78 <__malloc_unlock+0x8>)
 8006d72:	f000 b804 	b.w	8006d7e <__retarget_lock_release_recursive>
 8006d76:	bf00      	nop
 8006d78:	20000894 	.word	0x20000894

08006d7c <__retarget_lock_acquire_recursive>:
 8006d7c:	4770      	bx	lr

08006d7e <__retarget_lock_release_recursive>:
 8006d7e:	4770      	bx	lr

08006d80 <_init>:
 8006d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d82:	bf00      	nop
 8006d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d86:	bc08      	pop	{r3}
 8006d88:	469e      	mov	lr, r3
 8006d8a:	4770      	bx	lr

08006d8c <_fini>:
 8006d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8e:	bf00      	nop
 8006d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d92:	bc08      	pop	{r3}
 8006d94:	469e      	mov	lr, r3
 8006d96:	4770      	bx	lr
