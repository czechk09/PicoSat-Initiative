
Lab6Q1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000448  08000450  00010450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000448  08000448  00010450  2**0
                  CONTENTS
  4 .ARM          00000000  08000448  08000448  00010450  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000448  08000450  00010450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000448  08000448  00010448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800044c  0800044c  0001044c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010450  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010450  2**0
                  CONTENTS, READONLY
 13 .debug_info   000005fe  00000000  00000000  00010480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000d1  00000000  00000000  00010a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00010b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000030  00000000  00000000  00010b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f4d  00000000  00000000  00010bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000004c9  00000000  00000000  00011b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003d01  00000000  00000000  00011fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00015cdf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  00015d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000430 	.word	0x08000430

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000430 	.word	0x08000430

080001e8 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


int main(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b08d      	sub	sp, #52	; 0x34
 80001ec:	af00      	add	r7, sp, #0
	RCC_AHB1ENR_t* ptr_rcc = (RCC_AHB1ENR_t*)(0x40023800 + 0x30);
 80001ee:	4b63      	ldr	r3, [pc, #396]	; (800037c <main+0x194>)
 80001f0:	617b      	str	r3, [r7, #20]

	ptr_rcc->GPIOA_EN = 1;
 80001f2:	697a      	ldr	r2, [r7, #20]
 80001f4:	7813      	ldrb	r3, [r2, #0]
 80001f6:	f043 0301 	orr.w	r3, r3, #1
 80001fa:	7013      	strb	r3, [r2, #0]
	ptr_rcc->GPIOD_EN = 1;
 80001fc:	697a      	ldr	r2, [r7, #20]
 80001fe:	7813      	ldrb	r3, [r2, #0]
 8000200:	f043 0308 	orr.w	r3, r3, #8
 8000204:	7013      	strb	r3, [r2, #0]

	GPIOx_MODER_t* ptr_mode_a = (GPIOx_MODER_t*)(0x40020000 + 0x00);
 8000206:	4b5e      	ldr	r3, [pc, #376]	; (8000380 <main+0x198>)
 8000208:	613b      	str	r3, [r7, #16]
	GPIOx_MODER_t* ptr_mode_d = (GPIOx_MODER_t*)(0x40020C00 + 0x00);
 800020a:	4b5e      	ldr	r3, [pc, #376]	; (8000384 <main+0x19c>)
 800020c:	60fb      	str	r3, [r7, #12]

	ptr_mode_a->MODER0 = 00;
 800020e:	693a      	ldr	r2, [r7, #16]
 8000210:	7813      	ldrb	r3, [r2, #0]
 8000212:	f36f 0301 	bfc	r3, #0, #2
 8000216:	7013      	strb	r3, [r2, #0]
	ptr_mode_d->MODER12 = 01;
 8000218:	68fa      	ldr	r2, [r7, #12]
 800021a:	78d3      	ldrb	r3, [r2, #3]
 800021c:	2101      	movs	r1, #1
 800021e:	f361 0301 	bfi	r3, r1, #0, #2
 8000222:	70d3      	strb	r3, [r2, #3]
	ptr_mode_d->MODER13 = 01;
 8000224:	68fa      	ldr	r2, [r7, #12]
 8000226:	78d3      	ldrb	r3, [r2, #3]
 8000228:	2101      	movs	r1, #1
 800022a:	f361 0383 	bfi	r3, r1, #2, #2
 800022e:	70d3      	strb	r3, [r2, #3]
	ptr_mode_d->MODER14 = 01;
 8000230:	68fa      	ldr	r2, [r7, #12]
 8000232:	78d3      	ldrb	r3, [r2, #3]
 8000234:	2101      	movs	r1, #1
 8000236:	f361 1305 	bfi	r3, r1, #4, #2
 800023a:	70d3      	strb	r3, [r2, #3]
	ptr_mode_d->MODER15 = 01;
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	78d3      	ldrb	r3, [r2, #3]
 8000240:	2101      	movs	r1, #1
 8000242:	f361 1387 	bfi	r3, r1, #6, #2
 8000246:	70d3      	strb	r3, [r2, #3]

	GPIOx_ODR_t* ptr_odr_d = (GPIOx_ODR_t*)(0x40020C00 + 0x14);
 8000248:	4b4f      	ldr	r3, [pc, #316]	; (8000388 <main+0x1a0>)
 800024a:	60bb      	str	r3, [r7, #8]
	GPIOx_IDR_t* ptr_idr_a = (GPIOx_IDR_t*)(0x40020000 + 0x10);
 800024c:	4b4f      	ldr	r3, [pc, #316]	; (800038c <main+0x1a4>)
 800024e:	607b      	str	r3, [r7, #4]


	while(1) {
		if(ptr_idr_a->IDR0 == 1) {
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	f003 0301 	and.w	r3, r3, #1
 8000258:	b2db      	uxtb	r3, r3
 800025a:	2b00      	cmp	r3, #0
 800025c:	d03c      	beq.n	80002d8 <main+0xf0>
			ptr_odr_d->ODR12 = 1;
 800025e:	68ba      	ldr	r2, [r7, #8]
 8000260:	7853      	ldrb	r3, [r2, #1]
 8000262:	f043 0310 	orr.w	r3, r3, #16
 8000266:	7053      	strb	r3, [r2, #1]
			ptr_odr_d->ODR13 = 1;
 8000268:	68ba      	ldr	r2, [r7, #8]
 800026a:	7853      	ldrb	r3, [r2, #1]
 800026c:	f043 0320 	orr.w	r3, r3, #32
 8000270:	7053      	strb	r3, [r2, #1]
			ptr_odr_d->ODR14 = 1;
 8000272:	68ba      	ldr	r2, [r7, #8]
 8000274:	7853      	ldrb	r3, [r2, #1]
 8000276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800027a:	7053      	strb	r3, [r2, #1]
			ptr_odr_d->ODR15 = 1;
 800027c:	68ba      	ldr	r2, [r7, #8]
 800027e:	7853      	ldrb	r3, [r2, #1]
 8000280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000284:	7053      	strb	r3, [r2, #1]

			for (int i = 0; i < DELAY; i++);
 8000286:	2300      	movs	r3, #0
 8000288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800028a:	e002      	b.n	8000292 <main+0xaa>
 800028c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800028e:	3301      	adds	r3, #1
 8000290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000294:	4a3e      	ldr	r2, [pc, #248]	; (8000390 <main+0x1a8>)
 8000296:	4293      	cmp	r3, r2
 8000298:	ddf8      	ble.n	800028c <main+0xa4>

			ptr_odr_d->ODR12 = 0;
 800029a:	68ba      	ldr	r2, [r7, #8]
 800029c:	7853      	ldrb	r3, [r2, #1]
 800029e:	f36f 1304 	bfc	r3, #4, #1
 80002a2:	7053      	strb	r3, [r2, #1]
			ptr_odr_d->ODR13 = 0;
 80002a4:	68ba      	ldr	r2, [r7, #8]
 80002a6:	7853      	ldrb	r3, [r2, #1]
 80002a8:	f36f 1345 	bfc	r3, #5, #1
 80002ac:	7053      	strb	r3, [r2, #1]
			ptr_odr_d->ODR14 = 0;
 80002ae:	68ba      	ldr	r2, [r7, #8]
 80002b0:	7853      	ldrb	r3, [r2, #1]
 80002b2:	f36f 1386 	bfc	r3, #6, #1
 80002b6:	7053      	strb	r3, [r2, #1]
			ptr_odr_d->ODR15 = 0;
 80002b8:	68ba      	ldr	r2, [r7, #8]
 80002ba:	7853      	ldrb	r3, [r2, #1]
 80002bc:	f36f 13c7 	bfc	r3, #7, #1
 80002c0:	7053      	strb	r3, [r2, #1]

			for (int i = 0; i < 500000; i++);
 80002c2:	2300      	movs	r3, #0
 80002c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80002c6:	e002      	b.n	80002ce <main+0xe6>
 80002c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002ca:	3301      	adds	r3, #1
 80002cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80002ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002d0:	4a2f      	ldr	r2, [pc, #188]	; (8000390 <main+0x1a8>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	ddf8      	ble.n	80002c8 <main+0xe0>
 80002d6:	e7bb      	b.n	8000250 <main+0x68>
		}
		else {
			ptr_odr_d->ODR12 = 1;
 80002d8:	68ba      	ldr	r2, [r7, #8]
 80002da:	7853      	ldrb	r3, [r2, #1]
 80002dc:	f043 0310 	orr.w	r3, r3, #16
 80002e0:	7053      	strb	r3, [r2, #1]

			for (int i = 0; i < 500000; i++);
 80002e2:	2300      	movs	r3, #0
 80002e4:	627b      	str	r3, [r7, #36]	; 0x24
 80002e6:	e002      	b.n	80002ee <main+0x106>
 80002e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002ea:	3301      	adds	r3, #1
 80002ec:	627b      	str	r3, [r7, #36]	; 0x24
 80002ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002f0:	4a27      	ldr	r2, [pc, #156]	; (8000390 <main+0x1a8>)
 80002f2:	4293      	cmp	r3, r2
 80002f4:	ddf8      	ble.n	80002e8 <main+0x100>

			ptr_odr_d->ODR15 = 1;
 80002f6:	68ba      	ldr	r2, [r7, #8]
 80002f8:	7853      	ldrb	r3, [r2, #1]
 80002fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002fe:	7053      	strb	r3, [r2, #1]
			ptr_odr_d->ODR12 = 0;
 8000300:	68ba      	ldr	r2, [r7, #8]
 8000302:	7853      	ldrb	r3, [r2, #1]
 8000304:	f36f 1304 	bfc	r3, #4, #1
 8000308:	7053      	strb	r3, [r2, #1]

			for (int i = 0; i < 500000; i++);
 800030a:	2300      	movs	r3, #0
 800030c:	623b      	str	r3, [r7, #32]
 800030e:	e002      	b.n	8000316 <main+0x12e>
 8000310:	6a3b      	ldr	r3, [r7, #32]
 8000312:	3301      	adds	r3, #1
 8000314:	623b      	str	r3, [r7, #32]
 8000316:	6a3b      	ldr	r3, [r7, #32]
 8000318:	4a1d      	ldr	r2, [pc, #116]	; (8000390 <main+0x1a8>)
 800031a:	4293      	cmp	r3, r2
 800031c:	ddf8      	ble.n	8000310 <main+0x128>

			ptr_odr_d->ODR14 = 1;
 800031e:	68ba      	ldr	r2, [r7, #8]
 8000320:	7853      	ldrb	r3, [r2, #1]
 8000322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000326:	7053      	strb	r3, [r2, #1]
			ptr_odr_d->ODR15 = 0;
 8000328:	68ba      	ldr	r2, [r7, #8]
 800032a:	7853      	ldrb	r3, [r2, #1]
 800032c:	f36f 13c7 	bfc	r3, #7, #1
 8000330:	7053      	strb	r3, [r2, #1]

			for (int i = 0; i < 500000; i++);
 8000332:	2300      	movs	r3, #0
 8000334:	61fb      	str	r3, [r7, #28]
 8000336:	e002      	b.n	800033e <main+0x156>
 8000338:	69fb      	ldr	r3, [r7, #28]
 800033a:	3301      	adds	r3, #1
 800033c:	61fb      	str	r3, [r7, #28]
 800033e:	69fb      	ldr	r3, [r7, #28]
 8000340:	4a13      	ldr	r2, [pc, #76]	; (8000390 <main+0x1a8>)
 8000342:	4293      	cmp	r3, r2
 8000344:	ddf8      	ble.n	8000338 <main+0x150>

			ptr_odr_d->ODR13 = 1;
 8000346:	68ba      	ldr	r2, [r7, #8]
 8000348:	7853      	ldrb	r3, [r2, #1]
 800034a:	f043 0320 	orr.w	r3, r3, #32
 800034e:	7053      	strb	r3, [r2, #1]
			ptr_odr_d->ODR14 = 0;
 8000350:	68ba      	ldr	r2, [r7, #8]
 8000352:	7853      	ldrb	r3, [r2, #1]
 8000354:	f36f 1386 	bfc	r3, #6, #1
 8000358:	7053      	strb	r3, [r2, #1]

			for (int i = 0; i < 500000; i++);
 800035a:	2300      	movs	r3, #0
 800035c:	61bb      	str	r3, [r7, #24]
 800035e:	e002      	b.n	8000366 <main+0x17e>
 8000360:	69bb      	ldr	r3, [r7, #24]
 8000362:	3301      	adds	r3, #1
 8000364:	61bb      	str	r3, [r7, #24]
 8000366:	69bb      	ldr	r3, [r7, #24]
 8000368:	4a09      	ldr	r2, [pc, #36]	; (8000390 <main+0x1a8>)
 800036a:	4293      	cmp	r3, r2
 800036c:	ddf8      	ble.n	8000360 <main+0x178>

			ptr_odr_d->ODR13 = 0;
 800036e:	68ba      	ldr	r2, [r7, #8]
 8000370:	7853      	ldrb	r3, [r2, #1]
 8000372:	f36f 1345 	bfc	r3, #5, #1
 8000376:	7053      	strb	r3, [r2, #1]
		if(ptr_idr_a->IDR0 == 1) {
 8000378:	e76a      	b.n	8000250 <main+0x68>
 800037a:	bf00      	nop
 800037c:	40023830 	.word	0x40023830
 8000380:	40020000 	.word	0x40020000
 8000384:	40020c00 	.word	0x40020c00
 8000388:	40020c14 	.word	0x40020c14
 800038c:	40020010 	.word	0x40020010
 8000390:	0007a11f 	.word	0x0007a11f

08000394 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000394:	480d      	ldr	r0, [pc, #52]	; (80003cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000396:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000398:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800039c:	480c      	ldr	r0, [pc, #48]	; (80003d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800039e:	490d      	ldr	r1, [pc, #52]	; (80003d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a0:	4a0d      	ldr	r2, [pc, #52]	; (80003d8 <LoopForever+0xe>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a4:	e002      	b.n	80003ac <LoopCopyDataInit>

080003a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003aa:	3304      	adds	r3, #4

080003ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b0:	d3f9      	bcc.n	80003a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b2:	4a0a      	ldr	r2, [pc, #40]	; (80003dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b4:	4c0a      	ldr	r4, [pc, #40]	; (80003e0 <LoopForever+0x16>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b8:	e001      	b.n	80003be <LoopFillZerobss>

080003ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003bc:	3204      	adds	r2, #4

080003be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c0:	d3fb      	bcc.n	80003ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003c2:	f000 f811 	bl	80003e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c6:	f7ff ff0f 	bl	80001e8 <main>

080003ca <LoopForever>:

LoopForever:
  b LoopForever
 80003ca:	e7fe      	b.n	80003ca <LoopForever>
  ldr   r0, =_estack
 80003cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003d8:	08000450 	.word	0x08000450
  ldr r2, =_sbss
 80003dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003e0:	2000001c 	.word	0x2000001c

080003e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e4:	e7fe      	b.n	80003e4 <ADC_IRQHandler>
	...

080003e8 <__libc_init_array>:
 80003e8:	b570      	push	{r4, r5, r6, lr}
 80003ea:	4d0d      	ldr	r5, [pc, #52]	; (8000420 <__libc_init_array+0x38>)
 80003ec:	4c0d      	ldr	r4, [pc, #52]	; (8000424 <__libc_init_array+0x3c>)
 80003ee:	1b64      	subs	r4, r4, r5
 80003f0:	10a4      	asrs	r4, r4, #2
 80003f2:	2600      	movs	r6, #0
 80003f4:	42a6      	cmp	r6, r4
 80003f6:	d109      	bne.n	800040c <__libc_init_array+0x24>
 80003f8:	4d0b      	ldr	r5, [pc, #44]	; (8000428 <__libc_init_array+0x40>)
 80003fa:	4c0c      	ldr	r4, [pc, #48]	; (800042c <__libc_init_array+0x44>)
 80003fc:	f000 f818 	bl	8000430 <_init>
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	10a4      	asrs	r4, r4, #2
 8000404:	2600      	movs	r6, #0
 8000406:	42a6      	cmp	r6, r4
 8000408:	d105      	bne.n	8000416 <__libc_init_array+0x2e>
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000410:	4798      	blx	r3
 8000412:	3601      	adds	r6, #1
 8000414:	e7ee      	b.n	80003f4 <__libc_init_array+0xc>
 8000416:	f855 3b04 	ldr.w	r3, [r5], #4
 800041a:	4798      	blx	r3
 800041c:	3601      	adds	r6, #1
 800041e:	e7f2      	b.n	8000406 <__libc_init_array+0x1e>
 8000420:	08000448 	.word	0x08000448
 8000424:	08000448 	.word	0x08000448
 8000428:	08000448 	.word	0x08000448
 800042c:	0800044c 	.word	0x0800044c

08000430 <_init>:
 8000430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000432:	bf00      	nop
 8000434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000436:	bc08      	pop	{r3}
 8000438:	469e      	mov	lr, r3
 800043a:	4770      	bx	lr

0800043c <_fini>:
 800043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043e:	bf00      	nop
 8000440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000442:	bc08      	pop	{r3}
 8000444:	469e      	mov	lr, r3
 8000446:	4770      	bx	lr
